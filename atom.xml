<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>木子</title>
  <icon>https://blog.502.li/icon.png</icon>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://blog.502.li/"/>
  <updated>2020-03-07T16:00:00.000Z</updated>
  <id>https://blog.502.li/</id>
  
  <author>
    <name>木子</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>N1 盒子刷入 OpenWrt 并部署 K3s</title>
    <link href="https://blog.502.li/N1-openwrt.html"/>
    <id>https://blog.502.li/N1-openwrt.html</id>
    <published>2020-03-07T16:00:00.000Z</published>
    <updated>2020-03-07T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="K3s"><a href="#K3s" class="headerlink" title="K3s"></a>K3s</h2><p>去年的时候听了 Rancher 的直播分享讲  <a href="http://dockone.io/article/9384" target="_blank" rel="noopener">k3s在边缘计算中的应用实践</a>，就感觉很好玩儿，当时对 K3s 还是很感兴趣，无奈当时手头了没有合适的开发板可玩，就没愿意花钱再买块树莓派吃灰😂。直到上周末的时候一次机会得以重新认识了一下 <a href="https://github.com/rancher/k3s" target="_blank" rel="noopener">K3s</a> 所以就想找个设备来玩玩 K3s。于是东挑西选就选定了斐讯 N1 ，优点多多，不仅可以做路由器还能跑 docker 、还能做 NAS 等等，两个字真香😂。之前我一直使用 <code>R6300V2</code> 刷了梅林以及另一台 <code>WNDR3700V4</code> 刷了 <code>OpenWrt</code> 做透明代理，在 <code>ESXi</code> 上也装了个 <code>OpenWrt</code> 软路由给内网的虚拟机做透明代理，但还是心有不甘想找一台性能更好一点的设备来做旁路网关。综上就种草买了早已经被大家玩烂了的 <a href="https://pockies.github.io/2019/03/07/phicomm-n1/" target="_blank" rel="noopener">N1盒子</a>。</p><h2 id="开箱"><a href="#开箱" class="headerlink" title="开箱"></a>开箱</h2><h3 id="外包装"><a href="#外包装" class="headerlink" title="外包装"></a>外包装</h3><p><img src="https://cdn.jsdelivr.net/gh/muzi502/blog/source/img/image-20200308170852893.png" alt="image-20200308170852893"></p><h3 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h3><p><img src="https://cdn.jsdelivr.net/gh/muzi502/blog/source/img/image-20200308170909549.png" alt="image-20200308170909549"></p><h3 id="开机画面"><a href="#开机画面" class="headerlink" title="开机画面"></a>开机画面</h3><p><img src="https://cdn.jsdelivr.net/gh/muzi502/blog/source/img/image-20200308170935704.png" alt="image-20200308170935704"></p><h3 id="电视系统"><a href="#电视系统" class="headerlink" title="电视系统"></a>电视系统</h3><p><img src="https://cdn.jsdelivr.net/gh/muzi502/blog/source/img/image-20200308171000114.png" alt="image-20200308171000114"></p><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><h4 id="CPU"><a href="#CPU" class="headerlink" title="CPU"></a>CPU</h4><ul><li>四核心 <code>ARMV8</code> CPU</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">╭─root@OpenWrt ~</span><br><span class="line">╰─# cat /proc/cpuinfo</span><br><span class="line">processor       : 0</span><br><span class="line">model name      : ARMv8 Processor rev 4 (v8l)</span><br><span class="line">BogoMIPS        : 48.00</span><br><span class="line">Features        : fp asimd evtstrm aes pmull sha1 sha2 crc32 cpuid</span><br><span class="line">CPU implementer : 0x41</span><br><span class="line">CPU architecture: 8</span><br><span class="line">CPU variant     : 0x0</span><br><span class="line">CPU part        : 0xd03</span><br><span class="line">CPU revision    : 4</span><br><span class="line"></span><br><span class="line">processor       : 1</span><br><span class="line">model name      : ARMv8 Processor rev 4 (v8l)</span><br><span class="line">BogoMIPS        : 48.00</span><br><span class="line">Features        : fp asimd evtstrm aes pmull sha1 sha2 crc32 cpuid</span><br><span class="line">CPU implementer : 0x41</span><br><span class="line">CPU architecture: 8</span><br><span class="line">CPU variant     : 0x0</span><br><span class="line">CPU part        : 0xd03</span><br><span class="line">CPU revision    : 4</span><br><span class="line"></span><br><span class="line">processor       : 2</span><br><span class="line">model name      : ARMv8 Processor rev 4 (v8l)</span><br><span class="line">BogoMIPS        : 48.00</span><br><span class="line">Features        : fp asimd evtstrm aes pmull sha1 sha2 crc32 cpuid</span><br><span class="line">CPU implementer : 0x41</span><br><span class="line">CPU architecture: 8</span><br><span class="line">CPU variant     : 0x0</span><br><span class="line">CPU part        : 0xd03</span><br><span class="line">CPU revision    : 4</span><br><span class="line"></span><br><span class="line">processor       : 3</span><br><span class="line">model name      : ARMv8 Processor rev 4 (v8l)</span><br><span class="line">BogoMIPS        : 48.00</span><br><span class="line">Features        : fp asimd evtstrm aes pmull sha1 sha2 crc32 cpuid</span><br><span class="line">CPU implementer : 0x41</span><br><span class="line">CPU architecture: 8</span><br><span class="line">CPU variant     : 0x0</span><br><span class="line">CPU part        : 0xd03</span><br><span class="line">CPU revision    : 4</span><br></pre></td></tr></table></figure><h4 id="RAM"><a href="#RAM" class="headerlink" title="RAM"></a>RAM</h4><ul><li>内存大约 2GB，1911808K ？？</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">╭─root@OpenWrt ~</span><br><span class="line">╰─<span class="comment"># cat /proc/meminfo</span></span><br><span class="line">MemTotal:        1851688 kB</span><br><span class="line">MemFree:         1278128 kB</span><br><span class="line">MemAvailable:    1639036 kB</span><br><span class="line">╭─root@OpenWrt ~</span><br><span class="line">╰─<span class="comment"># dmesg | grep Memory</span></span><br><span class="line">[    0.000000] Memory: 924744K/1911808K available (12926K kernel code, 1108K rwdata, 5116K rodata, 640K init, 748K bss, 69560K reserved, 917504K cma-reserved)</span><br></pre></td></tr></table></figure><h4 id="ROM"><a href="#ROM" class="headerlink" title="ROM"></a>ROM</h4><ul><li>EMMC 存储大约 8GB</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">╭─root@OpenWrt ~</span><br><span class="line">╰─<span class="comment"># fdisk -l /dev/mmcblk1</span></span><br><span class="line">Disk /dev/mmcblk1: 7.3 GiB, 7818182656 bytes, 15269888 sectors</span><br><span class="line">Units: sectors of 1 * 512 = 512 bytes</span><br><span class="line">Sector size (logical/physical): 512 bytes / 512 bytes</span><br><span class="line">I/O size (minimum/optimal): 512 bytes / 512 bytes</span><br><span class="line">Disklabel <span class="built_in">type</span>: dos</span><br><span class="line">Disk identifier: 0x7db7c786</span><br><span class="line"></span><br><span class="line">Device         Boot   Start      End  Sectors  Size Id Type</span><br><span class="line">/dev/mmcblk1p1      1433600  1695743   262144  128M  c W95 FAT32 (LBA)</span><br><span class="line">/dev/mmcblk1p2      1695744  2744319  1048576  512M 83 Linux</span><br><span class="line">/dev/mmcblk1p3      2744320 15269887 12525568    6G 83 Linux</span><br><span class="line">╭─root@OpenWrt ~</span><br><span class="line">╰─<span class="comment"># lsblk</span></span><br><span class="line">NAME         MAJ:MIN RM  SIZE RO TYPE MOUNTPOINT</span><br><span class="line">mmcblk1      179:0    0  7.3G  0 disk</span><br><span class="line">├─mmcblk1p1  179:1    0  128M  0 part /boot</span><br><span class="line">├─mmcblk1p2  179:2    0  512M  0 part /</span><br><span class="line">└─mmcblk1p3  179:3    0    6G  0 part /mnt/mmcblk1p3</span><br><span class="line">mmcblk1boot0 179:32   0    4M  1 disk</span><br><span class="line">mmcblk1boot1 179:64   0    4M  1 disk</span><br></pre></td></tr></table></figure><h4 id="net"><a href="#net" class="headerlink" title="net"></a>net</h4><ul><li>千兆 <code>1Gbps/Full</code> 网卡以及 2.4GHz/5GHz 的无线网卡</li><li>看到 <code>RTL8211F</code> 我哭了，竟然是螃蟹卡，掀桌儿😡</li></ul><blockquote><p>（N1不支持 RTL8153，是因为硬件供电的原因，不是驱动的原因，也有个别网友说能支持的，可能因为 rtl8153 也有不同版本，但支 持AX88179，速率 200m 左右, 因此从性能上考虑，N1不建议外接任何网卡，直接用单网卡做旁路由也能达到 750m 左右）</p></blockquote><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">╭─root@OpenWrt ~</span><br><span class="line">╰─# dmesg | grep net</span><br><span class="line">[    0.000000] Kernel command line: root=UUID=69fd696a-85a4-4ec8-b604-4cefd053cbc1 rootfstype=btrfs rootflags=compress=zstd console=ttyAML0,115200n8 console=tty0 no_console_suspend consoleblank=0 fsck.fix=yes fsck.repair=yes net.ifnames=0 cgroup_enable=cpuset cgroup_memory=1 cgroup_enable=memory swapaccount=1</span><br><span class="line">[    0.691325] audit: initializing netlink subsys (disabled)</span><br><span class="line">[    5.131043] meson8b-dwmac c9410000.ethernet: IRQ eth_wake_irq not found</span><br><span class="line">[    5.136694] meson8b-dwmac c9410000.ethernet: IRQ eth_lpi not found</span><br><span class="line">[    5.142854] meson8b-dwmac c9410000.ethernet: PTP uses main clock</span><br><span class="line">[    5.148731] meson8b-dwmac c9410000.ethernet: no reset control found</span><br><span class="line">[    5.155366] meson8b-dwmac c9410000.ethernet: User ID: 0x11, Synopsys ID: 0x37</span><br><span class="line">[    5.162029] meson8b-dwmac c9410000.ethernet:         DWMAC1000</span><br><span class="line">[    5.167192] meson8b-dwmac c9410000.ethernet: DMA HW capability register supported</span><br><span class="line">[    5.174594] meson8b-dwmac c9410000.ethernet: RX Checksum Offload Engine supported</span><br><span class="line">[    5.182017] meson8b-dwmac c9410000.ethernet: COE Type 2</span><br><span class="line">[    5.187192] meson8b-dwmac c9410000.ethernet: TX Checksum insertion supported</span><br><span class="line">[    5.194171] meson8b-dwmac c9410000.ethernet: Wake-Up On Lan supported</span><br><span class="line">[    5.200586] meson8b-dwmac c9410000.ethernet: Normal descriptors</span><br><span class="line">[    5.206426] meson8b-dwmac c9410000.ethernet: Ring mode enabled</span><br><span class="line">[    5.212198] meson8b-dwmac c9410000.ethernet: Enable RX Mitigation via HW Watchdog Timer</span><br><span class="line">[    5.428271] Initializing XFRM netlink socket</span><br><span class="line">[    5.521946] bridge: filtering via arp/ip/ip6tables is no longer available by default. Update your scripts to load br_netfilter if you need this.</span><br><span class="line">[   11.076508] meson8b-dwmac c9410000.ethernet eth0: PHY [0.2009087f:00] driver [RTL8211F Gigabit Ethernet]</span><br><span class="line">[   11.083720] meson8b-dwmac c9410000.ethernet eth0: No Safety Features support found</span><br><span class="line">[   11.088006] meson8b-dwmac c9410000.ethernet eth0: PTP not supported by HW</span><br><span class="line">[   11.094588] meson8b-dwmac c9410000.ethernet eth0: configuring for phy/rgmii link mode</span><br><span class="line">[   19.250095] meson8b-dwmac c9410000.ethernet eth0: PHY [0.2009087f:00] driver [RTL8211F Gigabit Ethernet]</span><br><span class="line">[   19.265579] meson8b-dwmac c9410000.ethernet eth0: No Safety Features support found</span><br><span class="line">[   19.267519] meson8b-dwmac c9410000.ethernet eth0: PTP not supported by HW</span><br><span class="line">[   19.274244] meson8b-dwmac c9410000.ethernet eth0: configuring for phy/rgmii link mode</span><br><span class="line">[   19.411257] netlink: 4 bytes leftover after parsing attributes in process `iw'.</span><br><span class="line">[   19.595853] ieee80211 phy0: brcmf_net_attach: couldn't register the net device</span><br><span class="line">[   19.597447] ieee80211 phy0: brcmf_ap_add_vif: Registering netdevice failed</span><br><span class="line">[   21.019546] meson8b-dwmac c9410000.ethernet eth0: Link is Up - 1Gbps/Full - flow control rx/tx</span><br><span class="line">[ 1047.556475] meson8b-dwmac c9410000.ethernet eth0: Link is Down</span><br><span class="line">[ 1047.772626] meson8b-dwmac c9410000.ethernet eth0: PHY [0.2009087f:00] driver [RTL8211F Gigabit Ethernet]</span><br><span class="line">[ 1047.785569] meson8b-dwmac c9410000.ethernet eth0: No Safety Features support found</span><br><span class="line">[ 1047.787510] meson8b-dwmac c9410000.ethernet eth0: PTP not supported by HW</span><br><span class="line">[ 1047.794242] meson8b-dwmac c9410000.ethernet eth0: configuring for phy/rgmii link mode</span><br><span class="line">[ 1051.459018] meson8b-dwmac c9410000.ethernet eth0: Link is Up - 1Gbps/Full - flow control rx/tx</span><br><span class="line">[ 1241.984013] netlink: 4 bytes leftover after parsing attributes in process `iw'.</span><br><span class="line">[ 1346.112897] meson8b-dwmac c9410000.ethernet eth0: Link is Down</span><br><span class="line">[ 1346.295582] meson8b-dwmac c9410000.ethernet eth0: PHY [0.2009087f:00] driver [RTL8211F Gigabit Ethernet]</span><br><span class="line">[ 1346.312202] meson8b-dwmac c9410000.ethernet eth0: No Safety Features support found</span><br><span class="line">[ 1346.314172] meson8b-dwmac c9410000.ethernet eth0: PTP not supported by HW</span><br><span class="line">[ 1346.320888] meson8b-dwmac c9410000.ethernet eth0: configuring for phy/rgmii link mode</span><br><span class="line">[ 1349.769672] meson8b-dwmac c9410000.ethernet eth0: Link is Up - 1Gbps/Full - flow control rx/tx</span><br></pre></td></tr></table></figure><h4 id="htop"><a href="#htop" class="headerlink" title="htop"></a>htop</h4><p>吼吼吼，居然还能跑 Docker ，那 K3s 也肯定没问题啦（</p><p><img src="https://cdn.jsdelivr.net/gh/muzi502/blog/source/img/image-20200308180733757.png" alt="image-20200308180733757"></p><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><p>首先准备个刷机过程中需要的清单 <del>别看你今天闹得欢，小心今后拉清单</del></p><ul><li>USB 公对公数据线（卖家赠送了线</li><li>网线或 WiFi，网线有时获取不到正确的 IP ，可以借助 WiFi</li><li>HDMI 线以及显示器，需要进入盒子系统手动开启 adb</li><li>Android SDK 平台工具 <a href="https://developer.android.com/studio/releases/platform-tools" target="_blank" rel="noopener">Platform-tools</a></li><li>镜像写入工具 <a href="https://github.com/pbatard/rufus" target="_blank" rel="noopener">Rufus</a> 或 <a href="https://www.roadkil.net/program.php?ProgramID=12" target="_blank" rel="noopener">Roadkils DiskImage</a></li><li>OpenWrt 镜像 <a href="https://disk.longe.xyz/N1/Openwrt/28%2Bo%E7%89%88N1_OP_U%E7%9B%98%E7%9B%B4%E5%88%B7%E5%8C%85/N1_Openwrt_R20.2.15_k5.4.23-amlogic-flippy-28%2Bo.7z" target="_blank" rel="noopener">N1_Openwrt_R20.2.15_k5.4.23-amlogic-flippy-28+o.7z</a></li></ul><blockquote><p>Openwrt_U 盘直刷包：链接：<a href="https://pan.baidu.com/s/1K0bNItsY1-Br4o1EsRokkg" target="_blank" rel="noopener">https://pan.baidu.com/s/1K0bNItsY1-Br4o1EsRokkg</a> 提取码：lidf</p></blockquote><h3 id="推荐资源"><a href="#推荐资源" class="headerlink" title="推荐资源"></a>推荐资源</h3><p>刷机过程中的资源来自以下，可以去这里找更多你想要的，他们的教程也会比我更优秀一些，而且 B 站上也有视频，视频讲解的要更好。写这篇博客也只是为了记录一下😂</p><ul><li><a href="https://drive.google.com/drive/folders/1XvhPCwodZzCfV83oW3DXegAvDOrHW7iV" target="_blank" rel="noopener">Pi&amp;N1 Google Drive</a></li><li><a href="https://github.com/real-pin1group/3000web/wiki" target="_blank" rel="noopener">三千问</a></li><li><a href="https://t.me/PIN1Group" target="_blank" rel="noopener">t.me/PIN1Group</a></li><li><a href="https://t.me/NewPiN1Channel" target="_blank" rel="noopener">Pi&amp;N1交流群通知频道</a></li><li><a href="https://disk.longe.xyz/" target="_blank" rel="noopener">山小炮网盘</a></li><li><a href="https://disk.longe.xyz/N1/OpenWrt/%E3%80%902019-6-20%E3%80%91Phicomm%20N1%E5%88%B7openwrt%E8%B7%AF%E7%94%B1%E5%9B%BA%E4%BB%B6%E8%AF%A6%E7%BB%86%E7%AC%94%E8%AE%B0.pdf" target="_blank" rel="noopener">Phicomm N1刷openwrt路由固件详细笔记.pdf</a></li><li><a href="https://disk.longe.xyz/N1/OpenWrt/28%2Bo版N1_OP_U盘直刷包/" target="_blank" rel="noopener">28+o版N1_OP_U盘直刷包</a></li><li><a href="https://www.right.com.cn/forum/thread-981406-1-1.html" target="_blank" rel="noopener">[2020-3-8]★29+版N1_OP_U盘直刷包，及贝壳云_OP_线刷包，内核5.4</a></li></ul><h2 id="刷机"><a href="#刷机" class="headerlink" title="刷机"></a>刷机</h2><h3 id="开启-ADB"><a href="#开启-ADB" class="headerlink" title="开启 ADB"></a>开启 ADB</h3><p><img src="https://cdn.jsdelivr.net/gh/muzi502/blog/source/img/image-20200309085941030.png" alt="image-20200309085941030"></p><p>将 HDMI 线连接到盒子的 HDMI 口，将 USB 公对公的数据线分别插在盒子的靠近 HDMI 口的 USB ，另一头插在 PC 的 USB 口，再将鼠标连接到盒子的另一个 USB 口。插好上述的线缆之后插上电源开机，由于盒子没有电源开关所以只能通过插拔电源的方式开关机。开机之后会自动进入到电视盒子系统的页面，然后挪动鼠标，在 <code>固件版本</code>  那里狂点鼠标四下开启 <code>ADB</code> 调试模式。屏幕中间会弹出个灰色的方框提示<code>打开 adb</code></p><blockquote><p>PS：提到 adb 咱就不由自主地想起了去年世界五百强他家的号称要取代 Android 、自主研发、微内核、面向确定<a href="https://zh.wikipedia.org/wiki/时延" target="_blank" rel="noopener">时延</a>、分布式、形式化验证、多场景；大名鼎鼎的哄懵（PPT）操作系统竟然也有 ADB （偷笑</p></blockquote><p>在这里需要注意的是，我使用网线连接盒子和路由器后，屏幕上显示的 IP 并不是我本地内网的 IP ，这一点很奇怪，而使用无线连接到我的无线路由器后去能获取到正常的内网 IP ，所以如果你使用网线连接时也遇到这样的情况，不妨尝试一下使用无线连接。</p><p><img src="https://cdn.jsdelivr.net/gh/muzi502/blog/source/img/image-20200308171341327.png" alt="image-20200308171341327"></p><h3 id="PC-上连接-ADB-进入-fastboot-模式"><a href="#PC-上连接-ADB-进入-fastboot-模式" class="headerlink" title="PC 上连接 ADB 进入 fastboot 模式"></a>PC 上连接 ADB 进入 fastboot 模式</h3><p>上述要将盒子的 HMDI 接入显示器并插上鼠标，就是为了在 ADB 模式下进入 fastboot 模式，而 fastboot 模式和我们普通的 Android 刷机时的 fastboot 一样，何况这个盒子也是基于 Android 的，所以嘛，和 Android 刷机大同小异。然后下载好 Android SDK 平台工具 <a href="https://developer.android.com/studio/releases/platform-tools" target="_blank" rel="noopener">Platform-tools</a> 并解压到合适的位置，按住 <code>shift</code> 键之后鼠标右键点击<code>在此处打开 Powershell 窗口</code> ，接着在该命令行下输入 <code>adb.exe connect IP</code> ，这里的 IP 即为屏幕上显示的 IP ，连接成功之后会有提示已经连接。然后再运行 <code>adb.exe shell reboot fastboot</code> 进入 fastboot 模式。这一步和我们给 Android 手机刷机时俺电源键+音量键，进入 fastboot 模式一样的道理，只不过盒子没有音量键和开机键，所以要使用 adb 的方式进入到 fastboot 。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">PS D:\Desktop&gt; adb.exe connect <span class="number">192.168</span>.<span class="number">0.105</span></span><br><span class="line">connected to <span class="number">192.168</span>.<span class="number">0.105</span>:<span class="number">5555</span></span><br><span class="line">PS D:\Desktop\N1&gt; adb.exe shell reboot fastboot</span><br></pre></td></tr></table></figure><h3 id="刷入降级镜像"><a href="#刷入降级镜像" class="headerlink" title="刷入降级镜像"></a>刷入降级镜像</h3><p>盒子重启进入 fastboot 模式之后，PC 上会提示插入新设备，并叮咚响一下，之后会自动安装上驱动程序。</p><p>右键计算机–&gt;管理–&gt; 设备管理器 <code>LeMobile Android Device</code> 下的 <code>Android ADB Interface</code> 。如果没有出现该设备的话，可以下载个驱动安装程序来给你装上该设备的驱动。使用 <code>fastboot devices -l</code> 命令来查看该设备是否正常连接上。</p><p><img src="https://cdn.jsdelivr.net/gh/muzi502/blog/source/img/image-20200308152333262.png" alt="image-20200308152333262"></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">PS D:\Desktop\N1&gt; fastboot devices <span class="literal">-l</span></span><br><span class="line"><span class="number">1234567890</span>             fastboot</span><br></pre></td></tr></table></figure><h4 id="校验镜像"><a href="#校验镜像" class="headerlink" title="校验镜像"></a>校验镜像</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">Mode                LastWriteTime         Length Name</span><br><span class="line">----          -------------   ------ ----</span><br><span class="line">-a----   2020/3/7     17:53       14191104 boot.img</span><br><span class="line">-a----   2020/3/7     17:53         672256 bootloader.img</span><br><span class="line">-a----   2020/3/7     17:53            605 hash.txt</span><br><span class="line">-a----   2020/3/7     17:53       18295296 recovery.img</span><br><span class="line"><span class="comment"># 刷机之前要先校验镜像是否完整或者被篡改，养成好习惯😋</span></span><br><span class="line">PS D:\Desktop\N1&gt; cat .\hash.txt</span><br><span class="line">文件: N1_V2.19_imgs\bootloader.img</span><br><span class="line">大小: 672256 字节</span><br><span class="line">修改时间: 2018年5月25日 星期五, 23:09:08</span><br><span class="line">MD5: 80BD2EFED2F76B6ECA56F7E026549E1A</span><br><span class="line">SHA1: 3A1FFCADF062748CA1D00EB80E73F2175B160A0D</span><br><span class="line">CRC32: 34BA154A</span><br><span class="line"></span><br><span class="line">文件: N1_V2.19_imgs\recovery.img</span><br><span class="line">大小: 18295296 字节</span><br><span class="line">修改时间: 2018年5月25日 星期五, 23:09:19</span><br><span class="line">MD5: CAC6ED1DED5BB1D9CFAD39B2B1C6CD8A</span><br><span class="line">SHA1: B468A3134B376A5295C1FD5857343128D0AC056C</span><br><span class="line">CRC32: AA11C424</span><br><span class="line"></span><br><span class="line">文件: N1_V2.19_imgs\boot.img</span><br><span class="line">大小: 14191104 字节</span><br><span class="line">修改时间: 2018年5月25日 星期五, 23:09:46</span><br><span class="line">MD5: 75DA954D0C4CBCD4A86CEE501B40C5AA</span><br><span class="line">SHA1: 1A0D04DB8FB57F252C72C909A3268B6B2C3BD241</span><br><span class="line">CRC32: 547D7823</span><br><span class="line"></span><br><span class="line"><span class="comment"># Windows CMD 下可使用 certUtil 来计算文件的 HASH 值</span></span><br><span class="line">PS D:\Desktop\N1&gt; certUtil -hashfile .\recovery.img</span><br><span class="line">SHA1 hash of .\recovery.img:</span><br><span class="line">b468a3134b376a5295c1fd5857343128d0ac056c</span><br><span class="line">CertUtil: -hashfile command completed successfully.</span><br><span class="line">PS D:\Desktop\N1&gt; certUtil -hashfile .\boot.img</span><br><span class="line">SHA1 hash of .\boot.img:</span><br><span class="line">1a0d04db8fb57f252c72c909a3268b6b2c3bd241</span><br><span class="line">CertUtil: -hashfile command completed successfully.</span><br><span class="line">PS D:\Desktop\N1&gt; certUtil -hashfile .\bootloader.img</span><br><span class="line">SHA1 hash of .\bootloader.img:</span><br><span class="line">3a1ffcadf062748ca1d00eb80e73f2175b160a0d</span><br><span class="line">CertUtil: -hashfile command completed successfully.</span><br></pre></td></tr></table></figure><h4 id="输入降级包镜像"><a href="#输入降级包镜像" class="headerlink" title="输入降级包镜像"></a>输入降级包镜像</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 然后根据对应的分区刷入对应的镜像，这点不要搞混，不然会变砖的</span></span><br><span class="line">PS D:\Desktop\N1&gt; fastboot flash bootloader bootloader.img</span><br><span class="line">Sending <span class="string">'bootloader'</span> (656 KB)                      OKAY [  0.037s]</span><br><span class="line">Writing <span class="string">'bootloader'</span>                               OKAY [  0.075s]</span><br><span class="line">Finished. Total time: 0.118s</span><br><span class="line">PS D:\Desktop\N1&gt; fastboot flash boot boot.img</span><br><span class="line">Sending <span class="string">'boot'</span> (13858 KB)                          OKAY [  0.620s]</span><br><span class="line">Writing <span class="string">'boot'</span>                                     OKAY [  0.666s]</span><br><span class="line">Finished. Total time: 1.290s</span><br><span class="line">PS D:\Desktop\N1&gt; fastboot flash recovery recovery.img</span><br><span class="line">Sending <span class="string">'recovery'</span> (17866 KB)                      OKAY [  0.802s]</span><br><span class="line">Writing <span class="string">'recovery'</span>                                 OKAY [  0.869s]</span><br><span class="line">Finished. Total time: 1.684s</span><br><span class="line">PS D:\Desktop\N1&gt;</span><br></pre></td></tr></table></figure><h3 id="将-OpenWrt-刷入-EMMC"><a href="#将-OpenWrt-刷入-EMMC" class="headerlink" title="将 OpenWrt 刷入 EMMC"></a>将 OpenWrt 刷入 EMMC</h3><p>降级成功之后我们就可以开机进入线刷模式，从而可以选择从 U 盘设备启动，之所以降级也是因为这，高版本的固件屏蔽了这一功能。我们无法直接将 OpenWrt 的镜像写入到盒子的 EMMC 存储中，要进入到一个叫 Armbian 的嵌入式系统中，在 Armbian 系统里将 OpenWrt 镜像写入到 EMMC 存储设备中。而也有一些大佬将二者的镜像结合在一起，也就是可以使用该镜像在 U 盘模式下将 OpenWrt 镜像写入到 EMMC 中，并且准备好了自动写入的脚本，比较方便。该镜像可以从 <a href="https://www.right.com.cn/forum/thread-981406-1-1.html" target="_blank" rel="noopener">29+版N1_OP_U盘直刷包，及贝壳云_OP_线刷包，内核5.4</a> 找到。</p><h4 id="写入-U-盘镜像"><a href="#写入-U-盘镜像" class="headerlink" title="写入 U 盘镜像"></a>写入 U 盘镜像</h4><p>我写入 U 盘的镜像是 N1_<strong>Openwrt_R20.2.15_k5.4.23-amlogic-flippy-28+.img</strong> 也就是 <code>N1-Openwrt_U盘直刷包</code> ，写入工具使用  <a href="https://github.com/pbatard/rufus" target="_blank" rel="noopener">Rufus</a> 或 <a href="https://www.roadkil.net/program.php?ProgramID=12" target="_blank" rel="noopener">Roadkils DiskImage</a> 都可以，就和我们平时制作启动盘一样。</p><h4 id="从-update-模式启动-Armbian"><a href="#从-update-模式启动-Armbian" class="headerlink" title="从 update 模式启动 Armbian"></a>从 update 模式启动 Armbian</h4><p>要拔掉 USB 公对公的线，盒子开机后使用 bat 脚本进入线刷模式，在 update 模式下才可以从我们刚刚写入的镜像 U 盘中启动。如果你下载好 Google Drive 上的资源的话，工具在 <code>/玩法0--各种玩法必备工具/2---进线刷模式工具---启动U盘系统前要先进线刷模式/进线刷模式工具</code> 下的</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">@echo off</span><br><span class="line">echo 本工具通过adb连接使N1重启进入线刷模式!</span><br><span class="line">echo 请先用usb双公头线连接盒子和电脑!</span><br><span class="line">echo made by webpad</span><br><span class="line">set /p ip=请输入盒子的内网IP地址：</span><br><span class="line">adb kill<span class="literal">-server</span></span><br><span class="line"><span class="keyword">if</span> <span class="string">"%ip%"</span> == <span class="string">""</span> echo 提示：请输入正确的IP地址 &amp;&amp; goto <span class="keyword">end</span></span><br><span class="line">echo 开始通过网络进行ADB连接……</span><br><span class="line">adb connect %ip%</span><br><span class="line">adb devices <span class="literal">-l</span> | findstr <span class="string">"p230"</span></span><br><span class="line"><span class="keyword">if</span> %ERRORLEVEL% NEQ <span class="number">0</span> echo 连接测试失败！请确保已开启远程调试！&amp;&amp;goto <span class="keyword">end</span></span><br><span class="line">echo *</span><br><span class="line">echo *</span><br><span class="line">echo *</span><br><span class="line">echo 盒子已重启进入线刷模式，若windows发现了新设备，请在设备管理器中手动安装驱动，此窗口可以关闭...</span><br><span class="line">adb shell reboot update</span><br><span class="line">del adbshell.txt &gt;nul <span class="number">2</span>&gt;nul</span><br><span class="line"></span><br><span class="line">:<span class="keyword">end</span></span><br><span class="line">echo 按任意键退出...</span><br><span class="line">pause &gt; nul</span><br></pre></td></tr></table></figure><p>执行完该脚本后<strong>提示成功进入线刷模式时就马上插刷好镜像的 U 盘</strong> 不要错过时机(。・∀・)ノ</p><p>其实这个工具也就是一条 <code>adb shell reboot update</code> 指令而已，<code>abd connect  IP</code> 连接到盒子之后，然后再执行 <code>adb shell reboot update</code> ，然后再插入刚刚写好镜像的 U 盘。插上 HMDI 线连接显示器就会看到控制终端输出着启动流程的画面，上面还有四只小企鹅，这就说明我们成功进入了 Armbian 系统</p><h4 id="将-OpenWrt-写入到-EMMC-存储中"><a href="#将-OpenWrt-写入到-EMMC-存储中" class="headerlink" title="将 OpenWrt 写入到 EMMC 存储中"></a>将 OpenWrt 写入到 EMMC 存储中</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /root</span><br><span class="line">./inst-to-emmc.sh</span><br></pre></td></tr></table></figure><p>该脚本成功执行后，重启拔掉 U 盘就可以直接进入到 OpenWrt 系统中了：）</p><h2 id="OpenWrt-上的一些小优化"><a href="#OpenWrt-上的一些小优化" class="headerlink" title="OpenWrt 上的一些小优化"></a>OpenWrt 上的一些小优化</h2><p>使用  <code>ifconfig eth0 192.168.0.211 netmask 255.255.255.0</code> 修改 eth0 的 IP ，但依旧无法 ping 通 192.168.0.1 网关，还需要修改一下 LAN 口的配置。</p><h3 id="修改-IP"><a href="#修改-IP" class="headerlink" title="修改 IP"></a>修改 IP</h3><p>由于 LAN 口默认的是 <code>192.168.1.1</code> ，如果你的网络不是在该网段下的话就连不上该设备，所以如果不是采用直连网线的话，而是将盒子连接在路由器，这时就需要手动修改一下默认的配置才能连接到盒子。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">config</span> <span class="string">interface</span> <span class="string">'lan'</span></span><br><span class="line">        <span class="string">option</span> <span class="string">type</span> <span class="string">'bridge'</span></span><br><span class="line">        <span class="string">option</span> <span class="string">ifname</span> <span class="string">'eth0'</span></span><br><span class="line">        <span class="string">option</span> <span class="string">proto</span> <span class="string">'static'</span></span><br><span class="line">        <span class="string">option</span> <span class="string">netmask</span> <span class="string">'255.255.255.0'</span></span><br><span class="line">        <span class="string">option</span> <span class="string">dns</span> <span class="string">'119.29.29.29'</span></span><br><span class="line">        <span class="string">option</span> <span class="string">gateway</span> <span class="string">'192.168.0.1'</span></span><br><span class="line">        <span class="string">option</span> <span class="string">delegate</span> <span class="string">'0'</span></span><br><span class="line">        <span class="string">option</span> <span class="string">ipaddr</span> <span class="string">'192.168.0.211'</span></span><br></pre></td></tr></table></figure><p>修改一下 lan 网口的 IP 为你内网可访问到的 IP 即可，这样我们就可以使用该 IP 访问 OpenWrt 系统了</p><h3 id="安装必备工具"><a href="#安装必备工具" class="headerlink" title="安装必备工具"></a>安装必备工具</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 首先修改一下 opkg 源，默认给修改为中科大的代理镜像站了，这点不错</span></span><br><span class="line">╭─root@OpenWrt /mnt</span><br><span class="line">╰─<span class="comment"># opkg update</span></span><br><span class="line">Downloading https://openwrt.proxy.ustclug.org/snapshots/targets/armvirt/64/packages/Packages.gz</span><br><span class="line">Updated list of available packages <span class="keyword">in</span> /var/opkg-lists/openwrt_core</span><br><span class="line">Downloading</span><br></pre></td></tr></table></figure><ul><li>git  这是必须的呀</li><li>ca-bundle 和 ca-certificates，https 必须要用到的</li><li>git-http 如果不装的话在 git clone https 的 repo 时会提示 <a href="https://stackoverflow.com/questions/8329485/unable-to-find-remote-helper-for-https-during-git-clone" target="_blank" rel="noopener">“Unable to find remote helper for ‘https’” during git clone</a></li><li>zsh 和 oh-my-zsh，强大的 shell 不用废话😋</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">╭─root@OpenWrt /mnt</span><br><span class="line">╰─<span class="comment"># opkg install git zsh git-http ca-bundle ca-certificates wget curl</span></span><br><span class="line">Package git (2.25.1-1) installed <span class="keyword">in</span> root is up to date.</span><br><span class="line">Package zsh (5.7.1-1) installed <span class="keyword">in</span> root is up to date.</span><br><span class="line">Package git-http (2.25.1-1) installed <span class="keyword">in</span> root is up to date.</span><br><span class="line">Package ca-bundle (20190110-2) installed <span class="keyword">in</span> root is up to date.</span><br><span class="line">Package ca-certificates (20190110-2) installed <span class="keyword">in</span> root is up to date.</span><br><span class="line">Upgrading wget on root from 1.20.3-2 to 1.20.3-3...</span><br><span class="line">Downloading https://openwrt.proxy.ustclug.org/snapshots/packages/aarch64_generic/packages/wget_1.20.3-3_aarch64_generic.ipk</span><br><span class="line">Multiple packages (librt and librt) providing same name marked HOLD or PREFER. Using latest.</span><br><span class="line">Upgrading curl on root from 7.66.0-1 to 7.68.0-1...</span><br><span class="line">Downloading https://openwrt.proxy.ustclug.org/snapshots/packages/aarch64_generic/base/curl_7.68.0-1_aarch64_generic.ipk</span><br><span class="line">Configuring curl.</span><br><span class="line">Configuring wget.</span><br></pre></td></tr></table></figure><h4 id="zsh-踩坑"><a href="#zsh-踩坑" class="headerlink" title="zsh 踩坑"></a>zsh 踩坑</h4><p>安装完 oh-my-zsh 之后，不会帮你修改 <code>/etc/passwd</code> 中的配置，需要手动修改，然后我还是按照往常的修改方法：</p><p><code>root:x:0:0:root:/root:/bin/zsh</code></p><p>第二天我开开心心地 ssh 登录时，当场翻车了，它会提示<code>Permission denied, please try again.</code> ，咦我密码就是这个呀。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">debug1: Next authentication method: password</span><br><span class="line">root@192.168.0.211<span class="string">'s password:</span></span><br><span class="line"><span class="string">debug1: Authentications that can continue: publickey,password,keyboard-interactive</span></span><br><span class="line"><span class="string">Permission denied, please try again.</span></span><br><span class="line"><span class="string">root@192.168.0.211'</span>s password:</span><br></pre></td></tr></table></figure><p>然后我通过 OpenWrt 的 web 管理页面能正常登录，在 web 管理中的 <code>TTYD 终端</code>中尝试登录，然后就会提示你 <code>connection closed</code> ，看来找到问题的原因了，用户登录时无法执行它的 shell 所致。比较好的解决办法就是备份配置文 –&gt;把备份下载下来 –&gt; 然后修改配置文件 –&gt; 再上传恢复配置文件即可。曲线救国~~</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">OpenWrt login: root</span><br><span class="line">Password:</span><br><span class="line">login: can<span class="string">'t execute '</span>/bin/zsh<span class="string">': No such file or directory</span></span><br></pre></td></tr></table></figure><p>在 Debian 和 Ubuntu 发行版中 zsh 会默认安装在 <code>/bin/zsh</code> 下，并创建一个 <code>/usr/bin/zsh</code> 的一个软链接。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">╭─debian@debian /mnt/d/Desktop</span><br><span class="line">╰─$ ls -alh /bin/zsh</span><br><span class="line">-rwxr-xr-x 1 root root 842K Feb  5  2019 /bin/zsh</span><br><span class="line">╭─debian@debian /mnt/d/Desktop</span><br><span class="line">╰─$ ls -alh /usr/bin/zsh</span><br><span class="line">lrwxrwxrwx 1 root root 8 Aug 31  2019 /usr/bin/zsh -&gt; /bin/zsh</span><br></pre></td></tr></table></figure><p>而在 OpenWrt 中却默认安装在了 <code>/usr/bin/zsh</code> 下，也没有为 <code>/bin/zsh</code> 创建一个软链接</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">╭─root@OpenWrt ~</span><br><span class="line">╰─<span class="comment"># where zsh</span></span><br><span class="line">/usr/bin/zsh</span><br></pre></td></tr></table></figure><h3 id="部署一下-K3s"><a href="#部署一下-K3s" class="headerlink" title="部署一下 K3s"></a>部署一下 K3s</h3><p>这里只是简单的部署试用一下，后期我会详细讲一下关于 K3s 的内容。</p><h4 id="官方脚本"><a href="#官方脚本" class="headerlink" title="官方脚本"></a>官方脚本</h4><p>根据官方的脚本一句命令行<code>curl -sfL https://get.k3s.io | sh -</code>就能跑起 K3s 出来，比起隔壁的 K8s 要简单很多很多。但是脚本一执行就翻车了😂</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">╭─root@OpenWrt ~</span><br><span class="line">╰─<span class="comment"># curl -sfL https://get.k3s.io | sh -</span></span><br><span class="line">[ERROR]  Can not find systemd or openrc to use as a process supervisor <span class="keyword">for</span> k3s</span><br></pre></td></tr></table></figure><p>由于 OpenWrt 没有 systemd 和 OpenRC 来管理进程，所以无法通过脚本的方式一键部署，只能二进制部署啦。因为 systemd 对于 OpenWrt 来讲台过于复杂臃肿，对于几十 MB 甚至几 MB 存储空间的路由器来说实在是装不下。</p><blockquote><p>  Whereas desktop distributions use <a href="https://en.wikipedia.org/wiki/GLib" target="_blank" rel="noopener">glib</a>+<a href="https://en.wikipedia.org/wiki/D-Bus" target="_blank" rel="noopener">dbus</a>+<a href="https://en.wikipedia.org/wiki/udev" target="_blank" rel="noopener">udev(part of systemd)</a>, OpenWrt uses <a href="https://openwrt.org/docs/techref/libubox" target="_blank" rel="noopener">libubox</a>+<a href="https://openwrt.org/docs/techref/ubus" target="_blank" rel="noopener">ubus</a>+<a href="https://openwrt.org/docs/techref/hotplug_legacy" target="_blank" rel="noopener">hotplug2</a>. This provides some pretty awesome functionality without requiring huge libraries with huge dependencies (<em>cough</em> glib).</p></blockquote><h4 id="二进制部署"><a href="#二进制部署" class="headerlink" title="二进制部署"></a>二进制部署</h4><p>在 K3s 的 release 页面下载到 <a href="https://github.com/rancher/k3s/releases/download/v1.17.3%2Bk3s1/k3s-arm64" target="_blank" rel="noopener">k3s-arm64</a> 二进制文件。我放在了 <code>/opt/bin/</code> 目录下，并在 <code>.zshrc</code> 追加 <code>export PATH=/opt/bin:$PATH</code> 环境变量。</p><h4 id="usage"><a href="#usage" class="headerlink" title="usage"></a>usage</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">╭─root@OpenWrt ~</span><br><span class="line">╰─<span class="comment"># k3s</span></span><br><span class="line">NAME:</span><br><span class="line">   k3s - Kubernetes, but small and simple</span><br><span class="line"></span><br><span class="line">USAGE:</span><br><span class="line">   k3s [global options] <span class="built_in">command</span> [<span class="built_in">command</span> options] [arguments...]</span><br><span class="line"></span><br><span class="line">VERSION:</span><br><span class="line">   v1.17.3+k3s1 (5b17a175)</span><br><span class="line"></span><br><span class="line">COMMANDS:</span><br><span class="line">   server        Run management server</span><br><span class="line">   agent         Run node agent</span><br><span class="line">   kubectl       Run kubectl</span><br><span class="line">   crictl        Run crictl</span><br><span class="line">   ctr           Run ctr</span><br><span class="line">   check-config  Run config check</span><br><span class="line">   <span class="built_in">help</span>, h       Shows a list of commands or <span class="built_in">help</span> <span class="keyword">for</span> one <span class="built_in">command</span></span><br><span class="line"></span><br><span class="line">GLOBAL OPTIONS:</span><br><span class="line">   --debug        Turn on debug logs [<span class="variable">$K3S_DEBUG</span>]</span><br><span class="line">   --<span class="built_in">help</span>, -h     show <span class="built_in">help</span></span><br><span class="line">   --version, -v  <span class="built_in">print</span> the version</span><br></pre></td></tr></table></figure><h4 id="check-config"><a href="#check-config" class="headerlink" title="check-config"></a>check-config</h4><p>启动一个 K3s 集群之前线 check config 一下下😋</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">╭─root@OpenWrt</span> <span class="string">~</span></span><br><span class="line"><span class="string">╰─#</span> <span class="string">k3s</span> <span class="string">check-config</span></span><br><span class="line"><span class="string">INFO[0000]</span> <span class="string">Preparing</span> <span class="string">data</span> <span class="string">dir</span> <span class="string">/var/lib/rancher/k3s/data/a61d93bc56bb3dd34b5ca93517164f5b503e16b6c7414e87b11cf336eeb8ebd7</span></span><br><span class="line"></span><br><span class="line"><span class="attr">Verifying binaries in /var/lib/rancher/k3s/data/a61d93bc56bb3dd34b5ca93517164f5b503e16b6c7414e87b11cf336eeb8ebd7/bin:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">sha256sum:</span> <span class="string">good</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">links:</span> <span class="string">good</span></span><br><span class="line"></span><br><span class="line"><span class="attr">System:</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">/usr/sbin</span> <span class="string">iptables</span> <span class="string">v1.8.3</span> <span class="string">(legacy):</span> <span class="string">ok</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">swap:</span> <span class="string">disabled</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">routes:</span> <span class="string">ok</span></span><br><span class="line"></span><br><span class="line"><span class="attr">Limits:</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">/proc/sys/kernel/keys/root_maxkeys:</span> <span class="number">1000000</span></span><br><span class="line"></span><br><span class="line"><span class="attr">modprobe:</span> <span class="string">module</span> <span class="string">configs</span> <span class="string">not</span> <span class="string">found</span> <span class="string">in</span> <span class="string">modules.dep</span></span><br><span class="line"><span class="attr">info:</span> <span class="string">reading</span> <span class="string">kernel</span> <span class="string">config</span> <span class="string">from</span> <span class="string">/proc/config.gz</span> <span class="string">...</span></span><br><span class="line"></span><br><span class="line"><span class="attr">Generally Necessary:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">cgroup hierarchy:</span> <span class="string">properly</span> <span class="string">mounted</span> <span class="string">[/sys/fs/cgroup]</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">CONFIG_NAMESPACES:</span> <span class="string">enabled</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">CONFIG_NET_NS:</span> <span class="string">enabled</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">CONFIG_PID_NS:</span> <span class="string">enabled</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">CONFIG_IPC_NS:</span> <span class="string">enabled</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">CONFIG_UTS_NS:</span> <span class="string">enabled</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">CONFIG_CGROUPS:</span> <span class="string">enabled</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">CONFIG_CGROUP_CPUACCT:</span> <span class="string">enabled</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">CONFIG_CGROUP_DEVICE:</span> <span class="string">enabled</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">CONFIG_CGROUP_FREEZER:</span> <span class="string">enabled</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">CONFIG_CGROUP_SCHED:</span> <span class="string">enabled</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">CONFIG_CPUSETS:</span> <span class="string">enabled</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">CONFIG_MEMCG:</span> <span class="string">enabled</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">CONFIG_KEYS:</span> <span class="string">enabled</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">CONFIG_VETH:</span> <span class="string">enabled</span> <span class="string">(as</span> <span class="string">module)</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">CONFIG_BRIDGE:</span> <span class="string">enabled</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">CONFIG_BRIDGE_NETFILTER:</span> <span class="string">enabled</span> <span class="string">(as</span> <span class="string">module)</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">CONFIG_NF_NAT_IPV4:</span> <span class="string">missing</span> <span class="string">(fail)</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">CONFIG_IP_NF_FILTER:</span> <span class="string">enabled</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">CONFIG_IP_NF_TARGET_MASQUERADE:</span> <span class="string">enabled</span> <span class="string">(as</span> <span class="string">module)</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">CONFIG_NETFILTER_XT_MATCH_ADDRTYPE:</span> <span class="string">enabled</span> <span class="string">(as</span> <span class="string">module)</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">CONFIG_NETFILTER_XT_MATCH_CONNTRACK:</span> <span class="string">enabled</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">CONFIG_NETFILTER_XT_MATCH_IPVS:</span> <span class="string">enabled</span> <span class="string">(as</span> <span class="string">module)</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">CONFIG_IP_NF_NAT:</span> <span class="string">enabled</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">CONFIG_NF_NAT:</span> <span class="string">enabled</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">CONFIG_NF_NAT_NEEDED:</span> <span class="string">missing</span> <span class="string">(fail)</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">CONFIG_POSIX_MQUEUE:</span> <span class="string">enabled</span></span><br><span class="line"></span><br><span class="line"><span class="attr">Optional Features:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">CONFIG_USER_NS:</span> <span class="string">enabled</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">CONFIG_SECCOMP:</span> <span class="string">enabled</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">CONFIG_CGROUP_PIDS:</span> <span class="string">enabled</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">CONFIG_BLK_CGROUP:</span> <span class="string">enabled</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">CONFIG_BLK_DEV_THROTTLING:</span> <span class="string">enabled</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">CONFIG_CGROUP_PERF:</span> <span class="string">enabled</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">CONFIG_CGROUP_HUGETLB:</span> <span class="string">enabled</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">CONFIG_NET_CLS_CGROUP:</span> <span class="string">enabled</span> <span class="string">(as</span> <span class="string">module)</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">CONFIG_CGROUP_NET_PRIO:</span> <span class="string">enabled</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">CONFIG_CFS_BANDWIDTH:</span> <span class="string">enabled</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">CONFIG_FAIR_GROUP_SCHED:</span> <span class="string">enabled</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">CONFIG_RT_GROUP_SCHED:</span> <span class="string">enabled</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">CONFIG_IP_NF_TARGET_REDIRECT:</span> <span class="string">enabled</span> <span class="string">(as</span> <span class="string">module)</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">CONFIG_IP_SET:</span> <span class="string">enabled</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">CONFIG_IP_VS:</span> <span class="string">enabled</span> <span class="string">(as</span> <span class="string">module)</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">CONFIG_IP_VS_NFCT:</span> <span class="string">enabled</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">CONFIG_IP_VS_PROTO_TCP:</span> <span class="string">enabled</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">CONFIG_IP_VS_PROTO_UDP:</span> <span class="string">enabled</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">CONFIG_IP_VS_RR:</span> <span class="string">enabled</span> <span class="string">(as</span> <span class="string">module)</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">CONFIG_EXT4_FS:</span> <span class="string">enabled</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">CONFIG_EXT4_FS_POSIX_ACL:</span> <span class="string">enabled</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">CONFIG_EXT4_FS_SECURITY:</span> <span class="string">enabled</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">Network Drivers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">"overlay":</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">CONFIG_VXLAN:</span> <span class="string">enabled</span> <span class="string">(as</span> <span class="string">module)</span></span><br><span class="line">      <span class="string">Optional</span> <span class="string">(for</span> <span class="string">encrypted</span> <span class="string">networks):</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">CONFIG_CRYPTO:</span> <span class="string">enabled</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">CONFIG_CRYPTO_AEAD:</span> <span class="string">enabled</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">CONFIG_CRYPTO_GCM:</span> <span class="string">enabled</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">CONFIG_CRYPTO_SEQIV:</span> <span class="string">enabled</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">CONFIG_CRYPTO_GHASH:</span> <span class="string">enabled</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">CONFIG_XFRM:</span> <span class="string">enabled</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">CONFIG_XFRM_USER:</span> <span class="string">enabled</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">CONFIG_XFRM_ALGO:</span> <span class="string">enabled</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">CONFIG_INET_ESP:</span> <span class="string">enabled</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">CONFIG_INET_XFRM_MODE_TRANSPORT:</span> <span class="string">missing</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">Storage Drivers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">"overlay":</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">CONFIG_OVERLAY_FS:</span> <span class="string">enabled</span></span><br><span class="line"></span><br><span class="line"><span class="attr">STATUS:</span> <span class="number">2</span> <span class="string">(fail)</span></span><br></pre></td></tr></table></figure><p>发现 <code>ONFIG_NF_NAT_IPV4: missing (fail)</code> 和 <code>CONFIG_NF_NAT_NEEDED: missing (fail)</code> 失败了🙃，先不管看看能不能跑起来再说。</p><h4 id="创建-K3s-集群"><a href="#创建-K3s-集群" class="headerlink" title="创建 K3s 集群"></a>创建 K3s 集群</h4><p>根据 K3s 的文档，使用 <code>k3s server</code>  选项就能创建一个 K3s 集群</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line">╭─root@OpenWrt ~</span><br><span class="line">╰─<span class="comment"># k3s server</span></span><br><span class="line">INFO[2020-03-08T20:17:00.103499172+08:00] Starting k3s v1.17.3+k3s1 (5b17a175)</span><br><span class="line">INFO[2020-03-08T20:17:00.112443368+08:00] Kine listening on unix://kine.sock</span><br><span class="line">INFO[2020-03-08T20:17:01.572347551+08:00] Active TLS secret  (ver=) (count 7): map[listener.cattle.io/cn-10.43.0.1:10.43.0.1 listener.cattle.io/cn-127.0.0.1:127.0.0.1 listener.cattle.io/cn-192.168.0.212:192.168.0.212 listener.cattle.io/cn-kubernetes:kubernetes listener.cattle.io/cn-kubernetes.default:kubernetes.default listener.cattle.io/cn-kubernetes.default.svc.cluster.local:kubernetes.default.svc.cluster.local listener.cattle.io/cn-localhost:localhost listener.cattle.io/<span class="built_in">hash</span>:089b0c6a0b78e5f9d3a33b154e97185f644ed693bee80d4559c47e00f19af2f8]</span><br><span class="line">INFO[2020-03-08T20:17:01.591244044+08:00] Running kube-apiserver --advertise-port=6443 --allow-privileged=<span class="literal">true</span> --anonymous-auth=<span class="literal">false</span> --api-audiences=unknown --authorization-mode=Node,RBAC --basic-auth-file=/var/lib/rancher/k3s/server/cred/passwd --<span class="built_in">bind</span>-address=127.0.0.1 --cert-dir=/var/lib/rancher/k3s/server/tls/temporary-certs --client-ca-file=/var/lib/rancher/k3s/server/tls/client-ca.crt --<span class="built_in">enable</span>-admission-plugins=NodeRestriction --etcd-servers=unix://kine.sock --insecure-port=0 --kubelet-certificate-authority=/var/lib/rancher/k3s/server/tls/server-ca.crt --kubelet-client-certificate=/var/lib/rancher/k3s/server/tls/client-kube-apiserver.crt --kubelet-client-key=/var/lib/rancher/k3s/server/tls/client-kube-apiserver.key --proxy-client-cert-file=/var/lib/rancher/k3s/server/tls/client-auth-proxy.crt --proxy-client-key-file=/var/lib/rancher/k3s/server/tls/client-auth-proxy.key --requestheader-allowed-names=system:auth-proxy --requestheader-client-ca-file=/var/lib/rancher/k3s/server/tls/request-header-ca.crt --requestheader-extra-headers-prefix=X-Remote-Extra- --requestheader-group-headers=X-Remote-Group --requestheader-username-headers=X-Remote-User --secure-port=6444 --service-account-issuer=k3s --service-account-key-file=/var/lib/rancher/k3s/server/tls/service.key --service-account-signing-key-file=/var/lib/rancher/k3s/server/tls/service.key --service-cluster-ip-range=10.43.0.0/16 --storage-backend=etcd3 --tls-cert-file=/var/lib/rancher/k3s/server/tls/serving-kube-apiserver.crt --tls-private-key-file=/var/lib/rancher/k3s/server/tls/serving-kube-apiserver.key</span><br><span class="line">Flag --basic-auth-file has been deprecated, Basic authentication mode is deprecated and will be removed <span class="keyword">in</span> a future release. It is not recommended <span class="keyword">for</span> production environments.</span><br><span class="line">I0308 20:17:01.593861    9319 server.go:622] external host was not specified, using 192.168.0.212</span><br><span class="line">I0308 20:17:01.594884    9319 server.go:163] Version: v1.17.3+k3s1</span><br><span class="line">I0308 20:17:04.485872    9319 plugins.go:158] Loaded 11 mutating admission controller(s) successfully <span class="keyword">in</span> the following order: NamespaceLifecycle,LimitRanger,ServiceAccount,NodeRestriction,TaintNodesByCondition,Priority,DefaultTolerationSeconds,DefaultStorageClass,StorageObjectInUseProtection,MutatingAdmissionWebhook,RuntimeClass.</span><br><span class="line">I0308 20:17:04.485954    9319 plugins.go:161] Loaded 7 validating admission controller(s) successfully <span class="keyword">in</span> the following order: LimitRanger,ServiceAccount,Priority,PersistentVolumeClaimResize,ValidatingAdmissionWebhook,RuntimeClass,ResourceQuota.</span><br><span class="line">I0308 20:17:04.491004    9319 plugins.go:158] Loaded 11 mutating admission controller(s) successfully <span class="keyword">in</span> the following order: NamespaceLifecycle,LimitRanger,ServiceAccount,NodeRestriction,TaintNodesByCondition,Priority,DefaultTolerationSeconds,DefaultStorageClass,StorageObjectInUseProtection,MutatingAdmissionWebhook,RuntimeClass.</span><br><span class="line">I0308 20:17:04.491084    9319 plugins.go:161] Loaded 7 validating admission controller(s) successfully <span class="keyword">in</span> the following order: LimitRanger,ServiceAccount,Priority,PersistentVolumeClaimResize,ValidatingAdmissionWebhook,RuntimeClass,ResourceQuota.</span><br><span class="line">I0308 20:17:04.592193    9319 master.go:267] Using reconciler: lease</span><br><span class="line">I0308 20:17:04.699310    9319 rest.go:115] the default service ipfamily <span class="keyword">for</span> this cluster is: IPv4</span><br><span class="line">W0308 20:17:06.161374    9319 genericapiserver.go:404] Skipping API batch/v2alpha1 because it has no resources.</span><br><span class="line">W0308 20:17:06.212135    9319 genericapiserver.go:404] Skipping API discovery.k8s.io/v1alpha1 because it has no resources.</span><br><span class="line">W0308 20:17:06.264606    9319 genericapiserver.go:404] Skipping API node.k8s.io/v1alpha1 because it has no resources.</span><br><span class="line">W0308 20:17:06.361403    9319 genericapiserver.go:404] Skipping API rbac.authorization.k8s.io/v1alpha1 because it has no resources.</span><br><span class="line">W0308 20:17:06.379432    9319 genericapiserver.go:404] Skipping API scheduling.k8s.io/v1alpha1 because it has no resources.</span><br><span class="line">W0308 20:17:06.447661    9319 genericapiserver.go:404] Skipping API storage.k8s.io/v1alpha1 because it has no resources.</span><br><span class="line">W0308 20:17:06.550084    9319 genericapiserver.go:404] Skipping API apps/v1beta2 because it has no resources.</span><br><span class="line">W0308 20:17:06.550168    9319 genericapiserver.go:404] Skipping API apps/v1beta1 because it has no resources.</span><br><span class="line">I0308 20:17:06.599929    9319 plugins.go:158] Loaded 11 mutating admission controller(s) successfully <span class="keyword">in</span> the following order: NamespaceLifecycle,LimitRanger,ServiceAccount,NodeRestriction,TaintNodesByCondition,Priority,DefaultTolerationSeconds,DefaultStorageClass,StorageObjectInUseProtection,MutatingAdmissionWebhook,RuntimeClass.</span><br><span class="line">I0308 20:17:06.600017    9319 plugins.go:161] Loaded 7 validating admission controller(s) successfully <span class="keyword">in</span> the following order: LimitRanger,ServiceAccount,Priority,PersistentVolumeClaimResize,ValidatingAdmissionWebhook,RuntimeClass,ResourceQuota.</span><br><span class="line">I0308 20:17:16.394308    9319 dynamic_cafile_content.go:166] Starting client-ca-bundle::/var/lib/rancher/k3s/server/tls/client-ca.crt</span><br><span class="line">I0308 20:17:16.394308    9319 dynamic_cafile_content.go:166] Starting request-header::/var/lib/rancher/k3s/server/tls/request-header-ca.crt</span><br><span class="line">I0308 20:17:16.395251    9319 dynamic_serving_content.go:129] Starting serving-cert::/var/lib/rancher/k3s/server/tls/serving-kube-apiserver.crt::/var/lib/rancher/k3s/server/tls/serving-kube-apiserver.key</span><br><span class="line">I0308 20:17:16.397910    9319 secure_serving.go:178] Serving securely on 127.0.0.1:6444</span><br><span class="line">I0308 20:17:16.398017    9319 tlsconfig.go:219] Starting DynamicServingCertificateController</span><br><span class="line">I0308 20:17:16.398379    9319 autoregister_controller.go:140] Starting autoregister controller</span><br><span class="line">I0308 20:17:16.398459    9319 cache.go:32] Waiting <span class="keyword">for</span> caches to sync <span class="keyword">for</span> autoregister controller</span><br><span class="line">I0308 20:17:16.398723    9319 available_controller.go:386] Starting AvailableConditionController</span><br><span class="line">I0308 20:17:16.398794    9319 cache.go:32] Waiting <span class="keyword">for</span> caches to sync <span class="keyword">for</span> AvailableConditionController controller</span><br><span class="line">I0308 20:17:16.399089    9319 crdregistration_controller.go:111] Starting crd-autoregister controller</span><br><span class="line">I0308 20:17:16.399288    9319 shared_informer.go:197] Waiting <span class="keyword">for</span> caches to sync <span class="keyword">for</span> crd-autoregister</span><br><span class="line">I0308 20:17:16.399546    9319 crd_finalizer.go:263] Starting CRDFinalizer</span><br><span class="line">I0308 20:17:16.399790    9319 controller.go:85] Starting OpenAPI controller</span><br><span class="line">I0308 20:17:16.400002    9319 customresource_discovery_controller.go:208] Starting DiscoveryController</span><br><span class="line">I0308 20:17:16.400341    9319 naming_controller.go:288] Starting NamingConditionController</span><br><span class="line">I0308 20:17:16.400638    9319 establishing_controller.go:73] Starting EstablishingController</span><br><span class="line">I0308 20:17:16.400854    9319 nonstructuralschema_controller.go:191] Starting NonStructuralSchemaConditionController</span><br><span class="line">I0308 20:17:16.401201    9319 apiapproval_controller.go:185] Starting KubernetesAPIApprovalPolicyConformantConditionController</span><br><span class="line">I0308 20:17:16.402017    9319 cluster_authentication_trust_controller.go:440] Starting cluster_authentication_trust_controller controller</span><br><span class="line">I0308 20:17:16.402094    9319 shared_informer.go:197] Waiting <span class="keyword">for</span> caches to sync <span class="keyword">for</span> cluster_authentication_trust_controller</span><br><span class="line">I0308 20:17:16.403447    9319 apiservice_controller.go:94] Starting APIServiceRegistrationController</span><br><span class="line">I0308 20:17:16.403537    9319 cache.go:32] Waiting <span class="keyword">for</span> caches to sync <span class="keyword">for</span> APIServiceRegistrationController controller</span><br><span class="line">I0308 20:17:16.403681    9319 controller.go:81] Starting OpenAPI AggregationController</span><br><span class="line">I0308 20:17:16.418176    9319 dynamic_cafile_content.go:166] Starting client-ca-bundle::/var/lib/rancher/k3s/server/tls/client-ca.crt</span><br><span class="line">I0308 20:17:16.419045    9319 dynamic_cafile_content.go:166] Starting request-header::/var/lib/rancher/k3s/server/tls/request-header-ca.crt</span><br><span class="line">I0308 20:17:16.606683    9319 shared_informer.go:204] Caches are synced <span class="keyword">for</span> cluster_authentication_trust_controller</span><br><span class="line">I0308 20:17:16.613199    9319 cache.go:39] Caches are synced <span class="keyword">for</span> autoregister controller</span><br><span class="line">I0308 20:17:16.614373    9319 cache.go:39] Caches are synced <span class="keyword">for</span> AvailableConditionController controller</span><br><span class="line">I0308 20:17:16.614504    9319 shared_informer.go:204] Caches are synced <span class="keyword">for</span> crd-autoregister</span><br><span class="line">I0308 20:17:16.616912    9319 cache.go:39] Caches are synced <span class="keyword">for</span> APIServiceRegistrationController controller</span><br><span class="line">E0308 20:17:16.633217    9319 controller.go:150] Unable to perform initial Kubernetes service initialization: Service <span class="string">"kubernetes"</span> is invalid: spec.clusterIP: Invalid value: <span class="string">"10.43.0.1"</span>: cannot allocate resources of <span class="built_in">type</span> serviceipallocations at this time</span><br><span class="line">E0308 20:17:16.639707    9319 controller.go:155] Unable to remove old endpoints from kubernetes service: StorageError: key not found, Code: 1, Key: /registry/masterleases/192.168.0.212, ResourceVersion: 0, AdditionalErrorMsg:</span><br><span class="line">I0308 20:17:17.394171    9319 controller.go:107] OpenAPI AggregationController: Processing item</span><br><span class="line">I0308 20:17:17.394300    9319 controller.go:130] OpenAPI AggregationController: action <span class="keyword">for</span> item : Nothing (removed from the queue).</span><br><span class="line">I0308 20:17:17.394391    9319 controller.go:130] OpenAPI AggregationController: action <span class="keyword">for</span> item k8s_internal_local_delegation_chain_0000000000: Nothing (removed from the queue).</span><br><span class="line">I0308 20:17:17.431078    9319 storage_scheduling.go:133] created PriorityClass system-node-critical with value 2000001000</span><br><span class="line">I0308 20:17:17.445315    9319 storage_scheduling.go:133] created PriorityClass system-cluster-critical with value 2000000000</span><br><span class="line">I0308 20:17:17.445429    9319 storage_scheduling.go:142] all system priority classes are created successfully or already exist.</span><br><span class="line">I0308 20:17:18.939225    9319 controller.go:606] quota admission added evaluator <span class="keyword">for</span>: roles.rbac.authorization.k8s.io</span><br><span class="line">I0308 20:17:19.103599    9319 controller.go:606] quota admission added evaluator <span class="keyword">for</span>: rolebindings.rbac.authorization.k8s.io</span><br><span class="line">W0308 20:17:19.434785    9319 lease.go:224] Resetting endpoints <span class="keyword">for</span> master service <span class="string">"kubernetes"</span> to [192.168.0.212]</span><br><span class="line">I0308 20:17:19.438264    9319 controller.go:606] quota admission added evaluator <span class="keyword">for</span>: endpoints</span><br><span class="line">INFO[2020-03-08T20:17:19.626006745+08:00] Running kube-scheduler --<span class="built_in">bind</span>-address=127.0.0.1 --kubeconfig=/var/lib/rancher/k3s/server/cred/scheduler.kubeconfig --leader-elect=<span class="literal">false</span> --port=10251 --secure-port=0</span><br><span class="line">INFO[2020-03-08T20:17:19.629360634+08:00] Running kube-controller-manager --allocate-node-cidrs=<span class="literal">true</span> --<span class="built_in">bind</span>-address=127.0.0.1 --cluster-cidr=10.42.0.0/16 --cluster-signing-cert-file=/var/lib/rancher/k3s/server/tls/server-ca.crt --cluster-signing-key-file=/var/lib/rancher/k3s/server/tls/server-ca.key --kubeconfig=/var/lib/rancher/k3s/server/cred/controller.kubeconfig --leader-elect=<span class="literal">false</span> --port=10252 --root-ca-file=/var/lib/rancher/k3s/server/tls/server-ca.crt --secure-port=0 --service-account-private-key-file=/var/lib/rancher/k3s/server/tls/service.key --use-service-account-credentials=<span class="literal">true</span></span><br><span class="line">I0308 20:17:19.655674    9319 controllermanager.go:161] Version: v1.17.3+k3s1</span><br><span class="line">I0308 20:17:19.657868    9319 deprecated_insecure_serving.go:53] Serving insecurely on [::]:10252</span><br><span class="line">INFO[2020-03-08T20:17:19.658915754+08:00] Waiting <span class="keyword">for</span> cloudcontroller rbac role to be created</span><br><span class="line">INFO[2020-03-08T20:17:19.664219593+08:00] Creating CRD addons.k3s.cattle.io</span><br><span class="line">INFO[2020-03-08T20:17:19.686759095+08:00] Creating CRD helmcharts.helm.cattle.io</span><br><span class="line">W0308 20:17:19.691464    9319 authorization.go:47] Authorization is disabled</span><br><span class="line">W0308 20:17:19.691548    9319 authentication.go:92] Authentication is disabled</span><br><span class="line">I0308 20:17:19.691602    9319 deprecated_insecure_serving.go:51] Serving healthz insecurely on [::]:10251</span><br><span class="line">INFO[2020-03-08T20:17:19.762954369+08:00] Waiting <span class="keyword">for</span> CRD helmcharts.helm.cattle.io to become available</span><br><span class="line">INFO[2020-03-08T20:17:20.280122513+08:00] Done waiting <span class="keyword">for</span> CRD helmcharts.helm.cattle.io to become available</span><br><span class="line">INFO[2020-03-08T20:17:20.320314726+08:00] Writing static file: /var/lib/rancher/k3s/server/static/charts/traefik-1.81.0.tgz</span><br><span class="line">INFO[2020-03-08T20:17:20.321243908+08:00] Writing manifest: /var/lib/rancher/k3s/server/manifests/coredns.yaml</span><br><span class="line">INFO[2020-03-08T20:17:20.321700333+08:00] Writing manifest: /var/lib/rancher/k3s/server/manifests/metrics-server/aggregated-metrics-reader.yaml</span><br><span class="line">INFO[2020-03-08T20:17:20.322113756+08:00] Writing manifest: /var/lib/rancher/k3s/server/manifests/metrics-server/metrics-apiservice.yaml</span><br><span class="line">INFO[2020-03-08T20:17:20.322546305+08:00] Writing manifest: /var/lib/rancher/k3s/server/manifests/metrics-server/metrics-server-deployment.yaml</span><br><span class="line">INFO[2020-03-08T20:17:20.322947895+08:00] Writing manifest: /var/lib/rancher/k3s/server/manifests/metrics-server/metrics-server-service.yaml</span><br><span class="line">INFO[2020-03-08T20:17:20.323365277+08:00] Writing manifest: /var/lib/rancher/k3s/server/manifests/metrics-server/resource-reader.yaml</span><br><span class="line">INFO[2020-03-08T20:17:20.323768992+08:00] Writing manifest: /var/lib/rancher/k3s/server/manifests/traefik.yaml</span><br><span class="line">INFO[2020-03-08T20:17:20.324187832+08:00] Writing manifest: /var/lib/rancher/k3s/server/manifests/ccm.yaml</span><br><span class="line">INFO[2020-03-08T20:17:20.324764300+08:00] Writing manifest: /var/lib/rancher/k3s/server/manifests/<span class="built_in">local</span>-storage.yaml</span><br><span class="line">INFO[2020-03-08T20:17:20.325164932+08:00] Writing manifest: /var/lib/rancher/k3s/server/manifests/metrics-server/auth-delegator.yaml</span><br><span class="line">INFO[2020-03-08T20:17:20.325563897+08:00] Writing manifest: /var/lib/rancher/k3s/server/manifests/metrics-server/auth-reader.yaml</span><br><span class="line">INFO[2020-03-08T20:17:20.325996113+08:00] Writing manifest: /var/lib/rancher/k3s/server/manifests/rolebindings.yaml</span><br><span class="line">INFO[2020-03-08T20:17:20.527152139+08:00] Starting k3s.cattle.io/v1, Kind=Addon controller</span><br><span class="line">INFO[2020-03-08T20:17:20.529057920+08:00] Node token is available at /var/lib/rancher/k3s/server/token</span><br><span class="line">INFO[2020-03-08T20:17:20.529286008+08:00] To join node to cluster: k3s agent -s https://192.168.0.212:6443 -t <span class="variable">$&#123;NODE_TOKEN&#125;</span></span><br><span class="line">INFO[2020-03-08T20:17:20.527299933+08:00] Waiting <span class="keyword">for</span> master node  startup: resource name may not be empty</span><br><span class="line">INFO[2020-03-08T20:17:20.725057527+08:00] Waiting <span class="keyword">for</span> cloudcontroller rbac role to be created</span><br><span class="line">I0308 20:17:20.810135    9319 controller.go:606] quota admission added evaluator <span class="keyword">for</span>: addons.k3s.cattle.io</span><br><span class="line">INFO[2020-03-08T20:17:20.830872877+08:00] Starting helm.cattle.io/v1, Kind=HelmChart controller</span><br><span class="line">INFO[2020-03-08T20:17:20.831652182+08:00] Starting batch/v1, Kind=Job controller</span><br><span class="line">INFO[2020-03-08T20:17:20.832798326+08:00] Starting /v1, Kind=Service controller</span><br><span class="line">INFO[2020-03-08T20:17:20.833998971+08:00] Starting /v1, Kind=Pod controller</span><br><span class="line">INFO[2020-03-08T20:17:20.835217450+08:00] Starting /v1, Kind=Endpoints controller</span><br><span class="line">INFO[2020-03-08T20:17:20.836690891+08:00] Starting /v1, Kind=Secret controller</span><br><span class="line">INFO[2020-03-08T20:17:20.838569298+08:00] Starting /v1, Kind=Node controller</span><br></pre></td></tr></table></figure><h4 id="集群状态"><a href="#集群状态" class="headerlink" title="集群状态"></a>集群状态</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">╭─root@OpenWrt ~</span><br><span class="line">╰─<span class="comment"># ks cluster-info</span></span><br><span class="line">Kubernetes master is running at https://127.0.0.1:6443</span><br><span class="line">CoreDNS is running at https://127.0.0.1:6443/api/v1/namespaces/kube-system/services/kube-dns:dns/proxy</span><br><span class="line">Metrics-server is running at https://127.0.0.1:6443/api/v1/namespaces/kube-system/services/https:metrics-server:/proxy</span><br><span class="line"></span><br><span class="line">To further debug and diagnose cluster problems, use <span class="string">'kubectl cluster-info dump'</span>.</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line">╭─root@OpenWrt ~</span><br><span class="line">╰─<span class="comment"># ks get node</span></span><br><span class="line">NAME      STATUS   ROLES    AGE     VERSION</span><br><span class="line">openwrt   Ready    master   5m26s   v1.17.3+k3s1</span><br><span class="line">╭─root@OpenWrt ~</span><br><span class="line">╰─<span class="comment"># ks get pod -n kube-system</span></span><br><span class="line">NAME                                      READY   STATUS              RESTARTS   AGE</span><br><span class="line">metrics-server-6d684c7b5-8gv8j            1/1     Running             0          5m20s</span><br><span class="line"><span class="built_in">local</span>-path-provisioner-58fb86bdfd-h8jkk   1/1     Running             0          5m20s</span><br><span class="line">svclb-traefik-9kwxx                       0/2     ContainerCreating   0          3m29s</span><br><span class="line">helm-install-traefik-nw9td                0/1     Completed           2          5m20s</span><br><span class="line">coredns-d798c9dd-62sb9                    1/1     Running             0          5m20s</span><br><span class="line">traefik-6787cddb4b-p6hs9                  1/1     Running             0          3m30s</span><br><span class="line">╭─root@OpenWrt ~</span><br><span class="line">╰─<span class="comment"># ks describe node</span></span><br><span class="line">Name:               openwrt</span><br><span class="line">Roles:              master</span><br><span class="line">Labels:             beta.kubernetes.io/arch=arm64</span><br><span class="line">                    beta.kubernetes.io/instance-type=k3s</span><br><span class="line">                    beta.kubernetes.io/os=linux</span><br><span class="line">                    k3s.io/hostname=openwrt</span><br><span class="line">                    k3s.io/internal-ip=192.168.0.212</span><br><span class="line">                    kubernetes.io/arch=arm64</span><br><span class="line">                    kubernetes.io/hostname=openwrt</span><br><span class="line">                    kubernetes.io/os=linux</span><br><span class="line">                    node-role.kubernetes.io/master=<span class="literal">true</span></span><br><span class="line">                    node.kubernetes.io/instance-type=k3s</span><br><span class="line">Annotations:        flannel.alpha.coreos.com/backend-data: &#123;<span class="string">"VtepMAC"</span>:<span class="string">"ca:8f:da:03:f3:e5"</span>&#125;</span><br><span class="line">                    flannel.alpha.coreos.com/backend-type: vxlan</span><br><span class="line">                    flannel.alpha.coreos.com/kube-subnet-manager: <span class="literal">true</span></span><br><span class="line">                    flannel.alpha.coreos.com/public-ip: 192.168.0.212</span><br><span class="line">                    node.alpha.kubernetes.io/ttl: 0</span><br><span class="line">                    volumes.kubernetes.io/controller-managed-attach-detach: <span class="literal">true</span></span><br><span class="line">CreationTimestamp:  Sun, 08 Mar 2020 20:17:23 +0800</span><br><span class="line">Taints:             &lt;none&gt;</span><br><span class="line">Unschedulable:      <span class="literal">false</span></span><br><span class="line">Lease:</span><br><span class="line">  HolderIdentity:  openwrt</span><br><span class="line">  AcquireTime:     &lt;<span class="built_in">unset</span>&gt;</span><br><span class="line">  RenewTime:       Sun, 08 Mar 2020 20:23:44 +0800</span><br><span class="line">Conditions:</span><br><span class="line">  Type                 Status  LastHeartbeatTime                 LastTransitionTime                Reason                       Message</span><br><span class="line">  ----               ------  -----------------               ------------------              ------                     -------</span><br><span class="line">  NetworkUnavailable   False   Sun, 08 Mar 2020 20:17:38 +0800   Sun, 08 Mar 2020 20:17:38 +0800   FlannelIsUp                  Flannel is running on this node</span><br><span class="line">  MemoryPressure       False   Sun, 08 Mar 2020 20:19:54 +0800   Sun, 08 Mar 2020 20:17:23 +0800   KubeletHasSufficientMemory   kubelet has sufficient memory available</span><br><span class="line">  DiskPressure         False   Sun, 08 Mar 2020 20:19:54 +0800   Sun, 08 Mar 2020 20:17:23 +0800   KubeletHasNoDiskPressure     kubelet has no disk pressure</span><br><span class="line">  PIDPressure          False   Sun, 08 Mar 2020 20:19:54 +0800   Sun, 08 Mar 2020 20:17:23 +0800   KubeletHasSufficientPID      kubelet has sufficient PID available</span><br><span class="line">  Ready                True    Sun, 08 Mar 2020 20:19:54 +0800   Sun, 08 Mar 2020 20:17:34 +0800   KubeletReady                 kubelet is posting ready status</span><br><span class="line">Addresses:</span><br><span class="line">  InternalIP:  192.168.0.212</span><br><span class="line">  Hostname:    openwrt</span><br><span class="line">Capacity:</span><br><span class="line">  cpu:                4</span><br><span class="line">  ephemeral-storage:  925844Ki</span><br><span class="line">  hugepages-1Gi:      0</span><br><span class="line">  hugepages-2Mi:      0</span><br><span class="line">  hugepages-32Mi:     0</span><br><span class="line">  hugepages-64Ki:     0</span><br><span class="line">  memory:             1851688Ki</span><br><span class="line">  pods:               110</span><br><span class="line">Allocatable:</span><br><span class="line">  cpu:                4</span><br><span class="line">  ephemeral-storage:  900661043</span><br><span class="line">  hugepages-1Gi:      0</span><br><span class="line">  hugepages-2Mi:      0</span><br><span class="line">  hugepages-32Mi:     0</span><br><span class="line">  hugepages-64Ki:     0</span><br><span class="line">  memory:             1851688Ki</span><br><span class="line">  pods:               110</span><br><span class="line">System Info:</span><br><span class="line">  Machine ID:                 96581db4e82a9fb36b0553115e64de1a</span><br><span class="line">  System UUID:</span><br><span class="line">  Boot ID:                    87856a60-0482-4ca3-a144-2ec073e1d2c7</span><br><span class="line">  Kernel Version:             5.4.23-amlogic-flippy-28+</span><br><span class="line">  OS Image:                   OpenWrt SNAPSHOT</span><br><span class="line">  Operating System:           linux</span><br><span class="line">  Architecture:               arm64</span><br><span class="line">  Container Runtime Version:  containerd://1.3.3-k3s1</span><br><span class="line">  Kubelet Version:            v1.17.3+k3s1</span><br><span class="line">  Kube-Proxy Version:         v1.17.3+k3s1</span><br><span class="line">PodCIDR:                      10.42.0.0/24</span><br><span class="line">PodCIDRs:                     10.42.0.0/24</span><br><span class="line">ProviderID:                   k3s://openwrt</span><br><span class="line">Non-terminated Pods:          (5 <span class="keyword">in</span> total)</span><br><span class="line">  Namespace                   Name                                       CPU Requests  CPU Limits  Memory Requests  Memory Limits  AGE</span><br><span class="line">  ---------                 ----                                     ------------  ----------  ---------------  -------------  ---</span><br><span class="line">  kube-system                 metrics-server-6d684c7b5-8gv8j             0 (0%)        0 (0%)      0 (0%)           0 (0%)         6m10s</span><br><span class="line">  kube-system                 <span class="built_in">local</span>-path-provisioner-58fb86bdfd-h8jkk    0 (0%)        0 (0%)      0 (0%)           0 (0%)         6m10s</span><br><span class="line">  kube-system                 svclb-traefik-9kwxx                        0 (0%)        0 (0%)      0 (0%)           0 (0%)         4m19s</span><br><span class="line">  kube-system                 coredns-d798c9dd-62sb9                     100m (2%)     0 (0%)      70Mi (3%)        170Mi (9%)     6m10s</span><br><span class="line">  kube-system                 traefik-6787cddb4b-p6hs9                   0 (0%)        0 (0%)      0 (0%)           0 (0%)         4m20s</span><br><span class="line">Allocated resources:</span><br><span class="line">  (Total limits may be over 100 percent, i.e., overcommitted.)</span><br><span class="line">  Resource           Requests   Limits</span><br><span class="line">  --------         -------- ------</span><br><span class="line">  cpu                100m (2%)  0 (0%)</span><br><span class="line">  memory             70Mi (3%)  170Mi (9%)</span><br><span class="line">  ephemeral-storage  0 (0%)     0 (0%)</span><br><span class="line">Events:</span><br><span class="line">  Type     Reason                   Age                    From                 Message</span><br><span class="line">  ----   ------                 ----                 ----               -------</span><br><span class="line">  Normal   Starting                 6m24s                  kubelet, openwrt     Starting kubelet.</span><br><span class="line">  Warning  InvalidDiskCapacity      6m24s                  kubelet, openwrt     invalid capacity 0 on image filesystem</span><br><span class="line">  Normal   NodeHasSufficientPID     6m23s (x2 over 6m24s)  kubelet, openwrt     Node openwrt status is now: NodeHasSufficientPID</span><br><span class="line">  Normal   NodeHasSufficientMemory  6m23s (x2 over 6m24s)  kubelet, openwrt     Node openwrt status is now: NodeHasSufficientMemory</span><br><span class="line">  Normal   NodeHasNoDiskPressure    6m23s (x2 over 6m24s)  kubelet, openwrt     Node openwrt status is now: NodeHasNoDiskPressure</span><br><span class="line">  Normal   NodeAllocatableEnforced  6m23s                  kubelet, openwrt     Updated Node Allocatable <span class="built_in">limit</span> across pods</span><br><span class="line">  Normal   Starting                 6m23s                  kube-proxy, openwrt  Starting kube-proxy.</span><br><span class="line">  Normal   NodeReady                6m13s                  kubelet, openwrt     Node openwrt status is now: NodeReady</span><br></pre></td></tr></table></figure><h2 id="结束啦"><a href="#结束啦" class="headerlink" title="结束啦"></a>结束啦</h2><p>关于 OpenWrt 最重要的<code>透明代理旁路网关</code> 还没有讲到，稍后再更新一下，毕竟我买了是玩儿 K3s 的😂。总之这个垃圾还是值得捡的，准备再捡几台？部署个 K3s 集群？高可用？五节点？仨 master 俩 node？（逃</p><p>不过意外发现该盒子的 USB 口竟然支持使用 echo 命令来修改 <code>/sys/bus/usb/devices/usb1/power/level</code> 的值来控制 USB 的电源状态，这样从USB 口引出正负极接在继电器上，这就是一个通过网络控制的开关。我在 <code>R6300V2</code> 和 <code>WNDR3700V4</code> 上梦寐以求没有的功能居然在这个破盒子上有。意外收获！</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">╭─root@OpenWrt ~</span><br><span class="line">╰─<span class="comment"># tree /sys/bus/usb/devices/usb1/power/</span></span><br><span class="line">/sys/bus/usb/devices/usb1/power/</span><br><span class="line">├── active_duration</span><br><span class="line">├── autosuspend</span><br><span class="line">├── autosuspend_delay_ms</span><br><span class="line">├── connected_duration</span><br><span class="line">├── control</span><br><span class="line">├── level</span><br><span class="line">├── runtime_active_time</span><br><span class="line">├── runtime_status</span><br><span class="line">├── runtime_suspended_time</span><br><span class="line">├── wakeup</span><br><span class="line">├── wakeup_abort_count</span><br><span class="line">├── wakeup_active</span><br><span class="line">├── wakeup_active_count</span><br><span class="line">├── wakeup_count</span><br><span class="line">├── wakeup_expire_count</span><br><span class="line">├── wakeup_last_time_ms</span><br><span class="line">├── wakeup_max_time_ms</span><br><span class="line">└── wakeup_total_time_ms</span><br></pre></td></tr></table></figure><p>最后祝大家 <strong>Happy Hacking</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;h2 id=&quot;K3s&quot;&gt;&lt;a href=&quot;#K3s&quot;
        
      
    
    </summary>
    
    
      <category term="刷机" scheme="https://blog.502.li/categories/%E5%88%B7%E6%9C%BA/"/>
    
    
      <category term="软路由" scheme="https://blog.502.li/tags/%E8%BD%AF%E8%B7%AF%E7%94%B1/"/>
    
      <category term="OpenWrt" scheme="https://blog.502.li/tags/OpenWrt/"/>
    
      <category term="K3s" scheme="https://blog.502.li/tags/K3s/"/>
    
  </entry>
  
  <entry>
    <title>让图片飞起来 oh-my-webp.sh ！</title>
    <link href="https://blog.502.li/oh-my-webpsh.html"/>
    <id>https://blog.502.li/oh-my-webpsh.html</id>
    <published>2020-03-04T16:00:00.000Z</published>
    <updated>2020-03-05T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>咱来推销 webp server go 啦 （x小声</p></blockquote><h2 id="劝退三连😂"><a href="#劝退三连😂" class="headerlink" title="劝退三连😂"></a>劝退三连😂</h2><ul><li>需要配置 nginx 反向代理（＞﹏＜）</li><li>图片必须放在自己的服务器上，图床不得行 (ﾉ*･ω･)ﾉ</li><li>需要独立的服务器，GitHub page 之类的不得行（╯︿╰）</li></ul><p>不过，对于已经会自由访问互联网的人来说这都不难 (●ˇ∀ˇ●) ，食用过程中有什么疑问的话也可以联系咱，咱会尽自己所能提供一些帮助😘，一起来完善这个开源项目。</p><h2 id="WebP"><a href="#WebP" class="headerlink" title="WebP"></a>WebP</h2><blockquote><p>WebP的有损压缩算法是基于VP8视频格式的帧内编码[17]，并以RIFF作为容器格式。[2] 因此，它是一个具有八位色彩深度和以1:2的比例进行色度子采样的亮度-色度模型（YCbCr 4:2:0）的基于块的转换方案。[18] 不含内容的情况下，RIFF容器要求只需20字节的开销，依然能保存额外的 元数据(metadata)。[2] WebP图像的边长限制为16383像素。</p></blockquote><p>WebP 是一种衍生自 Google VP8 的图像格式，同时支持有损和无损编码。当使用有损模式，它在相同体积提供比 JPG 图像更好的质量；当使用无损模式，它提供比最佳压缩的 PNG 图像更小的体积。简单来说，WebP 图片格式的存在，让我们在 WebP 上展示的图片体积可以有较大幅度的缩小。网站上的图片资源如果使用 WebP，那么自然也会减少这些图片文件的加载时间，也就带来了网站加载性能的提升。关于 webp 图像格式的具体实现细节可以去维基百科或者文末我提到的推荐阅读看一下，总之 webp 很香就是啦 (●’◡’●)</p><h3 id="支持情况"><a href="#支持情况" class="headerlink" title="支持情况"></a>支持情况</h3><p>根据 <a href="https://caniuse.com/#search=webp" target="_blank" rel="noopener">caniuse</a> 的统计情况，主流浏览器（接近80%）都支持 webp 了，如果遇到 Safari 这样的奇葩，咱直接返回原图。IE 浏览器？？</p><p><img src="https://cdn.jsdelivr.net/gh/muzi502/blog/source/img/image-20200306094307271.png" alt="image-20200306094307271"></p><h2 id="webp-sh"><a href="#webp-sh" class="headerlink" title="webp-sh"></a>webp-sh</h2><ul><li>官网 <a href="https://webp.sh" target="_blank" rel="noopener">webp.sh</a></li><li>GitHub <a href="https://github.com/webp-sh" target="_blank" rel="noopener">webp-sh</a></li></ul><p>webp server 顾名思义就是 webp 服务器啦，用于将网站里的图片（jpg、png、jpeg等）转换成 webp 图像编码格式，而且无须修改博客站点内图片的 url ，因此对于访问图片资源的客户端来讲是透明的。主流的 CDN 也支持这样类似的功能，比如 Cloudflare 的 <a href="">Polish</a> ，可以参考 <a href="https://support.cloudflare.com/hc/en-us/articles/360000607372-Using-Cloudflare-Polish-to-compress-images">Using Cloudflare Polish to compress images</a> 。但是天下没有免费的午餐，图片转码与编码这都是要算力的，都是要计算资源的，都是要 CPU 的，都是要花钱的😂。说到底还是穷啊（咱 webp server 是开源免费的。</p><blockquote><p>最重要的一点是——我们访问的 URL 可以完全不用改变，访客访问的依然是 <code>https://image.nova.moe/tsuki/tsuki.jpg</code> ，但是得到的图片格式为：<code>image/webp</code>，而且体积减少了不少。</p></blockquote><p>其实 webp server 有多种语言都实现了，并且这些仓库还都放在了 <a href="https://github.com/webp-sh" target="_blank" rel="noopener">webp-sh</a> 该 Organizations 下。不过咱比较喜欢 golang 所以就推荐 webp server go 啦😂，隔壁的 webp server rust 别打我啊（逃</p><blockquote><p>这个工具就是由 <a href="https://nova.moe/" target="_blank" rel="noopener">Nova 童鞋</a>、 <a href="https://www.bennythink.com" target="_blank" rel="noopener">Benny</a> 、<a href="https://blog.0xbbc.com/" target="_blank" rel="noopener">cocoa</a> 以及 <a href="https://blog.502.li/">muzi</a> 小盆友一起鼓捣的 webp_server_go 啦！</p></blockquote><ul><li><a href="https://github.com/webp-sh/webp_server_go" target="_blank" rel="noopener">webp_server_go</a></li><li><a href="https://github.com/webp-sh/webp_server_rs" target="_blank" rel="noopener">webp_server_rs</a></li><li><a href="https://github.com/webp-sh/webp_server_node" target="_blank" rel="noopener">webp_server_node</a></li><li><a href="https://github.com/webp-sh/webp_server_java" target="_blank" rel="noopener">webp_server_java</a></li><li><a href="https://github.com/webp-sh/webp_server_python" target="_blank" rel="noopener">webp_server_python</a></li></ul><h2 id="食用指南"><a href="#食用指南" class="headerlink" title="食用指南"></a>食用指南</h2><h3 id="1-下载"><a href="#1-下载" class="headerlink" title="1. 下载"></a>1. 下载</h3><p>首先到 <a href="https://github.com/webp-sh/webp_server_go/releases" target="_blank" rel="noopener">release</a> 页面下载已经编译好的二进制文件或者根据自己的发行版选择下载 rpm 或 deb 包，在此要注意选择下载符合自己的 arch 和 OS。</p><p>至于安装路径，我个人更倾向于放在 <code>/opt/</code> 目录下，因为这个目录下的东西都是自己安装的，而且也不依赖于特定的发行版，方便博客迁移（搬家），搬家的时候直接打包 <code>/opt</code> 目录，然后 scp 一下就卷铺盖走人，多方便呀😂。</p><h3 id="2-配置"><a href="#2-配置" class="headerlink" title="2. 配置"></a>2. 配置</h3><p>食用 webp-server-go 之前选准备好一个 <code>config.json</code> 配置文件，如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"HOST"</span>: <span class="string">"127.0.0.1"</span>,</span><br><span class="line">  <span class="attr">"PORT"</span>: <span class="string">"3333"</span>,</span><br><span class="line">  <span class="attr">"QUALITY"</span>: <span class="string">"80"</span>,</span><br><span class="line">  <span class="attr">"IMG_PATH"</span>: <span class="string">"/var/www/hexo"</span>,</span><br><span class="line">  <span class="attr">"EXHAUST_PATH"</span>: <span class="string">"./dist"</span>,</span><br><span class="line">  <span class="attr">"ALLOWED_TYPES"</span>: [<span class="string">"jpg"</span>,<span class="string">"png"</span>,<span class="string">"jpeg"</span>,<span class="string">"bmp"</span>,<span class="string">"gif"</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>HOST：对于 webp server 服务来讲只需要监听 127.0.0.1 这个本机地址就可以了，稍后使用 nginx 反向代理一下。</li><li>PORT：就是 webp server 服务监听的的端口号，根据自己需求修改</li><li>QUALITY：编码的质量，一般推荐 75 ，不过使用 80 也是不错的。</li><li>IMG_PATH：网站的根目录，根目录，根目录，一定要配置你图片 url 的根目录。</li><li>EXHAUST_PATH：转换后的 webp 图片文件存放位置，提前创建好。</li><li>ALLOWED_TYPES：允许转码的图片格式，目前支持这几种。</li></ul><p>接下来再配置以下 nginx ，下面以我的 hexo 博客为例，hugo 也同样如此。再添加一块 localtion 字段即可，如果你修改了默认端口号的话不要忘记修改为你改之后的端口号。</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">location</span> <span class="regexp">~* \.(png|jpg|jpeg)$</span> &#123;</span><br><span class="line">    <span class="attribute">proxy_pass</span> http://127.0.0.1:3333;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>/etc/nginx/conf.d/blog.conf</code></p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">server</span> &#123;</span><br><span class="line">        <span class="attribute">listen</span> <span class="number">80</span>;</span><br><span class="line">        <span class="attribute">listen</span> [::]:<span class="number">80</span>;</span><br><span class="line">        <span class="attribute">server_name</span>  blog.<span class="number">502</span>.li;</span><br><span class="line">        <span class="attribute">set</span> <span class="variable">$base</span> /var/www/hexo/public;</span><br><span class="line">        <span class="attribute">root</span> <span class="variable">$base</span>/;</span><br><span class="line">        <span class="attribute">location</span> / &#123;</span><br><span class="line">            <span class="attribute">index</span>  index.html;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="attribute">location</span> <span class="regexp">~* \.(png|jpg|jpeg)$</span> &#123;</span><br><span class="line">            <span class="attribute">proxy_pass</span> http://127.0.0.1:3333;</span><br><span class="line">            <span class="attribute">proxy_set_header</span> X-Real-IP <span class="variable">$remote_addr</span>;</span><br><span class="line">            <span class="attribute">proxy_hide_header</span> X-Powered-By;</span><br><span class="line">            <span class="attribute">proxy_set_header</span> HOST <span class="variable">$http_host</span>;</span><br><span class="line">            <span class="attribute">add_header</span> Cache-Control <span class="string">'no-store, no-cache, must-revalidate, proxy-revalidate, max-age=0'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不过在此需要注意，nginx 的 location 字段的路径一定要和 webp server <code>config.json</code> 里的 <code>IMG_PATH</code> 相对应，不然会导致请求资源的 uri 与 webp server 转换后的文件路径不一致而导致资源 404 。还有一点就是 location 那里不能仅仅添加 <code>proxy_pass http://127.0.0.1:3333;</code> ，这样浏览器的 UA 会被 nginx 给吃掉😄，nginx 将请求 proxy 给 webp server 后无法从 headers 那里获取到 UA ，而导致 <code>Safari</code> 浏览器无法正常输出原图。所以以下几行添加在 <code>proxy_pass</code> 下面是必须的：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">proxy_set_header</span> HOST <span class="variable">$http_host</span>;</span><br><span class="line"><span class="attribute">add_header</span> Cache-Control <span class="string">'no-store, no-cache, must-revalidate, proxy-revalidate, max-age=0'</span>;</span><br></pre></td></tr></table></figure><p>此外感谢好心读者的提醒才发现这个 bug 😘</p><p><img src="https://cdn.jsdelivr.net/gh/muzi502/blog/source/img/image-20200307102856702.png" alt="image-20200307102856702"></p><h3 id="3-启动"><a href="#3-启动" class="headerlink" title="3.启动"></a>3.启动</h3><p>手动运行起来很简单，<code>./webp-server -config /path/to/config.json</code> ，如果该服务挂掉了资源就 gg 了，所以还是选用一种稳定持久化的运行方式。咱推荐使用 systemd 来启动，这样 webp server 服务挂掉了也会自动拉起重启一下。首先要创建或修改一下 <code>webps.service</code> 配置文件。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=WebP Server</span><br><span class="line">Documentation=https://github.com/webp-sh/webp_server_go</span><br><span class="line">After=nginx.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=simple</span><br><span class="line">StandardError=journal</span><br><span class="line">AmbientCapabilities=CAP_NET_BIND_SERVICE</span><br><span class="line">WorkingDirectory=/opt/webps</span><br><span class="line">ExecStart=/opt/webps/webp-server --config /opt/webps/config.json</span><br><span class="line">ExecReload=/bin/<span class="built_in">kill</span> -HUP <span class="variable">$MAINPID</span></span><br><span class="line">Restart=always</span><br><span class="line">RestartSec=3s</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure><p>修改一下 <code>ExecStart=/opt/webps/webp-server --config /opt/webps/config.json</code> 和 <code>WorkingDirectory=/opt/webps</code> 对应的路径。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cp webps.service /lib/systemd/system/</span><br><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl <span class="built_in">enable</span> webps.service</span><br><span class="line">systemctl start webps.service</span><br></pre></td></tr></table></figure><h3 id="4-预加载"><a href="#4-预加载" class="headerlink" title="4.预加载"></a>4.预加载</h3><p>webp-server-go 有个预加载的功能，就是提前将全部的图片资源进行一次转换，这样再次访问图片资源的时候就不必再进行转换，而直接使用已经转换后的 webp 文件即可。这相当于一次 “缓存” 。</p><p>使用 <code>./webp-server -jobs 1 -config config.json -prefetch</code> 来进行一次预加载，其中 jobs 后面的数字为你 CPU 的核心数，也可以不用加默认使用全部核心。</p><h2 id="benchmark"><a href="#benchmark" class="headerlink" title="benchmark"></a>benchmark</h2><p>说到性能，咱必须得进行一次压测才能放心大胆地推荐各位食用 webp server go 啦，下面得就是咱的测试数据样例。图片的测试样本是咱使用 <a href="https://github.com/Tsuk1ko/pxder" target="_blank" rel="noopener">pxder</a> 爬下来的，总共 10600 张图片，总大小 11.1 GB。如果你也需要这些测试样本的话可以私聊咱发给你。下面就是真实的测试数据。测试环境是 8 core ×3.4G Hz，测试版本为 <a href="https://github.com/webp-sh/webp_server_go/releases/tag/0.1.0" target="_blank" rel="noopener">v0.1.0</a> ，使用的是默认参数配置。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"HOST"</span>: <span class="string">"127.0.0.1"</span>,</span><br><span class="line">  <span class="attr">"PORT"</span>: <span class="string">"3333"</span>,</span><br><span class="line">  <span class="attr">"QUALITY"</span>: <span class="string">"80"</span>,</span><br><span class="line">  <span class="attr">"IMG_PATH"</span>: <span class="string">"./src"</span>,</span><br><span class="line">  <span class="attr">"EXHAUST_PATH"</span>: <span class="string">"./dist"</span>,</span><br><span class="line">  <span class="attr">"ALLOWED_TYPES"</span>: [<span class="string">"jpg"</span>,<span class="string">"png"</span>,<span class="string">"jpeg"</span>,<span class="string">"bmp"</span>,<span class="string">"gif"</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/muzi502/blog/source/img/image-20200304191400500.png" alt="image-20200304191400500"></p><h3 id="测试结果"><a href="#测试结果" class="headerlink" title="测试结果"></a>测试结果</h3><table><thead><tr><th align="center">file_size_range</th><th align="center">file_num</th><th align="center">src_size</th><th align="center">dist_size</th><th align="center">total</th><th align="center">user</th><th align="center">system</th><th align="center">cpu</th><th align="center">core</th></tr></thead><tbody><tr><td align="center">(10KB,500KB)</td><td align="center">4600</td><td align="center">1.3G</td><td align="center">310M</td><td align="center">1:44.49</td><td align="center">905.41s</td><td align="center">9.55s</td><td align="center">875%</td><td align="center">8</td></tr><tr><td align="center">(500KB,1MB)</td><td align="center">3500</td><td align="center">2.4G</td><td align="center">361M</td><td align="center">2:04.81</td><td align="center">1092.50s</td><td align="center">7.98s</td><td align="center">881%</td><td align="center">8</td></tr><tr><td align="center">(1MB,4MB)</td><td align="center">2000</td><td align="center">3.8G</td><td align="center">342M</td><td align="center">2:32.64</td><td align="center">1345.73s</td><td align="center">10.84s</td><td align="center">888%</td><td align="center">8</td></tr><tr><td align="center">(4MB,32MB)</td><td align="center">500</td><td align="center">3.6G</td><td align="center">246M</td><td align="center">1:44.53</td><td align="center">916.91s</td><td align="center">12.03s</td><td align="center">888%</td><td align="center">8</td></tr></tbody></table><h4 id="不同核心-total-对比"><a href="#不同核心-total-对比" class="headerlink" title="不同核心 total 对比"></a>不同核心 total 对比</h4><table><thead><tr><th align="center">file_size_range</th><th align="center">file_num</th><th align="center">src_size</th><th align="center">dist_size</th><th align="center">8</th><th align="center">4</th><th align="center">2</th><th align="center">1</th></tr></thead><tbody><tr><td align="center">(10KB,500KB)</td><td align="center">4600</td><td align="center">1.3G</td><td align="center">310M</td><td align="center">1:44.49</td><td align="center">2:18.49</td><td align="center">3:36.05</td><td align="center">5:20.88</td></tr><tr><td align="center">(500KB,1MB)</td><td align="center">3500</td><td align="center">2.4G</td><td align="center">361M</td><td align="center">2:04.81</td><td align="center">2:49.46</td><td align="center">4:16.41</td><td align="center">6:28.97</td></tr><tr><td align="center">(1MB,4MB)</td><td align="center">2000</td><td align="center">3.8G</td><td align="center">342M</td><td align="center">2:32.64</td><td align="center">3:26.18</td><td align="center">5:22.15</td><td align="center">7:53.45</td></tr><tr><td align="center">(4MB,32MB)</td><td align="center">500</td><td align="center">3.6G</td><td align="center">246M</td><td align="center">1:44.53</td><td align="center">2:21.22</td><td align="center">3:39.16</td><td align="center">5:28.65</td></tr></tbody></table><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">### 10KB-500KB</span></span><br><span class="line">./webp-server -<span class="built_in">jobs</span> 1 -config config.json -prefetch  632.77s user 11.23s system 200% cpu 5:20.88 total</span><br><span class="line">./webp-server -<span class="built_in">jobs</span> 2 -config config.json -prefetch  639.31s user 8.77s system 299% cpu 3:36.05 total</span><br><span class="line">./webp-server -<span class="built_in">jobs</span> 4 -config config.json -prefetch  676.17s user 8.12s system 494% cpu 2:18.49 total</span><br><span class="line">./webp-server -<span class="built_in">jobs</span> 8 -config config.json -prefetch  905.41s user 9.55s system 875% cpu 1:44.49 total</span><br><span class="line"></span><br><span class="line"><span class="comment">### 500KB-1MB</span></span><br><span class="line"></span><br><span class="line">./webp-server -<span class="built_in">jobs</span> 1 -config config.json -prefetch  767.45s user 10.14s system 199% cpu 6:28.97 total</span><br><span class="line">./webp-server -<span class="built_in">jobs</span> 2 -config config.json -prefetch  778.00s user 8.62s system 295% cpu 4:16.41 total</span><br><span class="line">./webp-server -<span class="built_in">jobs</span> 4 -config config.json -prefetch  831.38s user 7.62s system 495% cpu 2:49.46 total</span><br><span class="line">./webp-server -<span class="built_in">jobs</span> 8 -config config.json -prefetch  1092.50s user 7.98s system 881% cpu 2:04.81 total</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">### 1MB-4MB</span></span><br><span class="line"></span><br><span class="line">./webp-server -<span class="built_in">jobs</span> 1 -config config.json -prefetch  934.22s user 12.45s system 199% cpu 7:53.45 total</span><br><span class="line">./webp-server -<span class="built_in">jobs</span> 2 -config config.json -prefetch  958.41s user 9.41s system 300% cpu 5:22.15 total</span><br><span class="line">./webp-server -<span class="built_in">jobs</span> 4 -config config.json -prefetch  1010.56s user 8.05s system 494% cpu 3:26.18 total</span><br><span class="line">./webp-server -<span class="built_in">jobs</span> 8 -config config.json -prefetch  1345.73s user 10.84s system 888% cpu 2:32.64 total</span><br><span class="line"></span><br><span class="line"><span class="comment">### 4MB-32MB</span></span><br><span class="line"></span><br><span class="line">./webp-server -<span class="built_in">jobs</span> 1 -config config.json -prefetch  641.78s user 10.77s system 187% cpu 5:28.65 total</span><br><span class="line">./webp-server -<span class="built_in">jobs</span> 2 -config config.json -prefetch  643.19s user 9.73s system 297% cpu 3:39.16 total</span><br><span class="line">./webp-server -<span class="built_in">jobs</span> 4 -config config.json -prefetch  688.05s user 9.91s system 494% cpu 2:21.22 total</span><br><span class="line">./webp-server -<span class="built_in">jobs</span> 8 -config config.json -prefetch  916.91s user 12.03s system 888% cpu 1:44.53 total</span><br></pre></td></tr></table></figure><h3 id="转换前后大小对比"><a href="#转换前后大小对比" class="headerlink" title="转换前后大小对比"></a>转换前后大小对比</h3><p>以下咱就截取一小部分的测试结果，完整的日志放在了我的 gist 上 <strong><a href="https://gist.github.com/muzi502/4f7c4128895ac3f438e7a183df219661" target="_blank" rel="noopener">webp-server-go_test.log</a></strong> 。图片都是真是的数据，根据文件名的 ID 可以在 pixiv.net 上找到源文件，相信老司机们都懂得😂。</p><h4 id="10KB-500KB"><a href="#10KB-500KB" class="headerlink" title="(10KB,500KB)"></a>(10KB,500KB)</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">./webp-server -<span class="built_in">jobs</span> 8 -config config.json -prefetch</span><br><span class="line">905.41s user 9.55s system 875% cpu 1:44.49 total</span><br><span class="line"></span><br><span class="line">src    distnum</span><br><span class="line">1.3G310M4600</span><br><span class="line">63304866.png495K40K</span><br><span class="line">40881097.jpg495K118K</span><br><span class="line">21045662.jpg495K94K</span><br><span class="line">67888534.png495K73K</span><br><span class="line">50136421.jpg495K62K</span><br><span class="line">72636668.png495K113K</span><br><span class="line">55156014.jpg495K78K</span><br><span class="line">76671894.png495K59K</span><br><span class="line">64709121.png495K67K</span><br><span class="line">78336881.jpg495K77K</span><br><span class="line">57090512.png494K35K</span><br><span class="line">72153105.jpg494K64K</span><br><span class="line">62457185.png494K39K</span><br><span class="line">44892218.png494K96K</span><br><span class="line">39599640.jpg494K39K</span><br><span class="line">21428544.jpg493K76K</span><br><span class="line">65293876.jpg493K68K</span><br><span class="line">76098632.png493K80K</span><br><span class="line">65418239.jpg493K119K</span><br><span class="line">17900553.jpg493K51K</span><br><span class="line">61511853.jpg493K123K</span><br><span class="line">77984504.png493K56K</span><br><span class="line">54667116.jpg493K56K</span><br><span class="line">75357235.jpg493K67K</span><br><span class="line">21085426.jpg492K55K</span><br></pre></td></tr></table></figure><h4 id="500KB-1MB"><a href="#500KB-1MB" class="headerlink" title="(500KB,1MB)"></a>(500KB,1MB)</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">./webp-server -<span class="built_in">jobs</span> 8 -config config.json -prefetch</span><br><span class="line">1092.50s user 7.98s system 881% cpu 2:04.81 total</span><br><span class="line"></span><br><span class="line">srcdistnum</span><br><span class="line">2.4G361M3500</span><br><span class="line"></span><br><span class="line">44937735.png974K74K</span><br><span class="line">56343106.png974K49K</span><br><span class="line">51320479.png974K73K</span><br><span class="line">68346957.jpg974K112K</span><br><span class="line">74882964.png974K150K</span><br><span class="line">76640395.jpg974K75K</span><br><span class="line">62034004.jpg974K110K</span><br><span class="line">59897148.jpg974K147K</span><br><span class="line">46287856.jpg973K68K</span><br><span class="line">54674488.jpg973K111K</span><br><span class="line">42265521.png973K51K</span><br><span class="line">40261146.jpg973K135K</span><br><span class="line">76815098.png973K77K</span><br><span class="line">57095484.png973K99K</span><br><span class="line">65354070.jpg973K206K</span><br><span class="line">24130390.jpg973K121K</span><br><span class="line">73753170.jpg972K106K</span><br><span class="line">64066680.jpg972K92K</span><br><span class="line">72175991.png972K49K</span><br><span class="line">53402985.png972K114K</span><br><span class="line">70710923.png971K63K</span><br><span class="line">76242996.png971K63K</span><br><span class="line">65736419.jpg971K728K</span><br><span class="line">70095856.png971K91K</span><br><span class="line">64284761.png971K53K</span><br><span class="line">73907152.jpg971K101K</span><br><span class="line">62120962.png970K85K</span><br><span class="line">22003560.png970K76K</span><br><span class="line">77293789.jpg970K116K</span><br><span class="line">68647243.png970K46K</span><br><span class="line">54618347.png970K59K</span><br><span class="line">79602155.jpg969K120K</span><br><span class="line">55491641.jpg968K119K</span><br><span class="line">53473372.png968K45K</span><br><span class="line">77569729.jpg968K69K</span><br><span class="line">57420240.png968K61K</span><br><span class="line">69798500.png968K74K</span><br><span class="line">63487148.png968K47K</span><br><span class="line">79687107.jpg967K164K</span><br><span class="line">70081772.jpg966K129K</span><br><span class="line">79623240.jpg966K133K</span><br><span class="line">72535236.jpg966K160K</span><br><span class="line">47680545.png966K162K</span><br></pre></td></tr></table></figure><h4 id="1MB-4MB"><a href="#1MB-4MB" class="headerlink" title="(1MB,4MB)"></a>(1MB,4MB)</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">./webp-server -<span class="built_in">jobs</span> 8 -config config.json -prefetch</span><br><span class="line">1345.73s user 10.84s system 888% cpu 2:32.64 total</span><br><span class="line"></span><br><span class="line">src  distnum</span><br><span class="line">3.8G342M2000</span><br><span class="line"></span><br><span class="line">73839511.png4.1M293K</span><br><span class="line">73839511.png4.1M293K</span><br><span class="line">66504933.png4.1M107K</span><br><span class="line">78316050.png4.1M319K</span><br><span class="line">74264931.png4.1M330K</span><br><span class="line">74412671.png4.1M186K</span><br><span class="line">77414892.png4.1M227K</span><br><span class="line">76442741.png4.0M191K</span><br><span class="line">71330750.png4.0M199K</span><br><span class="line">78361206.png4.0M153K</span><br><span class="line">68763693.png4.0M233K</span><br><span class="line">67222487.png4.0M368K</span><br><span class="line">68560466.png4.0M186K</span><br><span class="line">72437850.png4.0M282K</span><br><span class="line">67767752.png4.0M203K</span><br><span class="line">73597995.png4.0M432K</span><br><span class="line">71506633.png4.0M88K</span><br><span class="line">77601042.png4.0M726K</span><br><span class="line">77033762.png4.0M261K</span><br><span class="line">73436647.jpg4.0M514K</span><br><span class="line">78099751.png4.0M283K</span><br><span class="line">73165937.png4.0M202K</span><br><span class="line">74379006.png4.0M300K</span><br><span class="line">79274246.png4.0M191K</span><br><span class="line">69701132.png4.0M129K</span><br><span class="line">67455430.jpg3.9M397K</span><br><span class="line">73651880.png3.9M183K</span><br><span class="line">79152655.png3.9M298K</span><br><span class="line">73117385.png3.9M258K</span><br><span class="line">70281950.png3.9M314K</span><br><span class="line">68501346.png3.9M203K</span><br><span class="line">78895125.png3.9M310K</span><br><span class="line">70159814.png3.9M156K</span><br><span class="line">70764048.jpg3.9M437K</span><br></pre></td></tr></table></figure><h4 id="4MB-32MB"><a href="#4MB-32MB" class="headerlink" title="(4MB,32MB)"></a>(4MB,32MB)</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">./webp-server -<span class="built_in">jobs</span> 8 -config config.json -prefetch</span><br><span class="line">916.91s user 12.03s system 888% cpu 1:44.53 total</span><br><span class="line"></span><br><span class="line">srcdistnum</span><br><span class="line">3.8G3.8G500</span><br><span class="line"></span><br><span class="line">78467499.png32M2.8M</span><br><span class="line">79620324.png32M</span><br><span class="line">74975502.png32M3.0M</span><br><span class="line">74902740.png31M2.6M</span><br><span class="line">77032574.png31M2.5M</span><br><span class="line">77673519.png30M2.3M</span><br><span class="line">77298781.png29M1.4M</span><br><span class="line">77959551.png27M1.5M</span><br><span class="line">69987155.png26M649K</span><br><span class="line">74432253.png25M1.6M</span><br><span class="line">78994948.png25M923K</span><br><span class="line">77218195.png24M1.6M</span><br><span class="line">72379562.png22M251K</span><br><span class="line">77559996.png22M1.9M</span><br><span class="line">71522636.png22M1.3M</span><br><span class="line">78236671.png21M1.7M</span><br><span class="line">78033540.jpg20M2.7M</span><br><span class="line">70906047.png19M677K</span><br><span class="line">72498744.png19M882K</span><br><span class="line">73977640.png19M523K</span><br><span class="line">78757823.png18M1.5M</span><br><span class="line">71588979.png18M1.2M</span><br><span class="line">75747535.png17M1.2M</span><br><span class="line">71504158.png17M1.2M</span><br><span class="line">76969768.png17M1.4M</span><br><span class="line">77995994.png17M568K</span><br><span class="line">75340699.png17M1.4M</span><br><span class="line">69821163.png16M1.1M</span><br><span class="line">70050613.png16M1.1M</span><br><span class="line">76559411.png15M1.7M</span><br><span class="line">76576885.png15M853K</span><br><span class="line">75640746.png15M1.4M</span><br><span class="line">78188732.png15M1.4M</span><br><span class="line">73355141.png15M589K</span><br><span class="line">75977096.png15M1.4M</span><br><span class="line">72840608.jpg15M1.8M</span><br><span class="line">75665779.png14M1.5M</span><br><span class="line">77898275.png14M1.2M</span><br><span class="line">79663534.png13M1.2M</span><br><span class="line">76539246.png13M1.2M</span><br><span class="line">70598104.png13M840K</span><br><span class="line">78348611.jpg13M2.7M</span><br></pre></td></tr></table></figure><h2 id="实际效果"><a href="#实际效果" class="headerlink" title="实际效果"></a>实际效果</h2><p>为了做个对比，咱使用  <code>hexo.502.li</code> 这个域名为对照组，即输出源文件，使用 <code>blog.502.li</code> 这个域名为实验组加上 webp server 来测试，各位读者也可以分别访问这两个域名来实际体验之间的差别，肉眼可见😂。</p><p>选择两篇图片比较多的博客，测试链接为 ：</p><ul><li><code>https://blog.502.li/2020-Lunar-New-Year.html</code></li><li><code>https://blog.502.li/wd-hc310-dc-hdd.html</code></li><li><code>https://hexo.502.li/2020-Lunar-New-Year.html</code></li><li><code>https://hexo.502.li/wd-hc310-dc-hdd.html</code></li></ul><h2 id="推荐阅读"><a href="#推荐阅读" class="headerlink" title="推荐阅读"></a>推荐阅读</h2><ul><li><a href="https://nova.moe/re-introduce-webp-server/" target="_blank" rel="noopener">让站点图片加载速度更快——引入 WebP Server 无缝转换图片为 WebP</a></li><li><a href="https://await.moe/2020/02/note-about-encountered-memory-changes-for-no-reason-in-golang/" target="_blank" rel="noopener">记 Golang 下遇到的一回「毫无由头」的内存更改</a></li><li><a href="https://await.moe/2020/02/webp-server-in-rust/" target="_blank" rel="noopener">WebP Server in Rust</a></li><li><a href="https://www.bennythink.com/flying-webp.html" target="_blank" rel="noopener">个人网站无缝切换图片到 webp</a></li><li><a href="https://halo.run/archives/halo-and-webp" target="_blank" rel="noopener">优雅的让 Halo 支持 webp 图片输出</a></li><li><a href="https://vince.xin/2018/09/12/%E5%89%8D%E7%AB%AF%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E2%80%94%E2%80%94%E4%BD%BF%E7%94%A8webp%E6%9D%A5%E4%BC%98%E5%8C%96%E4%BD%A0%E7%9A%84%E5%9B%BE%E7%89%87/" target="_blank" rel="noopener">前端性能优化——使用webp来优化你的图片xx</a></li><li><a href="https://aotu.io/notes/2016/06/23/explore-something-of-webp/index.html" target="_blank" rel="noopener">探究WebP一些事儿</a></li><li><a href="https://developers.google.com/speed/webp" target="_blank" rel="noopener">A new image format for the Web</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;blockquote&gt;
&lt;p&gt;咱来推销 webp
        
      
    
    </summary>
    
    
      <category term="技术" scheme="https://blog.502.li/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="博客" scheme="https://blog.502.li/tags/%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
  <entry>
    <title>Linux 网络和 iptables 运行原理</title>
    <link href="https://blog.502.li/linux-net-and-iptables.html"/>
    <id>https://blog.502.li/linux-net-and-iptables.html</id>
    <published>2020-03-01T16:00:00.000Z</published>
    <updated>2020-03-01T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近参加了一场视频会议面试，虽然结果可能不太理想，但还是发现自己对技术细节钻研的不够深，一些很基础性的知识点并没有形成一个系统性的知识架构。比如 TCP 和 UDP 的区别，这是再简单不过的问题。虽然平时都知道 TCP 应用于哪些场景，UDP 应用与哪些场景，但二者之间的细节，还是没能仔细地深入研究。所以从现在开始从新学习一下一些基础性的东西，补足一下欠下的知识😥。不过这次面试也让我意识到，我是该离开这个安逸的环境了，再过几年就要三十而立了，而这几年也正是技术积累沉淀的黄金时代，希望珍惜这段时光踏踏实实研究技术。</p><h2 id="Linux-协议栈"><a href="#Linux-协议栈" class="headerlink" title="Linux 协议栈"></a>Linux 协议栈</h2><p>在讲解 iptables 之前要回顾一下 Linux 接收数据包和发送数据包的流程，才能理解 iptables 在 Linux 网络协议栈中的位置和作用。去年的时候听了 Go 夜读的  <a href="https://github.com/developer-learning/night-reading-go/issues/506" target="_blank" rel="noopener">【Go 夜读】 网络知识十全大补丸</a> ，推荐去看一下<a href="https://www.youtube.com/watch?v=30wCahZEjNg" target="_blank" rel="noopener">YouTube【Go 夜读】#68 网络知识十全大补丸</a>。</p><blockquote><p>后端工程师在工作中经常会遇到计算机网络方面的问题，网络对多数人来说还是一个黑盒子，本次技术分享从常见的网络硬件、企业和数据中心的网络拓扑、Linux协议栈和防火墙等基础网络知识开始介绍，一直讲到TCP和HTTP这些年的技术演进路线和未来趋势。</p></blockquote><h3 id="收包流程"><a href="#收包流程" class="headerlink" title="收包流程"></a>收包流程</h3><h4 id="1-数据包到达网卡-NIC-Network-Interface-Card"><a href="#1-数据包到达网卡-NIC-Network-Interface-Card" class="headerlink" title="1. 数据包到达网卡 NIC(Network Interface Card)"></a>1. 数据包到达网卡 NIC(Network Interface Card)</h4><h4 id="2-NIC-检验-MAC-网卡-网卡非混杂模式-和帧的校验字段-FCS"><a href="#2-NIC-检验-MAC-网卡-网卡非混杂模式-和帧的校验字段-FCS" class="headerlink" title="2. NIC 检验 MAC 网卡(网卡非混杂模式)和帧的校验字段 FCS"></a>2. NIC 检验 MAC 网卡(网卡非混杂模式)和帧的校验字段 FCS</h4><p>NIC 会校验收到数据包的目的 MAC 地址是不是自己的 MAC 地址，在网卡非混杂模式下，MAC 地址不是自己的数据包通常就会丢弃。在开启混杂模式之后所有数据包都会是接收处理。</p><p>使用非混杂模式的场景：</p><ul><li>抓包</li><li>虚拟机</li><li>抓包程序会把网卡设置为非混杂模式，因此抓包程序需要  root 权限，没有 root 权限无法修改硬件设备的配置。</li></ul><p>校验完 MAC 地址之后 NIC 还会校验帧的校验字段 FCS，一次来确保接收到的数据包是正确的，如果校验失败就直接丢弃数据包</p><h4 id="3-NIC-通过-DMA-将数据包放入提前映射好的内存区域"><a href="#3-NIC-通过-DMA-将数据包放入提前映射好的内存区域" class="headerlink" title="3. NIC 通过 DMA 将数据包放入提前映射好的内存区域"></a>3. NIC 通过 DMA 将数据包放入提前映射好的内存区域</h4><p>DMA：英文拼写是 “Direct Memory Access” ，翻译成中文就是直接内存访问。DMA 允许网络设备将数据包数据直接移动到系统内存中, 从而降低 CPU 利用率。</p><p>正常情况下，一个网络数据包从网卡到应用程序需要经过如下的过程：数据从网卡通过 DMA 等方式传到内核开辟的缓冲区，然后从内核空间拷贝到用户态空间，在 Linux 内核协议栈中，这个耗时操作甚至占到了数据包整个处理流程的 57.1%。</p><h4 id="4-NIC-将数据包的引用放入接收的-ring-buffer-（环形缓冲区）队列-rx-中"><a href="#4-NIC-将数据包的引用放入接收的-ring-buffer-（环形缓冲区）队列-rx-中" class="headerlink" title="4. NIC 将数据包的引用放入接收的 ring buffer （环形缓冲区）队列 rx 中"></a>4. NIC 将数据包的引用放入接收的 ring buffer （环形缓冲区）队列 rx 中</h4><h4 id="5-NIC-等待-rx-usecs-的超时时间或者-rx-队列长度达到-rx-frames-后触发硬件中断-IRQ，表示数据包收到了"><a href="#5-NIC-等待-rx-usecs-的超时时间或者-rx-队列长度达到-rx-frames-后触发硬件中断-IRQ，表示数据包收到了" class="headerlink" title="5. NIC 等待 rx-usecs 的超时时间或者 rx 队列长度达到 rx-frames 后触发硬件中断 IRQ，表示数据包收到了"></a>5. NIC 等待 rx-usecs 的超时时间或者 rx 队列长度达到 rx-frames 后触发硬件中断 IRQ，表示数据包收到了</h4><ul><li><p>rx-usecs: 系统内核参数设置的若干微妙的超时时间。</p></li><li><p>rx-frames: 对应的 rx 队列长度。</p></li></ul><p>调整二者参数大一点，中断不频繁，吞吐量会高一些，但实时性会差一些。二者参数调小一些，NIC 中断频繁一些，实时性会高一些，但吞吐量会小一些。</p><h4 id="6-CPU-执行硬件中断和网卡的驱动程序"><a href="#6-CPU-执行硬件中断和网卡的驱动程序" class="headerlink" title="6. CPU 执行硬件中断和网卡的驱动程序"></a>6. CPU 执行硬件中断和网卡的驱动程序</h4><p>CPU 接收硬件中断信号后就停止手里的活，保存上下文，接着去执行网卡的中断程序，网卡的中断程序是网卡的驱动程序提前注册好的，所以接下来会调用网卡的驱动程序。</p><h4 id="7-驱动程序清理硬中断并触发软中断-NET-RX-SOFTIRQ"><a href="#7-驱动程序清理硬中断并触发软中断-NET-RX-SOFTIRQ" class="headerlink" title="7. 驱动程序清理硬中断并触发软中断 NET_RX_SOFTIRQ"></a>7. 驱动程序清理硬中断并触发软中断 NET_RX_SOFTIRQ</h4><p>在此硬件中断就处理完了。在此梳理一些整个中断处理的过程：NIC 引起硬件中断 –&gt; 硬件中断的 handler 将引起软件中断 –&gt; 驱动将处理这个中断，它将报文从环形缓冲区溢出，在内存中分配一个 skb –&gt; 调用 netif_rx(skb) –&gt; 此 skb 将放入 cpu 处理报文的队列中。如果队列满了此包将丢掉。到这为止中断就处理结束。</p><ul><li><strong>linux kernel 在报文处理上的不足</strong></li></ul><blockquote><p>1.<strong>中断处理：</strong>当网络中大量数据包到来时，会产生频繁的硬件中断请求，这些硬件中断可以打断之前较低优先级的软中断或者系统调用的执行过程，如果这种打断频繁的话，将会产生较高的性能开销。<br>2.<strong>内存拷贝</strong>：正常情况下，一个网络数据包从网卡到应用程序需要经过如下的过程：数据从网卡通过 DMA 等方式传到内核开辟的缓冲区，然后从内核空间拷贝到用户态空间，在 Linux 内核协议栈中，这个耗时操作甚至占到了数据包整个处理流程的 57.1%。<br>3.<strong>上下文切换：</strong>频繁到达的硬件中断和软中断都可能随时抢占系统调用的运行，这会产生大量的上下文切换开销。另外，在基于多线程的服务器设计框架中，线程间的调度也会产生频繁的上下文切换开销，同样，锁竞争的耗能也是一个非常严重的问题。<br>4.<strong>局部性失效：</strong>如今主流的处理器都是多个核心的，这意味着一个数据包的处理可能跨多个 CPU 核心，比如一个数据包可能中断在 cpu0，内核态处理在 cpu1，用户态处理在 cpu2，这样跨多个核心，容易造成 CPU 缓存失效，造成局部性失效。如果是 NUMA 架构，更会造成跨 NUMA 访问内存，性能受到很大影响。<br>5.<strong>内存管理：</strong>传统服务器内存页为 4K，为了提高内存的访问速度，避免 cache miss，可以增加 cache 中映射表的条目，但这又会影响 CPU 的检索效率。</p></blockquote><p><code>此处引用</code> <a href="https://github.com/OSH-2019/x-xdp-on-android/blob/master/docs/research.md" target="_blank" rel="noopener">1</a></p><h4 id="8-软中断对网卡进行轮训收包"><a href="#8-软中断对网卡进行轮训收包" class="headerlink" title="8. 软中断对网卡进行轮训收包"></a>8. 软中断对网卡进行轮训收包</h4><ul><li><strong>补充</strong></li></ul><p>因为硬件中断不能被嵌套即不能被打断，所以 NIC 会将硬中断信号清理掉去触发一个软中断，而软中断只需要指令即可触发。</p><ul><li><p>硬中断：硬件信号触发的，比如键盘按键。</p></li><li><p>软中断：CPU 自身指令触发的中断，可以被硬件中断打断。比如系统调用。</p></li></ul><p>中断数量太多的时候，CPU 不断地上下文切换，整个系统的性能将会有所损耗。</p><p>半中断半轮询模式：在软中断里轮询收包。</p><h4 id="9-数据包被放入-qdisc-队列"><a href="#9-数据包被放入-qdisc-队列" class="headerlink" title="9. 数据包被放入 qdisc 队列"></a>9. 数据包被放入 qdisc 队列</h4><p>以前每一个 NIC 一个队列，所有的中断都被一个 CPU 处理，直到后来改进设计出网卡多队列的模型。</p><p>网卡多队列：一个网卡对应多个接收队列，在收到数据包后会对源地址和目的地址做一个 HASH 分配到对各个队列当中去，每一个队列都会有个子中断号，这个子中断号可以分配到不同的 CPU 中去处理。这样可以让 NIC 收到的数据包让多个 CPU 来处理。</p><p>CPU 绑定：一个 NIC 产生多个中断，让多个 CPU 去分担中断的负载。</p><h4 id="10-将数据包送入协议栈，调用-ip-recv"><a href="#10-将数据包送入协议栈，调用-ip-recv" class="headerlink" title="10. 将数据包送入协议栈，调用 ip_recv"></a>10. 将数据包送入协议栈，调用 ip_recv</h4><p>在此数据包就进入了协议栈，调用 ip_recv 进入三层协议栈。</p><p>ip_recv函数 <a href="http://abcdxyzk.github.io/blog/2015/03/04/kernel-net-ip/" target="_blank" rel="noopener">linux TCP/IP协议栈-IP层</a></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* 主要功能：对IP头部合法性进行严格检查，然后把具体功能交给ip_rcv_finish。*/</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">ip_rcv</span><span class="params">(struct sk_buff *skb, struct net_device *dev, struct packet_type *pt, struct net_device *orig_dev)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">iphdr</span> *<span class="title">iph</span>;</span></span><br><span class="line">u32 len;</span><br><span class="line"><span class="comment">/* 网络名字空间，忽略 */</span></span><br><span class="line"><span class="keyword">if</span> (dev-&gt;nd_net != &amp;init_net)</span><br><span class="line"><span class="keyword">goto</span> drop;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> *当网卡处于混杂模式时，收到不是发往该主机的数据包，由net_rx_action()设置。</span></span><br><span class="line"><span class="comment"> *在调用ip_rcv之前，内核会将该数据包交给嗅探器，所以该函数仅丢弃该包。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">if</span> (skb-&gt;pkt_type == PACKET_OTHERHOST)</span><br><span class="line"><span class="keyword">goto</span> drop;</span><br><span class="line"><span class="comment">/* SNMP所需要的统计数据，忽略 */</span></span><br><span class="line">IP_INC_STATS_BH(IPSTATS_MIB_INRECEIVES);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> *ip_rcv是由netif_receive_skb函数调用，如果嗅探器或者其他的用户对数据包需要进</span></span><br><span class="line"><span class="comment"> *进行处理，则在调用ip_rcv之前，netif_receive_skb会增加skb的引用计数，既该引</span></span><br><span class="line"><span class="comment"> *用计数会大于1。若如此次，则skb_share_check会创建sk_buff的一份拷贝。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">if</span> ((skb = skb_share_check(skb, GFP_ATOMIC)) == <span class="literal">NULL</span>) &#123;</span><br><span class="line">IP_INC_STATS_BH(IPSTATS_MIB_INDISCARDS);</span><br><span class="line"><span class="keyword">goto</span> out;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> *pskb_may_pull确保skb-&gt;data指向的内存包含的数据至少为IP头部大小，由于每个</span></span><br><span class="line"><span class="comment"> *IP数据包包括IP分片必须包含一个完整的IP头部。如果小于IP头部大小，则缺失</span></span><br><span class="line"><span class="comment"> *的部分将从数据分片中拷贝。这些分片保存在skb_shinfo(skb)-&gt;frags[]中。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">if</span> (!pskb_may_pull(skb, <span class="keyword">sizeof</span>(struct iphdr)))</span><br><span class="line"><span class="keyword">goto</span> inhdr_error;</span><br><span class="line"><span class="comment">/* pskb_may_pull可能会调整skb中的指针，所以需要重新定义IP头部*/</span></span><br><span class="line">iph = ip_hdr(skb);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> *    RFC1122: 3.1.2.2 MUST silently discard any IP frame that fails the checksum.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *    Is the datagram acceptable?</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *    1.    Length at least the size of an ip header</span></span><br><span class="line"><span class="comment"> *    2.    Version of 4</span></span><br><span class="line"><span class="comment"> *    3.    Checksums correctly. [Speed optimisation for later, skip loopback checksums]</span></span><br><span class="line"><span class="comment"> *    4.    Doesn't have a bogus length</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/* 上面说的很清楚了 */</span></span><br><span class="line"><span class="keyword">if</span> (iph-&gt;ihl &lt; <span class="number">5</span> || iph-&gt;version != <span class="number">4</span>)</span><br><span class="line"><span class="keyword">goto</span> inhdr_error;</span><br><span class="line"><span class="comment">/* 确保IP完整的头部包括选项在内存中 */</span></span><br><span class="line"><span class="keyword">if</span> (!pskb_may_pull(skb, iph-&gt;ihl*<span class="number">4</span>))</span><br><span class="line"><span class="keyword">goto</span> inhdr_error;</span><br><span class="line"></span><br><span class="line">iph = ip_hdr(skb);</span><br><span class="line"><span class="comment">/* 验证IP头部的校验和 */</span></span><br><span class="line"><span class="keyword">if</span> (unlikely(ip_fast_csum((u8 *)iph, iph-&gt;ihl)))</span><br><span class="line"><span class="keyword">goto</span> inhdr_error;</span><br><span class="line"><span class="comment">/* IP头部中指示的IP数据包总长度 */</span></span><br><span class="line">len = ntohs(iph-&gt;tot_len);</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> *确保skb的数据长度大于等于IP头部中指示的IP数据包总长度及数据包总长度必须</span></span><br><span class="line"><span class="comment"> *大于等于IP头部长度。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">if</span> (skb-&gt;len &lt; len) &#123;</span><br><span class="line">IP_INC_STATS_BH(IPSTATS_MIB_INTRUNCATEDPKTS);</span><br><span class="line"><span class="keyword">goto</span> drop;</span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (len &lt; (iph-&gt;ihl*<span class="number">4</span>))</span><br><span class="line"><span class="keyword">goto</span> inhdr_error;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Our transport medium may have padded the buffer out. Now we know it</span></span><br><span class="line"><span class="comment"> * is IP we can trim to the true length of the frame.</span></span><br><span class="line"><span class="comment"> * Note this now means skb-&gt;len holds ntohs(iph-&gt;tot_len).</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="comment">/* 注释说明的很清楚，该函数成功执行完之后，skb-&gt;len = ntohs(iph-&gt;tot_len). */</span></span><br><span class="line"><span class="keyword">if</span> (pskb_trim_rcsum(skb, len)) &#123;</span><br><span class="line">IP_INC_STATS_BH(IPSTATS_MIB_INDISCARDS);</span><br><span class="line"><span class="keyword">goto</span> drop;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Remove any debris in the socket control block */</span></span><br><span class="line"><span class="built_in">memset</span>(IPCB(skb), <span class="number">0</span>, <span class="keyword">sizeof</span>(struct inet_skb_parm));</span><br><span class="line"><span class="comment">/* 忽略与netfilter子系统的交互，调用为ip_rcv_finish(skb) */</span></span><br><span class="line"><span class="keyword">return</span> NF_HOOK(PF_INET, NF_IP_PRE_ROUTING, skb, dev, <span class="literal">NULL</span>,</span><br><span class="line"> ip_rcv_finish);</span><br><span class="line"></span><br><span class="line">inhdr_error:</span><br><span class="line">IP_INC_STATS_BH(IPSTATS_MIB_INHDRERRORS);</span><br><span class="line">drop:</span><br><span class="line">kfree_skb(skb);</span><br><span class="line">out:</span><br><span class="line"><span class="keyword">return</span> NET_RX_DROP;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="11-调用-netfilter-的-PREROUTING-链"><a href="#11-调用-netfilter-的-PREROUTING-链" class="headerlink" title="11. 调用 netfilter 的 PREROUTING 链"></a>11. 调用 netfilter 的 PREROUTING 链</h4><blockquote><p>netfilter： 是 Linux 内核中进行数据包过滤，连接跟踪（Connect Track），网络地址转换（NAT）等功能的主要实现框架；该框架在网络协议栈处理数据包的关键流程中定义了一系列钩子点（Hook 点），并在这些钩子点中注册一系列函数对数据包进行处理。这些注册在钩子点的函数即为设置在网络协议栈内的数据包通行策略，也就意味着，这些函数可以决定内核是接受还是丢弃某个数据包，换句话说，这些函数的处理结果决定了这些网络数据包的“命运”。</p></blockquote><p>在这里就到了内核防火墙<em>ip_rcv</em>函数为网络层向下层开放的入口，数据包通过该函数进入网络层进行处理，该函数主要对上传到网络层的数据包进行前期合法性检查，通过后交由 Netfilter 的钩子节点（IP_PRE_ROUTING）； IP_PRE_ROUTING 会根据预设的规则对数据包进行判决并根据判决结果做相关的处理，比如执行 NAT 转换；</p><h4 id="12-查找路由表，进行转发或者投递到-local"><a href="#12-查找路由表，进行转发或者投递到-local" class="headerlink" title="12. 查找路由表，进行转发或者投递到 local"></a>12. 查找路由表，进行转发或者投递到 local</h4><p>IP_PRE_ROUTING 节点处理完成后，数据包将交由 <code>ip_rcv_finish</code> 处理，该函数根据路由判决结果，决定数据包是交由本机上层应用处理，还是需要进行转发；如果是交由本机处理，则会交由 <code>p_local_deliver</code> 本地上交流程；如果需要转发，则交由 <code>ip_forward</code> 函数走转发流程，IP_FORWARD 节点会对转发数据包进行检查过滤；</p><h4 id="13-对投递到-local-的数据包调用-netfilter-的-LOCAL-IN-链"><a href="#13-对投递到-local-的数据包调用-netfilter-的-LOCAL-IN-链" class="headerlink" title="13. 对投递到 local 的数据包调用 netfilter 的 LOCAL_IN 链"></a>13. 对投递到 local 的数据包调用 netfilter 的 LOCAL_IN 链</h4><h4 id="14-调用四层协议栈，如-tcp-v4-rcv"><a href="#14-调用四层协议栈，如-tcp-v4-rcv" class="headerlink" title="14. 调用四层协议栈，如 tcp_v4_rcv"></a>14. 调用四层协议栈，如 tcp_v4_rcv</h4><h4 id="15-查找到对应的-socket，运行-TCP-的状态机"><a href="#15-查找到对应的-socket，运行-TCP-的状态机" class="headerlink" title="15. 查找到对应的 socket，运行 TCP 的状态机"></a>15. 查找到对应的 socket，运行 TCP 的状态机</h4><p>内核中的五元组：<code>| 协议类型 | 源地址 | 源端口 | 目标地址 | 目的端口 |</code></p><p>将五元组进行 HASH ，根据哈希值找到对应的 socket –&gt; 去运行该 socket 的 TCP 状态机。</p><h4 id="16-将数据放入-TCP-的接收缓冲区中"><a href="#16-将数据放入-TCP-的接收缓冲区中" class="headerlink" title="16. 将数据放入 TCP 的接收缓冲区中"></a>16. 将数据放入 TCP 的接收缓冲区中</h4><h4 id="17-通过-epoll-或者其他轮训方式通知应用程序"><a href="#17-通过-epoll-或者其他轮训方式通知应用程序" class="headerlink" title="17. 通过 epoll 或者其他轮训方式通知应用程序"></a>17. 通过 epoll 或者其他轮训方式通知应用程序</h4><p>epoll：通过 epoll 监听可读事件，数据包丢到接收缓冲区的时候就有一个可读的事件，epoll 就会挂一个钩子，可读事件就会调用 epoll 这个钩子，然后将可读事件放入到可读队列中，接着通知到应用程序。</p><p>select：</p><h4 id="18-应用程序读取程序"><a href="#18-应用程序读取程序" class="headerlink" title="18. 应用程序读取程序"></a>18. 应用程序读取程序</h4><p>通过 read()函数读取数据？</p><h3 id="发包流程"><a href="#发包流程" class="headerlink" title="发包流程"></a>发包流程</h3><h4 id="1-应用数据发送程序"><a href="#1-应用数据发送程序" class="headerlink" title="1. 应用数据发送程序"></a>1. 应用数据发送程序</h4><p>调用 send() 函数，将数据从应用层拷贝到内核中。</p><h4 id="2-TCP-为发送的数据申请-skb"><a href="#2-TCP-为发送的数据申请-skb" class="headerlink" title="2. TCP 为发送的数据申请 skb"></a>2. TCP 为发送的数据申请 skb</h4><p>在 Linux 内核中，系统使用 <code>sk_buff</code> 数据结构对数据包进行存储和管理。在数据包接收过程中，该数据结构从网卡驱动收包开始，一直贯穿到内核网络协议栈的顶层，直到用户态程序从内核获取数据。</p><h4 id="3-构建-TCP-头部，如-src-和-dst-的-port，checksum"><a href="#3-构建-TCP-头部，如-src-和-dst-的-port，checksum" class="headerlink" title="3. 构建 TCP 头部，如 src 和 dst 的 port，checksum"></a>3. 构建 TCP 头部，如 src 和 dst 的 port，checksum</h4><h4 id="4-调用第三层协议，构建-IP-头部，调用-netfilter-的-LOCAL-OUT-链"><a href="#4-调用第三层协议，构建-IP-头部，调用-netfilter-的-LOCAL-OUT-链" class="headerlink" title="4. 调用第三层协议，构建 IP 头部，调用 netfilter 的 LOCAL_OUT 链"></a>4. 调用第三层协议，构建 IP 头部，调用 netfilter 的 LOCAL_OUT 链</h4><p>此处防火墙，从本机出去的包都要跑一下 LOCAL_OUT 链，网络层通过注册到上层的 <code>ip_local_out</code> 函数接收数据处理，处理 OK 进一步交由 <code>IP_LOCAL_OUT</code> 节点检测。</p><h4 id="5-查找路由表，确定下一跳"><a href="#5-查找路由表，确定下一跳" class="headerlink" title="5. 查找路由表，确定下一跳"></a>5. 查找路由表，确定下一跳</h4><h4 id="6-调用-netfilter-的-POST-ROUTING-链"><a href="#6-调用-netfilter-的-POST-ROUTING-链" class="headerlink" title="6. 调用 netfilter 的 POST_ROUTING 链"></a>6. 调用 netfilter 的 POST_ROUTING 链</h4><p>对于即将发往下层的数据包，需要经过 <code>IP_POST_ROUTING</code> 节点处理；网络层处理结束，通过 <code>dev_queue_xmit</code> 函数将数据包交由 Linux 内核中虚拟网络设备做进一步处理，从这里数据包即离开网络层进入到下一层。</p><h4 id="7-对超时-MTU-的报文进行分片-fragment"><a href="#7-对超时-MTU-的报文进行分片-fragment" class="headerlink" title="7. 对超时 MTU 的报文进行分片(fragment)"></a>7. 对超时 MTU 的报文进行分片(fragment)</h4><h4 id="8-调用二成的发包函数-dev-queue-xmit"><a href="#8-调用二成的发包函数-dev-queue-xmit" class="headerlink" title="8. 调用二成的发包函数 dev_queue_xmit"></a>8. 调用二成的发包函数 dev_queue_xmit</h4><h4 id="9-将待发数据包放入输出的-QDisc-队列"><a href="#9-将待发数据包放入输出的-QDisc-队列" class="headerlink" title="9. 将待发数据包放入输出的 QDisc 队列"></a>9. 将待发数据包放入输出的 QDisc 队列</h4><h4 id="10-调用网卡驱动程序，将数据包放入循环缓冲队列-tx"><a href="#10-调用网卡驱动程序，将数据包放入循环缓冲队列-tx" class="headerlink" title="10. 调用网卡驱动程序，将数据包放入循环缓冲队列 tx"></a>10. 调用网卡驱动程序，将数据包放入循环缓冲队列 tx</h4><h4 id="11-驱动程序在-tx-usecs-的超时时间后，或者积累-tx-frames-个待发数据包后触发软中断"><a href="#11-驱动程序在-tx-usecs-的超时时间后，或者积累-tx-frames-个待发数据包后触发软中断" class="headerlink" title="11. 驱动程序在 tx-usecs 的超时时间后，或者积累 tx-frames 个待发数据包后触发软中断"></a>11. 驱动程序在 tx-usecs 的超时时间后，或者积累 tx-frames 个待发数据包后触发软中断</h4><ul><li><p>tx-usecs</p></li><li><p>tx-frames</p></li></ul><h4 id="12-驱动程序启用网卡的硬件中断"><a href="#12-驱动程序启用网卡的硬件中断" class="headerlink" title="12. 驱动程序启用网卡的硬件中断"></a>12. 驱动程序启用网卡的硬件中断</h4><h4 id="13-驱动程序将数据包映射到-DMA-内存"><a href="#13-驱动程序将数据包映射到-DMA-内存" class="headerlink" title="13. 驱动程序将数据包映射到 DMA 内存"></a>13. 驱动程序将数据包映射到 DMA 内存</h4><h4 id="14-网卡从-DMA-中取数据并发送"><a href="#14-网卡从-DMA-中取数据并发送" class="headerlink" title="14. 网卡从 DMA 中取数据并发送"></a>14. 网卡从 DMA 中取数据并发送</h4><h4 id="15-网卡发送完毕后触发硬件中断"><a href="#15-网卡发送完毕后触发硬件中断" class="headerlink" title="15. 网卡发送完毕后触发硬件中断"></a>15. 网卡发送完毕后触发硬件中断</h4><h4 id="16-硬中断清理中断信号后触发软中断"><a href="#16-硬中断清理中断信号后触发软中断" class="headerlink" title="16. 硬中断清理中断信号后触发软中断"></a>16. 硬中断清理中断信号后触发软中断</h4><h4 id="17-软中断释放已经发送完的数据包的内存"><a href="#17-软中断释放已经发送完的数据包的内存" class="headerlink" title="17. 软中断释放已经发送完的数据包的内存"></a>17. 软中断释放已经发送完的数据包的内存</h4><h2 id="防火墙"><a href="#防火墙" class="headerlink" title="防火墙"></a>防火墙</h2><p>提到防火墙，想必各位都知道大名鼎鼎的方教授哈😂，不过咱今天不谈这，感兴趣的可以去读一哈 <a href="https://gfw.report/blog/gfw_shadowsocks/zh.html" target="_blank" rel="noopener">Shadowsocks是如何被检测和封锁的</a> 和 <a href="http://www.oneyearago.me/2019/06/14/learn_gwf/" target="_blank" rel="noopener">G.F.W的原理</a></p><p>讲完了 Linux 发包和收包的整个流程我们就清楚了防火墙在网络中所工作的地方，下面就将一下 Linux 上的防火墙 iptables。</p><h3 id="iptales"><a href="#iptales" class="headerlink" title="iptales"></a>iptales</h3><p>自从 Linux 内核 2.4 之后 iptables 就集成进主线内核，不过 iptables 只是一个命令行工具，用于配置管理数据包的过滤规则，而真正起到信息包过滤作用的是 netfilter 框架。准确来讲 iptables 是一个通过控制 Linux 内核的 netfilter 模块来<strong>管理网络数据包的流动与转送</strong>的应用软件，其功能包括不仅仅包括防火墙的控制出入流量，还有端口转发等等。</p><h3 id="netfilter"><a href="#netfilter" class="headerlink" title="netfilter"></a>netfilter</h3><p>netfilter 是内核的一个子系统，其工作在内核空间，核心是一个报文过滤架构，它包含了一组分布在报文处理各个阶段的钩子函数，报文经过网络协议栈时进入 netfilter 处理架构，会调用其他模块在各个阶段注册的钩子函数，并返回处理结果，netfilter 根据返回结果进行不同的处理。</p><h4 id="表-链-规则"><a href="#表-链-规则" class="headerlink" title="表/链/规则"></a>表/链/规则</h4><p>iptables 内部有表 tables、链 chains、规则 rules 这三种概念。其中每一个 <code>表</code> 都和不同的数据包处理有关，而决定数据包是否可以穿越的是 <code>链</code>、而链上的一条条 <code>规则</code> 决定了是否送往下一条链（或其它的动作）。 netfilter/iptables 可以理解成是 <code>表</code> 的容器；表则是 <code>链</code> 的容器，即所有的<code>链</code>都属于其对应的<code>表</code>；<code>链</code>是 <code>规则</code> 的容器，其集合从属关系可以表述为（表（链（规则）））。</p><p>广为流传的说法是 iptables 有四表五链，其中四表（ raw、filter, nat, mangle,）五链（INPUT、OUTPUT、FORWARD、 PREROUTING、 POSTROUTING），不过也有说法为五表（ raw、filter、nat、mangle、security）五链，不过 security 表大多数情况下不会用到，常用的是  filter 和 nat 表，mangle 表次之。</p><h4 id="五表"><a href="#五表" class="headerlink" title="五表"></a>五表</h4><ul><li><p>raw 表： 优先级最高，通常与<code>NOTRACK</code>一起使用，用于跳过<code>连接跟踪（conntrack）</code>和 nat 表的处理用于配置数据包，raw 中的数据包不会被系统跟踪。设置 raw 时一般是为了不再让 iptables 做数据包的链接跟踪处理，提高性能。</p></li><li><p>filter 表： 为 iptables 默认的表，用于过滤数据包，比如 ACCEPT（允许），DROP（丢弃）、REJECT（拒绝）、LOG（记录日志）；在操作时如果没有指定使用哪个表，iptables 默认使用 filter 表来执行所有的命令。filter 表根据预定义的一组规则过滤符合条件的数据包。在 filter 表中只允许对数据包进行接收、丢弃的操作，而无法对数据包进行更改。</p></li><li><p>nat 表： 即 Network Address Translation，主要是用于网络地址转换（例如：端口转发），该表可以实现一对一、一对多、多对多等 NAT 工作，如 SNAT（修改源地址）、DNAT（修改目的地址）、REDIRECT 重定向等；。</p></li><li><p>mangle 表： 修改包头部的某些特殊条目，主要用于对指定包的传输特性进行修改。某些特殊应用可能需要改写数据包的一些传输特性，如 TOS、TTL、打上特殊标记 MARK 等，以影响后面的路由决策。</p></li><li><p>security 表： 用于强制访问控制网络规则（例如： SELinux）。</p></li></ul><p>表的处理优先级: raw &gt; mangle &gt; nat &gt; filter。</p><blockquote><p>raw 表除了 <code>-j NOTRACK</code> 外，还有一个常用的动作，那就是 <code>-j TRACE</code>，用于跟踪数据包，进行规则的调试，使用 dmesg 查看。</p><p><code>连接跟踪</code>，顾名思义，就是跟踪并记录网络连接的状态（你可能认为只有 TCP 才有“连接”这个概念，但是在 netfilter 中，TCP、UDP、ICMP 一视同仁）。netfilter 会为每个经过网络堆栈的连接生成一个<strong>连接记录项（Connection Entry）</strong>；此后所有属于此连接的数据包都被唯一地分配给这个连接并标识连接的状态；由所有连接记录项组成的表其实就是所谓的<strong>连接跟踪表</strong>。</p><p>为什么需要连接跟踪？因为它是<strong>状态防火墙和 NAT 的实现基础</strong>！</p><ul><li><code>状态防火墙</code>：iptables 的 conntrack/state 模块允许我们根据连接的状态进行规则配置，如果没有连接跟踪，那是做不到的。</li><li><code>NAT</code>，NAT 其实就是修改数据包的源地址/端口、目的地址/端口，如果没有连接跟踪，那么也不可能再找回修改前的地址信息。</li></ul></blockquote><h4 id="五链"><a href="#五链" class="headerlink" title="五链"></a>五链</h4><p>链(chains)是数据包传输的路径，对应着报文处理的五个不同阶段：</p><ul><li>INPUT： 处理入站数据包，当接收到访问本机地址的数据包(入站)时，应用此链中的规则。</li><li>OUTPUT： 处理出站数据包，当本机向外发送数据包(出站)时，应用此链中的规则。</li><li>FORWARD： 处理转发数据包，当接收到需要通过本机发送给其他地址的数据包(转发)时，应用此链中的规则。（ip_forward 和路由器会用到）</li><li>PREROUTING： 在对数据包作路由选择之前，应用此链中的规则。</li><li>POSTROUTING： 在对数据包作路由选择之后，应用此链中的规则。</li></ul><p>其中 INPUT 和 OUTPUT 链主要应用在本机的网络控制中，而 FORWARD、PREROUTING、 POSTROUTING 链更多地应用在对外的网络控制中，特别是机器作为网关使用时的情况。</p><h4 id="规则"><a href="#规则" class="headerlink" title="规则"></a>规则</h4><p>数据包的过滤基于 <strong>规则</strong>，而规则是由匹配条件和处理动作组成。规则分别指定了源地址、目的地址、传输协议（如TCP、UDP、ICMP）和服务类型（如HTTP、FTP和SMTP）等。当数据包与规则匹配时，iptables 就根据规则所定义的方法来处理这些数据包，如放行（accept）、拒绝（reject）和丢弃（drop）等。配置防火墙的主要工作就是添加、修改和删除这些规则。</p><p><strong>常见的处理动作：</strong></p><ul><li>ACCEPT： 允许数据包通过。</li><li>DROP： 直接丢弃数据包，不给任何回应信息。</li><li>QUEUE： 将数据包移交到用户空间。</li><li>RETURN： 停止执行当前链中的后续规则，并返回到调用链(The Calling Chain)中。</li><li>REJECT： 拒绝数据包通过，必要时会给数据发送端一个响应的信息。</li><li>DNAT： 目标地址转换（docker 网络会用到）。</li><li>SNAT： 源地址转换，解决内网用户用同一个公网地址上网的问题 （docker 网络会用到）。</li><li>MASQUERADE： 是 SNAT 的一种特殊形式，适用于动态的、临时会变的 ip 上。</li><li>REDIRECT： 在本机做端口映射（透明代理的时候会用到）。</li><li>LOG： 记录日志信息，除记录外不对数据包做任何其他操作，仍然匹配下一条规则。</li></ul><p><strong>总体顺序如下：</strong></p><p>1.当一个数据包进入某个链时，首先按照表的优先级依次处理；<br>2.每个表中的规则都有序号（从 1 开始），数据包会根据规则序号依次进行匹配；<br>3.如果命中一条规则，则执行相应的动作；如果所有表的规则都未命中，则执行默认策略。</p><h3 id="关系"><a href="#关系" class="headerlink" title="关系"></a>关系</h3><p>链是规则的容器，一条链中可能包含着众多的规则，当一个数据包到达一个链时，iptables 就会从链中第一条规则开始匹配，如果满足该规则的条件，系统就会根据该条规则所定义的方法处理该数据包，否则将继续匹配下一条规则，如果该数据包不符合链中任一条规则，iptables 就会根据该链预先定义的默认策略来处理数据包。可以看到 iptables 遍历链中的规则算法复杂度为 O(n)，即随着链中的规则数量增大而增大。而且，链的匹配是有顺序的，这一点非常重要，在添加规则的时候也要主要顺序，搞错了就可能导致系统所有流量都无法进入。</p><h4 id="Filter-表"><a href="#Filter-表" class="headerlink" title="Filter 表"></a>Filter 表</h4><p>Filter 表是 iptables 的默认表，因此如果没有指定表，那么默认操作的是 filter 表，其包含以下三种内建链：</p><ul><li>INPUT 链：处理来自外部的数据</li><li>OUTPUT 链：处理向外发送的数据</li><li>FORWARD 链：将数据转发到本机的其他网卡设备上</li></ul><h4 id="NAT-表"><a href="#NAT-表" class="headerlink" title="NAT 表"></a>NAT 表</h4><ul><li><p>PREROUTING 链：处理刚到达本机并在路由转发前的数据包。它会转换数据包中的目标 IP 地址（destination ip address），通常用于 DNAT(destination NAT)</p></li><li><p>POSTROUTING 链：处理即将离开本机的数据包。它会转换数据包中的源 IP 地址（source ip address），通常用于 SNAT（source NAT）</p></li><li><p>OUTPUT 链：处理本机发出的数据包</p></li></ul><h4 id="Mangle-表"><a href="#Mangle-表" class="headerlink" title="Mangle 表"></a>Mangle 表</h4><p>Mangle 表包含五种内建链：PREROUTING、OUTPUT、FORWARD、INPUT、POSTROUTING。</p><h4 id="Raw-表"><a href="#Raw-表" class="headerlink" title="Raw 表"></a>Raw 表</h4><p>含两个内建链：PREROUTING, OUTPUT.</p><h3 id="数据包流程"><a href="#数据包流程" class="headerlink" title="数据包流程"></a>数据包流程</h3><p><img src="https://cdn.jsdelivr.net/gh/muzi502/blog/source/img/iptables.png" alt="img"></p><p>在 Linux 下，从任何网络端口进来的每一个 IP 数据包都要从上到下的穿过这张图，iptabales 对从任何端口进入的数据包都会采取相同的处理方式。</p><p>此图摘自 <a href="https://wiki.archlinux.org/index.php/Iptables" target="_blank" rel="noopener">Archlinux 文档</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">                               XXXXXXXXXXXXXXXXXX</span><br><span class="line">                             XXX     Network    XXX</span><br><span class="line">                               XXXXXXXXXXXXXXXXXX</span><br><span class="line">                                       +</span><br><span class="line">                                       |</span><br><span class="line">                                       v</span><br><span class="line"> +-------------+              +------------------+</span><br><span class="line"> |table: filter| &lt;---+        | table: nat       |</span><br><span class="line"> |chain: INPUT |     |        | chain: PREROUTING|</span><br><span class="line"> +-----+-------+     |        +--------+---------+</span><br><span class="line">       |             |                 |</span><br><span class="line">       v             |                 v</span><br><span class="line"> [local process]     |           ****************          +--------------+</span><br><span class="line">       |             +---------+ Routing decision +------&gt; |table: filter |</span><br><span class="line">       v                         ****************          |chain: FORWARD|</span><br><span class="line">****************                                           +------+-------+</span><br><span class="line">Routing decision                                                  |</span><br><span class="line">****************                                                  |</span><br><span class="line">       |                                                          |</span><br><span class="line">       v                        ****************                  |</span><br><span class="line">+-------------+       +------&gt;  Routing decision  &lt;---------------+</span><br><span class="line">|table: nat   |       |         ****************</span><br><span class="line">|chain: OUTPUT|       |               +</span><br><span class="line">+-----+-------+       |               |</span><br><span class="line">      |               |               v</span><br><span class="line">      v               |      +-------------------+</span><br><span class="line">+--------------+      |      | table: nat        |</span><br><span class="line">|table: filter | +----+      | chain: POSTROUTING|</span><br><span class="line">|chain: OUTPUT |             +--------+----------+</span><br><span class="line">+--------------+                      |</span><br><span class="line">                                      v</span><br><span class="line">                               XXXXXXXXXXXXXXXXXX</span><br><span class="line">                             XXX    Network     XXX</span><br><span class="line">                               XXXXXXXXXXXXXXXXXX</span><br></pre></td></tr></table></figure><h3 id="遍历链流程图"><a href="#遍历链流程图" class="headerlink" title="遍历链流程图"></a>遍历链流程图</h3><p>该流程图描述链了在任何接口上收到的网络数据包是按照怎样的顺序穿过表的交通管制链。</p><p><img src="https://www.frozentux.net/iptables-tutorial/chunkyhtml/images/tables_traverse.jpg" alt="tables_traverse"></p><ul><li><p>第一个路由策略包括决定数据包的目的地是本地主机（这种情况下，数据包穿过 INPUT 链），还是其他主机（数据包穿过 FORWARD 链）；</p></li><li><p>中间的路由策略包括决定给传出的数据包使用那个源地址、分配哪个接口；</p></li><li><p>最后一个路由策略存在是因为先前的 mangle 与 nat 链可能会改变数据包的路由信息。</p></li></ul><p>数据包通过路径上的每一条链时，链中的每一条规则按顺序匹配；无论何时匹配了一条规则，相应的 target/jump 动作将会执行。最常用的3个 target 是 ACCEPT, DROP ,或者 jump 到用户自定义的链。内置的链有默认的策略，但是用户自定义的链没有默认的策略。在 jump 到的链中，若每一条规则都不能提供完全匹配，那么数据包像这张图片描述的一样返回到调用链。在任何时候，若 DROP target 的规则实现完全匹配，那么被匹配的数据包会被丢弃，不会进行进一步处理。如果一个数据包在链中被 ACCEPT，那么它也会被所有的父链 ACCEPT，并且不再遍历其他父链。然而，要注意的是，数据包还会以正常的方式继续遍历其他表中的其他链。</p><h4 id="本机发出的包"><a href="#本机发出的包" class="headerlink" title="本机发出的包"></a>本机发出的包</h4><p>本机进程 -&gt; OUTPUT 链 -&gt; 路由选择 -&gt; POSTROUTING 链 -&gt; 出口网卡</p><h4 id="本机收到的包"><a href="#本机收到的包" class="headerlink" title="本机收到的包"></a>本机收到的包</h4><p>入口网卡 -&gt; PREROUTING 链 -&gt; 路由选择 -&gt; 此时有两种可能的情况：</p><ul><li>目的地址为本机：INPUT 链 -&gt; 本机进程</li><li>目的地址不为本机：FORWARD 链 -&gt; POSTROUTING 链 -&gt; 网卡出口（内核允许网卡转发的情况下）</li></ul><h2 id="iptables-实战"><a href="#iptables-实战" class="headerlink" title="iptables 实战"></a>iptables 实战</h2><p>iptables [-t 表] 命令选项 [链] [匹配选项] [操作选项]</p><h3 id="命令选项"><a href="#命令选项" class="headerlink" title="命令选项"></a>命令选项</h3><table><thead><tr><th align="left">选项名</th><th align="left">功能及特点</th></tr></thead><tbody><tr><td align="left">-A –append</td><td align="left">在指定链的末尾添加一条新的规则</td></tr><tr><td align="left">-D –delete</td><td align="left">删除指定链中的某一条规则，按规则序号或内容确定要删除的规则</td></tr><tr><td align="left">-I –insert</td><td align="left">在指定链中插入一条新的规则，默认在链的开头插入</td></tr><tr><td align="left">-R –replace</td><td align="left">修改、替换指定链中的一条规则，按规则序号或内容确定</td></tr><tr><td align="left">-F –flush</td><td align="left">清空指定链中的所有规则，默认清空表中所有链的内容</td></tr><tr><td align="left">-N –new</td><td align="left">新建一条用户自己定义的规则链</td></tr><tr><td align="left">-X –delete-chain</td><td align="left">删除指定表中用户自定义的规则链</td></tr><tr><td align="left">-P –policy</td><td align="left">设置指定链的默认策略</td></tr><tr><td align="left">-F, –flush</td><td align="left">清空指定链上面的所有规则，如果没有指定链，清空表上所有链的所有规则</td></tr><tr><td align="left">-Z, –zero</td><td align="left">把指定链或表中的所有链上的所有计数器清零</td></tr><tr><td align="left">-L –list</td><td align="left">列出指定链中的所有的规则进行查看，默认列出表中所有链的内容</td></tr><tr><td align="left">-S –list-rules</td><td align="left">以原始格式列出链中所有规则</td></tr><tr><td align="left">-v –verbose</td><td align="left">查看规则列表时显示详细的信息</td></tr><tr><td align="left">-n –numeric</td><td align="left">用数字形式显示输出结果，如显示主机的 IP 地址而不是主机名</td></tr><tr><td align="left">–line-number</td><td align="left">查看规则列表时，同时显示规则在链中的顺序号</td></tr></tbody></table><h3 id="匹配选项"><a href="#匹配选项" class="headerlink" title="匹配选项"></a>匹配选项</h3><table><thead><tr><th align="left">选项名</th><th align="left">功能及特点</th></tr></thead><tbody><tr><td align="left">-i –in-interface</td><td align="left">匹配输入接口，如 eth0，eth1</td></tr><tr><td align="left">-o –out-interface</td><td align="left">匹配输出接口</td></tr><tr><td align="left">-p –proto</td><td align="left">匹配协议类型，如 TCP、UDP 和 ICMP等</td></tr><tr><td align="left">-s –source</td><td align="left">匹配的源地址</td></tr><tr><td align="left">–sport</td><td align="left">匹配的源端口号</td></tr><tr><td align="left">-d –destination</td><td align="left">匹配的目的地址</td></tr><tr><td align="left">–dport</td><td align="left">匹配的目的端口号</td></tr><tr><td align="left">-m –match</td><td align="left">匹配规则所使用的过滤模块</td></tr></tbody></table><h3 id="操作选项"><a href="#操作选项" class="headerlink" title="操作选项"></a>操作选项</h3><p> 一般为 <code>-j 处理动作</code> 的形式，处理动作包括 ACCEPT、DROP、RETURN、REJECT、DNAT、SNAT 等。不同的处理动作可能还有额外的选项参数，如指定 DNAT、SNAT 动作则还需指定 <code>--to</code> 参数用以说明要装换的地址，指定 REDIRECT 动作则需指定 –to-ports 参数用于说明要跳转的端口。</p><table><thead><tr><th>操作名</th><th>功能</th></tr></thead><tbody><tr><td>ACCEPT</td><td>允许数据包通过</td></tr><tr><td>DROP</td><td>直接丢弃数据包，不给任何回应信息</td></tr><tr><td>QUEUE</td><td>将数据包移交到用户空间</td></tr><tr><td>RETURN</td><td>停止执行当前链中的后续规则，并返回到调用链(The Calling Chain)中</td></tr><tr><td>REJECT</td><td>拒绝数据包通过，必要时会给数据发送端一个响应的信息</td></tr><tr><td>DNAT</td><td>进行目标地址转换</td></tr><tr><td>SNAT</td><td>源地址转换，解决内网用户用同一个公网地址上网的问题</td></tr><tr><td>MASQUERADE</td><td>是 SNAT 的一种特殊形式，适用于动态的、临时会变的 ip 上</td></tr><tr><td>REDIRECT</td><td>在本机做端口映射</td></tr><tr><td>LOG</td><td>记录日志信息，除记录外不对数据包做任何其他操作，仍然匹配下一条规则</td></tr></tbody></table><h3 id="命令详解"><a href="#命令详解" class="headerlink" title="命令详解"></a>命令详解</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">### 命令用法 (man 文档)</span></span><br><span class="line">iptables [-t table] &#123;-A|-C|-D&#125; chain rule-specification         <span class="comment"># (ipv4) 追加|检查|删除 规则</span></span><br><span class="line">ip6tables [-t table] &#123;-A|-C|-D&#125; chain rule-specification        <span class="comment"># (ipv6) 追加|检查|删除 规则</span></span><br><span class="line">iptables [-t table] -I chain [rulenum] rule-specification       <span class="comment"># 在 rulenum 处插入规则 (默认为 1)</span></span><br><span class="line">iptables [-t table] -R chain rulenum rule-specification         <span class="comment"># 替换第 rulenum 条规则</span></span><br><span class="line">iptables [-t table] -D chain rulenum                            <span class="comment"># 删除第 rulenum 条规则</span></span><br><span class="line">iptables [-t table] -S [chain [rulenum]]                        <span class="comment"># 打印指定 table 的规则</span></span><br><span class="line">iptables [-t table] &#123;-F|-L|-Z&#125; [chain [rulenum]] [options...]   <span class="comment"># 清空|列出|置零 链/规则</span></span><br><span class="line">iptables [-t table] -P chain target                             <span class="comment"># 设置默认策略</span></span><br><span class="line">iptables [-t table] -N chain                                    <span class="comment"># 新建自定义链</span></span><br><span class="line">iptables [-t table] -X [chain]                                  <span class="comment"># 删除自定义链</span></span><br><span class="line">iptables [-t table] -E old-chain-name new-chain-name            <span class="comment"># 重命名自定义链</span></span><br><span class="line"></span><br><span class="line"><span class="comment">### 一般形式</span></span><br><span class="line">iptables [-t 表名] &#123;-A|I|D|R&#125; 链名 [规则号] 匹配规则 -j 动作</span><br><span class="line"></span><br><span class="line"><span class="comment">### 查看帮助</span></span><br><span class="line">iptables --<span class="built_in">help</span>             <span class="comment"># 查看 iptables 的帮助</span></span><br><span class="line">iptables -m 模块名 --<span class="built_in">help</span>   <span class="comment"># 查看指定模块的可用参数</span></span><br><span class="line">iptables -j 动作名 --<span class="built_in">help</span>   <span class="comment"># 查看指定动作的可用参数</span></span><br><span class="line"></span><br><span class="line"><span class="comment">### 持久化规则</span></span><br><span class="line"><span class="comment"># 在 RHEL/CentOS 中，默认规则文件为 /etc/sysconfig/iptables</span></span><br><span class="line"><span class="comment"># 在 iptables 服务启动时，默认会加载该配置文件中定义的规则</span></span><br><span class="line"><span class="comment"># 如果想要设置的规则在重启后有效，就需要保存规则到这个文件</span></span><br><span class="line"><span class="comment"># 使用这两个工具：iptables-save、iptables-restore 重定向即可</span></span><br><span class="line"><span class="comment">## 保存当前规则</span></span><br><span class="line">iptables-save &gt;/etc/sysconfig/iptables</span><br><span class="line">iptables-save &gt;/etc/sysconfig/iptables.20171125</span><br><span class="line"><span class="comment">## 恢复当前规则</span></span><br><span class="line">iptables-restore &lt;/etc/sysconfig/iptables</span><br><span class="line">iptables-restore &lt;/etc/sysconfig/iptables.20171125</span><br><span class="line"></span><br><span class="line"><span class="comment">### 命令和选项</span></span><br><span class="line">-t              <span class="comment"># 指定要操作的表，如果省略则默认为 filter 表</span></span><br><span class="line">-A              <span class="comment"># "追加" 一条规则，只能追加到末尾</span></span><br><span class="line">-I              <span class="comment"># "插入" 一条规则，如果省略序号则默认为 1</span></span><br><span class="line">-R              <span class="comment"># "替换" 一条规则，必须指定序号</span></span><br><span class="line">-D              <span class="comment"># "删除" 一条规则，必须指定序号</span></span><br><span class="line">-C              <span class="comment"># "检查" 规则是否存在，如果存在则返回 0</span></span><br><span class="line">-P              <span class="comment"># 设置链的 "默认策略"，nat 表不允许修改默认策略</span></span><br><span class="line">-S              <span class="comment"># "查看" 规则（原始格式）</span></span><br><span class="line">-L              <span class="comment"># "打印" 规则（友好格式）</span></span><br><span class="line">-F              <span class="comment"># 清空表中的规则并将包计数器、字节计数器置零</span></span><br><span class="line">-Z              <span class="comment"># 将某个链或某条规则的包计数器、字节计数器置零</span></span><br><span class="line">-N              <span class="comment"># 新建自定义链</span></span><br><span class="line">-X              <span class="comment"># 删除自定义链</span></span><br><span class="line">-E              <span class="comment"># 重命名自定义链</span></span><br><span class="line">-n              <span class="comment"># 以数字形式显示地址和端口</span></span><br><span class="line">-v              <span class="comment"># 在打印规则时显示详细信息</span></span><br><span class="line">--line-numbers  <span class="comment"># 在打印规则时显示规则序号</span></span><br><span class="line"></span><br><span class="line"><span class="comment">### 反向匹配</span></span><br><span class="line"><span class="comment"># 只需在选项前面使用 ! 即可，如: ! -s 192.168.0.0/16 表示除 192.168/16 外的源 IP</span></span><br><span class="line"></span><br><span class="line"><span class="comment">### 通用匹配</span></span><br><span class="line">-s addr[/mask][...] <span class="comment"># 源 IP，可以有多个，使用逗号隔开，有多少个地址就有多少条规则</span></span><br><span class="line">-d addr[/mask][...] <span class="comment"># 目的 IP，可以有多个，使用逗号隔开，有多少个地址就有多少条规则</span></span><br><span class="line">-i input-nic[+]     <span class="comment"># 数据包来自哪个网卡，+ 表示通配符</span></span><br><span class="line">-o output-nic[+]    <span class="comment"># 数据包送往哪个网卡，+ 表示通配符</span></span><br><span class="line">-p &#123;tcp|udp|udplite|icmp|icmpv6|esp|ah|sctp|mh|all&#125;</span><br><span class="line">                    <span class="comment"># 指定匹配的协议，all 表示所有</span></span><br><span class="line"></span><br><span class="line"><span class="comment">### 隐式扩展匹配 (tcp/udp/icmp)</span></span><br><span class="line"><span class="comment">## tcp 扩展</span></span><br><span class="line">--sport port[:port]     <span class="comment"># 源端口号，100:200 表示端口范围</span></span><br><span class="line">--dport port[:port]     <span class="comment"># 目的端口号，100:200 表示端口范围</span></span><br><span class="line">--tcp-flags mask comp   <span class="comment"># TCP 标志位，flags=&#123;SYN|ACK|FIN|RST|URG|PSH|ALL|NONE&#125;</span></span><br><span class="line">--syn                   <span class="comment"># SYN 标志位，等同于 --tcp-flags SYN,RST,ACK,FIN SYN</span></span><br><span class="line">--tcp-option number     <span class="comment"># TCP 选项</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## udp 扩展</span></span><br><span class="line">--sport port[:port]     <span class="comment"># 源端口号</span></span><br><span class="line">--dport port[:port]     <span class="comment"># 目的端口号</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## icmp 扩展</span></span><br><span class="line">--icmp-type name[/code] <span class="comment"># icmp 类型，常用的两个: ping、pong，请求和应答</span></span><br><span class="line"></span><br><span class="line"><span class="comment">### 显式扩展匹配 (-m module-name)</span></span><br><span class="line"><span class="comment">## multiport 多端口</span></span><br><span class="line">--sports port[,port:port,port...]   <span class="comment"># 匹配多个源端口[范围]</span></span><br><span class="line">--dports port[,port:port,port...]   <span class="comment"># 匹配多个目的端口[范围]</span></span><br><span class="line">--ports port[,port:port,port...]    <span class="comment"># 匹配多个源和目的端口[范围]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## owner 所属用户(组)</span></span><br><span class="line">--uid-owner userid[-userid]     <span class="comment"># 匹配 UID[范围]/username</span></span><br><span class="line">--gid-owner groupid[-groupid]   <span class="comment"># 匹配 GID[范围]/groupname</span></span><br><span class="line">--socket-exists                 <span class="comment"># 匹配与套接字相关联的数据包</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## state 连接状态(基本)</span></span><br><span class="line">--state [INVALID|ESTABLISHED|NEW|RELATED|UNTRACKED][,...]</span><br><span class="line"><span class="comment"># NEW           新连接</span></span><br><span class="line"><span class="comment"># ESTABLISHED   已建立的连接</span></span><br><span class="line"><span class="comment"># RELATED       关联的连接，如 ftp</span></span><br><span class="line"><span class="comment"># INVALID       无效/非法的连接</span></span><br><span class="line"><span class="comment"># UNTRACKED     未启用连接跟踪的连接</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## conntrack 连接状态</span></span><br><span class="line">--ctstate &#123;INVALID|ESTABLISHED|NEW|RELATED|UNTRACKED|SNAT|DNAT&#125;[,...]</span><br><span class="line"></span><br><span class="line"><span class="comment">## iprange IP范围</span></span><br><span class="line">--src-range ip[-ip]     <span class="comment"># 匹配指定的源 IP 范围</span></span><br><span class="line">--dst-range ip[-ip]     <span class="comment"># 匹配指定的目的 IP 范围</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## mac 源MAC地址</span></span><br><span class="line">--mac-source XX:XX:XX:XX:XX:XX  <span class="comment"># 匹配源 MAC 地址</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## addrtype 地址类型</span></span><br><span class="line">--src-type <span class="built_in">type</span>[,...]   <span class="comment"># 匹配 source ip 地址的类型</span></span><br><span class="line">--dst-type <span class="built_in">type</span>[,...]   <span class="comment"># 匹配 destination ip 地址的类型</span></span><br><span class="line"><span class="comment"># UNSPEC       未指定的地址，如 0.0.0.0</span></span><br><span class="line"><span class="comment"># UNICAST      单播地址</span></span><br><span class="line"><span class="comment"># LOCAL        本机地址</span></span><br><span class="line"><span class="comment"># BROADCAST    广播地址</span></span><br><span class="line"><span class="comment"># ANYCAST      任播地址</span></span><br><span class="line"><span class="comment"># MULTICAST    多播地址</span></span><br><span class="line"><span class="comment"># BLACKHOLE    黑洞地址</span></span><br><span class="line"><span class="comment"># UNREACHABLE  不可达地址</span></span><br><span class="line"><span class="comment"># PROHIBIT     禁止访问的地址</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## time 时间</span></span><br><span class="line">--datestart time     <span class="comment"># 起始日期 YYYY[-MM[-DD[Thh[:mm[:ss]]]]]</span></span><br><span class="line">--datestop time      <span class="comment"># 结束日期 YYYY[-MM[-DD[Thh[:mm[:ss]]]]]</span></span><br><span class="line">--timestart time     <span class="comment"># 起始时间 hh:mm[:ss]</span></span><br><span class="line">--timestop time      <span class="comment"># 结束时间 hh:mm[:ss]</span></span><br><span class="line">--monthdays value    <span class="comment"># 几号，1 至 31，默认为 all</span></span><br><span class="line">--weekdays value     <span class="comment"># 星期几，1 至 7，默认为 all</span></span><br><span class="line">--kerneltz           <span class="comment"># 使用内核时区而非 UTC</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## string 关键字匹配</span></span><br><span class="line">--from offset       <span class="comment"># 设置起始偏移量</span></span><br><span class="line">--to offset         <span class="comment"># 设置结束偏移量</span></span><br><span class="line">--algo &#123;bm|kmp&#125;     <span class="comment"># 指定使用的算法</span></span><br><span class="line">--icase             <span class="comment"># 忽略大小写匹配</span></span><br><span class="line">--string string     <span class="comment"># 要匹配的字符串</span></span><br><span class="line">--hex-string string <span class="comment"># 要匹配的字符串，十六进制</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## length 数据包大小</span></span><br><span class="line">--length length[:length]    <span class="comment"># 匹配数据包大小[范围]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## mark 防火墙标记</span></span><br><span class="line">--mark value[/mask]     <span class="comment"># 匹配有指定防火墙标记的数据包</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## connmark "连接"标记</span></span><br><span class="line">--mark value[/mask]     <span class="comment"># 如果当前数据包所属的"连接"打了给定的标记，则匹配成功</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## limit 速率限制</span></span><br><span class="line">--<span class="built_in">limit</span> avg             <span class="comment"># 平均速率限制，如 3/hour，单位: sec|minute|hour|day</span></span><br><span class="line">--<span class="built_in">limit</span>-burst number    <span class="comment"># 封顶速率限制，默认为 5</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## connlimit 并发连接数</span></span><br><span class="line">--connlimit-upto n      <span class="comment"># 0..n</span></span><br><span class="line">--connlimit-above n     <span class="comment"># &gt; n</span></span><br><span class="line"></span><br><span class="line"><span class="comment">### -j target 动作</span></span><br><span class="line"><span class="comment">## 无参数系列</span></span><br><span class="line">ACCEPT      <span class="comment"># 接收数据包</span></span><br><span class="line">DROP        <span class="comment"># 丢弃数据包</span></span><br><span class="line">CUST-CHAIN  <span class="comment"># 进入自定义链</span></span><br><span class="line">RETURN      <span class="comment"># 退出当前链，分两种情况：</span></span><br><span class="line">            <span class="comment"># 如果当前链是自定义链，则返回调用链，继续匹配调用点的下一条规则</span></span><br><span class="line">            <span class="comment"># 如果当前链不是自定义链，则执行当前链的默认策略，如 ACCEPT、DROP</span></span><br><span class="line"></span><br><span class="line"><span class="comment">## 带参数系列</span></span><br><span class="line"><span class="comment"># REJECT 拒绝（带原因）</span></span><br><span class="line">--reject-with <span class="built_in">type</span>              <span class="comment"># 丢弃数据包，并回复源主机，可用的 type 如下：</span></span><br><span class="line">    icmp-net-unreachable        <span class="comment"># ICMP 网络不可达</span></span><br><span class="line">    net-unreach                 <span class="comment"># 同上，别名</span></span><br><span class="line">    icmp-host-unreachable       <span class="comment"># ICMP 主机不可达</span></span><br><span class="line">    host-unreach                <span class="comment"># 同上，别名</span></span><br><span class="line">    icmp-proto-unreachable      <span class="comment"># ICMP 协议不可达</span></span><br><span class="line">    proto-unreach               <span class="comment"># 同上，别名</span></span><br><span class="line">    icmp-port-unreachable       <span class="comment"># ICMP 端口不可达（默认）</span></span><br><span class="line">    port-unreach                <span class="comment"># 同上，别名</span></span><br><span class="line">    icmp-net-prohibited         <span class="comment"># ICMP 网络限制</span></span><br><span class="line">    net-prohib                  <span class="comment"># 同上，别名</span></span><br><span class="line">    icmp-host-prohibited        <span class="comment"># ICMP 主机限制</span></span><br><span class="line">    host-prohib                 <span class="comment"># 同上，别名</span></span><br><span class="line">    icmp-admin-prohibited       <span class="comment"># ICMP 管理员限制</span></span><br><span class="line">    admin-prohib                <span class="comment"># 同上，别名</span></span><br><span class="line">    tcp-reset                   <span class="comment"># TCP RST 连接重置</span></span><br><span class="line">    tcp-rst                     <span class="comment"># 同上，别名</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># MARK 打防火墙标记</span></span><br><span class="line">--<span class="built_in">set</span>-mark value[/mask]   <span class="comment"># 设置标记，mask OR value（推荐）</span></span><br><span class="line">--<span class="built_in">set</span>-xmark value[/mask]  <span class="comment"># 设置标记，mask XOR value</span></span><br><span class="line">--and-mark bits           <span class="comment"># 设置二进制标记，AND</span></span><br><span class="line">--or-mark bits            <span class="comment"># 设置二进制标记，OR</span></span><br><span class="line">--xor-mask bits           <span class="comment"># 设置二进制标记，XOR</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># CONNMARK 打"连接"标记</span></span><br><span class="line">--<span class="built_in">set</span>-mark value[/mask]       <span class="comment"># 设置当前数据包所属连接的连接标记</span></span><br><span class="line">--save-mark [--mask mask]     <span class="comment"># 将当前数据包的标记作为其所属连接的标记</span></span><br><span class="line">--restore-mark [--mask mask]  <span class="comment"># 将当前数据包所属连接的标记作为该数据包的标记</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># LOG 防火墙日志，dmesg 可查看</span></span><br><span class="line">--<span class="built_in">log</span>-level level       <span class="comment"># 日志级别（syslog.conf）</span></span><br><span class="line">--<span class="built_in">log</span>-prefix prefix     <span class="comment"># 日志前缀字符串</span></span><br><span class="line">--<span class="built_in">log</span>-tcp-sequence      <span class="comment"># 记录 TCP seq 序列号</span></span><br><span class="line">--<span class="built_in">log</span>-tcp-options       <span class="comment"># 记录 TCP options 选项</span></span><br><span class="line">--<span class="built_in">log</span>-ip-options        <span class="comment"># 记录 IP options 选项</span></span><br><span class="line">--<span class="built_in">log</span>-uid               <span class="comment"># 记录套接字相关联的 UID</span></span><br><span class="line">--<span class="built_in">log</span>-macdecode         <span class="comment"># 解析 MAC 地址和协议</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ULOG 防火墙日志，kernel 2.4+</span></span><br><span class="line">--ulog-nlgroup nlgroup  <span class="comment"># 记录的 NETLINK 组</span></span><br><span class="line">--ulog-cprange size     <span class="comment"># 要复制的字节数</span></span><br><span class="line">--ulog-qthreshold       <span class="comment"># 内核队列的消息阈值</span></span><br><span class="line">--ulog-prefix prefix    <span class="comment"># 日志前缀字符串</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># NFLOG 防火墙日志，kernel 2.6+</span></span><br><span class="line">--nflog-group NUM       <span class="comment"># 记录的 NETLINK 组</span></span><br><span class="line">--nflog-size NUM        <span class="comment"># 要复制的字节数</span></span><br><span class="line">--nflog-threshold NUM   <span class="comment"># 内核队列的消息阈值</span></span><br><span class="line">--nflog-prefix STRING   <span class="comment"># 日志前缀字符串</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># SNAT 源地址转换，用在 POSTROUTING、INPUT 链</span></span><br><span class="line">--to-source [&lt;ipaddr&gt;[-&lt;ipaddr&gt;]][:port[-port]]</span><br><span class="line">--random        <span class="comment"># 映射到随机端口号</span></span><br><span class="line">--random-fully  <span class="comment"># 映射到随机端口号（PRNG 完全随机化）</span></span><br><span class="line">--persistent    <span class="comment"># 映射到固定地址</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># DNAT 目的地址转换，用在 PREROUTING、OUTPUT 链</span></span><br><span class="line">--to-destination [&lt;ipaddr&gt;[-&lt;ipaddr&gt;]][:port[-port]]</span><br><span class="line">--random        <span class="comment"># 映射到随机端口号</span></span><br><span class="line">--persistent    <span class="comment"># 映射到固定地址</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># MASQUERADE 源地址转换（适用于 DHCP 动态 IP），用在 POSTROUTING 链</span></span><br><span class="line">--to-ports &lt;port&gt;[-&lt;port&gt;]  <span class="comment"># 映射到指定端口号[范围]</span></span><br><span class="line">--random                    <span class="comment"># 映射到随机端口号</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># REDIRECT 目的地址转换（重定向至 localhost:端口号），用在 PREROUTING、OUTPUT 链</span></span><br><span class="line">--to-ports &lt;port&gt;[-&lt;port&gt;]  <span class="comment"># 重定向到指定端口号[范围]</span></span><br><span class="line">--random                    <span class="comment"># 重定向到随机端口号</span></span><br></pre></td></tr></table></figure><h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><h4 id="查看帮助"><a href="#查看帮助" class="headerlink" title="查看帮助"></a>查看帮助</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">iptables --<span class="built_in">help</span>             <span class="comment"># 查看 iptables 的帮助</span></span><br><span class="line">iptables -m 模块名 --<span class="built_in">help</span>    <span class="comment"># 查看指定模块的可用参数</span></span><br><span class="line">iptables -j 动作名 --<span class="built_in">help</span>    <span class="comment"># 查看指定动作的可用参数</span></span><br></pre></td></tr></table></figure><h4 id="查看规则"><a href="#查看规则" class="headerlink" title="查看规则"></a>查看规则</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">iptables -nvL</span><br><span class="line">iptables -t nat -nvL</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示规则序号</span></span><br><span class="line">iptables -nvL INPUT --line-numbers</span><br><span class="line">iptables -t nat -nvL --line-numbers</span><br><span class="line">iptables -t nat -nvL PREROUTING --line-numbers</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看规则的原始格式</span></span><br><span class="line">iptables -t filter -S</span><br><span class="line">iptables -t nat -S</span><br><span class="line">iptables -t mangle -S</span><br><span class="line">iptables -t raw -S</span><br></pre></td></tr></table></figure><h4 id="设置默认规则"><a href="#设置默认规则" class="headerlink" title="设置默认规则"></a>设置默认规则</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">iptables -P INPUT DROP     <span class="comment"># 配置默认丢弃访问的数据表</span></span><br><span class="line">iptables -P FORWARD DROP   <span class="comment"># 配置默认禁止转发</span></span><br><span class="line">iptables -P OUTPUT ACCEPT  <span class="comment"># 配置默认允许向外的请求</span></span><br></pre></td></tr></table></figure><h4 id="清除所有规则"><a href="#清除所有规则" class="headerlink" title="清除所有规则"></a>清除所有规则</h4><p>注意，在使用的时候</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">iptables -F  <span class="comment"># 清空表中所有的规则</span></span><br><span class="line">iptables -X  <span class="comment"># 删除表中用户自定义的链</span></span><br><span class="line">iptables -Z  <span class="comment"># 清空计数</span></span><br><span class="line"></span><br><span class="line">iptables -t nat -F</span><br><span class="line">iptables -t nat -X</span><br><span class="line">iptables -t mangle -F</span><br><span class="line">iptables -t mangle -X</span><br><span class="line">iptables -t raw -F</span><br><span class="line">iptables -t raw -X</span><br><span class="line">iptables -t security -F</span><br><span class="line">iptables -t security -X</span><br></pre></td></tr></table></figure><h4 id="增加规则"><a href="#增加规则" class="headerlink" title="增加规则"></a>增加规则</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 增加一条规则到最后</span></span><br><span class="line">iptables -A INPUT -i eth0 -p tcp --dport 80 -m state --state NEW,ESTABLISHED -j ACCEPT</span><br><span class="line"></span><br><span class="line"><span class="comment"># 注：以下几条操作都需要使用规则的序号，需要使用 -L --line-numbers 参数先查看规则的顺序号</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加一条规则到指定位置</span></span><br><span class="line">iptables -I INPUT 2 -i eth0 -p tcp --dport 80 -m state --state NEW,ESTABLISHED -j ACCEPT</span><br></pre></td></tr></table></figure><h4 id="删除规则"><a href="#删除规则" class="headerlink" title="删除规则"></a>删除规则</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将所有 iptables 以序号标记显示</span></span><br><span class="line">iptables -L -n --line-numbers</span><br><span class="line"></span><br><span class="line"><span class="comment"># 根据规则的序号来删除</span></span><br><span class="line">iptabels -D INPUT <span class="variable">$&#123;line-numbers&#125;</span></span><br></pre></td></tr></table></figure><h4 id="修改规则"><a href="#修改规则" class="headerlink" title="修改规则"></a>修改规则</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iptables -R INPUT 3 -i eth0 -p tcp --dport 80 -m state --state NEW,ESTABLISHED -j ACCEPT</span><br></pre></td></tr></table></figure><h4 id="开放指定端口"><a href="#开放指定端口" class="headerlink" title="开放指定端口"></a>开放指定端口</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 允许本地回环接口(即运行本机访问本机)</span></span><br><span class="line">iptables -A INPUT -i lo -j ACCEPT</span><br><span class="line"></span><br><span class="line"><span class="comment"># 允许已建立的或相关连接的通行</span></span><br><span class="line">iptables -A INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT</span><br><span class="line"></span><br><span class="line"><span class="comment"># 允许所有本机向外的访问</span></span><br><span class="line">iptables -A OUTPUT -j ACCEPT</span><br><span class="line"></span><br><span class="line"><span class="comment"># 允许 22,80,443 端口的访问</span></span><br><span class="line">iptables -A INPUT -p tcp --dport 22 -j ACCEPT</span><br><span class="line">iptables -A INPUT -p tcp --dports 80,443 -j ACCEPT</span><br><span class="line"></span><br><span class="line"><span class="comment"># 允许 ping</span></span><br><span class="line">iptables -A INPUT -p icmp -m icmp --icmp-type 8 -j ACCEPT</span><br><span class="line"></span><br><span class="line"><span class="comment"># 禁止 ping</span></span><br><span class="line">iptables -A INPUT -p icmp -m icmp --icmp-type 8 -j DROP</span><br><span class="line"></span><br><span class="line"><span class="comment"># 禁止其他未允许的规则访问</span></span><br><span class="line">iptables -A INPUT -j REJECT</span><br><span class="line">iptables -A FORWARD -j REJECT</span><br></pre></td></tr></table></figure><h4 id="设置白名单"><a href="#设置白名单" class="headerlink" title="设置白名单"></a>设置白名单</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 允许机房内网机器可以访问</span></span><br><span class="line">iptables -A INPUT -p all -s 10.10.10.0/24 -j ACCEPT  </span><br><span class="line"><span class="comment"># 允许 10.10.10.22 访问本机的 22 端口</span></span><br><span class="line">iptables -A INPUT -p tcp -s 10.10.10.22 --dport 22 -j ACCEPT</span><br></pre></td></tr></table></figure><h4 id="屏蔽某-IP"><a href="#屏蔽某-IP" class="headerlink" title="屏蔽某 IP"></a>屏蔽某 IP</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment"># 屏蔽恶意主机（比如，114.114.114.114)</span></span><br><span class="line">iptables -A INPUT -p tcp -m tcp -s 114.114.114.114 -j DROP </span><br><span class="line"></span><br><span class="line"><span class="comment"># 屏蔽单个IP的命令</span></span><br><span class="line">iptables -I INPUT -s 123.45.6.7 -j DROP</span><br><span class="line"></span><br><span class="line"><span class="comment">#封整个段即从 10.10.10.1 到 10.10.10.254的命令</span></span><br><span class="line">iptables -I INPUT -s 10.10.10.0/24 -j DROP</span><br></pre></td></tr></table></figure><h4 id="指定数据包出去的网络接口"><a href="#指定数据包出去的网络接口" class="headerlink" title="指定数据包出去的网络接口"></a>指定数据包出去的网络接口</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 只对 OUTPUT，FORWARD，POSTROUTING 三个链起作用</span></span><br><span class="line">iptables -A FORWARD -o eth0</span><br></pre></td></tr></table></figure><h4 id="防止SYN洪水攻击"><a href="#防止SYN洪水攻击" class="headerlink" title="防止SYN洪水攻击"></a>防止SYN洪水攻击</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iptables -A INPUT -p tcp --syn -m <span class="built_in">limit</span> --<span class="built_in">limit</span> 5/second -j ACCEPT</span><br></pre></td></tr></table></figure><h4 id="端口映射"><a href="#端口映射" class="headerlink" title="端口映射"></a>端口映射</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 本机的 2222 端口映射到内网虚拟机的22 端口</span></span><br><span class="line">iptables -t nat -A PREROUTING -d 223.6.6.6 -p tcp --dport 2222  -j DNAT --to-dest 10.10.10.22:22</span><br></pre></td></tr></table></figure><h4 id="持久化规则："><a href="#持久化规则：" class="headerlink" title="持久化规则："></a>持久化规则：</h4><p><strong>RHEL/CentOS</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 运维千万条，备份第一条，操作不规范，数据全完蛋(大雾</span></span><br><span class="line">cp /etc/sysconfig/iptables&#123;，.bak&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 保存当前规则</span></span><br><span class="line">iptables-save &gt; /etc/sysconfig/iptables</span><br><span class="line">cat /etc/sysconfig/iptables</span><br><span class="line"></span><br><span class="line"><span class="comment"># 恢复备份规则</span></span><br><span class="line">iptables-restore &lt; iptables</span><br></pre></td></tr></table></figure><p><strong>Debian/Ubuntu</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 备份当前规则</span></span><br><span class="line">cp /etc/iptables/rules.v4&#123;,.bak&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 持久化当前规则</span></span><br><span class="line">iptables-save &gt; /etc/iptables/rules.v4</span><br></pre></td></tr></table></figure><h4 id="切记"><a href="#切记" class="headerlink" title="切记"></a>切记</h4><p>在操作 iptables 规则时一定要主要先后顺序，因为链上的规则是一条条规则遍历下来的，所以顺序出错的话，iptables 作用的效果也有可能不一样的哦。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="http://cxd2014.github.io/2017/08/15/connection-tracking-system/" target="_blank" rel="noopener">Linux协议栈–连接跟踪源码分析</a></li><li><a href="https://github.com/OSH-2019/x-xdp-on-android/blob/master/docs/research.md" target="_blank" rel="noopener">x-xdp-on-android</a></li><li><a href="http://abcdxyzk.github.io/blog/2015/03/04/kernel-net-ip/" target="_blank" rel="noopener">linux TCP/IP协议栈-IP层</a></li><li><a href="https://nieyong.github.io/wiki_cpu/CPU%E4%BD%93%E7%B3%BB%E6%9E%B6%E6%9E%84-DMA.html" target="_blank" rel="noopener">CPU体系架构 DMA</a></li><li><a href="http://blog.konghy.cn/2019/07/21/iptables/" target="_blank" rel="noopener">iptables 使用方式整理</a></li><li><a href="https://wiki.archlinux.org/index.php/Iptables_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)" target="_blank" rel="noopener">Archlinux：Iptables</a></li><li><a href="https://windard.com/opinion/2016/10/15/About-Iptables" target="_blank" rel="noopener">iptables 防火墙基本配置和使用</a></li><li><a href="http://www.ha97.com/3928.html" target="_blank" rel="noopener">Linux的 iptables 常用配置范例（1）</a></li><li><a href="https://www.bennythink.com/ufw-iptables.html" target="_blank" rel="noopener">开启 ufw 导致断网不能 ping? ufw 和 iptables 的那些坑</a></li><li><a href="https://zhuanlan.zhihu.com/p/93630586" target="_blank" rel="noopener">Linux 网络层收发包流程及 Netfilter 框架浅析</a></li><li><a href="http://www.mikewootc.com/wiki/linux/usage/linux_firewall_iptables_intro.html" target="_blank" rel="noopener">Linux防火墙与iptables介绍</a></li><li><a href="https://www.zfl9.com/iptables.html" target="_blank" rel="noopener">iptables 详解</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;最近参加了一场视频会议面试，虽然结果可能不太理想，但还是发
        
      
    
    </summary>
    
    
      <category term="技术" scheme="https://blog.502.li/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Linux 网络" scheme="https://blog.502.li/tags/Linux-%E7%BD%91%E7%BB%9C/"/>
    
      <category term="防火墙" scheme="https://blog.502.li/tags/%E9%98%B2%E7%81%AB%E5%A2%99/"/>
    
  </entry>
  
  <entry>
    <title>kubernets 相关技术调研</title>
    <link href="https://blog.502.li/k8s-01.html"/>
    <id>https://blog.502.li/k8s-01.html</id>
    <published>2020-02-29T16:00:00.000Z</published>
    <updated>2020-02-29T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>俗话说文档写得好，同行抄到老😂。</p></blockquote><p>在前期的技术选型调研过程中，对 K8s 密切相关的解决方案：网络插件、存储解决方案、监控告警系统、日志收集和处理、持续集成和交付系统等做了充分的调研和测试工作，现如今总结一下调研过程中的记录。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>俗话说文档写得好，同行抄到老😂。不过咱木子还是有点原则的，最起码标注引用来源，尊重原作者的版权。所以就在此罗列了本文 <del>剽窃</del> 引用的来源。由于是技术调研，文中提到的相关开源软件介绍多数都是引用自官方文档或者英文翻译的文档。具体的细节稍后再更新博客补充。本文的内容涉及比较多，主要参考和引用了以下站点。</p><table><thead><tr><th>站点</th><th>主要内容</th><th>印象</th></tr></thead><tbody><tr><td><a href="https://jimmysong.io/" target="_blank" rel="noopener">Jimmy Song - 宋净超的博客</a></td><td>微服务、服务网格、云原生</td><td>蚂蚁金服云原生布道师</td></tr><tr><td><a href="https://jimmysong.io/cloud-native/" target="_blank" rel="noopener">Cloud Native Wiki</a></td><td>云原生百科、图书、编年史</td><td>蚂蚁金服云原生布道师</td></tr><tr><td><a href="https://skyao.io/" target="_blank" rel="noopener">敖小剑的博客</a></td><td>微服务、服务网格、云原生</td><td>蚂蚁金服云原生布道师</td></tr><tr><td><a href="https://fuckcloudnative.io/" target="_blank" rel="noopener">云原生实验室 - 米开朗基杨的博客</a></td><td>Cloud Native</td><td>云原生布道师</td></tr><tr><td><a href="https://zhangguanzhang.github.io/" target="_blank" rel="noopener">zhangguanzhang’s Blog</a></td><td>Kubernetes、嵌入式、Linux</td><td>张馆长😂</td></tr><tr><td><a href="https://mritd.me/" target="_blank" rel="noopener">漠然的博客mritd Blog</a></td><td>Kubernetes、Golang</td><td>Java Web 开发者 1 枚</td></tr><tr><td><a href="https://moelove.info/" target="_blank" rel="noopener">MoeLove</a></td><td>Kubernetes 生态相关、开源</td><td>每周坚持周报👍</td></tr><tr><td><a href="https://k2r2bai.com/" target="_blank" rel="noopener">KaiRen’s Blog</a></td><td>Kubernetes、Docker 容器</td><td>台湾博主</td></tr><tr><td><a href="https://www.hwchiu.com/" target="_blank" rel="noopener">Hwchiu Learning Note</a></td><td>Kubernetes、SDN、DevOps</td><td>台湾博主</td></tr><tr><td><a href="https://kkc.github.io/" target="_blank" rel="noopener">Kakashi’s Blog</a></td><td>AWS、Kubernetes、Prometheus</td><td>台湾博主</td></tr><tr><td><a href="https://aleiwu.com/" target="_blank" rel="noopener">Aylei’s Blog</a></td><td>Kubernetes、云原生、TiDB</td><td>在 <a href="https://www.pingcap.com/" target="_blank" rel="noopener">PingCAP</a> 的阿磊</td></tr><tr><td><a href="https://qingmu.io/" target="_blank" rel="noopener">青木のJava小屋</a></td><td><a href="https://qingmu.io/2019/09/03/Spring-cloud-on-Kubernetes-index/" target="_blank" rel="noopener">SpringCloud on Kubernetes</a></td><td>打杂程序猿</td></tr><tr><td><a href="https://nicksors.cc/" target="_blank" rel="noopener">开元DevOps知识库</a></td><td></td><td></td></tr><tr><td><a href="https://xuchao918.github.io/" target="_blank" rel="noopener">起风了</a></td><td></td><td></td></tr><tr><td><a href="https://maiyang.me/" target="_blank" rel="noopener">茶歇驿站 </a></td><td></td><td></td></tr><tr><td><a href="https://docs.lvrui.io/" target="_blank" rel="noopener">Polar Snow Documentation</a></td><td></td><td></td></tr><tr><td><a href="http://www.rhca.me/" target="_blank" rel="noopener">DevOps – 成长之路</a></td><td></td><td></td></tr><tr><td><a href="https://blog.ihypo.net/index.html" target="_blank" rel="noopener">梦旭随想</a></td><td>Kubernetes 、容器</td><td>无栈工程师😂</td></tr><tr><td><a href="https://www.bladewan.com/" target="_blank" rel="noopener">我爱西红柿</a></td><td></td><td></td></tr><tr><td><a href="https://bingohuang.com/" target="_blank" rel="noopener">Bingo Huang</a></td><td>Golang、Docker</td><td>一个程序员的自我修养</td></tr><tr><td><a href="https://hansedong.github.io/" target="_blank" rel="noopener">国南之境</a></td><td>CoreDNS 、Kubernetes、Golang</td><td></td></tr><tr><td><a href="http://gaocegege.com/Blog/" target="_blank" rel="noopener">博客高策</a></td><td>机器学习、Kubernetes、kubebuilder</td><td>江湖小虾米</td></tr><tr><td><a href="https://birdben.github.io/" target="_blank" rel="noopener">birdben</a></td><td></td><td></td></tr><tr><td><a href="https://fs.tn/" target="_blank" rel="noopener">浮生若梦</a></td><td></td><td></td></tr><tr><td><a href="http://www.yangguanjun.com/" target="_blank" rel="noopener">ictfox blog</a></td><td></td><td></td></tr><tr><td><a href="https://www.duyidong.com/" target="_blank" rel="noopener">杜屹东的博客学无止境</a></td><td></td><td></td></tr><tr><td><a href="http://team.jiunile.com/" target="_blank" rel="noopener">CloudNative 架构</a></td><td></td><td></td></tr><tr><td><a href="https://notes.doublemine.me/" target="_blank" rel="noopener">Doublemine</a></td><td></td><td></td></tr><tr><td><a href="http://chunqi.li/" target="_blank" rel="noopener">Arthur Chunqi Li’s Blog</a></td><td></td><td></td></tr><tr><td><a href="http://chunqi.li/archives/" target="_blank" rel="noopener">Archive Arthur Chunqi Li’s Blog</a></td><td></td><td></td></tr><tr><td><a href="https://www.lijiaocn.com/" target="_blank" rel="noopener">IT技术工作学习折腾笔记 李佶澳的博客</a></td><td></td><td></td></tr><tr><td><a href="http://moheqionglin.com/site/blogs/1/list.html" target="_blank" rel="noopener">墨荷琼林官网-编程日志</a></td><td></td><td></td></tr><tr><td><a href="https://cmgs.me/archive" target="_blank" rel="noopener">Archive - Nolla</a></td><td></td><td></td></tr><tr><td><a href="https://tomoyadeng.github.io/blog/" target="_blank" rel="noopener">Tomoya’s Blog</a></td><td></td><td></td></tr><tr><td><a href="https://youendless.com/" target="_blank" rel="noopener">君无止境</a></td><td></td><td></td></tr><tr><td><a href="https://jaminzhang.github.io/" target="_blank" rel="noopener">Jamin Zhang</a></td><td></td><td></td></tr><tr><td><a href="https://imroc.io/" target="_blank" rel="noopener">roc 的博客 - imroc.io</a></td><td><a href="https://k8s.imroc.io/" target="_blank" rel="noopener">《Kubernetes实践指南》</a>、 算法</td><td></td></tr><tr><td><a href="https://sysdig.com/blog/" target="_blank" rel="noopener">Blog - Sysdig</a></td><td></td><td></td></tr><tr><td><a href="https://sleele.com/" target="_blank" rel="noopener">sleele的博客</a></td><td></td><td></td></tr><tr><td><a href="https://www.tauceti.blog/" target="_blank" rel="noopener">TauCeti blog · TauCeti blog</a></td><td></td><td></td></tr><tr><td><a href="https://zhangchenchen.github.io/" target="_blank" rel="noopener">Solar</a></td><td></td><td></td></tr><tr><td><a href="https://www.infvie.com/" target="_blank" rel="noopener">Infvie’s Blog运维SRE社区博客</a></td><td></td><td></td></tr><tr><td><a href="http://ghoulich.xninja.org/" target="_blank" rel="noopener">水晶命匣</a></td><td></td><td></td></tr><tr><td><a href="https://soulteary.com/" target="_blank" rel="noopener">苏洋博客</a></td><td></td><td></td></tr><tr><td><a href="https://ieevee.com/" target="_blank" rel="noopener">Zlatan Eevee</a></td><td></td><td></td></tr></tbody></table><h2 id="开源容器平台"><a href="#开源容器平台" class="headerlink" title="开源容器平台"></a>开源容器平台</h2><h3 id="OpenShift"><a href="#OpenShift" class="headerlink" title="OpenShift"></a><a href="https://www.openshift.com/" target="_blank" rel="noopener">OpenShift</a></h3><h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p>OpenShift 是红帽的云开发平台即服务（PaaS）。 通过 OpenShift，企业可以快速搭建稳定、安全、高效的容器应用平台。在这个平台上：</p><ul><li>可以构建企业内部的容器应用市场，为开发人员快速提供应用开发所依赖的中间件、数据库等服务。</li><li>通过自动化的流程，开发人员可以快速进行应用的构建、容器化及部署。</li><li>通过 OpenShift，用户可以贯通从应用开发到测试，再到上线的全流程，开发、测试和运维等不同的角色可以在一个平台上进行协作。</li><li>支持 LDAP 用户权限管理，支持细粒度的权限资源管理。</li><li>OpenShift 可以提高应用从研发到上线的效率和速度，缩短产品上市的时间，可以有效地帮助企业推进DevOps，提高资源利用率，提升生产效率。</li></ul><h3 id="KubeSphere"><a href="#KubeSphere" class="headerlink" title="KubeSphere"></a><a href="https://kubesphere.io/zh-CN/projects/" target="_blank" rel="noopener">KubeSphere</a></h3><h4 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h4><p><a href="https://kubesphere.io" target="_blank" rel="noopener">KubeSphere</a> 是在目前主流容器调度平台 <a href="https://kubernetes.io" target="_blank" rel="noopener">Kubernetes</a>  之上构建的企业级分布式多租户容器平台，提供简单易用的操作界面以及向导式操作方式，在降低用户使用容器调度平台学习成本的同时，极大减轻开发、测试、运维的日常工作的复杂度，旨在解决 Kubernetes  本身存在的存储、网络、安全和易用性等痛点。除此之外，平台已经整合并优化了多个适用于容器场景的功能模块，以完整的解决方案帮助企业轻松应对敏捷开发与自动化运维、微服务治理、多租户管理、工作负载和集群管理、服务与网络管理、应用编排与管理、镜像仓库管理和存储管理等业务场景。</p><p>KubeSphere 高级版提供企业级容器应用管理服务，支持更强大的功能和灵活的配置，满足企业复杂的业务需求。比如支持  Master 和 etcd 节点高可用、可视化 CI/CD 流水线、多维度监控告警日志、多租户管理、LDAP 集成、新增支持 HPA  (水平自动伸缩) 、容器健康检查以及 Secrets、ConfigMaps  的配置管理等功能，新增微服务治理、灰度发布、s2i、代码质量检查等，后续还将提供和支持多集群管理、大数据、人工智能等更为复杂的业务场景。</p><h3 id="Rancher"><a href="#Rancher" class="headerlink" title="Rancher"></a><a href="https://rancher.com/" target="_blank" rel="noopener">Rancher</a></h3><h4 id="简介-2"><a href="#简介-2" class="headerlink" title="简介"></a>简介</h4><p>Rancher 是一个开源的企业级多集群 Kubernetes 管理平台。通过 Rancher，企业再也不必自己使用一系列的开源软件去从头搭建容器服务平台。它提供了在生产环境中使用的管理 Docker 和 Kubernetes 的全栈化容器部署与管理平台。它可以帮助企业在生产环境中轻松快捷的部署和管理容器，轻松地管理各种环境的 Kubernetes ，满足IT需求并为DevOps团队提供支持。</p><h2 id="部署工具"><a href="#部署工具" class="headerlink" title="部署工具"></a>部署工具</h2><h3 id="RKE"><a href="#RKE" class="headerlink" title="RKE"></a><a href="https://github.com/rancher/rke" target="_blank" rel="noopener">RKE</a></h3><p>RKE 全称为 Rancher Kubernetes Engine，是 Rancher 开源的轻量级 K8s 集群部署工具，使用它可以快速的部署一个 K8s 集群。参考文档 <a href="https://fs.tn/post/PmaL-uIiQ" target="_blank" rel="noopener">使用RKE部署一个K8s集群并部署Rancher HA</a> 。</p><h3 id="Kops"><a href="#Kops" class="headerlink" title="Kops"></a><a href="https://github.com/kubernetes/kops" target="_blank" rel="noopener">Kops</a></h3><p><a href="https://github.com/kubernetes/kops" target="_blank" rel="noopener">kops</a> 是一个生产级 Kubernetes 集群部署工具，可以在 AWS、GCE、VMWare vSphere 等平台上自动部署高可用的 Kubernetes 集群。主要功能包括：</p><ul><li><p>命令行自动补全</p></li><li><p>全自动安装流程</p></li><li><p>使用 DNS 识别集群</p></li><li><p>支持自定义扩展 add-ons</p></li><li><p>支持高可用 - 参考 <a href="https://github.com/kubernetes/kops/blob/master/docs/high_availability.md" target="_blank" rel="noopener">high_availability.md</a></p></li><li><p>dry-run 和自动幂等升级等基于状态同步模型</p></li><li><p>支持从 <a href="https://github.com/kubernetes/kops/blob/master/docs/upgrade_from_kubeup.md" target="_blank" rel="noopener">kube-up</a> 创建的集群升级到 kops 版本</p></li><li><p>自动部署高可用的 Kubernetes 集群</p></li><li><p>自我修复：一切都在自动扩展组中运行</p></li><li><p>可以直接提供或者生成 terraform 清单 - 参考 <a href="https://github.com/kubernetes/kops/blob/master/docs/terraform.md" target="_blank" rel="noopener">terraform.md</a></p></li><li><p>支持多种操作系统（如 Debian、Ubuntu 16.04、CentOS、RHEL、Amazon Linux 和 CoreOS）</p></li></ul><h3 id="Kubeadm"><a href="#Kubeadm" class="headerlink" title="Kubeadm"></a><a href="https://github.com/kubernetes/kubeadm" target="_blank" rel="noopener">Kubeadm</a></h3><p>Kubeadm 是 Kubernetes 官方推出的集群部署工具，在 1.14.0 版本之后就已经达到生产可用 GA 的稳定性。对于刚刚接触 Kubernetes 的人员来说，Kubeadm 无疑是个好工具。需要注意的是 kubeadm 所需要的镜像是在 gcr.k8s.io 上的，被 GFW 给墙掉了，可以将镜像从墙外的台服务器上搞下来，然后通过 docker load 的方式加载镜像，这样就不会因为无法 pull 镜像 pod 一直处在 pending 状态。</p><h3 id="sealos"><a href="#sealos" class="headerlink" title="sealos"></a><a href="https://github.com/fanux/sealos" target="_blank" rel="noopener">sealos</a></h3><p>sealos 基于 kubeadm 来部署，旨在做一个简单干净轻量级稳定的 kubernetes 安装工具，能很好的支持高可用安装。特性如下：</p><ul><li>证书延期</li><li>使用简单，支持自定义配置</li><li>内核负载，极其稳定，因为简单所以排查问题也极其简单</li><li>支持离线安装，工具与资源包（二进制程序 配置文件 镜像  yaml 文件等）分离,这样不同版本替换不同离线包即可</li></ul><h3 id="kubeasz"><a href="#kubeasz" class="headerlink" title="kubeasz"></a><a href="https://github.com/easzlab/kubeasz" target="_blank" rel="noopener">kubeasz</a></h3><p>使用 Ansible 脚本安装 K8s 集群，介绍组件交互原理，方便直接，不受国内网络环境影响。是目前 kubernetes 中文社区最为热门的部署工具，GitHub 上的 start 数超过了 4K5 。基于二进制方式部署和利用<code>ansible-playbook</code>实现自动化；既提供一键安装脚本, 也可以根据<code>安装指南</code>分步执行安装各个组件。</p><ul><li>集群特性 <code>TLS</code>双向认证、<code>RBAC</code>授权、<a href="https://github.com/easzlab/kubeasz/blob/master/docs/setup/00-planning_and_overall_intro.md#ha-architecture" target="_blank" rel="noopener">多Master高可用</a>、支持<code>Network Policy</code>、备份恢复、<a href="https://github.com/easzlab/kubeasz/blob/master/docs/setup/offline_install.md" target="_blank" rel="noopener">离线安装</a></li><li>集群版本 kubernetes v1.13, v1.14, v1.15, v1.16</li><li>操作系统 CentOS/RedHat 7, Debian 9/10, Ubuntu 1604/1804</li><li>运行时 docker 18.06.x-ce, 18.09.x, <a href="https://github.com/easzlab/kubeasz/blob/master/docs/guide/containerd.md" target="_blank" rel="noopener">containerd</a> 1.2.6</li><li>网络 <a href="https://github.com/easzlab/kubeasz/blob/master/docs/setup/network-plugin/calico.md" target="_blank" rel="noopener">calico</a>, <a href="https://github.com/easzlab/kubeasz/blob/master/docs/setup/network-plugin/cilium.md" target="_blank" rel="noopener">cilium</a>, <a href="https://github.com/easzlab/kubeasz/blob/master/docs/setup/network-plugin/flannel.md" target="_blank" rel="noopener">flannel</a>, <a href="https://github.com/easzlab/kubeasz/blob/master/docs/setup/network-plugin/kube-ovn.md" target="_blank" rel="noopener">kube-ovn</a>, <a href="https://github.com/easzlab/kubeasz/blob/master/docs/setup/network-plugin/kube-router.md" target="_blank" rel="noopener">kube-router</a></li></ul><h3 id="kubespray"><a href="#kubespray" class="headerlink" title="kubespray"></a><a href="https://github.com/kubernetes-sigs/kubespray" target="_blank" rel="noopener">kubespray</a></h3><p><a href="https://github.com/kubernetes-incubator/kubespray" target="_blank" rel="noopener">Kubespray</a> 是 Kubernetes incubator 中的项目，也是 kubernetes 官方出品。目标是提供生产可用 Kubernetes 部署方案，该项目基础是通过 Ansible Playbook 来定义系统与 Kubernetes 集群部署的任务，具有以下几个特点：</p><ul><li>可以部署在 AWS, GCE, Azure, OpenStack 以及裸机上.</li><li>部署 High Available Kubernetes 集群.</li><li>可组合性 (Composable)，可自行选择 Network Plugin (flannel, calico, canal, weave) 来部署.</li><li>支持多种 Linux distributions(CoreOS, Debian Jessie, Ubuntu 16.04, CentOS/RHEL7).</li></ul><p>不过由于是国外开发者维护，有些软件包因为网络原因无法下载下来所以会比较麻烦。所以国内用户不建议触碰，除非你再去手动修改那些软件包的源为国内的。</p><h2 id="稳定版本选择"><a href="#稳定版本选择" class="headerlink" title="稳定版本选择"></a>稳定版本选择</h2><p>可以参照这张表格，来选择小版本号介于 5~~8 之间且还在维护的版本。比如 v1.16.7 ，有 CVE 安全漏洞之前的版本也不建议使用。</p><table><thead><tr><th>month</th><th>stable</th><th>stable</th><th>stable</th><th>stable</th></tr></thead><tbody><tr><td>2020-02</td><td><a href="https://github.com/kubernetes/kubernetes/releases/tag/v1.17.3" target="_blank" rel="noopener">v1.17.3</a></td><td><a href="https://github.com/kubernetes/kubernetes/releases/tag/v1.16.7" target="_blank" rel="noopener">v1.16.7</a></td><td><a href="https://github.com/kubernetes/kubernetes/releases/tag/v1.15.10" target="_blank" rel="noopener">v1.15.10</a></td><td></td></tr><tr><td>2020-01</td><td><a href="https://github.com/kubernetes/kubernetes/releases/tag/v1.17.2" target="_blank" rel="noopener">v1.17.2</a><br> <a href="https://github.com/kubernetes/kubernetes/releases/tag/v1.17.1" target="_blank" rel="noopener">v1.17.1</a></td><td><a href="https://github.com/kubernetes/kubernetes/releases/tag/v1.16.6" target="_blank" rel="noopener">v1.16.6</a><br> <a href="https://github.com/kubernetes/kubernetes/releases/tag/v1.16.5" target="_blank" rel="noopener">v1.16.5</a></td><td><a href="https://github.com/kubernetes/kubernetes/releases/tag/v1.15.9" target="_blank" rel="noopener">v1.15.9</a><br> <a href="https://github.com/kubernetes/kubernetes/releases/tag/v1.15.8" target="_blank" rel="noopener">v1.15.8</a></td><td>CVE</td></tr><tr><td>2019-12</td><td><a href="https://github.com/kubernetes/kubernetes/releases/tag/v1.17.0" target="_blank" rel="noopener">v1.17.0</a></td><td><a href="https://github.com/kubernetes/kubernetes/releases/tag/v1.16.4" target="_blank" rel="noopener">v1.16.4</a></td><td><a href="https://github.com/kubernetes/kubernetes/releases/tag/v1.15.7" target="_blank" rel="noopener">v1.15.7</a></td><td><a href="https://github.com/kubernetes/kubernetes/releases/tag/v1.14.10" target="_blank" rel="noopener">v1.14.10</a></td></tr><tr><td>2019-11</td><td><a href="https://github.com/kubernetes/kubernetes/releases/tag/v1.16.3" target="_blank" rel="noopener">v1.16.3</a></td><td><a href="https://github.com/kubernetes/kubernetes/releases/tag/v1.15.6" target="_blank" rel="noopener">v1.15.6</a></td><td><a href="https://github.com/kubernetes/kubernetes/releases/tag/v1.14.9" target="_blank" rel="noopener">v1.14.9</a></td><td></td></tr><tr><td>2019-10</td><td><a href="https://github.com/kubernetes/kubernetes/releases/tag/v1.16.1" target="_blank" rel="noopener">v1.16.1</a>  <br><a href="https://github.com/kubernetes/kubernetes/releases/tag/v1.16.2" target="_blank" rel="noopener">v1.16.2</a></td><td><a href="https://github.com/kubernetes/kubernetes/releases/tag/v1.15.5" target="_blank" rel="noopener">v1.15.5</a></td><td><a href="https://github.com/kubernetes/kubernetes/releases/tag/v1.14.8" target="_blank" rel="noopener">v1.14.8</a></td><td><a href="https://github.com/kubernetes/kubernetes/releases/tag/v1.13.12" target="_blank" rel="noopener">v1.13.12</a></td></tr><tr><td>2019-09</td><td><a href="https://github.com/kubernetes/kubernetes/releases/tag/v1.16.0" target="_blank" rel="noopener">v1.16.0</a></td><td><a href="https://github.com/kubernetes/kubernetes/releases/tag/v1.15.4" target="_blank" rel="noopener">v1.15.4</a></td><td><a href="https://github.com/kubernetes/kubernetes/releases/tag/v1.14.7" target="_blank" rel="noopener">v1.14.7</a></td><td><a href="https://github.com/kubernetes/kubernetes/releases/tag/v1.13.11" target="_blank" rel="noopener">v1.13.11</a></td></tr><tr><td>2019-08</td><td><a href="https://github.com/kubernetes/kubernetes/releases/tag/v1.15.2" target="_blank" rel="noopener">v1.15.2</a><br> <a href="https://github.com/kubernetes/kubernetes/releases/tag/v1.15.3" target="_blank" rel="noopener">v1.15.3</a></td><td><a href="https://github.com/kubernetes/kubernetes/releases/tag/v1.14.5" target="_blank" rel="noopener">v1.14.5</a> <br> <a href="https://github.com/kubernetes/kubernetes/releases/tag/v1.14.6" target="_blank" rel="noopener">v1.14.6</a></td><td><a href="https://github.com/kubernetes/kubernetes/releases/tag/v1.13.9" target="_blank" rel="noopener">v1.13.9</a>  <br><a href="https://github.com/kubernetes/kubernetes/releases/tag/v1.13.10" target="_blank" rel="noopener">v1.13.10</a></td><td>CVE</td></tr><tr><td>2019-07</td><td><a href="https://github.com/kubernetes/kubernetes/releases/tag/v1.15.1" target="_blank" rel="noopener">v1.15.1</a></td><td><a href="https://github.com/kubernetes/kubernetes/releases/tag/v1.14.4" target="_blank" rel="noopener">v1.14.4</a></td><td><a href="https://github.com/kubernetes/kubernetes/releases/tag/v1.13.8" target="_blank" rel="noopener">v1.13.8</a></td><td><a href="https://github.com/kubernetes/kubernetes/releases/tag/v1.12.10" target="_blank" rel="noopener">v1.12.10</a></td></tr><tr><td>2019-06</td><td><a href="https://github.com/kubernetes/kubernetes/releases/tag/v1.15.0" target="_blank" rel="noopener">v1.15.0</a></td><td><a href="https://github.com/kubernetes/kubernetes/releases/tag/v1.14.3" target="_blank" rel="noopener">v1.14.3</a></td><td><a href="https://github.com/kubernetes/kubernetes/releases/tag/v1.13.7" target="_blank" rel="noopener">v1.13.7</a></td><td></td></tr></tbody></table><h3 id="1-14-10"><a href="#1-14-10" class="headerlink" title="1.14.10"></a>1.14.10</h3><h4 id="上游进展"><a href="#上游进展" class="headerlink" title="上游进展"></a>上游进展</h4><ul><li>对 Windows Node 和 container 的支持达到生产级别，支持 Windows Server 2019；</li><li>本地持久化数据卷正式可用，这可以方便使用本地 SSD 之类的存储，但注意这个特性容错性较差；</li><li>Pod 优先级和抢占机制正式可用，(建议慎重使用)；</li><li>Pod Ready++ (Pod Readiness Gates) 达到稳定，可以更好的判断 Pod 及其需要的资源是否均已就绪；</li></ul><h3 id="1-15-7"><a href="#1-15-7" class="headerlink" title="1.15.7"></a>1.15.7</h3><h4 id="上游进展-1"><a href="#上游进展-1" class="headerlink" title="上游进展"></a>上游进展</h4><ul><li><p>v1.15 版本由 25 个增强功能组成，其中 2 个移动到 stable ，13 个 beta 以及 10 个 alpha ，整体上集中于稳定性改进和扩展的增强。</p></li><li><p>CRD (Custom Resource Definition) 是 Kubernetes  提供的一种可用于扩展其能力的方式，当前有很多使用 CRD 构建于 Kubernetes 上的平台/系统，可以说之后对 Kubernetes  的扩展，或者说想要基于 Kubernetes 开发，同时又想与上游保持同步的话，CRD 是个最佳的选择。</p></li><li><p>Kubeadm 在此版本开始有了自己独立的 LOGO ，同时在这个版本中 kubeadm 的功能也得到了很多的完善和补充。这使得 kubeadm 成为更普遍/更好用的搭建集群的工具，同时对集群生命周期的管理也做的更加到位了。</p></li></ul><h3 id="1-16-5"><a href="#1-16-5" class="headerlink" title="1.16.5"></a>1.16.5</h3><h4 id="上游进展-2"><a href="#上游进展-2" class="headerlink" title="上游进展"></a>上游进展</h4><ul><li>CRD 达到 GA ，这是当前社区最为推崇的一种扩展 Kubernetes 的方式，并且自从 1.7 加入后，也被越来越广泛的使用了；</li><li>准入控制 webhooks 达到 GA ，准入控制在 Kubernetes 中太过于重要了，自 1.9 该功能加入以来，被广泛用于扩展 Kubernetes 相关功能；</li><li>现在 CSI 规范中支持调整卷大小，当前正在迁移至 Beta 阶段；</li><li>IPv4/IPv6 双栈支持；</li><li>为了更好的控制 kube-apiserver 的网络流量，正在尝试给它增加一个<a href="https://github.com/kubernetes/enhancements/blob/master/keps/sig-api-machinery/20190226-network-proxy.md" target="_blank" rel="noopener">代理</a>，详情可点击链接查看；</li><li>现在 kubeadm  在 TLS bootstrap 之后，将会删除 <code>bootstrap-kubelet.conf</code>，如果有依赖此文件的小伙伴，请尽快迁移使用 <code>kubelet.conf</code> ，此外也建议先看看 RBAC 相关的内容，了解下切换的意义；</li><li><code>beta.kubernetes.io/metadata-proxy-ready</code> 和 <code>beta.kubernetes.io/kube-proxy-ds-ready</code> 都被移除了；</li><li>还有之前提到过的 <code>pps/v1beta1</code> 和 <code>apps/v1beta2</code> 已经被 <code>apps/v1</code> 取代等，这里不再一一列举了，有兴趣可参考之前的周报内容。</li></ul><h3 id="1-17-0"><a href="#1-17-0" class="headerlink" title="1.17.0"></a>1.17.0</h3><h4 id="上游进展-3"><a href="#上游进展-3" class="headerlink" title="上游进展"></a>上游进展</h4><ul><li><p>Kubernetes v1.17 包含 22 个增强功能，其中 14 个已经 stable ，4 个 beta 以及剩余 4 个 alpha 。</p></li><li><p><a href="https://github.com/kubernetes/kubernetes/pull/87714" target="_blank" rel="noopener">#87714</a> kubectl 的 <code>--server-dry-run</code> 被标记为废弃，并且可以通过使用 <code>--dry-run=server</code> 替代。并且 kubectl 的 <code>--dry-run</code> 参数接收的值，也变成了 <code>client</code>, <code>server</code> 以及 <code>none</code>；</p></li><li><p><a href="https://github.com/kubernetes/kubernetes/pull/86810" target="_blank" rel="noopener">#86810</a> <code>kubeadm config images list</code> 实现了结构化输出，支持文本，JSON，YAML 和 GO 模板等。（我个人认为，这个功能不错的，但目前我还没想到什么情况下我会需要它）；</p></li><li><p><a href="https://github.com/kubernetes/kubernetes/pull/87975" target="_blank" rel="noopener">#87975</a> <code>kubeadm upgrade node config</code> 从 v1.15 起标记废弃，现在正式移除，请使用 <code>kubeadm upgrade node phase kubelet-config</code> 代替。</p></li></ul><p><code>关于上有进展引用自</code> <a href="https://moelove.info/" target="_blank" rel="noopener">K8s生态周报</a> ，推荐各位去关注。</p><h2 id="节点-OS"><a href="#节点-OS" class="headerlink" title="节点 OS"></a>节点 OS</h2><h3 id="Photon-OS"><a href="#Photon-OS" class="headerlink" title="Photon OS"></a><a href="https://vmware.github.io/photon/" target="_blank" rel="noopener">Photon OS</a></h3><h4 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h4><p>Photon OS 是 VMware 团队对 vSphere ESXi 虚拟化平台专门打造的容器优化型操作系统，从目前的使用来看是基于 RHEL 或 CentOS 系的发行版。针对 ESXi 虚拟胡优化内核，理论上在 vSphere ESXi 虚拟化上 Photon OS 要比传统的 CentOS/Ubuntu 发行版性能要好一些，系统占用的资源也少一些。另外 Photon OS V3.0 的内核是 4.19 版本的，使用方式和 CentOS 差别不大。</p><blockquote><p>Photon OS™ is an open source Linux container host optimized for cloud-native applications, cloud platforms, and VMware infrastructure. Photon OS provides a secure run-time environment for efficiently running containers. Some of the key highlights of Photon OS are:</p><ul><li>Optimized for VMware hypervisor: The Linux kernel is tuned for performance when Photon OS runs on VMware ESXi.</li><li>Support for containers: Photon OS includes the Docker daemon and works with container orchestration frameworks, such as Mesos and Kubernetes.</li><li>Efficient lifecycle management: Photon OS is easy to manage, patch, and update, using the <a href="https://github.com/vmware/photon/blob/master/docs/photon-admin-guide.md#tiny-dnf-for-package-management" target="_blank" rel="noopener">tdnf package manager</a> and the <a href="https://github.com/vmware/pmd" target="_blank" rel="noopener">Photon Management Daemon (pmd)</a>.</li><li>Security hardened: Photon OS provides secure and up-to-date kernel and other packages, and its policies are designed to govern the system securely.</li></ul><p>For an overview of Photon OS, see <a href="https://vmware.github.io/photon/" target="_blank" rel="noopener">https://vmware.github.io/photon/</a></p></blockquote><h3 id="CoreOS"><a href="#CoreOS" class="headerlink" title="CoreOS"></a><a href="https://coreos.com/" target="_blank" rel="noopener">CoreOS</a></h3><p>CoreOS 是以安全性、一致性、可靠性为设计目标的一款操作系统。因为CoreOS的设计初衷只为运行应用容器，因此需要安装很少系统级别的依赖包即可。相比典型的Linux服务器，这就意味着CoreOS需要很低耗的CPU和高效的RAM即可满足需求。CoreOS 几乎可以运行在包括 <a href="https://coreos.com/products/" target="_blank" rel="noopener">Vagrant</a>, <a href="https://coreos.com/os/docs/latest/booting-on-ec2.html" target="_blank" rel="noopener">Amazon EC2</a>, <a href="https://coreos.com/docs/qemu/" target="_blank" rel="noopener">QEMU/KVM</a>, <a href="https://coreos.com/docs/vmware/" target="_blank" rel="noopener">VMware</a>, <a href="https://coreos.com/docs/openstack/" target="_blank" rel="noopener">OpenStack</a> 的任何平台，甚至在未安装任何软件的裸机硬件环境都可以。</p><ul><li>最小化操作系统：CoreOS 被设计成一个基于容器的最小化的现代操作系统。它比现有的 Linux 安装平均节省 40% 的 RAM（大约 114M ）并允许从 PXE 或 iPXE 非常快速的启动。</li><li>CoreOS 采用主动/被动双分区方案来实现自动更新。自动更新以单一体为单位，而不是通过逐包替换的方式进行。稍后我们将详细介绍这个。</li><li>CoreOS 使用 Linux 容器在更高抽象层次上管理服务，而没有采用通过 yum 或者 APT 工具做包的安装管理。单一的服务代码以及它所有的依赖会被打包到一个容器中，打包进入容器后就可以运行在单一的CoreOS 机器，也可以运行在 CoreOS 集群中。</li><li>Linux 容器提供与完整虚拟机相似的功能。但是容器聚焦在应用程序层次，而不是整个虚拟主机层次。因为容器不能运行独立的Linux内核，不需要一个中间件层，因此它几乎没有性能上的开销。低性能开销的特质意味着可以部署更少的机器、使用配置低的机器就可以完成虚拟机同样的功能，从而降低成本。</li></ul><h3 id="Rancher-OS"><a href="#Rancher-OS" class="headerlink" title="Rancher OS"></a>Rancher OS</h3><p>RancherOS 是 Rancher 团队所维护的开源项目，也是对标 CoreOS 一样，专门用来运行容器，并且可以运行在生产环境（至少官方做了这么样的承诺，咱也没在生产用过，不好说。在 RancherOS 中所有的进程（包括系统所有的服务，比如 udev 和 syslog）都是用 docker 来管理，这一点要比 CoreOS 更加激进一些，而 CoreOS 还是使用传统 Linux 发行版中的 systemd 来管理系统中的服务。通过移除传统 Linux 发行版中不必要的服务和库来最小化系统，使他专注单一的功能，即运行 docker 容器。</p><blockquote><p>RancherOS is the smallest, easiest way to run Docker in production. Every process in RancherOS is a container managed by Docker. This includes system services such as <code>udev</code> and <code>syslog</code>. Because it only includes the services necessary to run Docker, RancherOS is significantly smaller than most traditional operating systems. By removing unnecessary libraries and services, requirements for security patches and other maintenance are also reduced. This is possible because, with Docker, users typically package all necessary libraries into their containers.</p><p>Another way in which RancherOS is designed specifically for running Docker is that it always runs the latest version of Docker. This allows users to take advantage of the latest Docker capabilities and bug fixes.</p><p>Like other minimalist Linux distributions, RancherOS boots incredibly quickly. Starting Docker containers is nearly instant, similar to starting any other process. This speed is ideal for organizations adopting microservices and autoscaling.</p><p>Docker is an open-source platform designed for developers, system admins, and DevOps. It is used to build, ship, and run containers, using a simple and powerful command line interface (CLI). To get started with Docker, please visit the <a href="https://docs.docker.com/engine/userguide/" target="_blank" rel="noopener">Docker user guide</a>.</p></blockquote><h2 id="高可用架构"><a href="#高可用架构" class="headerlink" title="高可用架构"></a>高可用架构</h2><h3 id="参考-1"><a href="#参考-1" class="headerlink" title="参考"></a>参考</h3><ul><li><a href="https://jishu.io/kubernetes/kubernetes-master-ha/" target="_blank" rel="noopener">关于Kubernetes Master高可用的一些策略</a></li></ul><p>这张图从管理平面、执行平面和数据平面 三个部分来简单说明一下该高可用架构方案以及各个组件的功能。</p><p><img src="https://cdn.jsdelivr.net/gh/muzi502/blog/source/img/image-20191227151129673.png" alt="image-20191227151129673"></p><h3 id="etcd-高可用"><a href="#etcd-高可用" class="headerlink" title="etcd 高可用"></a>etcd 高可用</h3><p>etcd 是 Kubernetes 当中唯一带状态的服务，也是高可用的难点。Kubernetes 选用 etcd 作为它的后端数据存储仓库正是看重了其使用分布式架构，没有单点故障的特性。etcd 的高可用基本有三种思路：</p><h4 id="独立的-etcd-集群"><a href="#独立的-etcd-集群" class="headerlink" title="独立的 etcd 集群"></a>独立的 etcd 集群</h4><p>使用 3 台或者 5 台服务器只运行 etcd，独立维护和升级。甚至可以使用 CoreOS 的<code>update-engine</code>和<code>locksmith</code>，让服务器完全自主的完成升级。这个 etcd 集群将作为基石用于构建整个集群。 采用这项策略的主要动机是 etcd 集群的节点增减都需要显式的通知集群，保证 etcd 集群节点稳定可以更方便的用程序完成集群滚动升级，减轻维护负担。</p><h4 id="Master-节点-static-pod-形式"><a href="#Master-节点-static-pod-形式" class="headerlink" title="Master 节点 static pod 形式"></a>Master 节点 static pod 形式</h4><p>二是在 Kubernetes Master上用 static pod 的形式来运行 etcd，并将多台 Kubernetes Master上的 etcd 组成集群。 在这一模式下，各个服务器的 etcd 实例被注册进了 Kubernetes 当中，虽然无法直接使用<code>kubectl</code>来管理这部分实例，但是监控以及日志搜集组件均可正常工作。在这一模式运行下的 etcd 可管理性更强。</p><h4 id="self-hosted-etcd方案"><a href="#self-hosted-etcd方案" class="headerlink" title="self-hosted etcd方案"></a>self-hosted etcd方案</h4><p>三是使用 CoreOS 提出的 <a href="https://github.com/kubernetes-incubator/bootkube/issues/31" target="_blank" rel="noopener">self-hosted etcd方案</a>，将本应在底层为 Kubernetes 提供服务的 etcd 运行在Kubernetes 之上。 实现 Kubernetes 对自身依赖组件的管理。在这一模式下的 etcd 集群可以直接使用 <a href="https://github.com/coreos/etcd-operator" target="_blank" rel="noopener">etcd-operator</a> 来自动化运维，最符合 Kubernetes 的使用习惯。</p><p>这三种思路均可以实现 etcd 高可用的目标，但是在选择过程中却要根据实际情况做出一些判断。简单来讲硬件资源充足但保守的项目选方案一， 想一步到位并愿意承担一定风险的项目选方案三。折中一点选方案二。</p><h3 id="kube-apiserver-高可用"><a href="#kube-apiserver-高可用" class="headerlink" title="kube-apiserver  高可用"></a>kube-apiserver  高可用</h3><p>apiserver 本身是一个无状态服务，要实现其高可用相对要容易一些，难点在于如何将运行在多台服务器上的apiserver 用一个统一的外部入口暴露给所有Node节点。</p><p>说是难点，其实对于这种无状态服务的高可用，我们在设计业务系统的高可用方案时已经有了相当多的经验积累。需要注意的是 apiserver 所使用的 SSL 证书要包含外部入口的地址，不然 Node 节点无法正常访问 apiserver。</p><p>apiserver 的高可用也有三种基本思路：</p><h4 id="使用外部负载均衡器"><a href="#使用外部负载均衡器" class="headerlink" title="使用外部负载均衡器"></a>使用外部负载均衡器</h4><p>一是使用外部负载均衡器，不管是使用公有云提供的负载均衡器服务或是在私有云中使用<code>LVS</code>或者<code>HaProxy</code>自建负载均衡器都可以归到这一类。 负载均衡器是非常成熟的方案，在这里略过不做过多介绍。如何保证负载均衡器的高可用，则是选择这一方案需要考虑的新问题。</p><h4 id="在网络层做负载均衡"><a href="#在网络层做负载均衡" class="headerlink" title="在网络层做负载均衡"></a>在网络层做负载均衡</h4><p>二是在网络层做负载均衡。比如在 Master 节点上用<code>BGP</code>做<code>ECMP</code>，或者在Node节点上用<code>iptables</code>做NAT都可以实现。采用这一方案不需要额外的外部服务，但是对网络配置有一定的要求。</p><h4 id="在-Node-节点上使用反向代理对多个-Master-做负载均衡"><a href="#在-Node-节点上使用反向代理对多个-Master-做负载均衡" class="headerlink" title="在 Node 节点上使用反向代理对多个 Master 做负载均衡"></a>在 Node 节点上使用反向代理对多个 Master 做负载均衡</h4><p>三是在 Node 节点上使用反向代理对多个 Master 做负载均衡。这一方案同样不需要依赖外部的组件，但是当Master 节点有增减时，如何动态配置 Node 节点上的负载均衡器成为了另外一个需要解决的问题。</p><p>从目前各个集群管理工具的选择来看，这三种模式都有被使用，目前还没有明确的推荐方案产生。建议在公有云上的集群多考虑第一种模式，在私有云环境中由于维护额外的负载均衡器也是一项负担，建议考虑第二种或是第三种方案。</p><h3 id="Kube-dns-高可用"><a href="#Kube-dns-高可用" class="headerlink" title="Kube-dns  高可用"></a>Kube-dns  高可用</h3><p>严格来说 kube-dns 并不算是 Master 组件的一部分，因为它是可以跑在 Node 节点上，并用<code>Service</code>向集群内部提供服务的。但在实际环境中， 由于默认配置只运行了一份 kube-dns 实例，在其升级或是所在节点当机时，会出现集群内部 dns 服务不可用的情况，严重时会影响到线上服务的正常运行。</p><p>为了避免故障，请将 kube-dns 的<code>replicas</code>值设为 2 或者更多，并用<code>anti-affinity</code>将他们部署在不同的 Node 节点上。这项操作比较容易被疏忽，直到出现故障时才发现原来是 kube-dns 只运行了一份实例导致的故障。</p><h3 id="kube-controller-manager-与-kube-scheduler高可用"><a href="#kube-controller-manager-与-kube-scheduler高可用" class="headerlink" title="kube-controller-manager 与 kube-scheduler高可用"></a>kube-controller-manager 与 kube-scheduler高可用</h3><p>这两项服务是 Master 节点的一部分，他们的高可用相对容易，仅需要运行多份实例即可。这些实例会通过向 apiserver 中的<code>Endpoint</code>加锁的方式来进行 leader election， 当目前拿到 leader 的实例无法正常工作时，别的实例会拿到锁，变为新的leader。</p><p>目前在多个 Master 节点上采用 static pod 模式部署这两项服务的方案比较常见，激进一点也可以采用 self-hosted 的模式，在 Kubernetes 之上用<code>DaemonSet</code>或者<code>Deployment</code>来部署。</p><h2 id="网络插件"><a href="#网络插件" class="headerlink" title="网络插件"></a>网络插件</h2><h3 id="参考-2"><a href="#参考-2" class="headerlink" title="参考"></a>参考</h3><ul><li><a href="https://ieevee.com/tech/2017/08/12/k8s-flannel-src.html" target="_blank" rel="noopener">kubernetes flannel代码解析</a></li><li><a href="https://cizixs.com/2016/07/16/flannel-source-code-insight/" target="_blank" rel="noopener">flannel 源码分析</a></li><li><a href="http://www.sel.zju.edu.cn/?p=690" target="_blank" rel="noopener">技术干货|深入理解flannel</a></li><li><a href="http://dockone.io/article/618" target="_blank" rel="noopener">DockOne技术分享（十八）：一篇文章带你了解Flannel</a></li><li><a href="http://wsfdl.com/kubernetes/2018/07/09/why_not_flanneld.html" target="_blank" rel="noopener">蘑菇街 K8S 为什么不选择 flannel 网络模型</a></li><li><a href="https://ggaaooppeenngg.github.io/zh-CN/2017/09/21/flannel-%E7%BD%91%E7%BB%9C%E6%9E%B6%E6%9E%84/" target="_blank" rel="noopener">flannel 网络架构</a></li><li><a href="https://ieevee.com/tech/2017/01/18/k8s-flannel.html#k8s%E7%9A%84flannel%E6%A8%A1%E5%BC%8F" target="_blank" rel="noopener">kubernets的网络插件：flannel</a></li><li><a href="https://cizixs.com/2017/10/19/docker-calico-network/" target="_blank" rel="noopener">docker 容器网络方案：calico 网络模型</a></li><li><a href="https://mritd.me/2017/07/31/calico-yml-bug/" target="_blank" rel="noopener">Calico 部署踩坑记录</a></li><li><a href="https://chunqi.li/2015/11/15/Battlefield-Calico-Flannel-Weave-and-Docker-Overlay-Network/#Conclusion" target="_blank" rel="noopener">Battlefield: Calico, Flannel, Weave and Docker Overlay Network</a></li><li><a href="https://chunqi.li/2015/09/06/calico-docker/" target="_blank" rel="noopener">Calico: A Solution of Multi-host Network For Docker</a></li><li><a href="https://www.lijiaocn.com/%E9%A1%B9%E7%9B%AE/2017/04/11/calico-usage.html" target="_blank" rel="noopener">Calico网络的原理、组网方式与使用</a></li></ul><h3 id="静态路由"><a href="#静态路由" class="headerlink" title="静态路由"></a>静态路由</h3><p>事先设置好路由器和主机中的路由表信息，网络性能最佳的方案，但不便于管理路由表。</p><h3 id="flannel"><a href="#flannel" class="headerlink" title="flannel"></a><a href="https://github.com/coreos/flannel" target="_blank" rel="noopener">flannel</a></h3><ul><li>Flannel 是 CoreOS 团队针对 Kubernetes 设计的一个网络规划服务，简单来说，它的功能是让集群中的不同节点主机创建的 Docker 容器都具有全集群唯一的虚拟IP地址。</li><li>在默认的 Docker 配置中，每个节点上的 Docker 服务会分别负责所在节点容器的IP分配。这样导致的一个问题是，不同节点上容器可能获得相同的内外 IP 地址。并使这些容器之间能够之间通过IP地址相互找到，也就是相互 ping 通。</li><li>Flannel 的设计目的就是为集群中的所有节点重新规划 IP 地址的使用规则，从而使得不同节点上的容器能够获得“同属一个内网”且”不重复的” IP 地址，并让属于不同节点上的容器能够直接通过内网 IP 通信。</li><li>Flannel 实质上是一种“覆盖网络（overlaynetwork）”，也就是将TCP数据包装在另一种网络包里面进行路由转发和通信，目前已经支持 UDP、VXLAN、host-gw、aws-vpc、GCE 和 Alloc 路由等数据转发方式，默认的节点间数据通信方式是 UDP 转发。</li></ul><h4 id="hostgw-模式"><a href="#hostgw-模式" class="headerlink" title="hostgw 模式"></a>hostgw 模式</h4><p>性能最高，原理非常简单，直接添加路由，将目的主机当做网关，直接路由原始封包。这正是 host-gw 的含义。所有的子网和主机的信息，都保存在 etcd 中，flanneld 只需要 watch 这些数据的变化 ，实时更新路由表就行了。 核心是 IP 包在封装成桢的时候，使用路由表的“下一跳”设置上的 MAC 地址，这样可以经过二层网络到达目的宿主机。</p><p>例如，我们从 etcd 中监听到一个 Event Added 事件 subnet 为 10.1.15.0/24 被分配给主机 Public IP 192.168.0.100，hostgw 要做的工作就是在本主机上添加一条目的地址为 10.1.15.0/24，网关地址为192.168.0.100，输出设备为上文中选择的集群间交互的网卡即可。对于 Event Removed 事件，只需删除对应的路由。</p><h4 id="udp-模式"><a href="#udp-模式" class="headerlink" title="udp 模式"></a>udp 模式</h4><p>核心就是通过 TUN 设备 flannel0 实现（ TUN 设备是工作在三层的虚拟网络设备，功能是：在操作系统内核和用户应用程序之间传递 IP 包）相比两台宿主机直接通信，多出了 flanneld 的处理过程，这个过程，使用了flannel0 这个 TUN 设备，仅在发出IP包的过程中就要经过了三次用户态到内核态的数据拷贝（ linux 的上下文切换代价比较大），所以性能非常差。</p><h4 id="vxlan-模式"><a href="#vxlan-模式" class="headerlink" title="vxlan 模式"></a>vxlan 模式</h4><p>VXLAN，即 Virtual Extensible LAN（虚拟可扩展局域网），是 Linux 本身支持的一网种网络虚拟化技术。VXLAN 可以完全在内核态实现封装和解封装工作，从而通过“隧道”机制，构建出覆盖网络（Overlay Network）</p><p>VXLAN 的设计思想是：在现有的三层网络之上，“覆盖”一层虚拟的、由内核 VXLAN 模块负责维护的二层网络，使得连接在这个 VXLAN 二 nfcu 网络上的“主机”（虚拟机或容器都可以），可以像在同一个局域网（LAN）里那样自由通信。为了能够在二 nfcu 网络上打通“隧道”，VXLAN 会在宿主机上设置一个特殊的网络设备作为“隧道”的两端，叫VTEP：VXLAN Tunnel End Point（虚拟隧道端点）</p><h3 id="Calico"><a href="#Calico" class="headerlink" title="Calico"></a><a href="https://www.projectcalico.org/" target="_blank" rel="noopener">Calico</a></h3><ul><li>Calico 是一个纯 3 层的数据中心网络方案，而且无缝集成像 OpenStack 这种 IaaS 云架构，能够提供可控的VM、容器、裸机之间的IP通信。Calico 不使用叠加网络比如 Flannel 和 Libnetwork 叠加网络驱动，它是一个纯三层的方法，使用虚拟路由代替虚拟交换，每一台虚拟路由通过 BGP 协议传播可达信息（路由）到剩余数据中心。</li><li>Calico 在每一个计算节点利用 Linux Kernel 实现了一个高效的 vRouter 来负责数据转发，而每个 vRouter 通过 BGP 协议负责把自己上运行的 workload 的路由信息像整个 Calico 网络内传播——小规模部署可以直接互联，大规模下可通过指定的 BGP route reflector 来完成。</li><li>Calico 节点组网可以直接利用数据中心的网络结构（无论是 L2 或者 L3），不需要额外的 NAT，隧道或者Overlay Network 。</li><li>Calico 基于 iptables 还提供了丰富而灵活的网络 Policy，保证通过各个节点上的 ACLs 来提供 Workload 的多租户隔离、安全组以及其他可达性限制等功能。</li></ul><h3 id="NSX-T"><a href="#NSX-T" class="headerlink" title="NSX-T"></a><a href="https://docs.vmware.com/cn/VMware-NSX-T-Data-Center/index.html" target="_blank" rel="noopener">NSX-T</a></h3><p>主要适用于 vSphere 虚拟化平台，ESXi 虚拟化的不二之选。以下内容摘自官方文档 <a href="https://docs.vmware.com/cn/VMware-NSX-T-Data-Center/2.4/nsxt_24_ncp_kubernetes.pdf" target="_blank" rel="noopener">适用于 Kubernetes 和 Cloud Foundry 的 NSX Container Plug-in - 安装和管理指南</a> 。</p><p>VMware NSX-T™ Data Center（以前称为 NSX-T）提供了一个敏捷式软件定义基础架构，用来构建云原生应用程序环境。专注于为具有异构端点环境和技术堆栈的新兴应用程序框架和架构提供网络、安全和自动化并简化操作。NSX-T Data Center 支持云原生应用程序、裸机工作负载、多管理程序环境、公有云和多个云。旨在由开发组织管理、操作和使用。NSX-T Data Center 允许 IT 和开发团队选择最适合其应用程序的技术。</p><p>NSX Container Plug-in(NCP) 提供 NSX-T Data Center 与容器协调器（如 Kubernetes）之间的集成以及 NSX-T Data Center 与基于容器的 PaaS（平台即服务）产品（如 OpenShift 和 Pivotal Cloud Foundry）之间的集成。NCP 的主要组件在容器中运行，并与 NSX Manager 和 Kubernetes 控制层面进行通信。NCP 调用 NSX API 以监控对容器和其他资源的更改以及管理网络资源，如容器的逻辑端口、交换机、路由器和安全组。NSX CNI 插件在每个 Kubernetes 节点上运行。它监控容器生命周期事件，将容器接口连接到客户机 vSwitch，并对客户机 vSwitch 进行编程以标记和转发容器接口和 vNIC 之间的容器流量。</p><h4 id="功能特性"><a href="#功能特性" class="headerlink" title="功能特性"></a>功能特性</h4><ul><li><p>自动为 Kubernetes 群集创建 NSX-T Data Center 逻辑拓扑，并为每个 Kubernetes 命名空间创建一个单独的逻辑网络。</p></li><li><p>将 Kubernetes pod 连接到逻辑网络，并分配 IP 和 MAC 地址。</p></li><li><p>支持网络地址转换 (NAT) 并为每个 Kubernetes 命名空间分配一个单独的 SNAT IP。</p></li><li><p>使用 NSX-T Data Center 分布式防火墙实现 Kubernetes 网络策略。</p></li><li><p>支持输入和输出网络策略。</p></li><li><p>支持网络策略中的 IPBlock 选择器。</p></li><li><p>为网络策略指定标签选择器时，支持 matchLabels 和 matchExpression。</p></li><li><p>支持在其他命名空间中选择 pod。</p></li><li><p>实现 ClusterIP 类型的 Kubernetes 服务和 LoadBalancer 类型的服务。</p></li><li><p>使用 NSX-T 第 7 层负载平衡器实现 Kubernetes Ingress。</p></li><li><p>通过 TLS Edge 终止支持 HTTP Ingress 和 HTTPS Ingress。</p></li><li><p>支持 Ingress 默认后端配置。</p></li><li><p>支持 Ingress URI 重写。</p></li><li><p>在 NSX-T Data Center 逻辑交换机端口上为命名空间、pod 名称和 pod 标签创建标记，并允许管理员根据标记定义 NSX-T 安全组和策略。</p></li></ul><h2 id="持久化存储方案"><a href="#持久化存储方案" class="headerlink" title="持久化存储方案"></a>持久化存储方案</h2><h3 id="参考-3"><a href="#参考-3" class="headerlink" title="参考"></a>参考</h3><ul><li><p><a href="http://www.taocloudx.com/index.php?a=shows&catid=4&id=102" target="_blank" rel="noopener">GlusterFS小文件应用调优 - 技术 - TaoCloud - 软件定义智能存储</a></p></li><li><p><a href="https://czero000.github.io/2016/04/05/glusterfs-technical-explanation.html" target="_blank" rel="noopener">GlusterFS技术详解 | Zero’s Blog</a></p></li><li><p><a href="http://ceph.org.cn/2018/06/05/redhat-ceph存储-《面向生产环境的ceph-对象网关指南》/" target="_blank" rel="noopener">RedHat Ceph存储——《面向生产环境的Ceph 对象网关指南》 – Ceph开源社区</a></p></li><li><p><a href="http://www.strugglesquirrel.com/2018/03/09/ceph运维常用命令/" target="_blank" rel="noopener">ceph运维常用命令 | 奋斗的松鼠 - blog</a></p></li><li><p><a href="http://ceph.org.cn/2018/06/29/red-hat-ceph存储-《深入理解ceph架构》/" target="_blank" rel="noopener">Red Hat Ceph存储—《深入理解Ceph架构》 – Ceph开源社区</a></p></li><li><p><a href="http://ceph.org.cn/2019/04/29/k8s-存储的那点事儿：3-种-ceph-rbd-灾备方案对比/" target="_blank" rel="noopener">K8S 存储的那点事儿：3 种 Ceph RBD 灾备方案对比 – Ceph开源社区</a></p></li><li><p><a href="https://cloud.tencent.com/info/f66bfb4df31ac6e6c52c0180c02ebcc8.html" target="_blank" rel="noopener">如何基于 Ceph 攻破海量小文件存储难题-腾讯云资讯</a></p></li><li><p><a href="https://cloud.tencent.com/developer/news/137215" target="_blank" rel="noopener">海量小文件的开源存储方案选型建议 - 云+社区 - 腾讯云</a></p></li><li><p><a href="https://vmware.github.io/vsphere-storage-for-kubernetes/documentation/overview.html#vsphere-storage-concepts" target="_blank" rel="noopener">vSphere Cloud Provider | vSphere Storage for Kubernetes</a></p></li><li><p><a href="https://docs.openshift.com/container-platform/3.6/install_config/configuring_vsphere.html" target="_blank" rel="noopener">Configuring for VMWare vSphere | Installation and Configuration | OpenShift Container Platform 3.6</a></p></li><li><p><a href="https://docs.openshift.com/container-platform/3.6/install_config/persistent_storage/persistent_storage_vsphere.html#install-config-persistent-storage-persistent-storage-vsphere" target="_blank" rel="noopener">Using VMware vSphere volumes for persistent storage - Configuring Persistent Storage | Installation and Configuration | OpenShift Container Platform 3.6</a></p></li><li><p><a href="https://www.kancloud.cn/ningjing_home/ceph/462428" target="_blank" rel="noopener">GlusterFS搭建 · 王康宁的笔记 · 看云</a></p></li><li><p><a href="https://win-man.github.io/2017/08/25/NFS总结/" target="_blank" rel="noopener">NFS总结 | Win-Man’s Blog</a></p></li><li><p><a href="http://www.chinastor.com/distristor/012J01022019.html" target="_blank" rel="noopener">红帽 Ceph发布最新3.2版本_分布式存储_中国存储网</a></p></li><li><p><a href="https://mritd.me/2017/06/03/use-ceph-storage-on-kubernetes/" target="_blank" rel="noopener">Kubernetes 使用 Ceph 存储 - 漠然的博客 | mritd Blog</a></p></li><li><p><a href="https://rancher.com/docs/rancher/v2.x/en/cluster-admin/volumes-and-storage/examples/vsphere/" target="_blank" rel="noopener">vSphere Storage</a></p></li></ul><h3 id="NFS"><a href="#NFS" class="headerlink" title="NFS"></a><a href="https://kubernetes.io/docs/concepts/storage/persistent-volumes/" target="_blank" rel="noopener">NFS</a></h3><h3 id="vSphere-vSAN"><a href="#vSphere-vSAN" class="headerlink" title="vSphere vSAN"></a><a href="https://vmware.github.io/vsphere-storage-for-kubernetes/documentation/overview.html" target="_blank" rel="noopener">vSphere vSAN</a></h3><h3 id="Gluster"><a href="#Gluster" class="headerlink" title="Gluster"></a><a href="https://www.gluster.org/" target="_blank" rel="noopener">Gluster</a></h3><h3 id="Ceph"><a href="#Ceph" class="headerlink" title="Ceph"></a><a href="https://ceph.io/" target="_blank" rel="noopener">Ceph</a></h3><h4 id="Rook"><a href="#Rook" class="headerlink" title="Rook"></a><a href="https://rook.io/" target="_blank" rel="noopener">Rook</a></h4><h2 id="日志方案"><a href="#日志方案" class="headerlink" title="日志方案"></a>日志方案</h2><h3 id="采集方式："><a href="#采集方式：" class="headerlink" title="采集方式："></a>采集方式：</h3><h4 id="在宿主机上实现日志采集"><a href="#在宿主机上实现日志采集" class="headerlink" title="在宿主机上实现日志采集"></a>在宿主机上实现日志采集</h4><h4 id="在容器镜像中添加采集-Agent"><a href="#在容器镜像中添加采集-Agent" class="headerlink" title="在容器镜像中添加采集 Agent"></a>在容器镜像中添加采集 Agent</h4><h4 id="基于Sidecar日志采集方式"><a href="#基于Sidecar日志采集方式" class="headerlink" title="基于Sidecar日志采集方式"></a>基于Sidecar日志采集方式</h4><h3 id="ELK-方案"><a href="#ELK-方案" class="headerlink" title="ELK 方案"></a><a href="https://www.elastic.co/cn/what-is/elk-stack" target="_blank" rel="noopener">ELK</a> 方案</h3><h4 id="Elasticsearch"><a href="#Elasticsearch" class="headerlink" title="Elasticsearch"></a><a href="https://www.elastic.co/cn/" target="_blank" rel="noopener">Elasticsearch</a></h4><h4 id="Logstash"><a href="#Logstash" class="headerlink" title="Logstash"></a><a href="https://www.elastic.co/cn/products/logstash" target="_blank" rel="noopener">Logstash</a></h4><h4 id="Kibana"><a href="#Kibana" class="headerlink" title="Kibana"></a><a href="https://www.elastic.co/cn/products/kibana" target="_blank" rel="noopener">Kibana</a></h4><h3 id="EFK-方案"><a href="#EFK-方案" class="headerlink" title="EFK 方案"></a><a href="https://github.com/kubernetes/kubernetes/tree/master/cluster/addons/fluentd-elasticsearch" target="_blank" rel="noopener">EFK</a> 方案</h3><p>和 ELK 不同的是  EFK 方案中使用 Fluentd 来采集日志。</p><h4 id="Fluentd"><a href="#Fluentd" class="headerlink" title="Fluentd"></a><a href="https://www.fluentd.org" target="_blank" rel="noopener">Fluentd</a></h4><h2 id="监控方案"><a href="#监控方案" class="headerlink" title="监控方案"></a>监控方案</h2><h3 id="Cadvisor-InfluxDB-Grafana"><a href="#Cadvisor-InfluxDB-Grafana" class="headerlink" title="Cadvisor+InfluxDB+Grafana"></a>Cadvisor+InfluxDB+Grafana</h3><h3 id="Heapster-InfluxDB-Grafana"><a href="#Heapster-InfluxDB-Grafana" class="headerlink" title="Heapster+InfluxDB+Grafana"></a>Heapster+InfluxDB+Grafana</h3><h3 id="Promethus-metrics-Grafana"><a href="#Promethus-metrics-Grafana" class="headerlink" title="Promethus+metrics+Grafana"></a>Promethus+metrics+Grafana</h3><table><thead><tr><th align="center">采集</th><th>cAdvisor、Heapster,、collectd,、Statsd、 Tcollector、 Scout</th></tr></thead><tbody><tr><td align="center">存储</td><td>InfluxDb、OpenTSDB、 Elasticsearch</td></tr><tr><td align="center">展示</td><td>Graphite、Grafana、facette、 Cacti、Ganglia、DataDog</td></tr><tr><td align="center">告警</td><td>Nagios、prometheus、Icinga、Zabbix</td></tr></tbody></table><h4 id="Grafana"><a href="#Grafana" class="headerlink" title="Grafana"></a><a href="https://grafana.com" target="_blank" rel="noopener">Grafana</a></h4><p>开源DashBoard，后端支持多种数据库，如：Influxdb、Prometheus…，插件也比较多，功能强大。非常适合用于做展示。</p><h4 id="InfluxDB"><a href="#InfluxDB" class="headerlink" title="InfluxDB"></a><a href="https://www.influxdata.com" target="_blank" rel="noopener">InfluxDB</a></h4><p>开源分布式时间时序、事件和指标数据库，使用 Go 语言编写，性能高效，无需外部依赖，其设计目标是实现分布式和水平伸缩扩展。</p><h5 id="特性-1"><a href="#特性-1" class="headerlink" title="特性"></a>特性</h5><ul><li>使用类 SQL 语句；</li><li>提供 min, max, sum, count, mean 等聚合函数；</li><li>采用 Schemaless ，列存储，压缩率高，可以存储任意数量的列；</li><li>可以将秒级监控在后台转换为分钟级，减小存储空间 (Continuous Queries)；</li><li>Built-in Explorer 自带管理工具，默认不打开，需要在配置文件中配置；</li><li>Native HTTP API，采用内置 HTTP 服务 (Protobuf API 暂时不提供)。</li><li>支持 Regular Timeseries 以及 Irregular Timeseries，前者是指时间间隔固定，后者指不固定，例如报警、入侵事件等；</li></ul><h4 id="cAdvisor"><a href="#cAdvisor" class="headerlink" title="cAdvisor"></a><a href="https://github.com/google/cadvisor" target="_blank" rel="noopener">cAdvisor</a></h4><p> 来自 Google 的容器监控工具，也是 Kubelet 内置的容器资源收集工具。它会自动收集本机容器 CPU、内存、网络和文件系统的资源占用情况，并对外提供 cAdvisor 原生的 API。</p><h4 id="Heapster"><a href="#Heapster" class="headerlink" title="Heapster"></a><a href="https://github.com/kubernetes-retired/heapster" target="_blank" rel="noopener">Heapster</a></h4><p>由于 cAdvisor 只提供了单机的容器资源占用情况，而 Heapster 则提供了整个集群的资源监控（kubernetes 1.11 之前，hpa都是从heapster获取数据），并支持持久化数据存储到 InfluxDB</p><h4 id="kube-state-metrics"><a href="#kube-state-metrics" class="headerlink" title="kube-state-metrics"></a><a href="https://github.com/kubernetes/kube-state-metrics" target="_blank" rel="noopener">kube-state-metrics</a></h4><p>在这里作为prometheus的一个exporter来使用，提供deployment、daemonset、cronjob等服务的监控数据，由kubernestes官方提供，与prometheus紧密结合。</p><h4 id="Promethues"><a href="#Promethues" class="headerlink" title="Promethues"></a><a href="https://prometheus.io" target="_blank" rel="noopener">Promethues</a></h4><p>在Kubernetes社区中，很多人认为 Prometheus 是容器场景中监控的第一方案，成为容器监控标准的制定者。其提供强大的数据采集、数据存储、数据展示、告警等，天生完美支持 kubernetes，CNCF基金会的第二个成员，第一个是 Kubernetes 。而且 Prometheus 里面很多思想都来源于 Google 内部的监控系统 Borgmon，其方案相当成熟。</p><h5 id="特性-2"><a href="#特性-2" class="headerlink" title="特性"></a>特性</h5><ul><li>多维数据模型（有metric名称和键值对确定的时间序列）</li><li>灵活的查询语言</li><li>不依赖分布式存储</li><li>通过pull方式采集时间序列，通过http协议传输</li><li>支持通过中介网关的push时间序列的方式</li><li>监控数据通过服务或者静态配置来发现</li><li>支持多维度可视化分析和dashboard等</li></ul><h5 id="监控层面"><a href="#监控层面" class="headerlink" title="监控层面"></a>监控层面</h5><ul><li>基础设施层：监控各个主机服务器资源(包括Kubernetes的Node和非Kubernetes的Node)，如CPU,内存,网络吞吐和带宽占用,磁盘I/O和磁盘使用等指标。</li><li>中间件层：监控独立部署于Kubernetes集群之外的中间件，例如：MySQL、Redis、RabbitMQ、ElasticSearch、Nginx等。</li><li>Kubernetes 集群：监控Kubernetes集群本身的关键指标</li><li>Kubernetes 集群上部署的应用：监控部署在Kubernetes集群上的应用</li></ul><h5 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h5><ul><li>prometheus-server：数据存储以及监控数据聚合</li><li>prometheus-config-reloader：动态更新prometheus配置</li><li>rules-configmap-reloader：动态更新prometheus报警配置</li><li>alert manager：报警组件</li><li>node-exporter：节点资源信息采集组件</li><li>kube-state-metrics：动态发现endpoint，三方监控的核心组件</li><li>prometheus-operator：prometheus配置的operator</li><li>grafana：数据展现</li></ul><h2 id="CI-CD-方案"><a href="#CI-CD-方案" class="headerlink" title="CI/CD 方案"></a>CI/CD 方案</h2><h3 id="参考-4"><a href="#参考-4" class="headerlink" title="参考"></a>参考</h3><h3 id="Jenkins"><a href="#Jenkins" class="headerlink" title="Jenkins"></a><a href="https://jenkins.io/" target="_blank" rel="noopener">Jenkins</a></h3><h3 id="Gitlab-CI"><a href="#Gitlab-CI" class="headerlink" title="Gitlab CI"></a><a href="https://docs.gitlab.com/ee/ci/" target="_blank" rel="noopener">Gitlab CI</a></h3><h3 id="Drone"><a href="#Drone" class="headerlink" title="Drone"></a><a href="https://drone.io/" target="_blank" rel="noopener">Drone</a></h3><h2 id="镜像-registry"><a href="#镜像-registry" class="headerlink" title="镜像 registry"></a>镜像 registry</h2><p>镜像仓库负责存储和发布应用的镜像部署版本，在功能上并不复杂，但由于安全性的要求。用于生产发布的镜像版本必须通过严格的测试阶段，以及严密的安全检查步骤，因此建议对生产环境运行专用的生产镜像仓库；同时，在持续集成越来越普遍的情况下，为了保证开发和测试的方便，我们需要测试镜像仓库。建议生产镜像库和测试镜像库在物理上分开、网络上的连通通过防火墙策略做限制（只开放必须的端口用于镜像同步）。</p><p>在使用规则上，测试镜像仓库允许随时的镜像上传和更新，通常都会对接持续集成系统；而对于生产镜像仓库，为了保证镜像来源的安全、可控，建议限制为只能从测试镜像同步，规定只有在测试镜像仓库中标记为完成测试、经过安全检查的镜像，由有相应权限的账号，在经过必要的审批或者满足一定规则的情况下，从测试镜像仓库中把镜像同步到生产镜像仓库。一旦镜像进入生产镜像仓库，就被当做正式的生产发布版本，接下来就按照现有的生产发布和变更流程，在指定的变更窗口，从生产镜像库中拉取镜像进行部署，这样做也很好地满足安全监管要求。</p><h3 id="harbor"><a href="#harbor" class="headerlink" title="harbor"></a><a href="https://goharbor.io/" target="_blank" rel="noopener">harbor</a></h3><p>Harbor是一个用于存储和分发Docker镜像的企业级Registry服务器。通过添加一些企业必需的功能特性，例如安全、标识和管理等，扩展了开源 Docker Distribution。作为一个企业级私有Registry服务器，Harbor提供了更好的性能和安全。提升用户使用Registry构建和运行环境传输镜像的效率。Harbor支持安装在多个Registry节点的镜像资源复制，镜像全部保存在私有Registry中， 确保数据和知识产权在公司内部网络中管控。另外，Harbor也提供了高级的安全特性，诸如用户管理，访问控制和活动审计等。</p><h4 id="特性-3"><a href="#特性-3" class="headerlink" title="特性"></a>特性</h4><ul><li>镜像注册中心:支持容器镜像和Helm。为镜像提供一个注册服务和编排平台。</li><li>基于角色的访问控制: 用户可以创建不同的‘项目‘，并且拥有不同权限。</li><li>镜像复制:Harbor会在复制遇到任何错误时自动重试。 适用于负载均衡、高可用性、多数据中心、混合和多云场景</li><li>漏洞扫描：Harbor定期扫描镜像并警告用户存在漏洞。</li><li>AD/LDAP 支持:Harbor可以集成企业内部已有的AD/LDAP，用于鉴权认证管理。</li><li>OIDC支持:一种基于OAuth2的协议</li><li>垃圾回收:镜像被删除的时候可以自动垃圾回收。并且可以定时设置垃圾清理。</li><li>友好的界面操作:用户可以轻松方便的镜像管理，支持中英文等多语言。</li><li>审计:跟踪用户对镜像的操作历史</li><li>RESTful API：大多数管理操作的RESTful Api，易于与外部系统集成。 嵌入式Swagger UI可用于探索和测试API（管理界面左下角的‘API控制中心)</li><li>轻松部署：提供联机和脱机安装程序。 此外，Helm Chart用于在Kubernetes上部署Harbor。</li></ul><h3 id="quay"><a href="#quay" class="headerlink" title="quay"></a><a href="https://quay.io/" target="_blank" rel="noopener">quay</a></h3><p>在 11 月份红帽宣布开源 quay </p><h4 id="特性-4"><a href="#特性-4" class="headerlink" title="特性"></a>特性</h4><ol><li>镜像仓库高可用和灾备：数据中心内部 HA，在数据中心之间同步镜像</li><li>支持 CI：当开发人员提交代码以后，自动触发代码构建。</li><li>支持安全扫描：自动扫描容器镜像，以查找已知的安全漏洞。</li><li>企业认证：集成到现有的身份基础架构：LDAP，Keystone 等</li><li>灵活的存储后端：将容器存储在 Amazon S3，OpenStack Swift，Google 云端存储中，或直接存储到磁盘。</li><li>记录和审计 审计对于 CI 管道中的所有内容都至关重要。跟踪通过 API 和 UI 执行的操作。</li></ol><h5 id="Quay的企业级功能"><a href="#Quay的企业级功能" class="headerlink" title="Quay的企业级功能"></a>Quay的企业级功能</h5><ul><li>异地复制</li><li>高可用性和可扩展性</li><li>安全扫描</li><li>自动构建触发器</li><li>时间机器image回滚（基于build版本的回退）</li><li>细粒度的访问控制</li><li>自动连续垃圾收集，无需停机</li><li>与多个存储后端集成（ceph等）</li><li>加密的CLI密码</li><li>洪流分布</li><li>容器和应用程序注册</li><li>与Quay.io保持一致的UI和代码库</li></ul><h5 id="镜像扫描："><a href="#镜像扫描：" class="headerlink" title="镜像扫描："></a>镜像扫描：</h5><p>quay的镜像安全扫描基于clair：Clair项目是一个开源项目，使Quay Security Scanner能够检测Quay Enterprise中所有图像的漏洞，并在发现这些问题时通知开发人员。</p><h5 id="自动构建："><a href="#自动构建：" class="headerlink" title="自动构建："></a>自动构建：</h5><p>通过集成到GitHub，Bitbucket等，自动构建存储库推送操作上的映像。随着代码（GitHub，Bitbucket，GitLab和Git）中的推送操作发生，Quay将自动构建新版本的应用程序</p><h5 id="image回滚"><a href="#image回滚" class="headerlink" title="image回滚:"></a>image回滚:</h5><p>Time Machine提供图像回滚，查看标签历史记录，快速轻松地切换图像构建。</p><p>查看image build历史记录，并可以选择某个版本的构建进行回退;</p><h5 id="细颗粒度的RBAC配置"><a href="#细颗粒度的RBAC配置" class="headerlink" title="细颗粒度的RBAC配置:"></a>细颗粒度的RBAC配置:</h5><p>支持许多身份提供商：LDAP，OAuth，OpenStack Keystone等。</p><h5 id="事件和使用日志："><a href="#事件和使用日志：" class="headerlink" title="事件和使用日志："></a>事件和使用日志：</h5><ul><li>针对存储库捕获所有事件</li><li>Pull, push events</li><li>权限更改</li><li>build事件</li><li>标签更改</li></ul><h5 id="自动压缩image："><a href="#自动压缩image：" class="headerlink" title="自动压缩image："></a>自动压缩image：</h5><p>将多个docker layer压缩成一个，以创建一个layer更少的image：</p><h5 id="自动进行K8S应用部署："><a href="#自动进行K8S应用部署：" class="headerlink" title="自动进行K8S应用部署："></a>自动进行K8S应用部署：</h5><p>$ helm registry install quay.io/jzelinskie/nginx</p><h5 id="事件通知"><a href="#事件通知" class="headerlink" title="事件通知"></a>事件通知</h5><p>发布电子邮件、quay通知、webhook发布、flowdock，hipchat，基于Quay Enterprise内部各种事件的通知</p><h2 id="集群优化"><a href="#集群优化" class="headerlink" title="集群优化"></a>集群优化</h2><h3 id="网络-MTU"><a href="#网络-MTU" class="headerlink" title="网络 MTU"></a>网络 MTU</h3><h3 id="内核版本"><a href="#内核版本" class="headerlink" title="内核版本"></a>内核版本</h3><h4 id="参考文档"><a href="#参考文档" class="headerlink" title="参考文档"></a>参考文档</h4><ul><li><a href="https://mp.weixin.qq.com/s/bSNWPnFZ3g_gciOv_qNhIQ" target="_blank" rel="noopener">干货 | 携程容器偶发性超时问题案例分析（一）</a></li><li><a href="https://mp.weixin.qq.com/s/7ZZqWPE1XNf9Mn_wj1HjUw" target="_blank" rel="noopener">干货 | 携程容器偶发性超时问题案例分析（二)</a> </li><li><a href="https://github.blog/2019-11-21-debugging-network-stalls-on-kubernetes/" target="_blank" rel="noopener">Debugging network stalls on Kubernetes</a></li></ul><h3 id="service-实现形式"><a href="#service-实现形式" class="headerlink" title="service 实现形式"></a>service 实现形式</h3><p>性能对比参考文章  <a href="https://blog.fleeto.us/post/iptables-or-ipvs/" target="_blank" rel="noopener">kube-proxy 模式对比：iptables 还是 IPVS</a></p><p>kube-proxy 是 Kubernetes 中的关键组件。他的角色就是在服务（ClusterIP 和 NodePort）和其后端 Pod 之间进行负载均衡。kube-proxy 有三种运行模式，每种都有不同的实现技术：userspace、iptables 或者 IPVS。</p><p>userspace 模式非常陈旧、缓慢，已经不推荐使用。但是 iptables 和 IPVS 该如何选择呢？本文中我们会对这两种模式进行比较，看看他们在真正的微服务上下文中的表现，并解释在特定情况下的选择方法。</p><h4 id="性能对比"><a href="#性能对比" class="headerlink" title="性能对比"></a>性能对比</h4><p>iptables 的连接处理算法复杂度是 O(n)，而 IPVS 模式是 O(1)，但是在微服务环境中，其具体表现如何呢？</p><p>在多数场景中，有两个关键属性需要关注：</p><ul><li>响应时间：一个微服务向另一个微服务发起调用时，第一个微服务发送请求，并从第二个微服务中得到响应，中间消耗了多少时间？</li><li>CPU 消耗：运行微服务的过程中，总体 CPU 使用情况如何？包括用户和核心空间的 CPU 使用，包含所有用于支持微服务的进程（也包括 kube-proxy）。</li></ul><p>为了说明问题，我们运行一个微服务作为客户端，这个微服务以 Pod 的形式运行在一个独立的节点上，每秒钟发出 1000 个请求，请求的目标是一个 Kubernetes 服务，这个服务由 10 个 Pod 作为后端，运行在其它的节点上。接下来我们在客户端节点上进行了测量，包括 iptables 以及 IPVS 模式，运行了数量不等的 Kubernetes 服务，每个服务都有 10 个 Pod，最大有 10,000 个服务（也就是 100,000 个 Pod）。我们用 golang 编写了一个简单的测试工具作为客户端，用标准的 NGINX 作为后端服务。</p><h4 id="响应时间"><a href="#响应时间" class="headerlink" title="响应时间"></a>响应时间</h4><p>响应时间很重要，有助于我们理解连接和请求的差异。典型情况下，多数微服务都会使用持久或者 <code>keepalive</code> 连接，这意味着每个连接都会被多个请求复用，而不是每个请求一次连接。这很重要，因为多数连接的新建过程都需要完成三次 TCP 握手的过程，这需要消耗时间，也需要在 Linux 网络栈中进行更多操作，也就会消耗更多 CPU 和时间。</p><p><img src="https://cdn.jsdelivr.net/gh/muzi502/blog/source/img/Picture1.png" alt="Round-Trip Response TIme vs Number of Services"></p><p>这张图展示了两个关键点：</p><ul><li>iptables 和 IPVS 的平均响应时间在 1000 个服务（10000 个 Pod）以上时，会开始观察到差异。</li><li>只有在每次请求都发起新连接的情况下，两种模式的差异才比较明显。</li></ul><p>不管是 iptables 还是 IPVS，kube-proxy 的响应时间开销都是和建立连接的数量相关的，而不是数据包或者请求数量，这是因为 Linux 使用了 Conntrack，能够高效地将数据包和现存连接关联起来。如果数据包能够被 Conntrack 成功匹配，那就不需要通过 kube-proxy 的 iptables 或 IPVS 规则来推算去向。Linux conntrack 非常棒！（绝大多数时候）</p><p>值得注意的是，例子中的服务端微服务使用 NGINX 提供一个静态小页面。多数微服务要做更多操作，因此会产生更高的响应时间，也就是 kube-proxy 处理过程在总体时间中的占比会减少。</p><p>还有个需要解释的古怪问题：既然 IPVS 的连接过程复杂度是 O(1)，为什么在 10,000 服务的情况下，非 Keepalive 的响应时间还是提高了？我们需要深入挖掘更多内容才能解释这一问题，但是其中一个因素就是因为上升的 CPU 用量拖慢了整个系统。这就是下一个主题需要探究的内容。</p><h4 id="CPU-用量"><a href="#CPU-用量" class="headerlink" title="CPU 用量"></a>CPU 用量</h4><p>为了描述 CPU 用量，下图关注的是最差情况：不使用持久/keepalive 连接的情况下，kube-proxy 会有最大的处理开销。</p><p><img src="https://cdn.jsdelivr.net/gh/muzi502/blog/source/img/Picture2.png" alt="Total CPU"></p><p>上图说明了两件事：</p><ul><li>在超过 1000 个服务（也就是 10,000 个 Pod）的情况下，CPU 用量差异才开始明显。</li><li>在一万个服务的情况下（十万个后端 Pod），iptables 模式增长了 0.35 个核心的占用，而 IPVS 模式仅增长了 8%。</li></ul><p>有两个主要因素造成 CPU 用量增长：</p><p>第一个因素是，缺省情况下 kube-proxy 每 30 秒会用所有服务对内核重新编程。这也解释了为什么 IPVS 模式下，新建连接的 O(1) 复杂度也仍然会产生更多的 CPU 占用。另外，如果是旧版本内核，重新编程 iptables 的 API 会更慢。所以如果你用的内核较旧，iptables 模式可能会占用更多的 CPU。</p><p>另一个因素是，kube-proxy 使用 IPVS 或者 iptables 处理新连接的消耗。对 iptables 来说，通常是 O(n) 的复杂度。在存在大量服务的情况下，会出现显著的 CPU 占用升高。例如在 10,000 服务（100,000 个后端 Pod）的情况下，iptables 会为每个请求的每个连接处理大约 20000 条规则。如果使用 NINGX 缺省每连接 100 请求的 keepalive 设置，kube-proxy 的 iptables 规则执行次数会减少为 1%，会把 iptables 的 CPU 消耗降低到和 IPVS 类似的水平。</p><p>客户端微服务会简单的丢弃响应内容。真实世界中自然会进行更多处理，也会造成更多的 CPU 消耗，但是不会影响 CPU 消耗随服务数量增长的事实。</p><h4 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h4><p>在超过 1000 服务的规模下，kube-proxy 的 IPVS 模式会有更好的性能表现。虽然可能有多种不同情况，但是通常来说，让微服务使用持久连接、运行现代内核，也能取得较好的效果。如果运行的内核较旧，或者无法使用持久连接，那么 IPVS 模式可能是个更好的选择。</p><p>抛开性能问题不谈，IPVS 模式还有个好处就是具有更多的负载均衡算法可供选择。</p><p>如果你还不确定 IPVS 是否合适，那就继续使用 iptables 模式好了。这种传统模式有大量的生产案例支撑，他是一个不完美的缺省选项。</p><h4 id="补充：Calico-和-kube-proxy-的-iptables-比较"><a href="#补充：Calico-和-kube-proxy-的-iptables-比较" class="headerlink" title="补充：Calico 和 kube-proxy 的 iptables 比较"></a>补充：Calico 和 kube-proxy 的 iptables 比较</h4><p>本文中我们看到，kube-proxy 中的 iptables 用法在大规模集群中可能会产生性能问题。有人问我 Calico 为什么没有类似的问题。答案是 Calico 中 kube-proxy 的用法是不同的。kube-proxy 使用了一个很长的规则链条，链条长度会随着集群规模而增长，Calico 使用的是一个很短的优化过的规则链，经由 ipsets 的加持，也具备了 O(1) 复杂度的查询能力。</p><p>下图证明了这一观点，其中展示了每次连接过程中，kube-proxy 和 Calico 中 iptables 规则数量的平均值。这里假设集群中的节点平均有 30 个 Pod，每个 Pod 具有 3 个网络规则。</p><p><img src="https://cdn.jsdelivr.net/gh/muzi502/blog/source/img/Picture3.png" alt="calico vs kube-proxy"></p><p>即使是使用 10,000 个服务和 100,000 个 Pod 的情况下，Calico 每连接执行的 iptables 规则也只是和 kube-proxy 在 20 服务 200 个 Pod 的情况基本一致。</p><h2 id="安全加固"><a href="#安全加固" class="headerlink" title="安全加固"></a>安全加固</h2><h3 id="简介：CIS-Kubernetes-安全基准指南"><a href="#简介：CIS-Kubernetes-安全基准指南" class="headerlink" title="简介：CIS Kubernetes 安全基准指南"></a><a href="https://blog.fleeto.us/post/cis-benchmark-brief/" target="_blank" rel="noopener">简介：CIS Kubernetes 安全基准指南</a></h3><h3 id="33-个-Kubernetes-安全工具"><a href="#33-个-Kubernetes-安全工具" class="headerlink" title="33 个 Kubernetes 安全工具"></a><a href="https://blog.fleeto.us/post/33-kubernetes-security-tools/" target="_blank" rel="noopener">33 个 Kubernetes 安全工具</a></h3><h3 id="工具"><a href="#工具" class="headerlink" title="工具"></a>工具</h3><h4 id="TUF"><a href="#TUF" class="headerlink" title="TUF"></a><a href="https://theupdateframework.github.io/" target="_blank" rel="noopener">TUF</a></h4><p>TUF 是一项用于保护软件更新系统的开源安全技术，也是从云原生计算基金会毕业的第一个以规范与安全性为重点的项目。与此同时，TUF 还是首个源自高校的 CNCF 毕业项目。</p><h4 id="kube-score"><a href="#kube-score" class="headerlink" title="kube-score"></a><a href="https://github.com/zegl/kube-score" target="_blank" rel="noopener">kube-score</a></h4><p>kube-score 是 K8s 对象静态检查工具，通过分析 K8s 对象的 Yaml 文件做一些推荐，以提升可靠性和安全性。</p><h2 id="Ingress"><a href="#Ingress" class="headerlink" title="Ingress"></a>Ingress</h2><h3 id="常见-ingress-对比列表"><a href="#常见-ingress-对比列表" class="headerlink" title="常见 ingress 对比列表"></a>常见 ingress 对比列表</h3><table><thead><tr><th><a href="https://medium.com/flant-com/comparing-ingress-controllers-for-kubernetes-9b397483b46b" target="_blank" rel="noopener">全文</a></th><th>Kubernetes Ingress</th><th>NGINX Ingress</th><th>Traefik</th><th>HAproxy</th><th>Contour</th></tr></thead><tbody><tr><td>Protocol</td><td>http/https, http2, grpc, tcp/udp (partial)</td><td>http/https, http2, grpc, tcp/udp</td><td>http/https, http2 (h2c), grpc, tcp, tcp+tls</td><td>http/https, http2, grpc, tcp, tcp+tls</td><td>http/https, http2, grpc, tcp/udp, tcp+tls</td></tr><tr><td>base</td><td>nginx</td><td>nginx/nginx plus</td><td>traefik</td><td>haproxy</td><td>envoy</td></tr><tr><td>Traffic routing</td><td>host, path (with regex)</td><td>host, path</td><td>host (regex), path (regex), headers (regex), query, path prefix, method</td><td>host, path</td><td>host, path</td></tr><tr><td>Namespace limitations</td><td>All cluster or specified namespaces</td><td>All cluster or specified namespaces</td><td>All cluster or specified namespaces</td><td>All cluster or specified namespaces</td><td>All cluster or specified namespaces</td></tr><tr><td>Traffic distribution</td><td>canary, a/b (cookie balancing)</td><td>-</td><td>canary, blue-green, shadowing</td><td>blue-green, shadowing</td><td>canary, blue-green</td></tr><tr><td>Upstream probes</td><td>retry, timeouts</td><td>retry, active health checks (based on http probe for pod)</td><td>retry, timeouts, active, circuit breaker</td><td>check-uri, check-address, check-port</td><td>timeouts, active</td></tr><tr><td>负载均衡</td><td>round-robin, sticky sessions, least-conn, ip-hash, ewma</td><td>round-robin, least-conn, least-time, random, sticky sessions</td><td>weighted-round-robin, dynamic-round-robin, sticky sessions</td><td>round-robin, static-rr, leastconn, first, source, uri, url_param, header, sticky sessions</td><td>round-robin, sticky sessions, weighted-least-request, ring hash, maglev, random</td></tr><tr><td>Authentication</td><td>Basic, Client cert, external Basic, external OAuth</td><td>Basic</td><td>Basic, auth-url, auth-tls, external auth</td><td>Basic, OAuth, Auth TLS</td><td>-</td></tr><tr><td>Paid subscription</td><td>-</td><td>+</td><td>+</td><td>+</td><td>-</td></tr><tr><td>GUI</td><td>-</td><td>+</td><td>+</td><td>-</td><td>-</td></tr><tr><td>JWT validation</td><td>-</td><td>+</td><td>-</td><td>+</td><td>-</td></tr><tr><td>Basic DDoS protection</td><td>rate limit, limit conn, liimt rps, limit rpm, limit-rate-after, limit-whitelist</td><td>rate limit, rate-limit-burst</td><td>max-conn, rate limit, ip whitelist</td><td>limit-rps, limit-connections, limit-whitelist</td><td>max-conn, max-request</td></tr><tr><td>Requests tracing</td><td>+</td><td>-</td><td>+</td><td>-</td><td>-</td></tr><tr><td>Config customization</td><td>+</td><td>+</td><td>+</td><td>+</td><td>-</td></tr><tr><td>WAF</td><td>lua-resty-waf, ModSecurity</td><td>+</td><td>-</td><td>ModSecurity</td><td>-</td></tr></tbody></table><h3 id="Ingress-NGINX"><a href="#Ingress-NGINX" class="headerlink" title="Ingress NGINX"></a><a href="https://github.com/kubernetes/ingress-nginx" target="_blank" rel="noopener">Ingress NGINX</a></h3><p>Kubernetes 官方维护的方案</p><h3 id="Traefik"><a href="#Traefik" class="headerlink" title="Traefik"></a><a href="https://github.com/containous/traefik" target="_blank" rel="noopener">Traefik</a></h3><p>是一个用 Golang 开发的轻量级的 http 反向代理和负载均衡器，虽然相比于 nginx ，它是后起之秀，但是它天然拥抱 Kubernetes，直接与集群 K8s 的 api Server通信，反应非常迅速，实时感知集群中 ingress 定义的路由规则集合和后端 Service、Pod 的变化，自动热更新 Traefik 后端配置，根本不用创建 ingress controller 对象，同时还提供了友好的控制面板和监控界面，不仅可以方便地查看 Traefik 根据 ingress 生成的路由配置信息，还可以查看统计的一些性能指标数据，如：总响应时间、平均响应时间、不同的响应码返回的总次数等。</p><h3 id="Contour"><a href="#Contour" class="headerlink" title="Contour"></a><a href="https://github.com/projectcontour/contour" target="_blank" rel="noopener">Contour</a></h3><p>Contour 不仅基于 Envoy，而且还与该流行代理的作者共同开发。通过特殊的 CRD（称为 Ingress Route 的新API ）管理 Ingress 资源的能力是其特殊功能。对于具有多个开发团队并发使用一个集群的组织，这有助于保护相邻环境中的流量并保护它们免受 Ingress 资源更改时产生的错误的影响。</p><p>它还提供了一组扩展的平衡算法（镜像，自动重复，限制请求率等等），详细的流量和故障监控。对于某些人来说，也许缺少对粘性会议的支持将是一个严重的缺陷（朝这个方向的 <a href="https://link.zhihu.com/?target=https%3A//github.com/projectcontour/contour/issues/361">持续努力</a> 已经走了很长一段路）。</p><h4 id="F5-BIG-IP-Controller"><a href="#F5-BIG-IP-Controller" class="headerlink" title="F5 BIG-IP Controller"></a><a href="https://clouddocs.f5.com/products/connectors/K8s-bigip-ctlr/v1.5/" target="_blank" rel="noopener">F5 BIG-IP Controller</a></h4><p>F5 所开发的控制器，它能够让管理员通过 CLI 或 API 让 Kubernetes 与 OpenShift 管理 F5 BIG-IP 设备。</p><h2 id="性能测试"><a href="#性能测试" class="headerlink" title="性能测试"></a>性能测试</h2><h3 id="高可用测试"><a href="#高可用测试" class="headerlink" title="高可用测试"></a>高可用测试</h3><h4 id="应用高可用"><a href="#应用高可用" class="headerlink" title="应用高可用"></a>应用高可用</h4><p>使用工具随机杀死集群中一半的 Pod ，来测试工作负载的可用性。</p><ul><li><p><a href="https://github.com/berkay-dincer/kubethanos" target="_blank" rel="noopener">berkay-dincer/kubethanos</a> </p></li><li><p><a href="https://github.com/asobti" target="_blank" rel="noopener">asobti</a>/<a href="https://github.com/asobti/kube-monkey" target="_blank" rel="noopener">kube-monkey</a></p></li><li><p><a href="https://github.com/linki" target="_blank" rel="noopener">linki</a>/<a href="https://github.com/linki/chaoskube" target="_blank" rel="noopener">chaoskube</a></p></li></ul><h3 id="网络性能测试"><a href="#网络性能测试" class="headerlink" title="网络性能测试"></a>网络性能测试</h3><h4 id="End-to-End-Testing-in-Kubernetes"><a href="#End-to-End-Testing-in-Kubernetes" class="headerlink" title="End-to-End Testing in Kubernetes"></a><a href="https://github.com/kubernetes/community/blob/master/contributors/devel/sig-testing/e2e-tests.md" target="_blank" rel="noopener">End-to-End Testing in Kubernetes</a></h4><h3 id="存储性能测试"><a href="#存储性能测试" class="headerlink" title="存储性能测试"></a>存储性能测试</h3><ul><li><a href="https://blog.fleeto.us/post/kubernetes-storage-performance-comparison/" target="_blank" rel="noopener">Kubernetes 存储性能对比</a>_</li><li><a href="https://www.v2ex.com/t/453961" target="_blank" rel="noopener">K8s分布式存储方案的选择</a></li><li><a href="http://www.youruncloud.com/blog/131.html" target="_blank" rel="noopener">Kubernetes网络原理及方案</a></li><li><a href="http://www.yangguanjun.com/2017/09/04/kubernetes-storage-confuse/" target="_blank" rel="noopener">kubernetes里存储概念的解疑</a></li><li><a href="https://www.ibm.com/developerworks/cn/opensource/os-cn-glusterfs-docker-volume/index.html" target="_blank" rel="noopener">基于 GlusterFS 实现 Docker 集群的分布式存储</a></li><li><a href="http://storage.it168.com/a2019/0114/5145/000005145601.shtml" target="_blank" rel="noopener">为什么Kubernetes的存储如此艰难?</a></li><li><a href="https://blog.fleeto.us/post/the-ultimate-rook-and-ceph-survival-guide/" target="_blank" rel="noopener">Rook &amp; Ceph 简介</a></li><li><a href="https://blog.gmem.cc/rook-based-K8s-storage-solution" target="_blank" rel="noopener">基于Rook的Kubernetes存储方案</a></li><li><a href="http://www.strugglesquirrel.com/2018/08/09/ceph存储三十亿个小文件的实践/" target="_blank" rel="noopener">ceph存储三十亿个小文件的实践</a></li><li><a href="https://tech.meituan.com/2016/03/11/block-store.html" target="_blank" rel="noopener">分布式块存储系统Ursa的设计与实现</a></li><li><a href="http://www.yangguanjun.com/2017/09/04/kubernetes-storage-confuse/" target="_blank" rel="noopener">最近也在折腾 kubernetes给你一个分享</a></li></ul><h2 id="周边"><a href="#周边" class="headerlink" title="周边"></a>周边</h2><h3 id="dashboard"><a href="#dashboard" class="headerlink" title="dashboard"></a><a href="https://github.com/kubernetes/dashboard" target="_blank" rel="noopener">dashboard</a></h3><h3 id="Octant"><a href="#Octant" class="headerlink" title="Octant"></a><a href="https://github.com/vmware/octant" target="_blank" rel="noopener">Octant</a></h3><h3 id="Kuboard"><a href="#Kuboard" class="headerlink" title="Kuboard"></a><a href="https://kuboard.cn/" target="_blank" rel="noopener">Kuboard</a></h3><h3 id="Kustomize"><a href="#Kustomize" class="headerlink" title="Kustomize"></a><a href="https://github.com/kubernetes-sigs/kustomize/releases" target="_blank" rel="noopener">Kustomize</a></h3><p><strong>特性：</strong></p><ul><li>功能简单清晰，kubectl 直接支持。</li><li>不考虑派生，仅作为应用的 YAML 组织方式也很有帮助。</li><li>也有自己的插件系统。例如可以用简单的 YAML 定义，使用文件生成 Configmap/Secret。</li></ul><h3 id="helm"><a href="#helm" class="headerlink" title="helm"></a><a href="https://helm.sh/" target="_blank" rel="noopener">helm</a></h3><p><strong>特性：</strong></p><ul><li><p>强大的生命周期管理：有 Tiller 的帮助，可以实现对应用程序实例（Release）的查询、安装、卸载、升级、回滚等复杂操作。</p></li><li><p>严格的基础版本管控：Chart 是一种模板，Chart 的用户仅能通过对 <code>values</code> 的控制来定制应用的部署行为，模板中没有提供变量的位置，是无法在下游直接进行变更的。</p></li><li><p>方便的命令行：对于简单变量，可以在部署的同时直接指定内容，方便部署。</p></li><li><p>插件和工具：Helm 拥趸众多，提供了不少用于 CICD 或者其它方面辅助功能的插件和工具。</p><p><strong>V3</strong></p></li><li><p>移除Tiller 组件：只有helm这个客户端来和kubernetes集群进行交互操作。helm2的交互流程： <code>helm client –gRPC–&gt; helm server (Tiller) –&gt; kubernetes api (install chart)</code></p></li><li><p>Release name 可缩小至Namespace范围（意味着release name 可重复）：helm2 中的 release name 是全局的，意味着即使安装某个chart到不同的Namespace，release name名字也不能一样。Chart Release 记录都和 Tiller 服务一起，在一个 Namespace 中。现在由于移除了 Tiller 组件，每个 chart 的 Release 记录与它部署到哪个 namespace 一样，存在同一个 Namespace中 。这样就可以在不同 Namespace 中使用同一个Release name。</p></li><li><p>默认关闭随机生成release name，需要显示启用选项 <code>--generate-name</code></p></li><li><p>移除 helm serve 提供本地repository 功能</p></li><li><p>将requirements.yaml的内容移到Chart.yaml文件中</p></li><li><p>支持 helm push 到远端 chart repository，支持登陆认证</p></li><li><p>支持 Chart Library（keeping charts DRY.）</p></li><li><p>简化内置模版里面的对象</p></li><li><p>使用JSONSchema验证chart的Values</p></li></ul><h3 id="Operator"><a href="#Operator" class="headerlink" title="Operator"></a><a href="https://coreos.com/operators/" target="_blank" rel="noopener">Operator</a></h3><p>Operator 是由 CoreOS 开发的，用来扩展 Kubernetes API，特定的应用程序控制器，它用来创建、配置和管理复杂的有状态应用，如数据库、缓存和监控系统。Operator 基于 Kubernetes 的资源和控制器概念之上构建，但同时又包含了应用程序特定的领域知识。创建Operator 的关键是CRD（自定义资源）的设计。</p><p>Kubernetes 1.7 版本以来就引入了<a href="https://kubernetes.io/docs/concepts/api-extension/custom-resources/" target="_blank" rel="noopener">自定义控制器</a>的概念，该功能可以让开发人员扩展添加新功能，更新现有的功能，并且可以自动执行一些管理任务，这些自定义的控制器就像 Kubernetes 原生的组件一样，Operator 直接使用 Kubernetes API进行开发，也就是说他们可以根据这些控制器内部编写的自定义规则来监控集群、更改 Pods/Services、对正在运行的应用进行扩缩容。</p><p>Operator Framework 同样也是 CoreOS 开源的一个用于快速开发 Operator 的工具包，该框架包含两个主要的部分：</p><ul><li><p>Operator SDK: 无需了解复杂的 Kubernetes API 特性，即可让你根据你自己的专业知识构建一个 Operator 应用。</p></li><li><p>Operator Lifecycle Manager OLM: 帮助你安装、更新和管理跨集群的运行中的所有 Operator（以及他们的相关服务）</p><p><strong>工作流程：</strong></p></li></ul><ol><li>使用 SDK 创建一个新的 Operator 项目</li><li>通过添加自定义资源（CRD）定义新的资源 API</li><li>指定使用 SDK API 来 watch 的资源</li><li>定义 Operator 的协调（reconcile）逻辑</li><li>使用 Operator SDK 构建并生成 Operator 部署清单文件</li></ol><h3 id="kubebuilder"><a href="#kubebuilder" class="headerlink" title="kubebuilder"></a><a href="https://github.com/kubernetes-sigs/kubebuilder/releases" target="_blank" rel="noopener">kubebuilder</a></h3><p>目前扩展 Kubernetes 的 API 的方式有创建 <a href="https://jimmysong.io/kubernetes-handbook/concepts/crd.html" target="_blank" rel="noopener">CRD</a>、使用 <a href="https://jimmysong.io/kubernetes-handbook/develop/operator.html" target="_blank" rel="noopener">Operator</a> SDK 等方式，都需要写很多的样本文件（boilerplate），使用起来十分麻烦。为了能够更方便构建 Kubernetes API 和工具，就需要一款能够事半功倍的工具，与其他 Kubernetes API 扩展方案相比，kubebuilder 更加简单易用，并获得了社区的广泛支持。</p><p>通过 Operator 的方案，可以对 Kubernetes 的功能进行友好地扩展。Operatpr = CRD + Controller。首先通过 yaml 定义，生成 CRD ，然后 Controller 不断地监听 etcd 中的数据，执行相应动作。开发 Operator 时，有很多繁琐且重复的事情。KubeBuilder 可以帮助我们快速生成骨架代码，开发一个 Kubernetes 的扩展功能， 更多介绍可以参考文档：<a href="https://www.chenshaowen.com/blog/complex-application-management-framework-operator-for-kubernetes.html" target="_blank" rel="noopener">Kubernetes 复杂有状态应用管理框架 – Operator</a> </p><p><strong>工作流程：</strong></p><ol><li>创建一个新的工程目录</li><li>创建一个或多个资源 API CRD 然后将字段添加到资源</li><li>在控制器中实现协调循环（reconcile loop），watch 额外的资源</li><li>在集群中运行测试（自动安装 CRD 并自动启动控制器）</li><li>更新引导集成测试测试新字段和业务逻辑</li><li>使用用户提供的 Dockerfile 构建和发布容器</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;blockquote&gt;
&lt;p&gt;俗话说文档写得好，同行抄到老😂
        
      
    
    </summary>
    
    
      <category term="技术" scheme="https://blog.502.li/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="容器" scheme="https://blog.502.li/tags/%E5%AE%B9%E5%99%A8/"/>
    
      <category term="K8s" scheme="https://blog.502.li/tags/K8s/"/>
    
      <category term="调研" scheme="https://blog.502.li/tags/%E8%B0%83%E7%A0%94/"/>
    
  </entry>
  
  <entry>
    <title>知名软件基金会概览</title>
    <link href="https://blog.502.li/nonprofit-foundation-overview.html"/>
    <id>https://blog.502.li/nonprofit-foundation-overview.html</id>
    <published>2020-02-27T16:00:00.000Z</published>
    <updated>2020-02-29T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>For the benefit of all. —– <a href="https://en.wikiquote.org/wiki/NASA" target="_blank" rel="noopener">NASA motto.</a></p></blockquote><p>在去年的时候就计划着写一些关于美国非营利性组织的一些文章，比如关于 Linux  基金会、自由软件基金会、电子前哨基金会，拖延症犯了一直未能更新。最近因为疫情影响吧，也让我看到了这个社会公民自发自救的能力在官僚体制下被严格限制，几乎看不到独立的非盈利组织来进行自救。面对天灾人祸，让我想起了 BBC 的一遍报道 <a href="https://www.bbc.com/zhongwen/simp/chinese-news-43972586" target="_blank" rel="noopener">汶川地震十年系列—公民社会从爆发到沉寂的艰难之路</a> 。所以最近就开始打算写一些关于非营利性组织的事儿，今天就先开个头写个简单的介绍一下我所熟知的非营利性组织，绝大多数都是和开源软件、自由软件、互联网等相关的。也算是个普及，让大家知道自己所使用的开源软件/自由软件属于哪一些非盈利组织在维护和支持。</p><p><img src="https://cdn.jsdelivr.net/gh/muzi502/blog/source/img/image-20200224135131632.png" alt="image-20200224135131632"></p><h2 id="非营利组织与基金会"><a href="#非营利组织与基金会" class="headerlink" title="非营利组织与基金会"></a>非营利组织与基金会</h2><h3 id="基金会"><a href="#基金会" class="headerlink" title="基金会"></a>基金会</h3><blockquote><p>在维基百科中描述到：基金会是利用自然人、法人或者其他组织捐赠的财产，从事慈善、公益事业的非营利性财团法人（Stiftung）。法人（Juristische Person）是自然人以外，由法律所创设，得为权利及义务主体的团体。自法人之组织内容观察，有以社员的集合为中心者称为“社团”，有以独立财产为中心者称为“财团”。法人本身为抽象的“单一体”（Einheit），与各社员或财产分离，具有独立的法人格，可以独立为法律行为。</p></blockquote><h3 id="非盈利组织"><a href="#非盈利组织" class="headerlink" title="非盈利组织"></a>非盈利组织</h3><blockquote><p>非营利组织（英语：Nonprofit  Organization，NPO）是指不以营利为目的组织或团体[1]，其核心目标通常是支持或处理个人关心或者公众关注的议题或事件，因此其所涉及的领域非常广，从艺术、慈善、教育、政治、公共政策、宗教、学术、环保等，分别担任起弥补社会需求与政府供给间的落差。</p></blockquote><p>摘自维基百科 <a href="https://zh.wikipedia.org/wiki/非營利組織" target="_blank" rel="noopener">非营利组织</a></p><p>通俗来讲，非营利组织的目的不是为了赚钱，目的是出于支持公众利益活着个人考虑，比如宗教、教育、慈善、社会事务、商业协会、研究机构、艺术体育等，可涉及的范围相当广。其最重要的特征之一是它并不为成立人所拥有，也不能为政府所拥有。与成立营利公司不同，非营利组织成立人不能接受公司利润分红。但是，成立人可以给自己发放合理的工资。因为非营利组织是面向公众，因此公司的财务和税务也要向公众开放。</p><p><strong>独立自主、公开透明</strong> 这是我个人认为的非营利性组织最重要的价值原则。</p><h3 id="基金会与非盈利组织的关系"><a href="#基金会与非盈利组织的关系" class="headerlink" title="基金会与非盈利组织的关系"></a>基金会与非盈利组织的关系</h3><p>有人说一图胜千言，以下这张图来自 Siobhán 的研究：《Nonprofit Foundations And Their Role In Community-Firm Software Collaboration》论文。</p><p><img src="https://cdn.jsdelivr.net/gh/muzi502/blog/source/img/nonprofit_foundation.png" alt="img"></p><h3 id="税收条款"><a href="#税收条款" class="headerlink" title="税收条款"></a>税收条款</h3><p>依据不同的宗旨和活动类型，非营利组织的相关税法条款大致可分为 501(c) 以下几种类型。</p><table><thead><tr><th>税收代码</th><th>简介</th><th>税收优惠</th></tr></thead><tbody><tr><td>501 (c) (1)</td><td>根据国会法案，包括联邦信用合作社法建立的法人团体</td><td>Yes</td></tr><tr><td>501 (c) (2)</td><td>为免税组织管理资产的法人团体</td><td>No</td></tr><tr><td>501 (c) (3)</td><td>宗教、教育、慈善、科学、文学 国际体育赛事组织、防止虐待儿童或动物组织</td><td>Yes</td></tr><tr><td>501 (c) (4)</td><td>公民联盟、社会福利机构和地方雇员协会</td><td>No, generally</td></tr><tr><td>501 (c) (5)</td><td>劳动、农业和园艺组织</td><td>No</td></tr><tr><td>501 (c) (6)</td><td>商业联盟、产业协会、房地产联盟等组织</td><td>No</td></tr><tr><td>501 (c) (7)</td><td>社交团体和康乐会</td><td>No</td></tr></tbody></table><p>在许多类型的非营利组织中，享受最多税收优惠的是 501(c)(3)  类型的组织，即按税法第 501(c)(3)  条款成立的组织。它可豁免收入税、销售税甚至财产税。这个组织也可以接受抵税捐赠，享受较低邮费和可以接受资助。因此，这类组织是最多人希望成立的组织，也是最难获得批准的组织。慈善机构较能获得这类免税待遇，美国公民假如向这些组织捐款，纳税人能够在自己的收入税中抵税。没有这一条，许多非营利组织就不能收到足够的捐款。</p><blockquote><p>根据美国法典第 26 章 501 条（严谨的写法是 <a href="https://www.law.cornell.edu/uscode/text/26/501" target="_blank" rel="noopener">26 U.S. Code § 501(c)(3)</a>） 的规定，如果一个机构运营的目的限定于一些特定领域，那么这个机构可以获得税务减免。这些特定领域包括（但不限于）：宗教，慈善，科学，文学，教育，保护妇女儿童和动物。同时根据相关法律，纳税人对部分501(c)(3)组织的捐款可以抵扣个人所得税。</p></blockquote><p><code>此处引用</code> <a href="https://leonson.me/2019/12/us-501c3" target="_blank" rel="noopener">民间有高手——说说美国的501(c)(3)组织</a></p><blockquote><p>这个由于特殊的环境因素，比较难以理解，因为都是美国的组织，不过我们在阅读这些基金会年度报表的只需要知道一点即可，那就是 501©(6) 和 501©(3)之间的区别。</p><p>比如Linux 基金会就是 501©(6) ，而Apache 软件基金会就是 501©(3) 类型的。具体有什么区别，请有心的看官查阅相关资料。但是在年度报告体现出来的就是Apache 软件基金会会事无巨细的将财务报告写上，而CNCF就不会有这方面的任何材料。</p></blockquote><p><code>此处引用</code> <a href="http://opensourceway.community/posts/foundation_introduce/review-cncf-2018-annual-report/" target="_blank" rel="noopener">云原生的旭日东升 —— CNCF 2018年度报告解读</a></p><h3 id="完整的-501（C）"><a href="#完整的-501（C）" class="headerlink" title="完整的 501（C）"></a>完整的 501（C）</h3><p>暂时没找到中文版，我就不翻译了😂（懒</p><table><thead><tr><th><strong>Type</strong></th><th><strong>Description</strong></th><th><strong>Contributions Deductible?</strong></th></tr></thead><tbody><tr><td>501(c)(1)</td><td>Corporations Organized under Act of Congress (including Federal Credit Unions)</td><td>Yes</td></tr><tr><td>501(c)(2)</td><td>Title Holding Corporation For Exempt Organization</td><td>No</td></tr><tr><td>501(c)(3)</td><td>Religious, Educational, Charitable, Scientific, Literary, Testing  for Public Safety, to Foster National or International Amateur Sports  Competition, or Prevention of Cruelty to Children or Animals  Organizations</td><td>Yes</td></tr><tr><td>501(c)(4)</td><td>Civic Leagues, Social Welfare Organizations, and Local Associations of Employees</td><td>No, generally*</td></tr><tr><td>501(c)(5)</td><td>Labor, Agricultural, and Horticultural Organizations</td><td>No</td></tr><tr><td>501(c)(6)</td><td>Business Leagues, Chambers of Commerce, Real Estate Boards, etc.</td><td>No</td></tr><tr><td>501(c)(7)</td><td>Social and Recreational Clubs</td><td>No</td></tr><tr><td>501(c)(8)</td><td>Fraternal Beneficiary Societies and Associations</td><td>Yes</td></tr><tr><td>501(c)(9)</td><td>Voluntary Employees Beneficiary Associations</td><td>No</td></tr><tr><td>501(c)(10)</td><td>Domestic Fraternal Societies and Associations</td><td>Yes</td></tr><tr><td>501(c)(11)</td><td>Teachers’ Retirement Fund Associations</td><td>No</td></tr><tr><td>501(c)(12)</td><td>Benevolent Life Insurance Associations, Mutual Ditch or Irrigation Companies, Mutual or Cooperative Telephone Companies, etc.</td><td>No</td></tr><tr><td>501(c)(13)</td><td>Cemetery Companies</td><td>Yes</td></tr><tr><td>501(c)(14)</td><td>State-Chartered Credit Unions, Mutual Reserve Funds</td><td>No</td></tr><tr><td>501(c)(15)</td><td>Mutual Insurance Companies or Associations</td><td>No</td></tr><tr><td>501(c)(16)</td><td>Cooperative Organizations to Finance Crop Operations</td><td>No</td></tr><tr><td>501(c)(17)</td><td>Supplemental Unemployment Benefit Trusts</td><td>No</td></tr><tr><td>501(c)(18)</td><td>Employee Funded Pension Trust (created before June 25, 1959)</td><td>No</td></tr><tr><td>501(c)(19)</td><td>Post or Organization of Past or Present Members of the Armed Forces</td><td>No, generally*</td></tr><tr><td>501(c)(21)</td><td>Black Lung Benefit Trusts</td><td>No</td></tr><tr><td>501(c)(22)</td><td>Withdrawal Liability Payment Fund</td><td>No</td></tr><tr><td>501(c)(23)</td><td>Veterans’ Organization (created before 1880)</td><td>No, generally*</td></tr><tr><td>501(c)(25)</td><td>Title Holding Corporations or Trusts with Multiple Parent Corporations</td><td>No</td></tr><tr><td>501(c)(26)</td><td>State-Sponsored Organization Providing Health Coverage for High-Risk Individuals</td><td>No</td></tr><tr><td>501(c)(27)</td><td>State-Sponsored Workers’ Compensation Reinsurance Organization</td><td>No</td></tr><tr><td>501(c)(28)</td><td>National Railroad Retirement Investment Trust</td><td>No</td></tr><tr><td>501(c)(29)</td><td>CO-OP health insurance issuers</td><td>No</td></tr></tbody></table><h2 id="知名的软件基金会"><a href="#知名的软件基金会" class="headerlink" title="知名的软件基金会"></a>知名的软件基金会</h2><h3 id="基金会及维护的项目"><a href="#基金会及维护的项目" class="headerlink" title="基金会及维护的项目"></a>基金会及维护的项目</h3><table><thead><tr><th>基金会名称</th><th>税收代码</th><th>行业/领域/项目/服务</th></tr></thead><tbody><tr><td><a href="https://www.linuxfoundation.org/" target="_blank" rel="noopener">Linux 基金会</a></td><td>501(c)(6)</td><td><a href="https://kernel.org" target="_blank" rel="noopener">kernel</a>  <a href="http://127.0.0.1:8000/[https://nodejs.org" target="_blank" rel="noopener">NodeJs</a>  <a href="https://xenproject.org/" target="_blank" rel="noopener">Xen</a>   <a href="https://www.dpdk.org/" target="_blank" rel="noopener">DPDK</a>  <a href="http://127.0.0.1:8000/[https://etcd.io" target="_blank" rel="noopener">etcd</a>   <a href="http://127.0.0.1:8000/[https://jenkins.io" target="_blank" rel="noopener">Jenkins</a>  <a href="http://127.0.0.1:8000/[https://kubernetes.io" target="_blank" rel="noopener">kubernetes</a> <a href="https://ceph.com/foundation/" target="_blank" rel="noopener">Ceph</a>  <a href="https://github.com/containernetworking/cni" target="_blank" rel="noopener">CNI</a>  <a href="https://www.fluentd.org/" target="_blank" rel="noopener">Fluentd</a>   <a href="https://letsencrypt.org/" target="_blank" rel="noopener">Let’s Encrypt</a>  <a href="https://prometheus.io/" target="_blank" rel="noopener">Prometheus</a>  <a href="https://coredns.io/" target="_blank" rel="noopener">CoreDNS</a></td></tr><tr><td><a href="https://www.gnu.org" target="_blank" rel="noopener">FSF 自由软件基金会</a></td><td>501(c)(3)</td><td><a href="https://www.gnu.org/" target="_blank" rel="noopener">GNU</a> <a href="https://www.gnu.org/software/libc/" target="_blank" rel="noopener">libc</a> <a href="https://www.gnu.org/software/glib/" target="_blank" rel="noopener">glib</a> <a href="https://www.gnu.org/software/bash/" target="_blank" rel="noopener">bash</a> <a href="https://www.gnu.org/software/gzip/" target="_blank" rel="noopener">gzip</a> <a href="https://www.gnu.org/software/wget/" target="_blank" rel="noopener">wget</a>  <a href="https://www.gnu.org/software/gcc/" target="_blank" rel="noopener">gcc</a>  <a href="https://www.gnu.org/software/grub/" target="_blank" rel="noopener">grub</a> <a href="https://www.gnu.org/software/sed/" target="_blank" rel="noopener">sed</a>  <a href="https://www.gnu.org/software/tar/" target="_blank" rel="noopener">tar</a>  <a href="https://www.gnu.org/software/grep/" target="_blank" rel="noopener">grep</a></td></tr><tr><td><a href="https://foundation.mozilla.org" target="_blank" rel="noopener">Mozilla 基金会</a></td><td>501(c)(3)</td><td><a href="http://127.0.0.1:8000/[https://www.mozilla.org" target="_blank" rel="noopener">Firefox</a>  <a href="http://127.0.0.1:8000/[https://www.thunderbird.net" target="_blank" rel="noopener">Thunderbird</a></td></tr><tr><td><a href="https://wikimediafoundation.org/" target="_blank" rel="noopener">维基媒体基金会</a></td><td>501(c)(3)</td><td><a href="https://www.mediawiki.org/wiki/MediaWiki" target="_blank" rel="noopener">MediaWiki</a></td></tr><tr><td><a href="https://www.openssl.org/" target="_blank" rel="noopener">OpenSSL 基金会</a></td><td>501(c)(3)</td><td><a href="https://www.openssl.org/source/" target="_blank" rel="noopener">OpenSSL</a></td></tr><tr><td><a href="https://www.spi-inc.org/" target="_blank" rel="noopener">SPI 组织</a></td><td>501(c)(3)</td><td><a href="https://www.debian.org/distrib/" target="_blank" rel="noopener">Debian</a>  <a href="https://ffmpeg.org/" target="_blank" rel="noopener">FFmpeg</a>  <a href="https://openwrt.org/" target="_blank" rel="noopener">OpenWrt</a>  <a href="http://127.0.0.1:8000/[https://www.postgresql.org" target="_blank" rel="noopener">PostgreSQL</a>   <a href="https://www.libreoffice.org/" target="_blank" rel="noopener">LibreOffice</a> <a href="http://127.0.0.1:8000/[https://jenkins.io" target="_blank" rel="noopener">Jenkins</a>  <a href="https://www.archlinux.org/" target="_blank" rel="noopener">Arch Linux</a> <a href="https://www.spi-inc.org/projects/mingw" target="_blank" rel="noopener">MinGW</a>  <a href="https://www.spi-inc.org/projects/x.org" target="_blank" rel="noopener">X.Org</a> <a href="https://www.spi-inc.org/projects/haskell" target="_blank" rel="noopener">haskell.org</a> <a href="https://www.spi-inc.org/projects/gallery" target="_blank" rel="noopener">Gallery</a> <a href="https://www.spi-inc.org/projects/openzfs" target="_blank" rel="noopener">OpenZFS</a></td></tr><tr><td><a href="https://www.eff.org/" target="_blank" rel="noopener">EFF 电子前哨基金会</a></td><td>501(c)(3)</td><td><a href="https://www.eff.org/https-everywhere" target="_blank" rel="noopener">HTTPS Everywhere</a>  <a href="https://www.eff.org/privacybadger" target="_blank" rel="noopener">Privacy Badger</a>  <a href="https://letsencrypt.org/about/" target="_blank" rel="noopener">Let’s Encrypt</a></td></tr><tr><td><a href="https://www.openstack.org/foundation/" target="_blank" rel="noopener">OpenStack 基金会</a></td><td>501(c)(6)</td><td><a href="https://www.openstack.org/software/project-navigator/openstack-components/#openstack-services" target="_blank" rel="noopener">OpenStack </a> <a href="https://www.openstack.org/software/releases/stein/components/nova" target="_blank" rel="noopener">nova</a></td></tr><tr><td><a href="https://www.cncf.io/" target="_blank" rel="noopener">CNCF 基金会</a></td><td>501(c)(6)</td><td><a href="http://kubernetes.io/" target="_blank" rel="noopener">Kubernetes</a></td></tr><tr><td><a href="https://www.cloudfoundry.org" target="_blank" rel="noopener">Cloud Foundry 基金会</a></td><td>501(c)(6)</td><td><a href="http://127.0.0.1:8000/org.html" target="_blank" rel="noopener">Cloud Foundry</a></td></tr><tr><td><a href="https://www.apache.org/" target="_blank" rel="noopener">Apache 软件基金会</a></td><td>501(c)(3)</td><td><a href="https://www.apache.org/" target="_blank" rel="noopener">Apache</a>  <a href="https://hadoop.apache.org/" target="_blank" rel="noopener">Hadoop</a>  <a href="http://kafka.apache.org/" target="_blank" rel="noopener">Kafka</a>   <a href="http://zookeeper.apache.org/" target="_blank" rel="noopener">Zookeeper</a>  <a href="http://hbase.apache.org/" target="_blank" rel="noopener">HBase</a>  <a href="http://maven.apache.org/" target="_blank" rel="noopener">Maven</a></td></tr><tr><td><a href="https://www.gnome.org/foundation/" target="_blank" rel="noopener">GNOME 基金会</a></td><td>501(c)(3)</td><td><a href="http://127.0.0.1:8000/[https://www.gnome.org" target="_blank" rel="noopener">GNOME</a>  <a href="http://www.freedesktop.org/wiki/Software/systemd/" target="_blank" rel="noopener">systemd</a>  <a href="https://developer.gnome.org/glib/" target="_blank" rel="noopener">GLib</a>  <a href="http://www.gtk.org/" target="_blank" rel="noopener">GTK+</a>   <a href="http://www.freedesktop.org/wiki/Software/dbus/" target="_blank" rel="noopener">D-Bus</a>  <a href="https://www.kernel.org/" target="_blank" rel="noopener">Linux Kernel</a>  <a href="https://wiki.gnome.org/Projects/GDM" target="_blank" rel="noopener">GDM</a></td></tr><tr><td><a href="https://www.opennetworking.org/" target="_blank" rel="noopener">ONF 开放网络基金会</a></td><td>501(c)(6)</td><td><a href="https://www.opennetworking.org/onos/" target="_blank" rel="noopener">onos</a> <a href="https://www.opennetworking.org/omec/" target="_blank" rel="noopener">OMEC</a></td></tr><tr><td><a href="https://www.freebsdfoundation.org/" target="_blank" rel="noopener">FreeBSD 基金会</a></td><td>501(c)(3)</td><td><a href="https://www.freebsd.org" target="_blank" rel="noopener">FreeBSD</a></td></tr><tr><td><a href="http://www.openbsdfoundation.org/" target="_blank" rel="noopener">OpenBSD 基金会</a></td><td>Canadian</td><td><a href="http://www.openssh.com/" target="_blank" rel="noopener"> OpenSSH</a>  <a href="http://www.libressl.org/" target="_blank" rel="noopener">LibreSSL</a>  <a href="http://www.openbsd.org/" target="_blank" rel="noopener">OpenBSD</a></td></tr><tr><td><a href="https://opensource.org/" target="_blank" rel="noopener">OSI 开放源代码组织</a></td><td>501(c)(3)</td><td><a href="https://opensource.org/" target="_blank" rel="noopener">Open Source</a></td></tr><tr><td><a href="https://freedom.press/" target="_blank" rel="noopener">FPF 新闻自由基金会</a></td><td>501(c)(3)</td><td><a href="https://securedrop.org/" target="_blank" rel="noopener">SecureDrop</a>  <a href="https://securethe.news/" target="_blank" rel="noopener">Secure the News</a>   <a href="https://freedom.press/news/archiving-alternative-press-threatened-wealthy-buyers/" target="_blank" rel="noopener">Archive the News</a> <a href="https://twitter.com/foiafeed" target="_blank" rel="noopener">FOIAFeed</a></td></tr><tr><td><a href="https://cpj.org" target="_blank" rel="noopener">OPJ 保护记者委员会</a></td><td>501(c)3</td><td><a href="https://cpj.org/safety-kit/" target="_blank" rel="noopener">Safety Kit</a>  <a href="https://cpj.org/safety-advisories/" target="_blank" rel="noopener">Safety Advisories</a></td></tr><tr><td><a href="https://webfoundation.org/" target="_blank" rel="noopener">Web Foundation 万维网基金会</a></td><td>501(c)3</td><td><a href="https://webfoundation.org/our-work/projects/alliance-for-affordable-internet/" target="_blank" rel="noopener">Alliance for Affordable Internet</a> <a href="https://webfoundation.org/our-work/projects/open-data-barometer/" target="_blank" rel="noopener">Open Data Barometer</a>   <a href="https://webfoundation.org/our-work/projects/womens-rights-online/" target="_blank" rel="noopener">Women’s Rights Online</a>  <a href="https://webfoundation.org/our-work/projects/the-web-index/" target="_blank" rel="noopener">The Web Index</a></td></tr><tr><td><a href="https://epic.org/" target="_blank" rel="noopener">EPIC 电子隐私信息中心</a></td><td>501(c)3</td><td><a href="https://epic.org/privacy/litigation/" target="_blank" rel="noopener">Litigation Docket</a> <a href="https://epic.org/campaigns/" target="_blank" rel="noopener">Privacy Campaigns</a>  <a href="https://epic.org/privacy/surveillance/spotlight/" target="_blank" rel="noopener">Spotlight on Surveillance</a></td></tr><tr><td><a href="https://sfconservancy.org/" target="_blank" rel="noopener">SFC 软件自由保护组织</a></td><td>501(c)3</td><td><a href="https://busybox.net/" target="_blank" rel="noopener">BusyBox</a>  <a href="https://git-scm.com/" target="_blank" rel="noopener">Git</a>  <a href="https://phpmyadmin.net/" target="_blank" rel="noopener">phpMyAdmin</a>   <a href="http://qemu.org/" target="_blank" rel="noopener">QEMU</a>  <a href="https://www.samba.org/samba/" target="_blank" rel="noopener">Samba</a>  <a href="http://www.winehq.org/" target="_blank" rel="noopener">Wine</a></td></tr><tr><td><a href="https://www.softwarefreedom.org/" target="_blank" rel="noopener">SFLC 软件自由法律中心</a></td><td>501(c)3</td><td><a href="https://www.softwarefreedom.org/services/" target="_blank" rel="noopener">services</a></td></tr><tr><td><a href="https://archive.org/" target="_blank" rel="noopener">Internet Archive 互联网档案馆</a></td><td>501(c)3</td><td><a href="https://archive.org/projects/" target="_blank" rel="noopener">Building Libraries Together</a>   <a href="https://openlibrary.org/" target="_blank" rel="noopener">Open Library</a>  <a href="https://archive.org/details/301works" target="_blank" rel="noopener">301Works.org</a>   <a href="https://archive.org/web/sflan.php" target="_blank" rel="noopener">Open Community Networks</a></td></tr><tr><td><a href="https://creativecommons.org/" target="_blank" rel="noopener">Creative Commons</a></td><td>501(c)3</td><td><a href="https://creativecommons.org/" target="_blank" rel="noopener">CC 知识共享许可协议</a></td></tr><tr><td><a href="https://www.abetterinternet.org/" target="_blank" rel="noopener">ISRG 互联网安全研究小组</a></td><td>501(c)3</td><td><a href="https://letsencrypt.org/" target="_blank" rel="noopener">Let’s Encrypt</a></td></tr></tbody></table><h3 id="捐赠总收入排名（2017）"><a href="#捐赠总收入排名（2017）" class="headerlink" title="捐赠总收入排名（2017）"></a>捐赠总收入排名（2017）</h3><table><thead><tr><th>基金会名称</th><th>年总收入 $</th><th>年总支出 $</th><th>年净收入 $</th></tr></thead><tbody><tr><td><a href="https://wikimediafoundation.org/" target="_blank" rel="noopener">维基媒体基金会</a></td><td>$89,973,967</td><td>$69,076,192</td><td>$20,897,775</td></tr><tr><td><a href="https://www.linuxfoundation.org/" target="_blank" rel="noopener">Linux   基金会</a></td><td>$81,616,265</td><td>$68,997,604</td><td>$12,618,661</td></tr><tr><td><a href="https://www.openstack.org/foundation/" target="_blank" rel="noopener">OpenStack   基金会</a></td><td>$22,829,442</td><td>$29,047,402</td><td>-$6,217,960)</td></tr><tr><td><a href="https://foundation.mozilla.org/" target="_blank" rel="noopener">Mozilla   基金会</a></td><td>$20,586,446</td><td>$24,206,401</td><td>-$3,619,955)</td></tr><tr><td><a href="https://archive.org/" target="_blank" rel="noopener">Internet   Archive 互联网档案馆</a></td><td>$17,811,981</td><td>$18,468,621</td><td>-$656,640)</td></tr><tr><td><a href="https://www.eff.org/" target="_blank" rel="noopener">EFF   电子前哨基金会</a></td><td>$17,392,426</td><td>$11,398,529</td><td>$5,993,897</td></tr><tr><td><a href="https://cpj.org/" target="_blank" rel="noopener">CPJ   保护记者委员会</a></td><td>$9,625,276</td><td>$7,345,573</td><td>$2,279,703</td></tr><tr><td><a href="https://www.opennetworking.org/" target="_blank" rel="noopener">ONF   开放网络基金会</a></td><td>$7,722,940</td><td>$6,525,599</td><td>$1,197,341</td></tr><tr><td><a href="https://freedom.press/" target="_blank" rel="noopener">FPF   新闻自由基金会</a></td><td>$5,949,008</td><td>$2,960,503</td><td>$2,988,505</td></tr><tr><td><a href="https://www.torproject.org/" target="_blank" rel="noopener">Tor   项目</a></td><td>$4,130,882</td><td>$4,078,419</td><td>$52,463</td></tr><tr><td><a href="https://webfoundation.org/" target="_blank" rel="noopener">Web   Foundation 万维网基金会</a></td><td>$3,579,820</td><td>$3,966,177</td><td>-$386,357</td></tr><tr><td><a href="https://www.python.org/psf/" target="_blank" rel="noopener">Python   基金会</a></td><td>$2,870,521</td><td>$2,475,335</td><td>$395,186</td></tr><tr><td><a href="https://www.abetterinternet.org/" target="_blank" rel="noopener">ISRG   互联网安全研究小组</a></td><td>$2,732,486</td><td>$2,599,681</td><td>$132,805</td></tr><tr><td><a href="https://sfconservancy.org/" target="_blank" rel="noopener">SFC   软件自由保护组织</a></td><td>$2,125,670</td><td>$1,500,209</td><td>$625,461</td></tr><tr><td><a href="https://epic.org/" target="_blank" rel="noopener">EPIC   电子隐私信息中心</a></td><td>$1,715,419</td><td>$1,523,199</td><td>$192,220</td></tr><tr><td><a href="https://creativecommons.org/" target="_blank" rel="noopener">Creative   Commons</a></td><td>$1,639,408</td><td>$3,600,414</td><td>-$1,961,006</td></tr><tr><td><a href="https://www.gnu.org/" target="_blank" rel="noopener">FSF   自由软件基金会</a></td><td>$1,373,574</td><td>$1,233,394</td><td>$140,180</td></tr><tr><td><a href="https://www.softwarefreedom.org/" target="_blank" rel="noopener">SFLC   软件自由法律中心</a></td><td>$1,237,816</td><td>$1,359,324</td><td>-$121,508</td></tr><tr><td><a href="https://www.freebsdfoundation.org/" target="_blank" rel="noopener">FreeBSD   基金会</a></td><td>$1,101,562</td><td>$993,701</td><td>$107,861</td></tr><tr><td><a href="https://www.apache.org/" target="_blank" rel="noopener">Apache   软件基金会</a></td><td>$917,715</td><td>$1,205,831</td><td>-$288,116</td></tr><tr><td><a href="https://riscv.org/" target="_blank" rel="noopener">RISC-V   基金会</a></td><td>$636,438</td><td>$456,755</td><td>$179,683</td></tr><tr><td><a href="https://www.spi-inc.org/" target="_blank" rel="noopener">SPI   组织</a></td><td>$635,312</td><td>$612,941</td><td>$22,371</td></tr><tr><td><a href="https://www.gnome.org/foundation/" target="_blank" rel="noopener">GNOME   基金会</a></td><td>$291,955</td><td>$329,955</td><td>-$38,000</td></tr><tr><td><a href="https://opensource.org/" target="_blank" rel="noopener">OSI   开放源代码组织</a></td><td>$209,500</td><td>$187,884</td><td>$21,616</td></tr></tbody></table><h3 id="按净收入排名"><a href="#按净收入排名" class="headerlink" title="按净收入排名"></a>按净收入排名</h3><table><thead><tr><th>基金会名称</th><th>年总收入 $</th><th>年总支出 $</th><th>年净收入 $</th></tr></thead><tbody><tr><td><a href="https://wikimediafoundation.org/" target="_blank" rel="noopener">维基媒体基金会</a></td><td>$89,973,967</td><td>$69,076,192</td><td>$20,897,775</td></tr><tr><td><a href="https://www.linuxfoundation.org/" target="_blank" rel="noopener">Linux   基金会</a></td><td>$81,616,265</td><td>$68,997,604</td><td>$12,618,661</td></tr><tr><td><a href="https://www.eff.org/" target="_blank" rel="noopener">EFF   电子前哨基金会</a></td><td>$17,392,426</td><td>$11,398,529</td><td>$5,993,897</td></tr><tr><td><a href="https://freedom.press/" target="_blank" rel="noopener">FPF   新闻自由基金会</a></td><td>$5,949,008</td><td>$2,960,503</td><td>$2,988,505</td></tr><tr><td><a href="https://cpj.org/" target="_blank" rel="noopener">CPJ   保护记者委员会</a></td><td>$9,625,276</td><td>$7,345,573</td><td>$2,279,703</td></tr><tr><td><a href="https://www.opennetworking.org/" target="_blank" rel="noopener">ONF   开放网络基金会</a></td><td>$7,722,940</td><td>$6,525,599</td><td>$1,197,341</td></tr><tr><td><a href="https://sfconservancy.org/" target="_blank" rel="noopener">SFC   软件自由保护组织</a></td><td>$2,125,670</td><td>$1,500,209</td><td>$625,461</td></tr><tr><td><a href="https://www.python.org/psf/" target="_blank" rel="noopener">Python   基金会</a></td><td>$2,870,521</td><td>$2,475,335</td><td>$395,186</td></tr><tr><td><a href="https://epic.org/" target="_blank" rel="noopener">EPIC   电子隐私信息中心</a></td><td>$1,715,419</td><td>$1,523,199</td><td>$192,220</td></tr><tr><td><a href="https://riscv.org/" target="_blank" rel="noopener">RISC-V   基金会</a></td><td>$636,438</td><td>$456,755</td><td>$179,683</td></tr><tr><td><a href="https://www.gnu.org/" target="_blank" rel="noopener">FSF   自由软件基金会</a></td><td>$1,373,574</td><td>$1,233,394</td><td>$140,180</td></tr><tr><td><a href="https://www.abetterinternet.org/" target="_blank" rel="noopener">ISRG   互联网安全研究小组</a></td><td>$2,732,486</td><td>$2,599,681</td><td>$132,805</td></tr><tr><td><a href="https://www.freebsdfoundation.org/" target="_blank" rel="noopener">FreeBSD   基金会</a></td><td>$1,101,562</td><td>$993,701</td><td>$107,861</td></tr><tr><td><a href="https://www.torproject.org/" target="_blank" rel="noopener">Tor   项目</a></td><td>$4,130,882</td><td>$4,078,419</td><td>$52,463</td></tr><tr><td><a href="https://www.spi-inc.org/" target="_blank" rel="noopener">SPI   组织</a></td><td>$635,312</td><td>$612,941</td><td>$22,371</td></tr><tr><td><a href="https://opensource.org/" target="_blank" rel="noopener">OSI   开放源代码组织</a></td><td>$209,500</td><td>$187,884</td><td>$21,616</td></tr><tr><td><a href="https://www.gnome.org/foundation/" target="_blank" rel="noopener">GNOME   基金会</a></td><td>$291,955</td><td>$329,955</td><td>-$38,000</td></tr><tr><td><a href="https://www.softwarefreedom.org/" target="_blank" rel="noopener">SFLC   软件自由法律中心</a></td><td>$1,237,816</td><td>$1,359,324</td><td>-$121,508</td></tr><tr><td><a href="https://www.apache.org/" target="_blank" rel="noopener">Apache   软件基金会</a></td><td>$917,715</td><td>$1,205,831</td><td>-$288,116</td></tr><tr><td><a href="https://webfoundation.org/" target="_blank" rel="noopener">Web   Foundation 万维网基金会</a></td><td>$3,579,820</td><td>$3,966,177</td><td>-$386,357</td></tr><tr><td><a href="https://archive.org/" target="_blank" rel="noopener">Internet   Archive 互联网档案馆</a></td><td>$17,811,981</td><td>$18,468,621</td><td>-$656,640</td></tr><tr><td><a href="https://creativecommons.org/" target="_blank" rel="noopener">Creative   Commons</a></td><td>$1,639,408</td><td>$3,600,414</td><td>-$1,961,006</td></tr><tr><td><a href="https://foundation.mozilla.org/" target="_blank" rel="noopener">Mozilla   基金会</a></td><td>$20,586,446</td><td>$24,206,401</td><td>-$3,619,955</td></tr><tr><td><a href="https://www.openstack.org/foundation/" target="_blank" rel="noopener">OpenStack   基金会</a></td><td>$22,829,442</td><td>$29,047,402</td><td>-$6,217,960</td></tr></tbody></table><p>本打算在这一篇博客里把以上提到的基金会都做一下介绍，但最近时间有限，此举工作量实在太大，所以今天我就在这里简单地介绍一下我比较推崇的 EFF 电子前哨基金会。其余的打算以后再补充（挖坑😂</p><h2 id="EFF-电子前哨基金会"><a href="#EFF-电子前哨基金会" class="headerlink" title="EFF 电子前哨基金会"></a>EFF 电子前哨基金会</h2><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>Electronic Frontier Foundation 简称 EFF ，中文译名电子前哨基金会、电子前线基金会。该基金会成立于 1990 年 7 月，在成立的当天就 <a href="https://en.wikipedia.org/wiki/Steve_Jackson_Games,_Inc._v._United_States_Secret_Service" target="_blank" rel="noopener">史蒂夫•杰克逊游戏案</a> 宣布对美国特勤局提起诉讼，给政府找麻烦😂。以及后来的 <a href="https://en.wikipedia.org/wiki/Bernstein_v._United_States" target="_blank" rel="noopener">伯恩斯坦诉美国政府案</a> 。EFF 代理的这两个案件的胜诉有着及其重要的影响：史蒂夫·杰克逊游戏案第一次确立了执法部门在扣押和阅读所有电子邮件之前，必须持有特别描述所有电子邮件的搜查令；伯恩斯坦诉美国政府案第一次裁定软件源代码是受宪法第一修正案保护的言论。当然对于某些摸着石头过河的国家来说，这两个法案就是吃痴人说梦。</p><ul><li><p>1990 年 3 月 1 日：美国特勤局突袭史蒂夫·杰克逊游戏公司</p></li><li><p>1990 年 4 月：巴洛受到美国 <a href="https://zh.wikipedia.org/wiki/联邦调查局" target="_blank" rel="noopener">联邦调查局</a> 有关 Macintosh 系列 ROM 源代码盗窃和分发的调查</p></li><li><p>1990 年 6 月：巴洛公布了“罪与罚”一文 并宣布他和卡普尔计划建立一个组织 ， 来“为教育、游说和诉讼与网上言论相关的领域以及关于宪法进入网络空间的扩充筹集和支付经费。</p></li><li><p>1990 年 7 月 6 日：EFF 电子前哨基金会成立并宣布帮助史蒂夫·杰克起诉美国特勤局</p></li><li><p>1990年7月10日：电子前线基金会，由卡普尔、<a href="https://zh.wikipedia.org/w/index.php?title=约翰·吉尔摩&action=edit&redlink=1" target="_blank" rel="noopener">约翰·吉尔摩</a> 和巴洛，正式成立于。初始资金由卡普尔，<a href="https://zh.wikipedia.org/wiki/斯蒂夫·沃兹尼亚克" target="_blank" rel="noopener">斯蒂夫·沃兹尼亚克</a> （苹果创始人之一）和一个匿名人士提供。 </p></li><li><p>2002 年：为域名系统的开放，透明治理而斗争。</p></li><li><p>2004 年：Tor 项目</p></li><li><p>2020 年：拯救 org 域名行动  <a href="https://savedotorg.org/" target="_blank" rel="noopener">SaveDotOrg</a> 。PS：希望大家都能点进去这个网站来支持这个行动。</p></li></ul><h3 id="参与的立法斗争"><a href="#参与的立法斗争" class="headerlink" title="参与的立法斗争"></a>参与的立法斗争</h3><ul><li><p>DOPA (Deleting Online Predators Act of 2006) 删除在线侵犯者法案。<a href="https://www.govtrack.us/congress/bills/110/hr1120/text" target="_blank" rel="noopener">法案详情</a> 与 <a href="https://en.wikipedia.org/wiki/Deleting_Online_Predators_Act_of_2006" target="_blank" rel="noopener">维基百科</a></p></li><li><p>PCNAA (Protecting Cyberspace as a National Asset Act )将网络空间作为国家财产保护法。<a href="https://www.govtrack.us/congress/bills/111/hr5548/text" target="_blank" rel="noopener">法案详情</a> 与 [维基百科](Protecting Cyberspace as a National Asset Act)</p></li><li><p>COICA (Combating Online Infringement and Counterfeits Act )打击在线侵权和假冒法案。<a href="https://www.govtrack.us/congress/bills/111/s3804/text" target="_blank" rel="noopener">法案详情</a> 与 <a href="https://en.wikipedia.org/wiki/Combating_Online_Infringement_and_Counterfeits_Act" target="_blank" rel="noopener">维基百科</a></p></li><li><p>SOPA（Stop Online Piracy Act ）禁止网络盗版法案。<a href="https://www.congress.gov/bill/112th-congress/house-bill/3261" target="_blank" rel="noopener">法案详情</a> 与 <a href="https://en.wikipedia.org/wiki/Stop_Online_Piracy_Act" target="_blank" rel="noopener">维基百科</a></p></li><li><p>PIPA （Preventing Real Online Threats to Economic Creativity and Theft of Intellectual Property Act ）保护知识产权法案。<a href="https://en.wikipedia.org/wiki/PROTECT_IP_Act" target="_blank" rel="noopener">维基百科</a>与<a href="https://www.govtrack.us/congress/bills/112/s968/text" target="_blank" rel="noopener">法案详情</a></p></li><li><p>CISPA（Cyber Intelligence Sharing and Protection Act）网络情报共享与保护法案。<a href="https://www.congress.gov/bill/114th-congress/house-bill/234" target="_blank" rel="noopener">法案详情</a>与<a href="https://en.wikipedia.org/wiki/Cyber_Intelligence_Sharing_and_Protection_Act" target="_blank" rel="noopener">维基百科</a></p></li></ul><p>大家有没有觉着这些法案听起来初衷很美好？但是，美国网民都很清楚，这些法案绝对会被滥用，用来限制互联网自由，所以反抗的人也特别多。其中最臭名昭著的莫过于 SOPA 法案和 PIPA 法案。在这些反对的声音中，最具影响力代表人物的当属于互联网之子 Aaron Swartz  ，亚伦·斯沃茨通过他的求进会网聚众反对SOPA 法案和政府做斗争，最终导致了整个社会都在反对SOPA，也导致了那些议员纷纷改变自己的想法，并导致了白宫最终放弃了这个法案。 </p><blockquote><p>他在自杀前曾经领导过一场漂亮的胜利，那就是反对 <a href="https://link.zhihu.com/?target=http%3A//en.wikipedia.org/wiki/Stop_Online_Piracy_Act">SOPA （禁止网络盗版法案）</a>的运动。这是亚伦短暂一生中的高光时刻，也是互联网力量在推动社会革新上的一次闪耀。SOPA 的初衷是保护版权，但实际的处理方式严重动摇了互联网信息开放的根基，并要求互联网平台进行自我审查，这是绝大部分互联网公司所不能容忍的。而支持  SOPA 的则是传统的版权方，包括出版公司，唱片公司，电影公司等，这背后蕴藏着巨大的利益。SOPA  提出时得到了很多国会议员的支持，信奉信息自由的亚伦自然不希望这个法案通过，为此他创办了「求进会」（Demand  Progress），通过组织群众游说号召普通民众一起给国会请愿反对 SOPA。</p></blockquote><blockquote><p>在 SOPA 上，国会议员们显然低估了网民的力量。从全球著名域名商 GoDaddy 的倒戈便能看出来：GoDaddy 最初支持  SOPA，而这一举动引起了众多站长的抗议，包括维基百科在内的许多网站在两天之内迅速从 GoDaddy 撤出了37000多个域名，GoDaddy  于是迅速表示转投反对阵营。2012年1月18日，维基百科，Reddit，Craigslist， Mozilla  等网站决定关站24小时以表示抗议，这一天国会的电话被打爆，形势迅速发生逆转，第二天许多原来支持 SOPA 的议员被撼动，站到了反对的一边，最终  SOPA 没有被国会通过。亚伦非常高兴，这是他一生当中为数不多的胜利时刻，这一刻让他觉得自己的理念在现实世界中是行得通的。</p></blockquote><blockquote><p>毫无疑问，互联网已经渗入到我们生活的方方面面。即便是 SOPA  这样有巨大利益集团和政治力量所推进的法案也敌不过千千万万使用互联网的普通民众。如果一个网络公司支持  SOPA，用户可以用脚投票让它无法存活；如果有人动摇互联网的根基，各大互联网公司会毫不犹豫地进行联合抗议，它们造成的放大效应比街头抗议强上数百倍。SOPA  的推行者们没有意识到这样一个逆流而动的法案所面对的阻力是如此之大，而亚伦也没有意识到互联网的力量在政治上已经相当成熟，他刚开始并没有抱太大希望。无论如何，这是美国政治史上的大事件，亚伦也成为了这个大事件中的大人物。</p><p>此处引用自 <a href="https://www.zhihu.com/question/24928691" target="_blank" rel="noopener">支乎</a></p></blockquote><p>值得一提的是，Aaron Swartz 在青年时期就深深受到  John Perry Barlow（电子前线基金会 EFF 的创始人）的影响😂。这也不难想象，在当时，一个十五六岁的青少年就已经开始思考网络审查的弊端这种问题了。对比某些比较历害的国家，成长在 GFW 下的一代，他们十五六岁时在想什么？</p><blockquote><p>Aaron 深受 John Perry Barlow（电子前线基金会 EFF 的创始人）的影响。在 Aaron 中学时代，John到他们学校演讲，Aaron 听了这个演讲之后，深受影响。后来 Aaron 的爸爸说那天他回家就像变了一个人一样。以及后来 Aaron 和 Tim Berners-Lee 在一起工作，等等。按照他的年龄，很难想象和这些互联网的创建者们一起工作和活动。但是他和他们相处很好，这些人也都喜欢他。</p></blockquote><p><code>此处引用</code> <a href="https://medium.com/@blockchaineconomicsstudio/%E5%AF%B9%E8%AF%9D%E9%9C%8D%E7%82%AC-%E4%BA%92%E8%81%94%E7%BD%91%E4%B9%8B%E5%AD%90-aaron-swartz-%E6%83%B3%E8%A6%81%E7%9C%8B%E5%88%B0%E7%9A%84%E4%B8%96%E7%95%8C-dc2dccd08cca" target="_blank" rel="noopener">对话霍炬 | 互联网之子 Aaron Swartz 想要看到的世界</a></p><h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><ul><li><p><a href="https://zh.wikipedia.org/wiki/美国网络审查" target="_blank" rel="noopener">美国网络审查</a></p></li><li><p><a href="https://www.eff.org/zh-hans/cases" target="_blank" rel="noopener">EFF 受理案件列表</a></p></li><li><p><a href="https://www.govtrack.us/" target="_blank" rel="noopener">https://www.govtrack.us</a> </p></li><li><p><a href="http://btlj.org/2011/03/internet-kill-switch-legislation-can-obama-turn-off-the-internet/" target="_blank" rel="noopener">Internet “Kill Switch” Legislation: Can Obama Turn Off the Internet?</a></p></li><li><p><a href="https://www.eff.org/zh-hans/cases/steve-jackson-games-v-secret-service-case-archive" target="_blank" rel="noopener">steve-jackson-games-v-secret-service-case-archive</a> </p></li><li><p><a href="https://blog.502.li/archives/A-History-of-Protecting-Freedom-Where-Law-and-Technology-Collide">一段在法律与技术冲突的地方捍卫自由的历史</a></p></li><li><p><a href="https://www.eff.org/about/history" target="_blank" rel="noopener">A History of Protecting Freedom Where Law and Technology Collide</a></p></li></ul><h2 id="启示"><a href="#启示" class="headerlink" title="启示"></a>启示</h2><blockquote><p>“如果出问题，他们随时会把我们赶走，”陈健民说：“但一做出点效果，他们就出来‘插旗’claim credit（领功）。”</p><p>这一幕，是当时中国民间组织与政府之间关系的写照。</p></blockquote><p><code>此处引用</code> <a href="https://www.bbc.com/zhongwen/simp/chinese-news-43972586" target="_blank" rel="noopener">汶川地震十年系列—公民社会从爆发到沉寂的艰难之路</a> </p><p>事实上，越是自由民主的国家，越会存在很多监督问责政府、对抗商业公司、保护个人隐私、捍卫言论自由、独立于政府的非营利性组织。比如捍卫互联网自由的电子前哨基金会；对抗商业公司监控的自由软件基金会；捍卫言论自由的新闻自由基金会、出版自由基金会、保护记者委员会；保护 Web 信息安全传输的 OpenSSL 基金会；提供匿名访问的 Tor 项目；保护个人隐私的粉碎棱镜计划；反抗商业软件监控的自由软件运动等等。这些组织需要独立自主，自由开放，公开透明的生存环境。美国这种以基金会、社区运作的方式已经很成熟了，使用开源软件自由软件的公司和个人乐意捐赠，开发者有稳定的收入，从而使软件能够稳定地维护，形成了良性循环。</p><h2 id="参考-1"><a href="#参考-1" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://projects.propublica.org/nonprofits/organizations/460503801" target="_blank" rel="noopener">The Linux Foundation - Nonprofit Explorer - ProPublica</a></li><li><a href="https://projects.propublica.org/nonprofits/organizations/42888848" target="_blank" rel="noopener">Free Software Foundation Inc - Nonprofit Explorer - ProPublica</a></li><li><a href="https://projects.propublica.org/nonprofits/organizations/200097189" target="_blank" rel="noopener">Mozilla Foundation - Nonprofit Explorer - ProPublica</a></li><li><a href="https://projects.propublica.org/nonprofits/organizations/200049703" target="_blank" rel="noopener">Wikimedia Foundation Inc - Nonprofit Explorer - ProPublica</a></li><li><a href="https://projects.propublica.org/nonprofits/organizations/113390208" target="_blank" rel="noopener">Software In The Public Interest Inc - Nonprofit Explorer - ProPublica</a></li><li><a href="https://projects.propublica.org/nonprofits/organizations/460618689" target="_blank" rel="noopener">Openstack Foundation - Nonprofit Explorer - ProPublica</a></li><li><a href="https://projects.propublica.org/nonprofits/organizations/470825376" target="_blank" rel="noopener">Apache Software Foundation - Nonprofit Explorer - ProPublica</a></li><li><a href="https://projects.propublica.org/nonprofits/organizations/43594598" target="_blank" rel="noopener">Python Software Foundation - Nonprofit Explorer - ProPublica</a></li><li><a href="https://projects.propublica.org/nonprofits/organizations/43572618" target="_blank" rel="noopener">Gnome Foundation Inc - Nonprofit Explorer - ProPublica</a></li><li><a href="https://projects.propublica.org/nonprofits/organizations/273327530" target="_blank" rel="noopener">Open Networking Foundation - Nonprofit Explorer - ProPublica</a></li><li><a href="https://projects.propublica.org/nonprofits/organizations/841545163" target="_blank" rel="noopener">The Freebsd Foundation - Nonprofit Explorer - ProPublica</a></li><li><a href="https://projects.propublica.org/nonprofits/organizations/912037395" target="_blank" rel="noopener">Open Source Initiative - Nonprofit Explorer - ProPublica</a></li><li><a href="https://projects.propublica.org/nonprofits/organizations/208096820" target="_blank" rel="noopener">Tor Project Inc - Nonprofit Explorer - ProPublica</a></li><li><a href="https://projects.propublica.org/nonprofits/organizations/460967274" target="_blank" rel="noopener">Freedom Of The Press Foundation - Nonprofit Explorer - ProPublica</a></li><li><a href="https://projects.propublica.org/nonprofits/organizations/133081500" target="_blank" rel="noopener">Committee To Protect Journalists Inc - Nonprofit Explorer - ProPublica</a></li><li><a href="https://projects.propublica.org/nonprofits/organizations/262852431" target="_blank" rel="noopener">World Wide Web Foundation - Nonprofit Explorer - ProPublica</a></li><li><a href="https://projects.propublica.org/nonprofits/organizations/370794792" target="_blank" rel="noopener">Epic - Nonprofit Explorer - ProPublica</a></li><li><a href="https://projects.propublica.org/nonprofits/organizations/522225921" target="_blank" rel="noopener">Electronic Privacy Information Center - Nonprofit Explorer - ProPublica</a></li><li><a href="https://projects.propublica.org/nonprofits/organizations/260707261" target="_blank" rel="noopener">Epic Foundation Inc - Nonprofit Explorer - ProPublica</a></li><li><a href="https://projects.propublica.org/nonprofits/organizations/412203632" target="_blank" rel="noopener">Software Freedom Conservancy Inc - Nonprofit Explorer - ProPublica</a></li><li><a href="https://projects.propublica.org/nonprofits/organizations/412165986" target="_blank" rel="noopener">Software Freedom Law Center Inc - Nonprofit Explorer - ProPublica</a></li><li><a href="https://projects.propublica.org/nonprofits/organizations/943242767" target="_blank" rel="noopener">Internet Archive - Nonprofit Explorer - ProPublica</a></li><li><a href="https://projects.propublica.org/nonprofits/organizations/474893089" target="_blank" rel="noopener">Risc V Foundation - Nonprofit Explorer - ProPublica</a></li><li><a href="https://projects.propublica.org/nonprofits/organizations/43585301" target="_blank" rel="noopener">Creative Commons Corporation - Nonprofit Explorer - ProPublica</a></li><li><a href="https://projects.propublica.org/nonprofits/organizations/463344200" target="_blank" rel="noopener">Internet Security Research Group - Nonprofit Explorer - ProPublica</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;blockquote&gt;
&lt;p&gt;For the benefit
        
      
    
    </summary>
    
    
      <category term="互联网" scheme="https://blog.502.li/categories/%E4%BA%92%E8%81%94%E7%BD%91/"/>
    
    
      <category term="非盈利组织" scheme="https://blog.502.li/tags/%E9%9D%9E%E7%9B%88%E5%88%A9%E7%BB%84%E7%BB%87/"/>
    
      <category term="org" scheme="https://blog.502.li/tags/org/"/>
    
  </entry>
  
  <entry>
    <title>致未来及思想自由的时代</title>
    <link href="https://blog.502.li/March.html"/>
    <id>https://blog.502.li/March.html</id>
    <published>2020-02-19T16:00:00.000Z</published>
    <updated>2020-02-29T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>致未来、过去以及思想自由的时代：人人各不相同，不再孤寂一生。献给真理永存的时代，献给事情既已发生而无需篡改的时代。我们这群活在没有自由可言、孤苦潦倒的岁月的人，活在老大哥及双重思想阴影下的人向你们致敬！——乔治·奥威尔《1984》</p></blockquote><h2 id="3-月-1-日"><a href="#3-月-1-日" class="headerlink" title="3 月 1 日"></a>3 月 1 日</h2><p>这个是什么日子呢？不妨阅读一下 <a href="https://terminus2049.github.io/archive/2020/02/19/interpretation-new-rule.html" target="_blank" rel="noopener">来强行解读一下3月1日互联网言论管控新规</a> 。虽然墙、言论审查与屏蔽早已经存在很长时间了，但这次<code>墙内的墙</code>无疑又高了一丈。具体有什么影响推荐去读读这篇文章吧，我这里也不想废话了。值得一提的是凤凰卫视因为做了一期 <a href="https://www.youtube.com/watch?v=YFbEG1PiLAo" target="_blank" rel="noopener">送别李文亮</a> 采访报道就被责令整改，仅仅是做了客观如实地采访报道而已。日他妈连客观的事实都不让报道让新闻媒体唱赞歌嘛？这一场灾难，是全民族痛彻心扉的悲剧，你他妈还好意思出版一本《大国战疫》来为你们权贵歌功赞德，做人还能有点良心吗？</p><p>看到国内的党媒扭曲是非、混淆视听、愚民洗脑、谎言欺骗，有时候就气得就想掀桌儿、砸键盘、摔鼠标！这他妈还是人写的吗？我无法想象既得利益者为了给权贵唱赞歌人性居然扭曲到如此地步？</p><blockquote><p>“A GOOD newspaper, I suppose, is a nation talking to itself,” mused Arthur Miller in 1961.</p></blockquote><p><strong>一份好的报纸应当是一个国家诚实的独白</strong></p><p>当一个国家的新闻媒体开始不知羞耻地公然造谣粉饰愚民洗脑的时候，这个以谎言为统治根基的民族也就无药可救了。</p><blockquote><p>在我们苏联，谎言已不仅仅是道德问题，谎言是国家的支柱。</p><p>——《古拉格群岛》作者、苏联最著名的政治异议人士 <a href="https://zh.wikipedia.org/wiki/亚历山大·伊萨耶维奇·索尔仁尼琴" target="_blank" rel="noopener">亚历山大·伊萨耶维奇·索尔仁尼琴</a></p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/muzi502/blog/source/img/image-20200222212219674.png" alt="image-20200222212219674"></p><p><strong>但，面对这个满嘴谎言的社会你又能做什么？</strong></p><p>最近也思考了一些事儿，也决定以后不再冲塔了😂，也开始<code>自我阉割</code>、<code>自我审查</code>一下，把老大哥不爱听的话从博客上都删了😐。人在墙内并不是说害怕什么，最重要是出于对家人的保护，不想因为我的<code>不当言论</code>而让他们担惊受怕。父母都已经年过半百，作为儿女让父母平安度过一个幸福的晚年，是我余生唯一值得做的事情了。所以说自己应当理性一些，保护好家人，不让他们老人家为自己受罪。说出的每一句话前都要自我审查一下，免得老大哥觉着很刺耳，听到了就去我家维稳抓人，我一介草民也恐惧极权统治，我不敢想象被一堆黑皮暴力抄家的那种场面。活在一个当今这个 1984 般的社会里，真的有点生不如死的感觉。但自己死了，父母的余生就失去了保护，所以我还要活下去保护好家人们，这也是我唯一渴望活下去的理由吧。也正如 HBO  迷你剧 <a href="https://zh.wikipedia.org/zh-cn/切尔诺贝利_(迷你剧)" target="_blank" rel="noopener">切尔诺贝利</a> S01E04 中鲍里斯·谢尔比纳对乌拉娜·霍缪克所说的：</p><blockquote><p>I’ve know braver souls than you, Khomyuk. Men who had their moment and did nothing. Because when it’s your life and the lives of everyone you love, your moral conviction doesn’t mean anything. It leaves you. And all you.</p></blockquote><p>我见过比你更勇敢的人，他们面临抉择却沉默以对。因为当关系到你和你所爱之人的生命时，你的道德信念便一文不值，不复存在。那一刻 你只想躲过那一枪。</p><blockquote><p>Freedom has many difficulties and democracy is not perfect, but we have never had to put a wall up to keep our people in, to prevent them from leaving us.<br>——约翰 · 肯尼迪 《我是柏林人》</p></blockquote><p>自由有许多困难，民主亦非完美，然而我们从未建造一堵墙把我们的人民关在里面，不准他们离开。</p><blockquote><p>30 年过去了，柏林墙已经不在了，另一堵墙却越来越高。共同点是，两堵 “墙” 都是用来阻止本国人民对自由的追求。不同点是，德国人用一系列可歌可泣的行动歌颂了有史以来最伟大的逃亡，为了追求自由而进行的前仆后继的逃离——向往自由，是人类与生俱来的本能。柏林墙最终被拆毁了。</p></blockquote><p><code>此处引用</code> 小土豆的 <a href="https://www.bennythink.com/ballon.html" target="_blank" rel="noopener">自由的气球</a></p><hr><p>前段时间自我人肉了一下，发现我还是泄露了太多个人相关的信息，这些信息经过组织和梳理之后，再加上国内公安系统里的数据，还是能很精准地定位到我本人。虽然来说我尽可能地减少个人信息的泄露，但还是做的不彻底，留下了很多把柄。所以说为了安全起见 3 月 1 日前我会删掉一些文章，还请各位读者见谅。喜欢的文章没删之前可以把我的 markdown <a href="https://github.com/muzi502/blog" target="_blank" rel="noopener">源码</a> 文件保存下来，建议转换成 .pdf 方便存档。平时的我也是这样收藏和整理文章的，一些优秀的文章自己会保存为 .md 然后使用 <a href="https://typora.io/" target="_blank" rel="noopener">Typora</a> 导出为 .pdf 。一些想要仔细阅读的文章的就使用 <a href="https://calibre-ebook.com/" target="_blank" rel="noopener">calibre</a> 转换成 azw3 ，然后在 kindle osais 上仔细品读😂。</p><h2 id="过去"><a href="#过去" class="headerlink" title="过去"></a>过去</h2><p>过年时宅在家里看《盗火者：中国教育改革调查》深有感触：</p><p>吃尽教育体制苦头的自己，走出大学之后回头看，发现它基本上没有改善。一个缺乏独立之精神、自由之思想的应试教育，在党的意志取代国家意志的党化教育之下，只能培养出一颗颗国家机器的螺丝钉，而很难培养出一名独立人格和思想的合格公民。大学里禁止讨论司法独立、民主宪政、公民社会、言论自由、新闻自由等，这样的大学也就别指望能有什么独树一帜的思想了。</p><p><img src="https://cdn.jsdelivr.net/gh/muzi502/blog/source/img/image-20200222213454438.png" alt="image-20200222213454438"></p><h2 id="二月"><a href="#二月" class="headerlink" title="二月"></a>二月</h2><p>我的世界里整个二月的天空都是灰蒙蒙的，主要是因为外婆去世的缘故吧。心情也一直低落至今无法从那种痛苦中挣扎出来。尽管试图让自己开心一些，比如收藏和定制一些二次元插画；剁手买了很多最喜欢吃的水果（因为我是个素食者，🍌🍈🍉🍇🍓🍑🥝是我最喜欢的食物）；一箱箱自己最喜欢吃的草莓🍓；看了很多于地球和宇宙起源的纪录片😂；看了一些古生物学的科普书籍🤣；等等都是想让自己走出阴影开心一点……可😞，痛苦还是无法掩盖的，独自一个人生活，当夜深人静时看完书躺床上睡觉时，总会辗转反侧睡不着，想起外婆离世那天的经过。眼泪总会不争气地流，想起了关于很多小时候的事儿，想起了奶奶，儿时总会瞒塞给我和弟弟一点零花钱；想起了祖辈三代在文革时被整得惨兮兮的家族历史。</p><p><img src="https://cdn.jsdelivr.net/gh/muzi502/blog/source/img/image-20200222220307529.png" alt="image-20200222220307529"></p><p>有时候自己独自一个人触景生情时偷偷地流泪，越长大越是体会到<strong>血浓于水的亲情有时经不起风吹雨打，脆弱无比。</strong></p><h3 id="一点鸡汤"><a href="#一点鸡汤" class="headerlink" title="一点鸡汤"></a>一点鸡汤</h3><p>不由得感叹，人的一生就是不断接受捶打的过程，痛苦往往是必然伴随我们身边的，每个人注定要经历永远都无法满足的欲望，而幸福又是在满足欲望之后存续如此地短暂。当人们认为经历了千辛万苦，到达了人生之巅时，实际上又要带着巨大的恐惧被死神无情地收割，好消息是，死亡是我们人生最后一个痛苦。两千多年前的《道德经》里说过：“天地不仁，以万物为刍(chu)狗； 圣人不仁，以百姓为刍狗。”人类在这个孤独的星球上已经有了几百万年，太阳底下没有新鲜事，我们每天担心每天痛苦的事情，已经重复了千万遍，老天爷已经把我们当成草扎的狗，我们又何必自己天天暗自神伤呢？</p><p>有时候会有一种幻觉：人的一生读的书越多越能坦然地面对生死吧。了解先贤哲人的历史，看看别人的人生，就能明白一个很简单的道理。每个人的幸福都是如此短暂，在自己碰到伤心欲绝的事情之后，能想一想，既然那些每个人都在心中怀着巨大的痛苦，那么，我们又何必追求自己不能被伤害呢？世界上没有我们必须要得到的东西，也没有我们不能无法失去的东西，我们又何必去追求不可能存在的事情呢？</p><p>推荐阅读 <a href="https://lmzdx.com/" target="_blank" rel="noopener">软件那些事儿</a></p><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><blockquote><p>区块链以太坊 ETH 上为李文亮医生树了一座碑，区块高度 <code>9432824</code>。李文亮医生的事迹将被永远铭记，不可篡改，不可删除。<a href="https://etherscan.io/address/0x6e46d3ab7335fffb0d14927e0b418cc08fe60505" target="_blank" rel="noopener">地址</a>。上一个人是岳昕。<a href="https://etherscan.io/tx/0x2d6a7b0f6adeff38423d4c62cd8b6ccb708ddad85da5d3d06756ad4d8a04a6a2" target="_blank" rel="noopener">地址</a></p></blockquote><p><code>此处引用</code> <a href="https://twitter.com/muzi_ii/status/1225688296447045632" target="_blank" rel="noopener">本人推文</a></p><p><img src="https://cdn.jsdelivr.net/gh/muzi502/blog/source/img/image-20200222222234929.png" alt="image-20200222222234929"></p><blockquote><p>不懂常识未睁眼看世界之人多如草莽，真相不被提起就会被人遗忘。不能习惯了黑暗就为黑暗辩护，越是漆黑的夜越要发出萤火的光芒。渴望自由的心从未冷却，等石头开花，知其不可而为之，为自由理性发声。传播常识与思想，保持理性与宽容，拥有好奇心与求知欲，热爱生活，享受美好。从一言一行改变这的历史</p></blockquote><p><code>此处引用</code> <a href="https://t.me/moecao/10729" target="_blank" rel="noopener">NOONE</a></p><blockquote><p>或许，在党国强大的机器下，无知和恐惧是可以养成的，信息和新闻是可能屏蔽的，现实和真相是可以被扭曲的。但亲身经历了，见证了，就不能假装无知，不能放弃记录，不能坐而待毙。黑暗无边，仅剩的一丝真实和亮光，绝对不能拱手相让。</p></blockquote><p><code>此处引用</code> <a href="https://matters.news/@sophia/%E8%AE%B0%E5%BD%95%E6%88%91%E7%9A%84-%E5%8F%8D%E9%80%81%E4%B8%AD-%E5%A4%A7%E6%B8%B8%E8%A1%8C-zdpuAysW5ZoQVpbPWDWDK22Dg6jF3GSGYBfx4uk3buXQSkLsA" target="_blank" rel="noopener">记录我的“反送中”大游行</a></p><h2 id="未来"><a href="#未来" class="headerlink" title="未来"></a>未来</h2><p>自从去年开始养成了写日记的习惯之后，就笔耕不辍地记录着经历的事情。尤其是今年写的东西实在是太多了，但至今都未曾公开过，想想日后成功跑路之后在一个安全的地方再匿名发表出来吧。有种观点认为 <strong>在专制统治下，人们不但要在现实世界受到压迫，而且还要在精神世界受到禁锢。处于这种双重奴役状态下的人们，除了被迫变着花样颂扬压迫者的“伟大、光荣和正确”外，很难创造出真正有价值的思想成果。</strong>但有时我在想我们这一代人或许有机会能写出当代中国版的《1984》、《动物庄园》、《古拉格群岛》、《古拉格》，毕竟我们这一代人见证了一个比 1984 还荒唐可笑的<strong>极权专制独裁暴政</strong>的社会。我们唯一能做的就是真实的记录，将这段历史记录下来，将自由的火种传递给下一代吧。</p><p>所以说日后我会将更多的时间和精力放在技术方面，未来博客更新的内容也将是技术相关的。类似今天的文章就不再发表了。但这并不代表我放弃了记录和思考，我只是偷偷地记录和思考写作，或许哪天你会自由互联网上的一个不起眼的角落看到我的文字😂。所以我还会是你们印象中的那个木子，是不会改变滴😘。</p><h2 id="推荐"><a href="#推荐" class="headerlink" title="推荐"></a>推荐</h2><h3 id="资源"><a href="#资源" class="headerlink" title="资源"></a>资源</h3><blockquote><p>我老人家共享的电子书: <a href="https://t.co/b7HaePeiBu" target="_blank" rel="noopener">https://t.co/b7HaePeiBu</a> </p><p>跑路故事集: <a href="https://t.co/ZkY4bFCr5O" target="_blank" rel="noopener">https://t.co/ZkY4bFCr5O</a> </p><p>跑路信息: <a href="https://t.co/lMcPNuj1RN" target="_blank" rel="noopener">https://t.co/lMcPNuj1RN</a> </p><p>关于跑路咨询的公告： <a href="https://t.co/GQSBIeh6L7" target="_blank" rel="noopener">https://t.co/GQSBIeh6L7</a></p></blockquote><p><code>此处引用</code><a href="https://twitter.com/LiYing_2015/status/1227630570361876480" target="_blank" rel="noopener">李颖的推文</a></p><h3 id="书籍"><a href="#书籍" class="headerlink" title="书籍"></a>书籍</h3><table><thead><tr><th>《通往奴役之路》</th></tr></thead><tbody><tr><td>《自由宪章》</td></tr><tr><td>《致命的自负》</td></tr><tr><td>《自由与繁荣的国度》</td></tr><tr><td>《人类不平等的起源和基础》</td></tr><tr><td>《论国家的作用》</td></tr><tr><td>《社会主义：社会学与经济学的分析》</td></tr><tr><td>《法律、立法与自由》</td></tr><tr><td>《规则与惩罚：监狱的诞生》</td></tr><tr><td>《民主的奇迹》</td></tr><tr><td>《1984》</td></tr><tr><td>《极权主义的起源》</td></tr><tr><td>《论革命》</td></tr><tr><td>《过去与未来之间》</td></tr><tr><td>《独裁者手册》</td></tr><tr><td>《动物农庄》</td></tr><tr><td>《美丽新世界》</td></tr><tr><td>《娱乐至死》</td></tr><tr><td>《公正：该如何做是好》</td></tr><tr><td>《哈佛大学公开课：公正-该如何做是好》</td></tr><tr><td>《学会提问 - 批判性思维指南》</td></tr><tr><td>《走出帝制》</td></tr><tr><td>许章润：我们当下的恐惧与期待</td></tr><tr><td>《哈耶克作品集》</td></tr><tr><td>《新常识：一党专政的性质和后果》</td></tr><tr><td>《中国国家治理的制度逻辑：一个组织学研究》</td></tr><tr><td>《国家建设与政府行为》</td></tr><tr><td>《以利为利：财政关系与地方政府行为》</td></tr><tr><td>《转型中的地方政府：官员激励与治理》</td></tr></tbody></table><h3 id="影视"><a href="#影视" class="headerlink" title="影视"></a>影视</h3><ul><li>切尔诺贝利</li><li>华丽的假期</li><li>出租车司机</li><li>1987：黎明到来的那天</li><li>凛冬烈火：乌克兰为自由之战</li><li>第四公民</li><li>气球</li><li>返校</li><li>盗火者：中国教育改革调查</li><li><a href="https://www.youtube.com/watch?v=KuUm8syt30U" target="_blank" rel="noopener">花儿为什么这样红</a></li></ul><h3 id="文章"><a href="#文章" class="headerlink" title="文章"></a>文章</h3><ul><li><p><a href="https://lmzdx.com/" target="_blank" rel="noopener">软件那些事儿</a></p></li><li><p><a href="https://terminus2049.github.io/archive/2020/02/14/xueguang-zhou.html" target="_blank" rel="noopener">最新访谈译文| 周雪光：新型冠状病毒暴露了中国国家治理中的根本性张力</a></p></li><li><p><a href="https://matters.news/@2020Era/武汉肺炎50天-全体中国人都在承受媒体死亡的代价-zdpuB35z4kGhHnfq9qupMsVh41RP9UDhbB6x9x3XTsfmURDNL" target="_blank" rel="noopener">武汉肺炎50天，全体中国人都在承受媒体死亡的代价</a></p></li><li><p><a href="https://matters.news/@Zhizhu_2019/轉載-許章潤-愤怒的人民已不再恐惧-zdpuAtQTLkEf6MGa17RjcBdJFHFZAdRTfHPUgDBkCVkTUSg3o" target="_blank" rel="noopener">許章潤《愤怒的人民已不再恐惧》</a></p></li><li><p><a href="https://terminus2049.github.io/archive/2020/02/07/if-you-are-angry-with-govenment.html" target="_blank" rel="noopener">如果有人觉得祖国不好</a></p></li><li><p><a href="https://matters.news/@philosophia/对本次疫情的结构性反思-谣言-官僚和国家主义-上-zdpuAzU8UUWBV3sB7c9h6FVbGZSrsc9L9qUEdHBBpDRJzTHzu" target="_blank" rel="noopener">对本次疫情的结构性反思：谣言、官僚和国家主义</a></p></li><li><p><a href="https://jiashigrsyt1.github.io/" target="_blank" rel="noopener">佳士工人声援团官网 – 同战斗，共进退</a></p></li><li><p><a href="https://sikaozhe1997.github.io/Xin-Yue/" target="_blank" rel="noopener">岳昕事件</a></p></li><li><p><a href="https://telegra.ph/为李文亮医生立传后我被约谈8小时至今天凌晨-02-06" target="_blank" rel="noopener">为李文亮医生立传后，我被约谈8小时至今天凌晨 – Telegraph</a></p></li><li><p><a href="https://telegra.ph/2019-nCoV-02-14" target="_blank" rel="noopener">一篇讣告：The Man Who Knew.</a></p></li><li><p><a href="https://chinatimeline.github.io/" target="_blank" rel="noopener">时代透镜</a></p></li><li><p><a href="https://terminus2049.github.io/archive/2020/02/19/da-jia.html" target="_blank" rel="noopener">端点星</a></p></li><li><p><a href="https://terminus2049.github.io/archive/2020/02/19/da-jia.html" target="_blank" rel="noopener">腾讯大家｜比病毒可怕：被谣言操纵的人类暴力史</a></p></li><li><p><a href="http://www.bbc.com/zhongwen/simp/chinese-news-43972586" target="_blank" rel="noopener">汶川地震十年系列—公民社会从爆发到沉寂的艰难之路</a></p></li></ul><h2 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h2><p><strong>一个健康的社会不该只有一种声音。</strong>—- 李文亮，2 月 1 日与治疗期间接受《财新》专访。</p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;blockquote&gt;
&lt;p&gt;致未来、过去以及思想自由的时代：
        
      
    
    </summary>
    
    
      <category term="生活" scheme="https://blog.502.li/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="思考" scheme="https://blog.502.li/tags/%E6%80%9D%E8%80%83/"/>
    
  </entry>
  
  <entry>
    <title>盘王：Ultrastar ® DC HC310 开箱与评测</title>
    <link href="https://blog.502.li/wd-hc310-dc-hdd.html"/>
    <id>https://blog.502.li/wd-hc310-dc-hdd.html</id>
    <published>2020-02-11T16:00:00.000Z</published>
    <updated>2020-03-08T12:53:12.524Z</updated>
    
    <content type="html"><![CDATA[<h2 id="种草"><a href="#种草" class="headerlink" title="种草"></a>种草</h2><p>种草西数的 <code>Ultrastar ® DC HC310 HUS726T6TALE6L4 6T</code>这块硬盘很久了，从去年双十一就开始关注了，无奈与当时钱包有点紧张加上还要还贷款，所以一直就是省吃俭用省点钱没得买。等到现在终于积攒了一点小钱能买点东西了，自己那几块硬盘可用空间也要用尽了、为了能在硬盘里多养几只 <a href="https://zh.moegirl.org/zh-hans/二刺螈" target="_blank" rel="noopener">二次螈</a> 、加上最近迷上了纪录片，所以综合多种需求下狠下心来剁手买了这块 6TB 千元级别最强空气盘？虽然在近期疫情不断恶化的情况下，但顺丰快递还是隔日就送到了。今儿写这篇博客来开个箱评测一下这块 6TB 千元级别的最强空气盘（小声</p><h2 id="选购"><a href="#选购" class="headerlink" title="选购"></a>选购</h2><p>西部数据的  <code>Ultrastar DC HC300 Series Product Portfolio</code> 系列，共有三款，比较关心的参数如下表格。其中相同的参数都是 <code>AIR</code> | <code>CMR</code>  | <code>256MB</code> | <code>7200 RPM</code> | <code>12Gb/s SAS</code> or <code>6Gb/s SATA</code>。也就是这几款都是空气盘、磁头技术是 CMR、转速是 7200 转、SAS 模式下 12Gb/s、SATA 模式下 6Gb/s。</p><table><thead><tr><th align="center">系列</th><th align="center">容量</th><th align="center">实际</th><th align="center">蝶数</th><th align="center">价格（约）</th></tr></thead><tbody><tr><td align="center">HC310</td><td align="center">4TB</td><td align="center"></td><td align="center">4</td><td align="center">￥760</td></tr><tr><td align="center">HC310</td><td align="center">6TB</td><td align="center"></td><td align="center">4</td><td align="center">￥960</td></tr><tr><td align="center">HC320</td><td align="center">8TB</td><td align="center">7.5TB</td><td align="center">5</td><td align="center">￥1200</td></tr><tr><td align="center">HC330</td><td align="center">10TB</td><td align="center"></td><td align="center">6</td><td align="center">￥1540</td></tr></tbody></table><h3 id="官方文档"><a href="#官方文档" class="headerlink" title="官方文档"></a>官方文档</h3><h4 id="Ultrastar-DC-HC310-6TB-and-4TB-Data-Sheet-PDF"><a href="#Ultrastar-DC-HC310-6TB-and-4TB-Data-Sheet-PDF" class="headerlink" title="Ultrastar DC HC310 6TB and 4TB Data Sheet PDF"></a>Ultrastar DC HC310 6TB and 4TB Data Sheet <a href="https://documents.westerndigital.com/content/dam/doc-library/en_us/assets/public/western-digital/product/data-center-drives/ultrastar-dc-hc300-series/data-sheet-ultrastar-dc-hc310.pdf" target="_blank" rel="noopener">PDF</a></h4><p><img src="https://cdn.jsdelivr.net/gh/muzi502/blog/source/img/data-sheet-ultrastar-dc-hc310-1.png" alt="img"></p><p><img src="https://cdn.jsdelivr.net/gh/muzi502/blog/source/img/data-sheet-ultrastar-dc-hc310-2.png" alt="hc310"></p><h4 id="Ultrastar-DC-HC320-8TB-Data-Sheet-PDF"><a href="#Ultrastar-DC-HC320-8TB-Data-Sheet-PDF" class="headerlink" title="Ultrastar DC HC320 8TB Data Sheet PDF"></a>Ultrastar DC HC320 8TB Data Sheet <a href="https://documents.westerndigital.com/content/dam/doc-library/en_us/assets/public/western-digital/product/data-center-drives/ultrastar-dc-hc300-series/data-sheet-ultrastar-dc-hc320.pdf" target="_blank" rel="noopener">PDF</a></h4><p><img src="https://cdn.jsdelivr.net/gh/muzi502/blog/source/img/data-sheet-ultrastar-dc-hc320-1.png" alt=""></p><p><img src="https://cdn.jsdelivr.net/gh/muzi502/blog/source/img/data-sheet-ultrastar-dc-hc320-2.png" alt="data-sheet-ultrastar-dc-hc320-2"></p><h4 id="Ultrastar-DC-HC330-10TB-Data-Sheet-PDF"><a href="#Ultrastar-DC-HC330-10TB-Data-Sheet-PDF" class="headerlink" title="Ultrastar DC HC330 10TB Data Sheet PDF"></a>Ultrastar DC HC330 10TB Data Sheet <a href="https://documents.westerndigital.com/content/dam/doc-library/en_us/assets/public/western-digital/product/data-center-drives/ultrastar-dc-hc300-series/data-sheet-ultrastar-dc-hc330.pdf" target="_blank" rel="noopener">PDF</a></h4><p><img src="https://cdn.jsdelivr.net/gh/muzi502/blog/source/img/data-sheet-ultrastar-dc-hc330-1.png" alt=""></p><p><img src="https://cdn.jsdelivr.net/gh/muzi502/blog/source/img/data-sheet-ultrastar-dc-hc330-2.png" alt="data-sheet-ultrastar-dc-hc330-2"></p><h4 id="Ultrastar-SATA-Series-Data-Sheet-PDF"><a href="#Ultrastar-SATA-Series-Data-Sheet-PDF" class="headerlink" title="Ultrastar SATA Series Data Sheet PDF"></a>Ultrastar SATA Series Data Sheet <a href="https://documents.westerndigital.com/content/dam/doc-library/en_us/assets/public/western-digital/product/data-center-drives/general-docs/data-sheet-ultrastar-sata-series-2879-810017.pdf" target="_blank" rel="noopener">PDF</a></h4><p><img src="https://cdn.jsdelivr.net/gh/muzi502/blog/source/img/data-sheet-ultrastar-sata-series-2879-810017_2-1.png" alt="Ultrastar SATA Series Data Sheet"></p><p><img src="https://cdn.jsdelivr.net/gh/muzi502/blog/source/img/data-sheet-ultrastar-sata-series-2879-810017_2-2.png" alt=""></p><h3 id="Highlights"><a href="#Highlights" class="headerlink" title="Highlights"></a>Highlights</h3><p>• Excellent random and sequential performance</p><p>• 6TB and 4TB capacity points support traditional IT systems</p><p>• Sustained transfer rate up to 255MB/s (512e/4Kn models); 233MB/s (512n models)</p><p>• Choice of 12Gb/s SAS or 6Gb/s SATA</p><p>• Advanced Format 512e 9 models up to 6TB;512n formatting available on 4TB to support legacy systems</p><p>• Self-Encrypting Drive options</p><p>• 5-year limited warranty</p><blockquote><p>Ultrastar DC HC310 is based on a new 4-disk air platform design that uses <strong>conventional magnetic recording (CMR) technology</strong> in a 3.5-inch large form factor. </p></blockquote><p>此处需要留意，<strong>官方文档里特意标明了 HC310 的磁头记录方式为 CMR</strong> （传统磁记录方式）而非 SMR （叠瓦式磁记录方式）。</p><h3 id="磁头技术"><a href="#磁头技术" class="headerlink" title="磁头技术"></a>磁头技术</h3><p>关于磁头技术是选 CMR （传统磁记录方式）还是 SMR （叠瓦式磁记录方式）他们之间的区别可以参考群晖官网的一篇文档  <a href="https://www.synology.com/en-us/knowledgebase/DSM/tutorial/Storage/PMR_SMR_hard_disk_drives" target="_blank" rel="noopener">What are PMR and SMR hard disk drives?</a> 总之对于大容量企业级硬盘， SMR 坑你没商量，SMR 之于 CMR 就像固态硬盘闪存颗粒的 TLC 之于 MLC 一样，价格相对低廉，但 SMR 硬盘在改写数据时会覆盖掉邻近磁轨的数据，所以需要多次回写，会导致<strong>脏盘掉速、可靠性下降、发热、噪音</strong>等问题。到时候可能会气得你想<strong>掀桌子</strong>、<strong>锤屏幕</strong>、<strong>砸键盘</strong>、<strong>摔鼠标</strong>哦🙃：）</p><h4 id="LMR-VS-PMR"><a href="#LMR-VS-PMR" class="headerlink" title="LMR VS PMR"></a>LMR VS PMR</h4><blockquote><p>电脑硬盘在早期都是 LMR 的磁记录方式，但是这种水平磁记录方式导致硬盘的容量是个瓶颈，无法突破，所以才有后来产生的PMR垂直磁记录，PMR 出现后，硬盘的容量出现了突破，PMR 替代了 LMR 成为主流。</p></blockquote><ul><li>LMR：Longitudinal Magnetic Recording，水平磁记录</li></ul><p><img src="https://cdn.jsdelivr.net/gh/muzi502/blog/source/img/lmr.jpg" alt="img"></p><ul><li>PMR：Perpendicular Magnetic Recording，垂直磁记录</li></ul><p><img src="https://cdn.jsdelivr.net/gh/muzi502/blog/source/img/pmr.jpg" alt="img"></p><h4 id="CMR-VS-SMR"><a href="#CMR-VS-SMR" class="headerlink" title="CMR VS SMR"></a>CMR VS SMR</h4><blockquote><p>随着技术的发展，现在 PMR 的磁记录方式里，又细分出了两种形式：CM R和 SMR。其中 CMR 称为<strong>传统磁记录方式</strong>，这种方式保留了最早 PMR 替代 LMR 时的传统技术，即：<strong>磁道间留有保护间距，数据不会被重复叠写。</strong></p></blockquote><ul><li>CMR：Conventional Magnetic Recording，传统磁记录</li></ul><p><img src="https://cdn.jsdelivr.net/gh/muzi502/blog/source/img/CMR.jpg" alt="img"></p><ul><li>SMR：Shingled Magnetic Recording，叠瓦式磁记录</li></ul><blockquote><p>由于 SMR 从原理上有一个很明显的问题，那就是在单个瓦中，假如我二次写入需要写入第二条磁道，我就不可避免的要按照 2 3 4 5 的顺序逐层写入一次。这时候如果后面的磁道有数据，你就需要先将这些其他数据移走，等待写入后再移回来。</p><p>这个问题的直观表现在磁盘的写入速度上，当在一块写满了的 SMR 硬盘修改一个文件，可能你的真实写入速度（不算缓存）只有 15MB/s，甚至连 USB2.0 都不到。在这个原理性的问题面前，厂家只能增大硬盘缓存的容量保证速度，但是如果扒开缓存问题依旧。部分厂商为了降低这种情况的程度，额外学习了 SSD 的 TRIM 回收技术，通过标识磁盘上哪些数据无效，减免了单瓦二次写入时的搬运数量。读取速度由于差距不大，所以你的体验应该没有区别，以及由于磁道密度增加，你的读取错误率也许会上涨，但是这个读取错误是可以通过硬盘本身的纠错机制检查并回复回去。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/muzi502/blog/source/img/SMR.jpg" alt="img"></p><h2 id="开箱"><a href="#开箱" class="headerlink" title="开箱"></a>开箱</h2><h3 id=""><a href="#" class="headerlink" title="#"></a>#</h3><h4 id="厚厚的包装，赠送了-SATA-线和四颗螺丝"><a href="#厚厚的包装，赠送了-SATA-线和四颗螺丝" class="headerlink" title="厚厚的包装，赠送了 SATA 线和四颗螺丝"></a>厚厚的包装，赠送了 SATA 线和四颗螺丝</h4><p><img src="https://cdn.jsdelivr.net/gh/muzi502/blog/source/img/image-20200212174711937.png" alt="image-20200212174711937"></p><h4 id="保护效果极佳"><a href="#保护效果极佳" class="headerlink" title="保护效果极佳"></a>保护效果极佳</h4><p><img src="https://cdn.jsdelivr.net/gh/muzi502/blog/source/img/image-20200212174744908.png" alt="image-20200212174744908"></p><h4 id="本体外包装，锡纸包裹，两个字，奢华！"><a href="#本体外包装，锡纸包裹，两个字，奢华！" class="headerlink" title="本体外包装，锡纸包裹，两个字，奢华！"></a>本体外包装，锡纸包裹，两个字，奢华！</h4><p><img src="https://cdn.jsdelivr.net/gh/muzi502/blog/source/img/image-20200212174815949.png" alt="image-20200212174815949"></p><h4 id="硬盘本体，是-2019-年-12-月份泰国制造"><a href="#硬盘本体，是-2019-年-12-月份泰国制造" class="headerlink" title="硬盘本体，是 2019 年 12 月份泰国制造"></a>硬盘本体，是 2019 年 12 月份泰国制造</h4><p><img src="https://cdn.jsdelivr.net/gh/muzi502/blog/source/img/image-20200212174935106.png" alt="image-20200212174935106"></p><h4 id="硬盘背面，排线那里部分有明显的接触痕迹，应该是测试过的"><a href="#硬盘背面，排线那里部分有明显的接触痕迹，应该是测试过的" class="headerlink" title="硬盘背面，排线那里部分有明显的接触痕迹，应该是测试过的"></a>硬盘背面，排线那里部分有明显的接触痕迹，应该是测试过的</h4><p><img src="https://cdn.jsdelivr.net/gh/muzi502/blog/source/img/image-20200212175033523.png" alt="image-20200212175033523"></p><h4 id="使用了八年的日立-500GB-7200RPM-硬盘"><a href="#使用了八年的日立-500GB-7200RPM-硬盘" class="headerlink" title="使用了八年的日立 500GB/7200RPM 硬盘"></a>使用了八年的日立 500GB/7200RPM 硬盘</h4><p><img src="https://cdn.jsdelivr.net/gh/muzi502/blog/source/img/image-20200212175143454.png" alt="image-20200212175143454"></p><h4 id="厚度对比，因为多了三个碟片的缘故，西数的重量明显重很多"><a href="#厚度对比，因为多了三个碟片的缘故，西数的重量明显重很多" class="headerlink" title="厚度对比，因为多了三个碟片的缘故，西数的重量明显重很多"></a>厚度对比，因为多了三个碟片的缘故，西数的重量明显重很多</h4><p><img src="https://cdn.jsdelivr.net/gh/muzi502/blog/source/img/image-20200212175252411.png" alt="image-20200212175252411"></p><h4 id="dell-3010-机箱自带的硬盘托架，安装起来也十分方便😋"><a href="#dell-3010-机箱自带的硬盘托架，安装起来也十分方便😋" class="headerlink" title="dell 3010 机箱自带的硬盘托架，安装起来也十分方便😋"></a>dell 3010 机箱自带的硬盘托架，安装起来也十分方便😋</h4><p><img src="https://cdn.jsdelivr.net/gh/muzi502/blog/source/img/image-20200212175337800.png" alt="image-20200212175337800"></p><h4 id="安装效果图"><a href="#安装效果图" class="headerlink" title="安装效果图"></a>安装效果图</h4><p><img src="https://cdn.jsdelivr.net/gh/muzi502/blog/source/img/image-20200212175353147.png" alt="image-20200212175353147"></p><h3 id="机箱：捡来的宝贝？"><a href="#机箱：捡来的宝贝？" class="headerlink" title="机箱：捡来的宝贝？"></a>机箱：捡来的宝贝？</h3><p>目前使用的这个机箱 <code>DELL OPTIPLEX 3010 DT</code> 是去年在马云家花了 ￥160 多捡来的，也算是我捡过的垃圾里面最看上眼的宝贝之一。机箱是用料讲究，而且厚度也比那些一两百的好很多，毕竟是品牌机。电源是光宝的 250W 开关电源，都是面向 OEM 品牌机定制的，所以稳定性和可靠想比那些红星炸弹强很多。不过缺点也有，只能装下 (24*24)MATX 尺寸的主板、只能装半高显卡、电源功率也只有 250W，但不过瑕不掩瑜、瑕不掩瑜啊🙃，￥160 你还想要啥自行车啊。所以如果你不玩儿大型游戏的话，这款机箱+电源比较适合你，而且价格和稳定性也不错，这么好的<del>垃圾</del>宝贝分享给大家，淘宝上搜<code>DELL 3010 DT 机箱</code> 即可。也推荐一下去年写过的 <a href="https://blog.502.li/archives/amd-yes.html">一次愉悦地装机 AMD YES</a> 😂</p><h2 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h2><h3 id="HD-Tune"><a href="#HD-Tune" class="headerlink" title="HD Tune"></a>HD Tune</h3><p><img src="https://cdn.jsdelivr.net/gh/muzi502/blog/source/img/image-20200212200929031.png" alt="image-20200212200929031"></p><h3 id="CrystalDiskMark"><a href="#CrystalDiskMark" class="headerlink" title="CrystalDiskMark"></a>CrystalDiskMark</h3><p><img src="https://cdn.jsdelivr.net/gh/muzi502/blog/source/img/image-20200212201510213.png" alt="image-20200212201510213"></p><h3 id="AIAD"><a href="#AIAD" class="headerlink" title="AIAD"></a>AIAD</h3><p><img src="https://cdn.jsdelivr.net/gh/muzi502/blog/source/img/image-20200212202516267.png" alt="image-20200212202516267"></p><h3 id="ATTO"><a href="#ATTO" class="headerlink" title="ATTO"></a>ATTO</h3><p>写入和读取测试 32GB 数据，可以看到从 8KB Transfer Size 开始就稳定在 260MB/s 以上，牛皮啊，不愧是<code>最强盘王</code>，在 7200 RPM 规格里可以说是王者了，吊打那些掉速后的 TLC 固态不大吧（偷笑</p><p><img src="https://cdn.jsdelivr.net/gh/muzi502/blog/source/img/image-20200212205214388.png" alt="image-20200212205214388"></p><ul><li>IO/s</li></ul><p><img src="https://cdn.jsdelivr.net/gh/muzi502/blog/source/img/image-20200212205246224.png" alt="image-20200212205246224"></p><h3 id="复制文件-SSD-–-gt-HDD"><a href="#复制文件-SSD-–-gt-HDD" class="headerlink" title="复制文件 SSD –&gt; HDD"></a>复制文件 SSD –&gt; HDD</h3><p>从固态 <code>WD_BLACK SN750 NVMe SSD</code> 往 HC310 里复制 <a href="">宇宙时空之旅</a> 超清纪录片 80GB ，速度基本上都稳定在 220MB/s 以上。这速度基本上和那些掉速后的 TLC/QLC  固态（SATA）差不多了😂。</p><p><img src="https://cdn.jsdelivr.net/gh/muzi502/blog/source/img/image-20200212183603192.png" alt="image-20200212183603192"></p><h3 id="HDD-–-gt-SSD"><a href="#HDD-–-gt-SSD" class="headerlink" title="HDD –&gt; SSD"></a>HDD –&gt; SSD</h3><p>从 HC310 往固态 <code>WD_BLACK SN750 NVMe SSD</code> 里复制速度基本上也是在 220MB/S 以上。</p><p><img src="https://cdn.jsdelivr.net/gh/muzi502/blog/source/img/image-20200212184205712.png" alt="image-20200212184205712"></p><h3 id="CrystalDiskInfo"><a href="#CrystalDiskInfo" class="headerlink" title="CrystalDiskInfo"></a>CrystalDiskInfo</h3><p><img src="https://cdn.jsdelivr.net/gh/muzi502/blog/source/img/image-20200212152058875.png" alt="image-20200212152058875"></p><h3 id="dd"><a href="#dd" class="headerlink" title="dd"></a>dd</h3><p><code>dd if=/dev/zero of=./test.file bs=4m</code></p><p>在 WSL 里使用 dd 命令往硬盘里写了 108GB 的数据，平均速度在 276MB/s</p><p><img src="https://cdn.jsdelivr.net/gh/muzi502/blog/source/img/image-20200212185539226.png" alt="image-20200212185539226"></p><p><img src="https://cdn.jsdelivr.net/gh/muzi502/blog/source/img/image-20200212184904891.png" alt="image-20200212184904891"></p><h2 id="推荐阅读"><a href="#推荐阅读" class="headerlink" title="推荐阅读"></a>推荐阅读</h2><ul><li><a href="https://blog.starryvoid.com/archives/352.html" target="_blank" rel="noopener">关于 SMR 叠瓦式磁记录技术</a></li><li><a href="https://www.synology.com/zh-cn/knowledgebase/DSM/tutorial/Storage/PMR_SMR_hard_disk_drives" target="_blank" rel="noopener">PMR 和 SMR 硬盘分别是什么？</a></li><li><a href="https://www.chiphell.com/thread-1845728-1-1.html" target="_blank" rel="noopener">HGST Ultrastar 7K8/DC HC320 8TB HUS728T8TALE6L4小测</a></li><li><a href="https://post.smzdm.com/p/ag82d78d/" target="_blank" rel="noopener">国行WD西数 HGST HUS728T8TALE6L4 8T台式硬盘入手评测</a></li><li><a href="https://www.chiphell.com/thread-1807786-1-1.html" target="_blank" rel="noopener">黑五美亚海淘 WD 8TB My Book Desktop External Hard Drive 开箱评测</a></li><li><a href="https://www.chiphell.com/thread-1756122-1-1.html" target="_blank" rel="noopener">希捷的8T移动硬盘已经不是当年的Archive盘了</a></li><li><a href="https://www.zhihu.com/question/311014941" target="_blank" rel="noopener">2019 年上半年有哪些机械硬盘（根据预算）可以无脑买？</a></li><li><a href="https://www.douban.com/doulist/42984303/" target="_blank" rel="noopener">可靠的机械硬盘型号 &amp; 存储维护简易技巧</a></li><li><a href="https://www.chiphell.com/thread-1676546-1-1.html" target="_blank" rel="noopener"> 零售3.5’’ SATA HDD汇总列表 (2018-10-24更新)</a></li><li><a href="https://www.giuem.com/hus728t8tale6l4-review/" target="_blank" rel="noopener">最强空气盘？HUS728T8TALE6L4 开箱与非专业简评</a></li><li><a href="https://www.chiphell.com/thread-1906960-1-1.html" target="_blank" rel="noopener">HGST/WD 西数 HUS726T4TALE6L4 4T 3.5企业级NAS硬盘7.2k 256M 4TB</a></li><li><a href="https://post.smzdm.com/p/ar07lqew/" target="_blank" rel="noopener">机械硬盘上车即翻车！SMR技术到底有多坑爹？</a></li><li><a href="https://www.chiphell.com/thread-2018227-1-1.html" target="_blank" rel="noopener">西数发布DC HC330 10TB企业级硬盘，新技术让随机写入提升40%</a></li><li><a href="https://www.itsk.com/thread-398770-1-1.html" target="_blank" rel="noopener">机械硬盘LMR、PMR、CMR、SMR的解惑和自己购买西数企业硬盘经历</a></li><li><a href="https://www.itpwd.com/378.html#" target="_blank" rel="noopener">PMR 和 SMR 硬盘分别是什么？哪个好？(站长已挂一个SMR盘，怒更：赠送常用PMR硬盘型号)</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;h2 id=&quot;种草&quot;&gt;&lt;a href=&quot;#种草&quot;
        
      
    
    </summary>
    
    
      <category term="技术" scheme="https://blog.502.li/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="捡垃圾" scheme="https://blog.502.li/tags/%E6%8D%A1%E5%9E%83%E5%9C%BE/"/>
    
      <category term="硬件" scheme="https://blog.502.li/tags/%E7%A1%AC%E4%BB%B6/"/>
    
      <category term="硬盘" scheme="https://blog.502.li/tags/%E7%A1%AC%E7%9B%98/"/>
    
  </entry>
  
  <entry>
    <title>难忘的春节</title>
    <link href="https://blog.502.li/2020-Lunar-New-Year.html"/>
    <id>https://blog.502.li/2020-Lunar-New-Year.html</id>
    <published>2020-01-31T16:00:00.000Z</published>
    <updated>2020-02-21T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>我青年时代就亲自指挥过冠状病毒、天花、SARS 、登革热、猩红热、埃博拉、霍乱、黑死病、猪流感、伤寒、西班牙大流感、猪大流感、禽流感、查士丁尼大瘟疫……疫情防控攻坚战。</p></blockquote><h2 id="廿七"><a href="#廿七" class="headerlink" title="廿七"></a>廿七</h2><h3 id="疫情"><a href="#疫情" class="headerlink" title="疫情"></a>疫情</h3><p>早上给家里买好了口罩，顺丰邮寄到家，，口罩价格涨了四倍多……，原本 99 块钱的涨到了 389。而且付款后一个星期之后才收到货。比较僵硬的是收到货后该淘宝店就被查封冻结了，政府也开始打击涨价行为了。想起了去年读过的一本书《公正：该如何做是好》，这本书开头讲的就是类似的故事。</p><h4 id="《公正：该如何做是好》"><a href="#《公正：该如何做是好》" class="headerlink" title="《公正：该如何做是好》"></a>《公正：该如何做是好》</h4><p><img src="https://cdn.jsdelivr.net/gh/muzi502/blog/source/img/image-20200130155853428.png" alt="image-20200130155853428"></p><blockquote class="twitter-tweet"><p lang="zh" dir="ltr">他们用力花了几年洗出来的一个盛世，凭实力在一个春节就现了原型……</p>&mdash; Hao Chen (@haoel) <a href="https://twitter.com/haoel/status/1223619001256833026?ref_src=twsrc%5Etfw" target="_blank" rel="noopener">February 1, 2020</a></blockquote> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script><h4 id="推荐阅读"><a href="#推荐阅读" class="headerlink" title="推荐阅读"></a>推荐阅读</h4><ul><li><a href="https://www.bbc.com/zhongwen/simp/chinese-news-43972586" target="_blank" rel="noopener">汶川地震十年系列—公民社会从爆发到沉寂的艰难之路</a></li><li><a href="https://flourish378.wordpress.com/2020/01/22/%E3%80%90%E6%A8%AA%E8%AE%AE%E3%80%91%E6%89%B9%E8%AF%84%E4%B9%8B%E7%BE%8E%E4%B8%8E%E7%A4%BE%E4%BC%9A%E6%A0%B9%E6%9C%AC%EF%BD%9C%E7%9B%9B%E6%B4%AA/" target="_blank" rel="noopener">【横议】批评之美与社会根本｜盛洪</a></li><li><a href="https://mp.weixin.qq.com/s/AST2bqSVYQ1mN0tEnhTyjQ" target="_blank" rel="noopener">谣言，作为一种社会抗议</a></li><li><a href="https://cn.nytimes.com/china/20200127/coronavirus-crisis-china-response/" target="_blank" rel="noopener">病毒危机暴露中国政治体制深层缺陷</a></li><li>切尔诺贝利</li></ul><video src="https://cdn.jsdelivr.net/gh/muzi502/blog/source/img/twitter-ch.mp4" style="max-height :100%; max-width: 100%; display: block; margin-left: auto; margin-right: auto;" controls="controls" loop="loop" preload="meta">Your browser does not support the video tag.</video><blockquote><p>特别需要强调的是，公众有权质疑、批驳任何报道乃至政府公告的真实性，公民发短信或者转发相关帖子，即使有不实之处，也应被视作自保或者行使监督权，政府部门只能用更加公开透明的信息来平息大家的忧虑，消除不实之言。一场灾难过后，人们尚未获知政府部门关于预警系统、抗灾能力和救援措施的检讨，却先发现普通市民因为参与灾难后果的讨论而被警方拘留，这不能不使网络民意的焦点集中在权力是否滥用、言论是否自由等问题上。</p></blockquote><p><code>此处引用</code>《谣言：作为一种社会抗议》</p><blockquote><p>你的公信力就是这样慢慢消失殆尽，天天删帖封号喝茶抓人，不让人讲真话，搞到现在连自己都不好说话了。短短几天时间印证了那8名“造谣”者并没有造谣，也没有传谣，现在怎么解释？怎么回应这事件？真正造谣传谣的是你们这些恣意妄为的公权力机构！权力的傲慢与任性让民心皆失，你们不倒真的天理难容！</p></blockquote><p><code>此处引用</code>某推友推文</p><blockquote><p>从猪瘟到肺炎，我们可以看到一个政权一边力求维稳控制舆论，一边又握着绝对的决策权，能酿成多大的错。 以往的错误，能掩盖的能捱过去的都被盛世口号掩盖了，比如猪瘟。 掩盖不了的时候大家就会发现这个腐败的官僚体系有不可思议的千疮百孔，比如肺炎。 无人监督的权力，就是吃人的猛兽。</p></blockquote><p><code>此处引用</code>某推友推文</p><h3 id="假期"><a href="#假期" class="headerlink" title="假期"></a>假期</h3><p>晚上公司年会吃饭的时候，在抽奖环节我竟然意外地中了个三等奖，两百块钱的超市提货券。再加上元旦的时候发的 300 块钱的超市提货券。不过已经花的差不多了。</p><p>根据值班安排，实际的放假时间是 1月22日到 2月7日，十四天的假期😋。从老家回到工作城市后，公司要求自行隔离观察 14 天才能去公司上班，又多了十几天在假期，早一天回去早一天隔离完，定好的火车票由于各种缘故而停运，被迫改签到其他列次的火车。</p><h3 id="年货"><a href="#年货" class="headerlink" title="年货"></a>年货</h3><p>晚上吃完饭就去超市买点当地的特产带回家。其实很早之前就打算买一箱当地的柑橘带回家，而且很便宜，十块钱五斤😂，味道特别棒，口感也不错。比起我们北方的橘子味道和口感真的是不知道高到那里去了。在这里我最最喜欢吃的水果就是当地的芦柑，怎么来形容呢。味道虽然没有沙糖桔那样甜，但味道不像北方的橘子在冷库里放的时间久了的味道，冬天北方的橘子味道怪怪的，一点儿都不新鲜。和刚采摘下来的橘子味道极为不一样。在这座城市已经呆了四年多了，早已经深深习惯上了这座城市。习惯了这里的气候、习惯了这里的饮食、习惯了这里的水果。因为自从上大学以来就一直坚持素食，所以水果吃的比较多，夏天的时候天气太热吃不下饭的时候就吃点水果充饥。四年来吃的最多的水果莫过于当地的芦柑，基本上芦柑上市以来就每天都在吃，算是每天必备的食物。但这次时间太紧了，没有来得及去经常去的那条街上买芦柑，实在太可惜了。在超市买完年货回来后就匆匆回到住的地方收拾东西了。</p><h4 id="当地的芦柑"><a href="#当地的芦柑" class="headerlink" title="当地的芦柑"></a>当地的芦柑</h4><p><img src="https://cdn.jsdelivr.net/gh/muzi502/blog/source/img/image-20200126111323776.jpg" alt="image-20200126111323776"></p><p>先把台式机的 2TB 的硬盘拆下来换到笔记本上，台式机机箱虽然是 Dell 3010 MINI 小型的，但带着也不太方便所以就不带走了。只能把台式机上的硬盘拆下来了换到笔记本上。年后准备买一块西数的 <code>Ultrastar ® DC HC310</code> 的机械盘。淘宝上的 4TB 价格不到 780￥ 还是能接受，6TB 的 950￥ 也还算可以。而且读写速度非常棒，主要归因于7200 转，比同等容量的 5400 转的硬盘不知道高到哪里去了。7200 转的能达到最高 260MB/S 平均 190MB/S，最低 110MB/S 的速度，而且还带西数官方的五年质保，300万无故障时间。4TB 7200 转的机械硬盘大多都是企业级的硬盘，稳定性和可靠性比普通 5400 转的硬盘要高很多，速度也比后者高约 50%。5400 转的机械盘平均速度也就 110MB/S 左右，而 7200 转的能达到 190MB/S ，最高 260MB/S 。所以买块HC310 7K6 还是比较值得的。6TB 的是四蝶/单碟 1.5TB，4TB 的是三蝶/单碟 1.33TB，已经种草很久了。之前硬盘里下载了 600 多 GB 的蓝光纪录片（比如地球脉动、蓝色海洋、海洋、旅行到宇宙的边缘等），因为磁盘空间不够都删了，心痛啊。加上前不久把 B 站上收藏的一些视频也都下载下来转换成 mp4 保存着了<a href="https://blog.502.li/archives/merge-bilibili-flv-video.html">高效批量下载 B 站视频并合并转码为 mp4</a>。目前 2TB 的硬盘实在是太紧张了😂。</p><h4 id="Ultrastar-®-DC-HC310"><a href="#Ultrastar-®-DC-HC310" class="headerlink" title="Ultrastar ® DC HC310"></a><code>Ultrastar ® DC HC310</code></h4><p><img src="https://cdn.jsdelivr.net/gh/muzi502/blog/source/img/image-20200202130512687.png" alt="image-20200202130512687"></p><p><img src="https://cdn.jsdelivr.net/gh/muzi502/blog/source/img/image-20200202130524725.png" alt="image-20200202130524725"></p><p>台式机上的硬盘拆下来换到笔记本之后，换完硬盘再接着测试了一下 <code>esp8266</code> 开关的运行状况。自己动手制作的 WiFi 开关稳妥妥地运行了三地个月没事儿。想了解如何制作的可以参考我曾经写的博客《<a href="https://blog.502.li/archives/esp8266-pc-switch.html">使用 ESP8266 NodeMCU 打造 WiFi 开关</a>》。ssh 到路由器通过 curl 命令来控制 esp8266 开关，由于使用的 http ，直接穿透到外网比较危险，所以我仅仅穿透了路由器的 22 端口到服务器上，通过密钥 ssh 登录到路由器之后再使用 curl 命令控制 <code>esp8266</code> 开关。并且在路由器上添加 iptables 规则仅仅允许 127.0.0.1 访问 <code>esp8288</code> 的 web 端口。这样就可以安全地远程 ssh 到服务器通过 curl 命令行来开关台式机了。虽然过程比较麻烦😂，但设置个命令别名还是很方便的。</p><h4 id="esp8266-开关"><a href="#esp8266-开关" class="headerlink" title="esp8266 开关"></a>esp8266 开关</h4><p>自己动手做的开关，外壳使用的衣服标牌，黑色的电路板就是 ESP8266 开发板本体，蓝色的电路板是个继电器。也就是说通过控制 ESP8266 的 GPIO 引脚的高低电平来控制继电器的开关来实现继电器的闭合。</p><p><img src="https://cdn.jsdelivr.net/gh/muzi502/blog/source/img/image-20200130161500965.png" alt="image-20200130161500965"></p><h4 id="ESP8266-开关-demo"><a href="#ESP8266-开关-demo" class="headerlink" title="ESP8266 开关 demo"></a>ESP8266 开关 demo</h4><video src="https://cdn.jsdelivr.net/gh/muzi502/blog/source/img/esp8266.mp4" style="max-height :100%; max-width: 100%; display: block; margin-left: auto; margin-right: auto;" controls="controls" loop="loop" preload="meta">Your browser does not support the video tag.</video><h4 id="rtsp-监控，单身租房必备"><a href="#rtsp-监控，单身租房必备" class="headerlink" title="rtsp 监控，单身租房必备"></a>rtsp 监控，单身租房必备</h4><p>由于是合租的房子，曾经住的地方丢失过一个笔记本电脑，自那之后自己也就在桌子上方装上了监控，使用 rtsp 监控视频流协议的网络摄像头，将 rtsp 的端口通过 frp 穿透到服务器上，在服务器端使用 ffmpeg 读取 rtsp 监控视频流，将监控视频保存在自己的服务器上还是放心，比起那些所谓的智能摄像头安全很多。次方案也已经稳妥妥地运行了三个多月。感兴趣的可以参考我之前写的博客《<a href="https://blog.502.li/archives/ffmepg-rtsp.html">使用 FFmpeg 远程读取 rtsp 监控视频流</a>》。测试起来也很方便，ssh 到服务器，使用 ffmpeg 测试一下 rtsp 的监控视频流是否正常，一切顺利就绪😋。</p><p><img src="https://cdn.jsdelivr.net/gh/muzi502/blog/source/img/image-20200130161702552.png" alt="image-20200130161702552"></p><h3 id="重写一篇博客"><a href="#重写一篇博客" class="headerlink" title="重写一篇博客"></a>重写一篇博客</h3><p>最后花了一个小时的时间把之前的文章<a href="https://blog.502.li/archives/thinking-2019.html">《毕业后的一些思考》</a>重新修改了一下，因为之前就把要修改的内容都记录到了 telegram 私有频道里，所以花了一个小时就重写完了。push 到 GitHub 之后在服务器上 hexo 构建一下。发现 hexo 构建的静态博客也就是 public 目录下的文件并非持久化，即便丢失了也没关系重新构建一下就好。那就把 hexo 构建的文件都放在内存文件系统不可？说干就干，直接<code>mount -t tmpfs tmpfs /var/www/hexo/public -o size=256MB</code>，感觉没啥提升，最主要瓶颈还是在于网络。忙完之后定好明早上 6 点半的闹钟就钻被窝睡大觉喽。</p><blockquote class="twitter-tweet"><p lang="zh" dir="ltr">《【旧文重写】毕业后的一些思考》<a href="https://t.co/j3kCeLaiWM" target="_blank" rel="noopener">https://t.co/j3kCeLaiWM</a><br><br>&gt; 或许，在党国强大的机器下，无知和恐惧是可以养成的，信息和新闻是可能屏蔽的，现实和真相是可以被扭曲的。但亲身经历了，见证了，就不能假装无知，不能放弃记录，不能坐而待毙。黑暗无边，仅剩的一丝真实和亮光，绝对不能拱手相让。</p>&mdash; 502.li (@muzi_ii) <a href="https://twitter.com/muzi_ii/status/1219632485379858439?ref_src=twsrc%5Etfw" target="_blank" rel="noopener">January 21, 2020</a></blockquote> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script><h4 id="素食的一日三餐😂"><a href="#素食的一日三餐😂" class="headerlink" title="素食的一日三餐😂"></a>素食的一日三餐😂</h4><p><img src="https://cdn.jsdelivr.net/gh/muzi502/blog/source/img/image-20200126111454132.jpg" alt="image-20200126111454132"></p><h2 id="廿八"><a href="#廿八" class="headerlink" title="廿八"></a>廿八</h2><p>早上六点半起床去坐去火车站的公交，上了公交车赶紧找个位置坐下来，拿起 kindle 接着看《通往奴役之路》，之前断断续续看了一半，接着读剩余的章节。看了二十几分钟就困了，头耷拉在窗口玻璃上睡会儿。早上起这么早真不习惯，平时我都是八点多起床的，有时候睡懒觉就到八点半才起床，即便是八点半起床，走路几分钟就能到公司，住在公司附近实在是太方便了😂，有时候中午的时候还能回来睡一会儿午觉。还有点晕车，想吐的不得了，强忍了十几分钟终于到火车站了。</p><p>从工作城市到老家要至少 24 个小时的火车路程，实在是不好受。春运期间飞机票价格高出 1000 多，算了还是省省吧，坐飞机的话最多也就能节省 五六个个小时，而且飞机大多都是晚上的，又要等七八个小时，下飞机后又要在机场熬夜第二天再转火车回县城。去年暑假的时候做过一次飞机✈回家，真麻烦真折腾。凌晨一两点等一两个小时的班车去火车站，再从火车站坐五六个小时到小县城……。在火车上可以安安心心地躺着看书，实在是太爽了。</p><p>记得上大学的时候，每次回家坐火车都是坐硬座，可怜的是 24 多个小时的硬座。无奈家境贫寒，学费的都是助学贷款😑，还是个穷学生的时候坐不起卧铺😄。算下来，大学四年一共坐了 16 次 24 小时的硬座。想想那时候还是个年轻小伙还能抗，现在实在是不想坐硬座了。既然自己已经能赚钱了就爱惜一下自己，毕竟不再是以前那个穷逼学生了。以前回家的时候老姐会问我买的硬座还是硬卧，如果是硬座的话老姐就给我发红包让我改签成硬卧：-）</p><p>到了火车站，刚下车，晕车晕的太厉害了，差点没吐出来。在售货机那里买了三瓶八宝粥在路上吃吧，泡面什么的实在是没胃口吃了。说来也奇怪，以前是很少晕车的，即便是坐那种盘山公路的公交车也很少能晕车。取票过安检上车，也没有等太长时间，等着时间接着看《通往奴役之路》。坐上火车，放好行李就躺铺上睡了一会儿，起这么早实在是有点困。</p><p>醒来后接着捧起 kindle 看起书来。看了几章《论国家的作用》。说实在的，内容实在是太枯燥了😂。还是换了本《地球脉动：前所未见的自然之美》。相比来讲，这个比较轻松有趣，因为很早之前就看过地球脉动的纪录片，所以对书中写的内容也十分的熟悉，就这样一口气花了两个小时左右就看完了。看完之后接着又掏出手机看了两集《大国崛起》的纪录片，没想到看着看着就睡着了，手机一连着播放了三个小时，直到有人下站时才醒来。醒来之后肚子也有点饿了，于是就拿出买的八宝粥开始充饥。</p><p>吃饱喝足就像🐷一样接着躺尸在铺上看书。刷推特的时候看到推友分享《盗火者：中国教育体制改革调查》的观后感，才想起来之前自己也把这部纪录片下载了下来。但是文件都在笔记本上，掏出笔记本连接数据线拷贝到手机上。看了最后一集关于公民教育的。真的，长这么大二十四岁的人了，我还是第一次听知道在国内竟然有人在提倡公民教育。唉，吃尽教育体制苦头的自己，走出大学之后回头看，发现它基本上没有改善。一个缺乏独立之精神、自由之思想的应试教育体制之下，在党的意志取代国家意志的党化教育之下，只能培养出一颗颗国家机器的螺丝钉，而很难培养出一名独立人格和思想的合格公民。更不要提作为一名合格的公民利用宪法赋予的新闻自由、言论自由、集会自由、结社自由、出版自由等来监督问责政府违宪和滥权行为了。然而这部纪录片告诉我们，仍然有一些人在做出自己的努力，与行行色色畸形的教育做斗争，星火燎原。希望时间给出他们的报偿。这样所有的中国孩子都能活在一个更好的世界里。我们这一代人自八九六四之后就已经失去了对自由民主的追求，沦为独裁专制统治的奴隶。活在老大哥的双重思想之下。</p><blockquote><p>致未来、过去以及思想自由的时代：人人各不相同，不再孤寂一生。献给真理永存的时代，献给事情既已发生而无需篡改的时代。我们这群活在没有自由可言、孤苦潦倒的岁月的人，活在老大哥及双重思想阴影下的人——向你们致敬！</p></blockquote><p><code>此处引用</code>《1984》</p><p>看完《盗火者：公民教育》那一集之后，就在 kindle 上搜了一下公民教育的《爱弥尔》，又了解到卢梭的《社会契约论》。卢梭的思想指导了整个法国大革命，孟德斯鸠的思想指导了美国权利法案的制定。所以说提起卢梭不得不提起法国。就想起了大国崛起里也有法国的纪录片，于是就拿起手机又看了大国崛起关于法国的那集。</p><p>《社会契约论》的核心思想是：合法的国家必须根据普遍意志来进行管理。想要读懂这本书还需要读卢梭的另外两篇论文，第一论文（《论艺术与科学》）和第二论文论人类不平等的起源和基础》，卢梭主要思考的是文明社会中种种罪恶与不幸，并解释它们的起源；那么，从《社会契约论》开始，卢梭则致力于思考如何改变这种状况。</p><p>按照第一论文和第二论文的分析，人本来是纯朴善良的，由于有缺陷的社会制度，生活于社会中的人才变坏，并堕入罪恶的深渊。由文明引发的问题必须通过新的政治组织形式来加以克服。《社会契约论》要做的工作是，<strong>通过建立一个健全的社会政治制度，帮助人们恢复自然良善。</strong>找到一种结合形式，凭借它可以运用所有共同的力量来捍卫和保护每个结合者的人身和财产，这种形式使得每个结合者虽然与所有人结合在一起，但是只服从自己，并且一如既往地自由。”这就是社会契约所要解决的根本性问题。社会契约可以简化为如下词句：<strong>我们中的每个人将其自身及其所有的力量共同置于普遍意志的最高领导之下，而将每个成员作为整体不可分割的部分纳入整体。</strong>在《爱弥儿》背后的一个基本预设是：没有文化做支撑，制度是没有办法有效运行的。因此，最重要的任务是：通过教育，将“人”转变为“公民”，像爱弥儿一样的公民。唯其如此，普遍意志才有可能，正义而合法的政治秩序才有可能。所依理解卢梭的思想，最好是从第一篇论文、第二篇论文、社会契约论、爱弥尔 这样的顺序读完。</p><p>论人类不平等的起源这本书在上周就早已经读完了，所依读起社会契约论速度比较快。一口气读完一半花了不到一个小时，这本来就是一本精简的小册子，读起来和《论人类不平等的起源和基础》一样，语言十分简洁精要。《爱弥尔》等到以后再读吧</p><h2 id="廿九"><a href="#廿九" class="headerlink" title="廿九"></a>廿九</h2><h3 id="到家"><a href="#到家" class="headerlink" title="到家"></a>到家</h3><p>火车晚点了一个小时，上午十一点半左右到县城的火车站。老姐早已经在火车站外面等候多时。从早上六点半出发到第二天到家十二点半，前前后后历时 30 个小时到家，中午到家已经十二点半了，大外甥也在家，比起以前又长高了，现在也听话懂点事儿了😂。刚上一年级，也是个话痨，话特别多，也不调皮捣蛋，总是问老师这问题那问题的，话超级多。好几次被叫家长了，有次课上提问问题太多被老师停课半天，真是辛苦了我老姐啊，三番五次叫家长。</p><h3 id="催婚三连"><a href="#催婚三连" class="headerlink" title="催婚三连"></a>催婚三连</h3><p>到家收拾了一下房间，晚上家里吃火锅。吃饭的时候老爸老妈还催我赶紧找对象结婚生孩子抱娃儿三连。并且有一个亲戚还给我说了对象😐。我实在是不想谈恋爱，觉着恋爱结婚生娃啥的就像过家家一样不好玩儿。因为大三的时候谈过一次初恋，后来分手后悲痛不已，做出了很多傻事儿，(难受得不行自己独自一人跑到学校后山上一口闷了半斤多的白酒，而且还是空腹饮酒，导致酒精中毒差点没窒息挂掉)。从那以后我明白了，我是无法忍受失去的滋味。那么<strong>假如失去如此痛苦我宁愿不曾拥有</strong>，所以我就不再想谈恋爱了，都一把年纪了，早已看淡生死，只要自己一个人过得开心就好。没有女朋友又能怎样，又不是不能过日子。</p><p>我现在已经把书籍当作自己快乐的唯一源泉，因为我不会失去他们，只要我阅读和思考他们就永远不会失去它们。将自己的幸福和快乐寄托在他人身上是如此地脆弱，我已经深深体会到失去它的痛苦，所以就不再想失去第二次了。这也算是我自己的自我防护机制吧。没有希望就没有失望。自己读书看漫画追番和博客读者们交流收获的快乐又是多么地单纯，没人会背叛自己，没人会伤害自己，没人会离自己而去。<strong>这个世界上没有必须要得到的东西，也没有不能无法失去的东西</strong>，抱着这种心态来对待自己的期待和欲望，这样才能使自己过得开心一点。</p><p>高中的时候喜欢上一个女生，一直喜欢到和初恋分手之后的大彻大悟。五年的时间一无所获，收获的仅仅是一次次的失望，一次次地期待被破灭。也是自从和初恋分手之后我也释怀了，也不觉着有多么地喜欢那个女生了，也能以平常心看待之间的关系了。</p><p>晚上吃饭玩才七点多，也没事儿干就早早地钻到被窝里了。打开笔记本，ssh 远程登录到远在千里之外的路由器，通过一个 curl 命令打开了远在千里之外的台式机。家里移动的网络，不知道为什么梯子的速度明显比电信的要慢很多很多😫。刷推、push  commit 等操作不得不远程使用千里之外的台式机了，那里电信的网络稍微好一点。再次诅咒 GFW 去你妈的早点倒闭吧。</p><p>睡觉前补了一集末日三问，酸死我了。实在是太喜欢珂朵莉啦，准备年后打印几张海报帖子在床头的墙上😋，太喜欢珂朵莉啦（大声</p><h4 id="假如……是假如哦……"><a href="#假如……是假如哦……" class="headerlink" title="假如……是假如哦……"></a>假如……是假如哦……</h4><p><img src="https://cdn.jsdelivr.net/gh/muzi502/blog/source/img/image_2020-01-23_18-30-29.png" alt="img"></p><h4 id="假如我会在五天后死去"><a href="#假如我会在五天后死去" class="headerlink" title="假如我会在五天后死去"></a>假如我会在五天后死去</h4><p><img src="https://cdn.jsdelivr.net/gh/muzi502/blog/source/img/image_2020-01-23_18-31-18.png" alt="img"></p><h4 id="你会对我温柔些吗？"><a href="#你会对我温柔些吗？" class="headerlink" title="你会对我温柔些吗？"></a>你会对我温柔些吗？</h4><p><img src="https://cdn.jsdelivr.net/gh/muzi502/blog/source/img/image_2020-01-23_18-31-34.png" alt="img"></p><h4 id="你想不想听听我最后的请求？"><a href="#你想不想听听我最后的请求？" class="headerlink" title="你想不想听听我最后的请求？"></a>你想不想听听我最后的请求？</h4><p><img src="https://cdn.jsdelivr.net/gh/muzi502/blog/source/img/image_2020-01-23_18-33-14.png" alt="img"></p><h4 id="如果我说想让你吻我-你怎么想？"><a href="#如果我说想让你吻我-你怎么想？" class="headerlink" title="如果我说想让你吻我 你怎么想？"></a>如果我说想让你吻我 你怎么想？</h4><p><img src="https://cdn.jsdelivr.net/gh/muzi502/blog/source/img/image_2020-01-23_18-33-39.png" alt="img"></p><h4 id="什么嘛-想留下点会议有哪里不对了？"><a href="#什么嘛-想留下点会议有哪里不对了？" class="headerlink" title="什么嘛 想留下点会议有哪里不对了？"></a>什么嘛 想留下点会议有哪里不对了？</h4><p><img src="https://cdn.jsdelivr.net/gh/muzi502/blog/source/img/image_2020-01-23_18-34-24.png" alt="img"></p><h4 id="我是快要死了-但我不想真的消失"><a href="#我是快要死了-但我不想真的消失" class="headerlink" title="我是快要死了 但我不想真的消失"></a>我是快要死了 但我不想真的消失</h4><p><img src="https://cdn.jsdelivr.net/gh/muzi502/blog/source/img/image_2020-01-23_18-34-45.png" alt="img"></p><h4 id="我想留在某个人的心中-想跟人有段感情"><a href="#我想留在某个人的心中-想跟人有段感情" class="headerlink" title="我想留在某个人的心中 想跟人有段感情"></a>我想留在某个人的心中 想跟人有段感情</h4><p><img src="https://cdn.jsdelivr.net/gh/muzi502/blog/source/img/image_2020-01-23_18-34-59.png" alt="img"></p><h4 id="这点愿望到底有哪里不对啊！"><a href="#这点愿望到底有哪里不对啊！" class="headerlink" title="这点愿望到底有哪里不对啊！"></a>这点愿望到底有哪里不对啊！</h4><p><img src="https://cdn.jsdelivr.net/gh/muzi502/blog/source/img/image_2020-01-23_18-35-18.png" alt="img"></p><p>通过博客的文字和思想和别人产生一点共鸣，毕竟作为九五后的我们在 GFW 成长下的一代，身边的人能交流的少之甚少，现实生活中也不喜欢社交。就像柯朵莉那样，在自己消失之后从别人心中留下一点记忆吧。</p><blockquote><p>我成长过程中被灌输的价值，我在网络世界邂逅的理想，全都捣碎在一起成了我现在的思想。我直到即将迈入三十岁之际才终于明白，我所信仰的，我以为自己深信不疑的，大多是年轻时候的印记。</p></blockquote><p><code>此处引用</code>《永久记录》</p><p>趁还年轻，当个 <code>键盘侠</code> 将自己的所思所想记录记录下来吧，这些文字也会在自由的互联网中存在着。</p><blockquote><p>自从自由的访问互联网以后，有一点感同身受，看这篇文章，看得有点想哭</p></blockquote><h2 id="除夕"><a href="#除夕" class="headerlink" title="除夕"></a>除夕</h2><p>上午收拾一下房间、清理一下院子，把门前的垃圾清扫一下，因自来水管管道填埋的泥土，也得清理干干净净。免得年后这几天下雨或下雪导致门前一堆堆的泥糊😂。上午收拾完院子，中午吃罢饭就去超市买点年货。买了番茄味的火锅底料，这个味道还从未尝试过。改天家里吃火锅试一下。又去五金店花了 100 块钱买了 4 个 LED 灯，卧室里的灯早就该换了，之前一直使用的十几瓦的节能灯，光线特别暗。换上之后比值钱的不知道高到哪里去了，瞬间高大上起来了。</p><h3 id="包饺子"><a href="#包饺子" class="headerlink" title="包饺子"></a>包饺子</h3><blockquote class="twitter-tweet"><p lang="zh" dir="ltr">一家人包饺子：<br>老爸调馅+包饺子<br>老妈和面+包饺子<br>老姐赶剂子<br>我负责烧锅+送饺子 <a href="https://t.co/cXAvUWDrO2" target="_blank" rel="noopener">pic.twitter.com/cXAvUWDrO2</a></p>&mdash; 502.li (@muzi_ii) <a href="https://twitter.com/muzi_ii/status/1220671660707078144?ref_src=twsrc%5Etfw" target="_blank" rel="noopener">January 24, 2020</a></blockquote> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script><p>下午家里包水饺，老妈活面，包，老爸调馅儿，老姐压剂子。而我负责吃水饺和送水饺。🤣下午还要去家族的墓地请先人们回家过年。按照往常应该是带上鞭炮去的。但今年全县都禁止燃放烟花爆竹。逮到就是罚款五百元。而且也很难买到烟花爆竹了。所以只带了香火和金叶子去的。这几年一直都是我来请先人们回家过年的。主要有我爷爷奶奶，父亲的爷爷，还有爷爷的爷爷。</p><p>每到这时总能想起祖辈们。爷爷是当时县里最有名的知识分子，可以在文革的时候被批斗，眼睛被整瞎了，腿也瘸了。父亲的爷爷在文革批斗的时候被整死了。爷爷的爷爷在抗战时期是县城国民党的官员，在文革批斗的时候被翻出来旧账接着批斗，在批斗的时候被气死了。唉，祖辈三代被共产党整垮了，都是凄凄惨惨的一生，在文革的时候被批斗征得家破人亡，家族财产被抢去，这也是导致我们家族沦落为贫农的原因吧。文革之前我们家族还算比较富有的。文革过后，家族穷的吃不起饭；洪灾的时候又流离失所；八九十年代的时候又举家到山西逃难；自从爸妈结婚到我出生的时候，我们家因逃难搬家无数次，二十几年颠沛流离地生活并没有击垮父母，直到家里有了我之后才回到老家定居下来至今。每每想到此，心中无数想说的话想对祖辈们说。想起父亲在十几岁的时就已经扛起整个家族的重担…..每每想到与此，千言万语诉不尽心中的悲苦。</p><p>扯得有点远了</p><p>请先人们回家过年，在坟前各插三根香火点燃，剩余的香火点燃带回家，用香火引领先人们的灵魂从彼岸到家里。听起来很迷信，但这样的传统我始终认为是有价值和意义的。尤其是在2017年的时候和前女友一起看完《寻梦环游记》之后。和墨西哥的亡灵节一样，唯有后人将家族的先人们铭记于心在能使先人们的灵魂在彼岸得以存在。大概也是如此吧，一个人正真死去的时候，并非是肉体上的死亡，而是消失在人的记忆之中。而这种请先人们回家过年的迷信传统也和墨西哥的亡灵节有着共同之处吧。将历代家族的意志和历史传承给每一代人，才能使家族延续至今。拿着点燃的香火到家，插在堂屋的主干前的香炉上，对着印有家族图谱的主干毕恭毕敬地磕上四个响头。将对爷爷奶奶的思念传递给他们，愿他们在天国安好。</p><p>水饺也包完了，接下来就是下水饺。我们家依旧使用的是木柴，也就是带有炕的那种。以前上初中和小学的时候我和弟弟就睡在炕上，贼暖和。即便是现在，我们村家基本上家户户还是喜欢烧柴火做饭。水开之后水饺下到锅里，等着水再次开之后再放凉水，连续三次开滚就可以。另外因为家里只有我一个人素食，所以就单独给我包里韭菜鸡蛋馅的水饺，还要单独给我下水饺😂。恐怕全村也只有我们一家包两种馅的水饺吧。水饺熟了之后盛在碗里，这时还不能吃。要先供养老天爷和先人们。还是有讲究的，先在老天爷香炉旁边放一碗水饺，再说一句“老天爷，过年吃扁食咧”，接着再放到财神爷那里一碗水饺，接着再放到主干那里一碗水饺，最后再放在土灶神那里一碗水饺。土灶神还是比较特殊的，土灶神是在人间的神，到腊月十八的时候要送他上天给玉皇大帝汇报当年人间的情况😂。</p><p>就这样供养完这些神之后就可以吃水饺了，吃完水饺还要去给我大爷家送一碗水饺，这也算是一种习俗。等到初一那天早上也要去送一碗水饺。其实这算是我帮我儿子送的水饺，虽然现在我还没有对象 ：( 因为送水饺的习俗都是孙子辈给爷爷辈送水饺。😂</p><p>晚上，家族年夜饭，只去了我们三个人，今年真是意外地少啊。九点多我就回家睡觉喽。睡觉前拿起 kindle 接着看卢梭的《社会契约论》。把kindle 的笔记导出来更新一下标记然后就 push 到 GitHub 上就早早地睡了。</p><h4 id="家里的雪人（去年拍的"><a href="#家里的雪人（去年拍的" class="headerlink" title="家里的雪人（去年拍的"></a>家里的雪人（去年拍的</h4><p><img src="https://cdn.jsdelivr.net/gh/muzi502/blog/source/img/image-20200126110509247.jpg" alt="image-20200126110509247"></p><h2 id="初一"><a href="#初一" class="headerlink" title="初一"></a>初一</h2><p>初一早上六点起床，洗脸吃饭后在主干前磕四个响头。接着就再给大爷家送水饺。回来这后等着几个堂哥一起去给村里的长辈们拜年。拜完年回来后就钻被窝里暖和暖和，外面实在是有点冷。等到九点多就和老爸还有堂哥一块去走亲戚。亲戚家就在我高中学校的家属院，谈了谈家常，又谈起了我初中的时和老师干架的黑历史😐。黑历史绝对的黑历史。又谈了谈我既然工作安顿下来了，接下来就该谈对象结婚成家三连了。我哭了，再次催婚😣。</p><p>想到了<a href="https://chanshiyu.com" target="_blank" rel="noopener">蝉时雨</a>博客上的一段话</p><blockquote><p>不知觉在异国的生活已近一月，异国风情尚未深刻感受。每天两点一线，几分钟的路程，不用在思虑三餐和忍受早晚高峰挤地铁的煎熬，怕是最为惬意的事情，每天有更多的时间来思考充实自己。</p></blockquote><p>自己的生活也是如此，自己一个人住在公司附近，三四分钟的路程，中午的时候回来睡个午觉。下午下班后在附近吃完饭回来就宅在屋里。没人打扰，微信和家人保持联系，其他 IM 上也很少和人联系（我的微信和QQ使用的都十年了，但好友始终未超过110个，所以即便时我的QQ一个月不登录也没几个人搭理我🙄，所以我的社交很清淡)。下班后就捧着 kindle 看书看漫画追番，学英语，做项目。自己一个人和生活真的是很充实。我也希望能永远这样下去，虽然住着筒子楼，拿着微薄的工资，每天955工作制，自己拥有的个人时间实在是太多了。我不想被打扰，我也不喜欢将时间浪费在无意义的谈情说爱上。</p><p>中午留在亲戚家吃饭，下午两三点就回家了。本来没打算留下来吃饭的，但太好客了，加上聊天意犹未尽就接着扯了😂。下午到家后就钻被窝里喽，晚上吃饭的时候听说我们这边这几天要封村了。因为武汉肺炎，我们这边动静很大，村里的喇叭上也广播着不让外出的消息了，初二就开始把村口的路都堵上了。走亲戚的都取消了。既然出不去，家里就商量着搓麻将😂，正我和老爸老妈老姐四个人。搓完麻将就早早地钻被窝里睡觉啦。</p><h3 id="十年前的黑历史"><a href="#十年前的黑历史" class="headerlink" title="十年前的黑历史"></a>十年前的黑历史</h3><p>梦回十年前，年少无知的初中时代，也就是 2010 年。那时候还是因为厌学辍学，讨厌学校。记得上小学的时候还是个老老实实的乖宝宝，但自从上了初中之后，加上正值叛逆青春期。于是刚上初中后就开始和一群街上的小流氓鬼混。想想那时的自己还是个吸烟喝酒、打架斗殴、欺凌弱小、上课捣乱、通宵上网、夜不归宿的小流氓。和父母吵架，和老师干架，和同学打架，那几年伤害了很多人，悔恨至今。</p><p>也就是 2010 年是人生中个转折点吧，那时候因为厌学又转到了另一个学校（其实我初中四年换了四个学校）。刚刚过完年开学的第一天晚上晚自习。上课玩手机听歌被班主任逮到。那还了得，班主任二话不说让我把手机交出来，不知道当初哪来的勇气，站起来立马怼了回去。“不交咋滴！”。然后班主任和我抢手机，我也怒了，一巴掌掌掴在她脸上。那声音在晚上安安静静的教室里格外响亮。然后班主任就哭着去了办公室，我也就被教导处主任叫去了政教处。第二天，开除学籍，卷铺盖走人，而这所学校，我仅仅呆了不到一个月。这也是初中四年呆的最短的一个学校。</p><p>被学校开除后，第二天也没在家歇着。家里人商量着既然不想上学，那就去工地上打工吧，感受一下打工的辛苦。于是第二天早上，老爸把我送到去省会城市的客车上。那时候才十五岁，只身一人来到一个陌生的城市，开始打工漂泊。依稀记得在坐车的时候，手机也丢了。以至于一个多月都没和家人联系。在工地上搬砖打工的日子，那种感受到现在依然历历在目，机械式的重复工作，在泥土坑道里拿着机器穿来穿去，扛着一百多斤重的发电机在狭窄的沟子里。全年无休，更不要提 996 了。</p><h2 id="初二"><a href="#初二" class="headerlink" title="初二"></a>初二</h2><p>今天一直宅在家里了，上午睡懒觉到十点多，真是爽啊。今天一整天都没做什么事儿，吃床吃完饭后就钻被窝里躺着了，一会儿就睡着了。下午没事儿翻了翻相册，找到几张有趣的图片。由于村口的路被堵上了，也没有办法出去走亲戚就宅在家里一整天。上午还是接着睡觉，不得不说过年真是休息最好的时间。今儿又重新看了一遍 HBO 的切尔诺贝利，因为当下也是如此吧。</p><p>今天一整天从上午十点到晚上的十点，村里的大喇叭一直广播着疫苗防控的措施。</p><p>晚上一家四口接着搓麻将，今儿运气比较差，输了 200 多块钱😂，不过麻将技术倒是学会了几招。尤其是在听胡的时候，能听三张牌，很多时候是三六九，有一次听的北风、三万、六万三张牌。哈哈哈，之前总是想着能不能多听几张牌的，现在也学会了一点技巧。无奈输得还是那么多。搓了三轮之后就散伙睡觉去了，钻被窝里看《盗火者：中国教育改革调查》的纪录片看了前三集就睡了。</p><h3 id="翻翻相册"><a href="#翻翻相册" class="headerlink" title="翻翻相册"></a>翻翻相册</h3><h4 id="学校自习教室里的狗子"><a href="#学校自习教室里的狗子" class="headerlink" title="学校自习教室里的狗子"></a>学校自习教室里的狗子</h4><p><img src="https://cdn.jsdelivr.net/gh/muzi502/blog/source/img/image-20200126112048549.jpg" alt="1"></p><p><img src="https://cdn.jsdelivr.net/gh/muzi502/blog/source/img/image-20200126112129833.jpg" alt="image-20200126112129833"></p><h4 id="之前在学校时住的地方，在一个小山沟里，环境特别好"><a href="#之前在学校时住的地方，在一个小山沟里，环境特别好" class="headerlink" title="之前在学校时住的地方，在一个小山沟里，环境特别好"></a>之前在学校时住的地方，在一个小山沟里，环境特别好</h4><p><img src="https://cdn.jsdelivr.net/gh/muzi502/blog/source/img/image-20200126112217600.jpg" alt="image-20200126112217600"></p><h4 id="在自习室门口悠然睡大觉的狗子"><a href="#在自习室门口悠然睡大觉的狗子" class="headerlink" title="在自习室门口悠然睡大觉的狗子"></a>在自习室门口悠然睡大觉的狗子</h4><p><img src="https://cdn.jsdelivr.net/gh/muzi502/blog/source/img/image-20200126112315360.jpg" alt="image-20200126112315360"></p><h4 id="我们家秋天银杏落叶时拍的"><a href="#我们家秋天银杏落叶时拍的" class="headerlink" title="我们家秋天银杏落叶时拍的"></a>我们家秋天银杏落叶时拍的</h4><p><img src="https://cdn.jsdelivr.net/gh/muzi502/blog/source/img/image-20200126123138135.jpg" alt="image-20200126123138135"></p><h4 id="用海棠树编织成的园林艺术景观–门"><a href="#用海棠树编织成的园林艺术景观–门" class="headerlink" title="用海棠树编织成的园林艺术景观–门"></a>用海棠树编织成的园林艺术景观–门</h4><p><img src="https://cdn.jsdelivr.net/gh/muzi502/blog/source/img/image-20200126123201247.jpg" alt="image-20200126123201247"></p><h2 id="初三"><a href="#初三" class="headerlink" title="初三"></a>初三</h2><p>今天还是睡大觉，下午的时候顺丰快递打电话说口罩到了，但是由于县城到乡下的运输车辆被限行了，不能送到乡下来，只能自己去取或者等到限行结束。由于口罩是急需用品所以还是开车去拿吧。在村里看后逛了一下，只有一条路可以去外面，而且那里还有人把守。不过和熟人说了一下要去县城拿口罩就放行了。拿到口罩是 2017 年生产的😑。当晚和淘宝店主沟通要求退还，没人搭理。后来才知道因为恶意涨价淘宝店被查封冻结了，钱也退还了。</p><p>晚上吃饭后和昨天一样一家四口接着搓麻将，今天还好，没有昨天那样惨兮兮，还是赢了三十块钱🤣。想起了我十五岁那年辍学在工地上搬砖的时候，有次下暴雨无法干活就和熟人搓麻将，那时我仅仅知道麻将的基本规则，也不会什么技巧，和一群比我大二三十岁的大人搓麻将，几盘下来竟然没有输钱，哈哈，当时也真够幸运的。</p><h3 id="十五岁打工"><a href="#十五岁打工" class="headerlink" title="十五岁打工"></a>十五岁打工</h3><p>再讲讲我十五岁时在工地上搬砖的几件事吧，反正也是闲着在家没事儿，就回忆一下过去好喽。不想看的可以略过此部分。</p><p>那时的我才十五岁，未成年，按照劳动法是禁止使用童工的，不过因为工地上的包工头是我家亲戚，所以安排我干活也没啥事，那时候管制的比较松，也不会被查到。那时候在工地上主要干的活儿是焊接天然气管道，或者挖铺设管道的沟子。天然气管道中压到低压焊接是是个极其危险的工作，稍微操作就可能引发爆炸。记得有次中压管道交接的时候，凌晨一点，领队的就叫起我和四个工人去切割焊接管道。关闭主干管道的前后阀门，但管道内仍然还蓄存着很多的天然气，只能切开管道排放出来再作业。我和另外一工友跳下作业坑，开启发动机连接上管道开孔机，当钻孔机切开管道之后，天然气呼呼呼地从开孔喷射出来，那声音特别恐怖，只要当时有一丁点火花就会发生爆炸，小命丢在那里。孔开之后就立即从作业坑中爬出来，吓得都快尿裤子了，感觉就像一颗炸弹一样，那时的我跑的真快，比香港记者还快。</p><p>等到存留的天然气排放得差不多之后就再次下作业坑。开孔处依旧呼呼地喷射着天然气，只是比刚开始少了很多很多。在开孔处套上事先准备好的三通和伸缩节，伸缩节的一边连接着三通，另一边连接着小区的中压管道。一颗颗螺丝拧好之后，在连接处喷上洗洁精水，看看有没有人气泡，气泡的话就存在漏气，要再次调整橡皮垫才行。折腾了两个小时才弄好。而那晚的加班费也仅仅有二十块钱😑。现在多么地庆幸当时又回到学校复学了，也从那时明白了，打工赚钱搬砖真的很难翻身。</p><p>就在那年七月份的时候，因为天气太热了，外面的温度高达四十度，而我们依旧要工作，可恶的黑心老板😒。那天实在是太热了，我在外面中暑了，而且还发热，当时难受得很。自己很难受就哭着给老姐打电话，哭着说这里太苦了，我呆不下去了。我依稀记得那天下午自己一个人去工地附近的诊所输液，发热四十一度，脑袋一片空白，我也不知道当时怎么和医生说的，到诊所里就瘫在诊所的椅子上，嘴里说着头疼发热，醒来后也就输完液了。体温也下降了。第二天没有去干活，在床上休息了一天，第三天的时候就收拾行李回家了。到家后在家呆了一个多月就再找学校去上学，留级到了初中二年级，之后自己自学初三的课程报名参加当年的中考，考上了县重点高中。这也是我初中上过的最后一所中学，初中四年换了四所学校，这恐怕也是个奇葩吧。刚开始回到学校的时候，依旧无法适应学校，依旧厌学讨厌学校，上课依旧听不下。但因为是留级嘛，有一点老本可以吃，拿来装逼倒是不错。也没想到第一次月考成绩还不错，期中考试的时候竟然考了年级前十名。</p><h2 id="初四"><a href="#初四" class="headerlink" title="初四"></a>初四</h2><p>上午睡觉到十一点，睡懒觉实在是太安逸了。今儿的阳光充足，搬着椅子到院子晒太阳。拿着 kindle 接着把卢梭的《论科学与艺术的复兴是否有助于使风俗日趋纯朴 》看完，这本书其实是卢梭的一篇论文，是他参加法国第戎科学院征集的论文。卢梭以否定的立场回应提问，<strong>即人的知识愈多，人心反而愈险恶；科学和艺术愈繁荣，社会便愈奢侈成风，耽于生活的享受和财富的追逐；所谓的文明，只不过是看起来像文明；所谓的进步，实际上是在堕落。</strong></p><p>《论科学与艺术的复兴是否有助于使风俗日趋纯朴 》和《论人类不平等的起源和基础》两篇论文都是研究人的著作，是人类学的奠基作之一。区别在于，它们研究的对象有所不同。第一篇论文歌颂的是斯巴达的公民，用斯巴达人来对比现代的文明人。第二篇论文赞美的是人类历史的“黄金时代”即“原始时代”的野蛮人或原始人；他在原始人的身上看到了“天国庄严的纯朴的烙印”。人本来是纯朴善良的，由于有缺陷的社会制度，生活于社会中的人才变坏，并堕入罪恶的深渊他指出：文明人腐败了，而要人类退回到原始状态作原始人，那是绝对不可能的。人类发展的进程是不可逆转的。怎么办呢？第三篇论文《社会契约论》则回答了这个问题。由文明引发的问题必须通过新的政治组织形式来加以克服。《社会契约论》要做的工作是，<strong>通过建立一个健全的社会政治制度，帮助人们恢复自然良善</strong>。什么样的社会政治制度才是健全的呢？这就要追问一个核心问题：正义与合法的政治秩序及其基础是什么？《爱弥儿》则回答了这个问题，即通过教育，将“人”转变为“公民”，像爱弥儿一样的公民。唯其如此，普遍意志才有可能，正义而合法的政治秩序才有可能。虽然《社会契约论》也同一样，短小精悍，但并不容易理解，尤其是普遍意志这个概念，还需要反复研读才能参透这位法国大革命思想领导者的思想。</p><h3 id="干农活"><a href="#干农活" class="headerlink" title="干农活"></a>干农活</h3><p>下午的时候，就没有宅在家里，和老爸一块去村后的田地里干农活了，村里的田地一年以来就很少打理过，已经黄草丛生，树苗的分支也该剪掉了。我负责把枯草都清理干净，老爸负责修剪树苗。出生在农村干农活都是经常做的事儿。所以也锻炼出来了几块肌肉，力气还算大吧，十五岁的时候那会儿在工地打工搬砖的时候，抗 100kg 的发电机走 5km 不换肩也是没问题。我的身体和体力都还算不错滴，高中的时候参加过四次长跑比赛每次都拿第三名以内，高中时别的同学都是坐公交车回家，很少喝我一样骑着山地车回家。想起来我的第一辆山地车还是我老姐在我中考完给我钱买的，每次去县城都是骑车，三年下来省了不少钱😂。高考完后自己一个人骑车旅行，来回骑行了1000KM不换车。</p><p>哈哈，扯得有点远了，今天干活的时候没干多少活就累得我大喘气儿了，唉，自从上了大学变成了个死肥宅，身体也去慢慢地退化了，加上素食这么多年长期的缺乏一些脂溶性维生素，免疫力也下降了很多。失去了年轻的热血，只剩下麻木的我😫。</p><h4 id="除草前"><a href="#除草前" class="headerlink" title="除草前"></a>除草前</h4><p><img src="https://cdn.jsdelivr.net/gh/muzi502/blog/source/img/image-20200129103731627.png" alt="image-20200129103731627"></p><h4 id="除草后"><a href="#除草后" class="headerlink" title="除草后"></a>除草后</h4><p><img src="https://cdn.jsdelivr.net/gh/muzi502/blog/source/img/image-20200129103747203.png" alt="image-20200129103747203"></p><p>在地里发现了一处鸟网，不知道谁家在这儿撒下的鸟网。上面还有很多鸟的尸体，根据腐化的程度来看至少应该有两个月了</p><h4 id="鸟儿1"><a href="#鸟儿1" class="headerlink" title="鸟儿1"></a>鸟儿1</h4><p><img src="https://cdn.jsdelivr.net/gh/muzi502/blog/source/img/image-20200129103813646.png" alt="image-20200129103813646"></p><h4 id="干化的鸟儿尸体"><a href="#干化的鸟儿尸体" class="headerlink" title="干化的鸟儿尸体"></a>干化的鸟儿尸体</h4><p><img src="https://cdn.jsdelivr.net/gh/muzi502/blog/source/img/image-20200129103821945.png" alt="image-20200129103821945"></p><h4 id="干化的鸟儿尸体-1"><a href="#干化的鸟儿尸体-1" class="headerlink" title="干化的鸟儿尸体"></a>干化的鸟儿尸体</h4><p><img src="https://cdn.jsdelivr.net/gh/muzi502/blog/source/img/image-20200129103830003.png" alt="image-20200129103830003"></p><h4 id="干化的鸟儿尸体-2"><a href="#干化的鸟儿尸体-2" class="headerlink" title="干化的鸟儿尸体"></a>干化的鸟儿尸体</h4><p><img src="https://cdn.jsdelivr.net/gh/muzi502/blog/source/img/image-20200129103837430.png" alt="image-20200129103837430"></p><h4 id="干化的鸟儿尸体-3"><a href="#干化的鸟儿尸体-3" class="headerlink" title="干化的鸟儿尸体"></a>干化的鸟儿尸体</h4><p><img src="https://cdn.jsdelivr.net/gh/muzi502/blog/source/img/image-20200129103846983.png" alt="image-20200129103846983"></p><h4 id="干化的鸟儿尸体-4"><a href="#干化的鸟儿尸体-4" class="headerlink" title="干化的鸟儿尸体"></a>干化的鸟儿尸体</h4><p><img src="https://cdn.jsdelivr.net/gh/muzi502/blog/source/img/image-20200129103855066.png" alt="image-20200129103855066"></p><h4 id="被捕鼠器夹断的鸟腿"><a href="#被捕鼠器夹断的鸟腿" class="headerlink" title="被捕鼠器夹断的鸟腿"></a>被捕鼠器夹断的鸟腿</h4><p><img src="https://cdn.jsdelivr.net/gh/muzi502/blog/source/img/image-20200129103904461.png" alt="image-20200129103904461"></p><p>有时在想，人类文明的进步伴随着科学技术的飞跃发展，到现在什么短视频，5G，人工智能，大数据，移动支付，物联网，智能家居等等技术突飞猛进，看似在一个享受着科学技术带来的丰硕成果的美好时代。在我看来人类随着物质生活的提升而变得越来越傻了，现在年轻人都喜欢捧着个手机刷起短视频头一晃一晃地开心地疯狂地痴笑，在娱乐至死的世界里变得越来越不去思考，人变得越来越傻，为了满足自己的贪图攀比的欲望，为了彰显自己至高无上的社会地位。你会发现，人类这些取得如此丰硕的科技成果，在自然界并没有它存在的基础。想起了上午看完的《论科学与艺术的复兴是否有助于使风俗日趋纯朴 》</p><blockquote><p>人的知识愈多，人心反而愈险恶；科学和艺术愈繁荣，社会便愈奢侈成风，耽于生活的享受和财富的追逐；所谓的文明，只不过是看起来像文明；所谓的进步，实际上是在堕落。</p></blockquote><p>上午读的时候我还不太赞同这个观点，但下午看到这一幕，我还是认可接受了卢梭的观点。想起早上上班时，走到公寓楼下的广场总能见到一群大爷出来遛鸟儿。</p><p>有时我在想我们在大自然中索取了太多，同时又破话了大自然的生态平衡。我们就有义务为大自然去做出相应的补偿。我自己身体力行的做法就是做一个素食者，我无法做到不伤害任何动物，我也知道自己生病吃药，药里的一些成分以及接种疫苗都来自动物，我只能尽自己最大努力尊重和保护动物。我不是动物权利的倡导者，我这样做只是出于对大自然，对生命尊严的思考。回来的时候在火车上看了一部纪录片《海豚湾》</p><p>进而开始思考自己在大自然界所应当应用的责任和担当。动物有没有生存权，即动物权利。根据汉密尔顿法则的模型：</p><blockquote><p>汉密尔顿法则模型认为 <code>rB &gt; C</code> 是利他行为发生的原因，而这是动物的天性。</p><ul><li>其中 r 是施利者与受害者之间的关系，关系越好就越高</li><li>B是受利者所能获得的利益</li><li>C是施利者所需付出的代价。</li></ul><p>所以两者关系越紧密，那么利他行为越容易发生。正是因为 r 很大这个原因，人类很少会把灵长类动物当作食物，也越来越少地把亲密的动物比如猫狗当作食物。而从 C 角度也就是人类的代价来看，人类拯救其他动物的利他行为，也和人人类发展的程度有关，发展程度越高可以做到的事情也就越多，也就可以考虑更多的事情，而人类停止海豚湾这样的事情并不需要付出极高的代价，这样的事情为什么不做呢?这样残忍的事情应当停止。</p></blockquote><p>抱歉，扯远了</p><p>干活累了累了休息会儿，坐在草堆上掏出手机刷会儿推特，刷到一条 kindle 特价书推荐的推文</p><blockquote><p>今天 Kindle 推荐了三本和病毒有关的特价书，分别是《血疫：埃博拉的故事》、《病毒星球》和《病毒来袭》。看了一下评价都还不错，各大电子书店（如豆瓣阅读、微信阅读）也都有售。特殊时期也正是学习知识的时候，在此推荐给大家。</p></blockquote><h4 id="病毒星球"><a href="#病毒星球" class="headerlink" title="病毒星球"></a>病毒星球</h4><p><img src="https://cdn.jsdelivr.net/gh/muzi502/blog/source/img/image-20200129182126087.png" alt="image-20200129182126087"></p><h4 id="血疫：埃博拉的故事"><a href="#血疫：埃博拉的故事" class="headerlink" title="血疫：埃博拉的故事"></a>血疫：埃博拉的故事</h4><p><img src="https://cdn.jsdelivr.net/gh/muzi502/blog/source/img/image-20200129182138048.png" alt="image-20200129182138048"></p><h4 id="病毒来袭"><a href="#病毒来袭" class="headerlink" title="病毒来袭"></a>病毒来袭</h4><p><img src="https://cdn.jsdelivr.net/gh/muzi502/blog/source/img/image-20200129182147275.png" alt="image-20200129182147275"></p><p>于是就下单买下了。发现 kindle 商店里的一键下单和立即购买不太一样，一键下单不需要确认，点击之后就会从信用卡里扣款完成。等到晚上再看这几本书。前两天也无意间看到一本书《中国国家治理的制度逻辑：一个组织学研究 》，这几天也在读。等到晚上回去躺床上读吧。发现放假回家以来手机的使用时间也长了，包括这篇博客的草稿都是从手机上打字完成的，主要是家里太冷了，没有个合适的位置，笔记本打字不太方便，所以内容都是在手机 telegram上输入完，保存到自己的私有频道上，然后再在笔记本上复制粘贴到 markdown 上的😂。</p><h4 id="中国国家治理的制度逻辑：一个组织学研究-1"><a href="#中国国家治理的制度逻辑：一个组织学研究-1" class="headerlink" title="中国国家治理的制度逻辑：一个组织学研究 1"></a>中国国家治理的制度逻辑：一个组织学研究 1</h4><p><img src="https://cdn.jsdelivr.net/gh/muzi502/blog/source/img/image-20200129104630231.png" alt="image-20200129104630231"></p><h4 id="中国国家治理的制度逻辑：一个组织学研究2"><a href="#中国国家治理的制度逻辑：一个组织学研究2" class="headerlink" title="中国国家治理的制度逻辑：一个组织学研究2"></a>中国国家治理的制度逻辑：一个组织学研究2</h4><p><img src="https://cdn.jsdelivr.net/gh/muzi502/blog/source/img/image-20200129104646617.png" alt="image-20200129104646617"></p><h4 id="放火烧山牢底坐穿"><a href="#放火烧山牢底坐穿" class="headerlink" title="放火烧山牢底坐穿"></a>放火烧山牢底坐穿</h4><p>傍晚五点多就回家了，发现别处草地着火了😂，场面比较壮观。这几年我们这人管的也比较严了，逮到放火的就可能拘留你一两天。放火烧山牢底坐穿！</p><p><img src="https://cdn.jsdelivr.net/gh/muzi502/blog/source/img/image-20200129104155362.png" alt="image-20200129104155362"></p><p>到家后骑车电车从小路到镇上的超市买的吃的，家里的可乐和瓜子都吃完了，没得吃了。买了五斤原味瓜子和两大瓶可乐。晚上一家四口接着搓麻将，呜呜呜，我哭了，今天还是我输得惨兮兮😞。不过有一局赢得倒是不错，一个暗杠一个明杠加上我坐庄。搓麻将的时候聊聊家常，老姐又拔了拔我的黑历史，小时候实在是太调皮了，也是个家里的 trouble maker😔。又谈起了高中时给我织手套的位女生，老妈一直想让我和那个女生谈😕，接着催婚三连，不行我要吐了。</p><p>老姐怀疑单身这么久我是不是个 gay ？？？😩，其实我目前并没有喜欢的异性和同性，虽然咱不是同性恋，但咱支持，咱比较欣赏得来百合，尤其时自从 2018 年看完《终将成为你》、《樱 trick》、《橘里橘气》等之后。我自己并不想有任何恋爱无论是同性或是异性，因为我太自私，我不想拥有对方，也不想为对方付出自己的时间和精力。<strong>因为失去的滋味已经尝试过一次，将自己的幸福和快乐寄托在别人身上我实在信任不过。</strong>我还是相信自己，自己一个人玩泥巴，和书籍做朋友，和博客上的读者交流，和推右讨论些奇奇怪怪的问题。在自己的小世界里摆弄自己的人生，无人打扰，自己的快乐自产自销，将自己的快乐建立在牢固和永恒得阅读上，永远不会失去，取之不尽用之不竭。这大概是我的目前所享受的单身生活吧，自己一个人足够安好，干嘛还要找一个人陪自己受罪呢？</p><p>我的确欣赏一些人，看到别人与众不同的一面，比如大名鼎鼎得编程随想、<a href="https://www.bennythink.com" target="_blank" rel="noopener">小土豆</a>。第一次看小土豆的博客是大一的时候刚开始学 Linux 、学习建网站等，在小土豆那里偷学了不少东西哈😋，正是因为我们两者对 GFW 的痛恨，也都喜欢折腾比如 eaxi 软路由、翻墙软件等才能找到类似得知己吧。</p><p>再比如 <a href="https://twitter.com/Philo2018" target="_blank" rel="noopener">Phlio2018</a></p><blockquote><p>有独特的个性，那件”文化不自信“的文化衫依稀记得；喜欢自己动手搞事儿，自己画画制作书签；好奇宝宝一个，二十多岁的大人了，脑子里还是装了一堆稀奇古怪的想法；心怀宽旷，别人批评你也不和人家撕逼；思维活跃，推公式求积分解算法一把梭；爱好广泛，画画、做饭、摄影、书法……</p></blockquote><p>再比如 <a href="https://nova.moe" target="_blank" rel="noopener">Nova Kwok</a> 和 <a href="https://chanshiyu.com" target="_blank" rel="noopener">蝉时雨</a> 等等还有很多啦 </p><h4 id="一副好牌？😂"><a href="#一副好牌？😂" class="headerlink" title="一副好牌？😂"></a>一副好牌？😂</h4><p><img src="https://cdn.jsdelivr.net/gh/muzi502/blog/source/img/image-20200129104030473.png" alt="image-20200129104030473"></p><h4 id="今晚也是输的惨兮兮"><a href="#今晚也是输的惨兮兮" class="headerlink" title="今晚也是输的惨兮兮"></a>今晚也是输的惨兮兮</h4><p><img src="https://cdn.jsdelivr.net/gh/muzi502/blog/source/img/image-20200129104115779.png" alt="image-20200129104115779"></p><h2 id="初五"><a href="#初五" class="headerlink" title="初五"></a>初五</h2><p>凌晨三点就醒了，醒了睡不着就接着看《病毒星球》，这本书 100 来页，昨晚看了 20%，花了一个小时的事件看完了剩余的内容。感觉这本书仅仅只是介绍了一些常见的病毒，并没有深入地分析病毒的入侵过程，还想看其他的。</p><h3 id="干农活-1"><a href="#干农活-1" class="headerlink" title="干农活"></a>干农活</h3><p>下午接着去农田里干活儿，三四点多的时候，村子里又又又着了大火，农村日常=。=我家后头有个干涸的池塘，里面杂草丛生，到了冬季更是一处<code>柴火堆</code>。下午路过的时候就发现那里已经有火苗在燃烧了，也懒得管。不到一个小时就大火就已经点燃的整个池塘，这时的池塘就像一盆大火😂，隔着两三里就看到浓浓的烟雾，回去的时候整个池塘已经一片炭黑了🤣。记得小时候我和小伙伴们冬天的时候就喜欢点火烤火；在池塘里溜冰；买鞭炮水雷炸冰冻；在池塘上打皮牛，类似陀螺的一种玩具。一般都是木头的，也有铁的。木头的一般是木头削成圆滚滚的柱状，底部放一颗轴承铁珠子。拿着布拉条子抽就可以，我们一般都喜欢在冰面上玩，因为摩擦力比较小。</p><p>哈哈，想起童年总能想到《机器灵砍菜刀》这首歌，相信北方的一些朋友很熟悉吧🤣。小时候在池塘冰面上溜冰，有时候冰踏了就掉到水里，裤子都湿了，不敢回家，回家肯定就是一顿打没得商量。然后几个人就凑在一个在池塘周围拾柴火，烤火，记得有一次烤火的时候把棉裤给烧了个洞，那可了得，呜呜呜，回家就是一顿打😑；有次点火把村后的池塘边上的草地给引燃了，把人家的柴火堆给引燃了，这下可闯了大祸，唉，那几天都没出家门。小时候过年的时候就是这样玩儿的，点火烤火，溜冰，点鞭炮水雷炸冰洞，打皮牛🐮，弹弓打鸟，好玩的很多很多，每天都在外面撒野。想想那时真的是无忧无虑，<strong>唉，长大真的一点都不好玩儿</strong>。</p><p>忙到下午五点左右就回来了。村子的路口都被堵上了，一帮村里的干部在那里严查车辆的出行，大喇叭一直播放着《打赢疫情攻坚战的全县人民倡议书》。攻坚战？这名儿起的怪好听，脱贫攻坚战，疫情攻坚战，攻谁啊？亲自指挥亲自部署？</p><blockquote><p>我青年时代就打赢了精准脱贫攻坚战、污染防治攻坚战、重大风险攻坚战、疫情防控攻坚战。</p></blockquote><p>晚上的时候一家四口接着搓麻将，今晚只赢了二十块钱，哈，前两天输了300多😑。搓完麻将就睡大觉喽，睡前捧着 kindle 看《血疫：埃博拉的故事》。中午的时候把电影下载了下来，明天再看，先把书看完再说。</p><h2 id="初六"><a href="#初六" class="headerlink" title="初六"></a>初六</h2><p>到此结束吧，已经写了快一万五千多字了。写多了也没几个人耐心地看完，所以就不啰嗦了。到正月十五才开始上班，剩下的这几天就还是以往的生活，在家看书写博客看纪录片追番。</p><h3 id="家里的风景"><a href="#家里的风景" class="headerlink" title="家里的风景"></a>家里的风景</h3><h4 id="夏天时的白菜"><a href="#夏天时的白菜" class="headerlink" title="夏天时的白菜"></a>夏天时的白菜</h4><p><img src="https://cdn.jsdelivr.net/gh/muzi502/blog/source/img/image-20200201183139391.png" alt="image-20200201183139391"></p><h4 id="夏天时的白菜-1"><a href="#夏天时的白菜-1" class="headerlink" title="夏天时的白菜"></a>夏天时的白菜</h4><p><img src="https://cdn.jsdelivr.net/gh/muzi502/blog/source/img/image-20200201183159646.png" alt="image-20200201183159646"></p><h4 id="现在的白菜"><a href="#现在的白菜" class="headerlink" title="现在的白菜"></a>现在的白菜</h4><p><img src="https://cdn.jsdelivr.net/gh/muzi502/blog/source/img/image-20200201202000733.png" alt="image-20200201202000733"></p><p><img src="https://cdn.jsdelivr.net/gh/muzi502/blog/source/img/image-20200201202009508.png" alt="image-20200201202009508"></p><h4 id="家里的腊梅，早就过了盛开的季节"><a href="#家里的腊梅，早就过了盛开的季节" class="headerlink" title="家里的腊梅，早就过了盛开的季节"></a>家里的腊梅，早就过了盛开的季节</h4><p><img src="https://cdn.jsdelivr.net/gh/muzi502/blog/source/img/image-20200201202040498.png" alt="image-20200201202040498"></p><h4 id="春天植树"><a href="#春天植树" class="headerlink" title="春天植树"></a>春天植树</h4><p><img src="https://cdn.jsdelivr.net/gh/muzi502/blog/source/img/image-20200201183222429.png" alt="image-20200201183222429"></p><h4 id="外甥女儿"><a href="#外甥女儿" class="headerlink" title="外甥女儿"></a>外甥女儿</h4><p><img src="https://cdn.jsdelivr.net/gh/muzi502/blog/source/img/image-20200201183236464.png" alt="image-20200201183236464"></p><h4 id="春天植树-1"><a href="#春天植树-1" class="headerlink" title="春天植树"></a>春天植树</h4><p>去年春天时家里植树</p><p><img src="https://cdn.jsdelivr.net/gh/muzi502/blog/source/img/image-20200201183329121.png" alt="image-20200201183329121"></p><h4 id="家里的皂角树"><a href="#家里的皂角树" class="headerlink" title="家里的皂角树"></a>家里的皂角树</h4><p>树干上的倒刺，也是植物进化而来的自我防御机制吧</p><p><img src="https://cdn.jsdelivr.net/gh/muzi502/blog/source/img/image-20200201201923916.png" alt="image-20200201201923916"></p><h2 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h2><p>2020 年，一切都来的太突然，死神猝不及防地造访，或许哪一天我也可能会消失不见了……</p><p>这也是写这篇博客把春节得点点滴滴分享出来得原因吧，不想就这样消失，想在别人心中留下一点记忆……</p><p><code>2020 年 2 月 4 日</code></p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;blockquote&gt;
&lt;p&gt;我青年时代就亲自指挥过冠状病毒、
        
      
    
    </summary>
    
    
      <category term="生活" scheme="https://blog.502.li/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
  </entry>
  
  <entry>
    <title>使用 telegram 时我在做什么</title>
    <link href="https://blog.502.li/telegram-tips.html"/>
    <id>https://blog.502.li/telegram-tips.html</id>
    <published>2020-01-13T16:00:00.000Z</published>
    <updated>2020-03-08T12:53:12.464Z</updated>
    
    <content type="html"><![CDATA[<h2 id="末日三问？"><a href="#末日三问？" class="headerlink" title="末日三问？"></a>末日三问？</h2><p>梯子挂掉时在做什么？还能连得上嘛？服务器还可以来拯救吗？</p><p>我和我的<del>祖国</del>梯子一刻都不能分离！</p><p>自从大一时学会了自由地访问国际互联网就开始使用了 telegram 这个工具，大一时还太年轻，身边使用的人很少所以就没用起来。直到最近两三年，开始慢慢地摆脱国内的局域网，就慢慢将自己的社交逐渐迁移到 telegram 和 Twitter 上，还有最重要的博客，在那里收获了一大堆小伙伴。</p><p>今天分享一下我使用 telegram 的<code>一点人生的经验</code> 🕶👓</p><blockquote class="twitter-tweet"><p lang="zh" dir="ltr">世界上最好用的免费：<br>IM<br>网盘<br>图床<br>音乐播放器<br>视频播放器<br>邮件收信箱<br>RSS 订阅<br>视频下载器<br>临时邮箱<br>应用商店<br><br>—— Telegram<br>欢迎补充 <a href="https://t.co/TuMRfvxi31" target="_blank" rel="noopener">pic.twitter.com/TuMRfvxi31</a></p>&mdash; 502.li (@muzi_ii) <a href="https://twitter.com/muzi_ii/status/1156150224777179136?ref_src=twsrc%5Etfw" target="_blank" rel="noopener">July 30, 2019</a></blockquote> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script><h2 id="碎碎念频道"><a href="#碎碎念频道" class="headerlink" title="碎碎念频道"></a>碎碎念频道</h2><p>建立一个私有频道，将自己所有的想法和感想都整理到这个频道里，并且定期导出这些私有频道里得内容，以免哪天炸号没了😂。碎碎念的频道里基本上乱七八糟，有新闻、有图片、有文件、有链接等等。</p><p>十月份的时候，自己写过一篇三万多字<a href="https://muzi502.github.io/archives/thinking.html" target="_blank" rel="noopener">《毕业后的一点思考》</a> ，想必 twitter 上的小伙伴应该看过。在写这篇文章的时候，里面的感想和引用消息都来自我的私有频道。现在也养成了写周记的习惯，每周写周记的时候也会把碎碎念里的信息当作回顾的时间线，不然不知道这一周发声了些什么😂</p><h2 id="运维笔记频道"><a href="#运维笔记频道" class="headerlink" title="运维笔记频道"></a>运维笔记频道</h2><p>主要是记录一些工作中会遇到的问题，收集一些与工作相关的博客文章，抽出时间拿来精读这些内容。</p><p><img src="https://cdn.jsdelivr.net/gh/muzi502/blog/source/img/image-20200114214102261.png" alt="image-20200114214102261"></p><h2 id="设备间分享文件"><a href="#设备间分享文件" class="headerlink" title="设备间分享文件"></a>设备间分享文件</h2><p>最主用来将 iPhone 上的几张照片发送到 PC 上的时候，使用 telegram 无疑是最方便的。相比来讲插数据线也够麻烦的，还需要到内部存储里找文件。</p><h2 id="共享粘贴板"><a href="#共享粘贴板" class="headerlink" title="共享粘贴板"></a>共享粘贴板</h2><p>有时候需要在 PC 和手机之间共享文字的时候，就通过 telegram 发送到自己的私有频道中。还是很方便的。</p><h2 id="Gmail"><a href="#Gmail" class="headerlink" title="Gmail"></a>Gmail</h2><p>这也是我第二使用最频繁得工具，绑定telegram 官方认证的 Gmail 机器人 <code>@GmailBot</code>就可以收到 Gmail 的邮件内容，而且还可以回复邮件。收到消息也比较准时，iOS 在锁屏没开梯子的情况下还能正常收到 telegram 通知推送的 Gmail 信息。不过我 Gmail 收到的邮件也绝大读书都是双因素验证个邮件，就是将 Google voice 的短信转发到 Google 账户的 Gmail下，就可以通过 email 来接受短信啦</p><p><img src="https://cdn.jsdelivr.net/gh/muzi502/blog/source/img/image-20200114214229958.png" alt="image-20200114214229958"></p><h2 id="RSS"><a href="#RSS" class="headerlink" title="RSS"></a>RSS</h2><p>使用 rssbot 开源机器人订阅了一些喜欢的个人独立博客，自己目前拥有一个 490 多人的 RSS 订阅频道<a href="https://t.me/rss_kubernetes" target="_blank" rel="noopener">RSS_kubernetes</a> 。不过里面都是一些和 kubernetes 、docker 容器技术相关的个人博客。自己私人的 RSS 私有频道也绝大多数是和运维相关的。</p><p><img src="https://cdn.jsdelivr.net/gh/muzi502/blog/source/img/image-20200114215007524.png" alt="image-20200114215007524"></p><h2 id="图库"><a href="#图库" class="headerlink" title="图库"></a>图库</h2><p>每天都会刷一会 <code>twitter</code> 和 <code>pixiv</code> ，关注了一些喜欢的画师，看到一些心动的 <strong>老婆</strong> (死宅真恶心：- ）小声)，就复制发送到 telegram 私有频道中。目前为止，自己的私有频道已经收集了 350 多张图啦。</p><p><img src="https://cdn.jsdelivr.net/gh/muzi502/blog/source/img/image-20200114220229261.png" alt="image-20200114220229261"></p><p><img src="https://cdn.jsdelivr.net/gh/muzi502/blog/source/img/image-20200114212308552.png" alt="image-20200114212308552"></p><p>其实除了 telegram 之外，我 OneDrive 网盘里还存了一千多张😂，咱只喜欢纸片人：）</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">╭─debian@debian /mnt/f/OneDrive/图片/Animal</span><br><span class="line">╰─$ tree</span><br><span class="line">13 directories, 1348 files</span><br></pre></td></tr></table></figure><h2 id="网盘"><a href="#网盘" class="headerlink" title="网盘"></a>网盘</h2><p>网盘功能勉强算是，但使用的不算多，大多数都是往私有频道里存放一些讽刺老大哥的视频😂。据说是单个 1.5GB 文件大小限制，我是定期每周都会导出 telegram 上的数据，以免丢失。</p><h2 id="音乐播放器"><a href="#音乐播放器" class="headerlink" title="音乐播放器"></a>音乐播放器</h2><p>之前使用 iTunes 将音乐拷贝到手机上觉着太麻烦了，就是用了 telegram 来当音乐播放器 ，效果还是不错滴。不过后来电脑上装了  iTunes  就一直使用  iTunes 来同步 PC 和手机之间的音乐了。有时还是会使用 telegram 来听歌，最多的就是一些喜欢的不得了的歌，单曲循环一直听着。</p><p><img src="https://cdn.jsdelivr.net/gh/muzi502/blog/source/img/image-20200114211528029.png" alt="image-20200114211528029"></p><h2 id="监控服务器"><a href="#监控服务器" class="headerlink" title="监控服务器"></a>监控服务器</h2><p>参照我元旦的时候写的那篇博客 <a href="https://blog.502.li/archives/linux-login-alarm-telegram.html">VPS 安全加固之用户登录后向 telegram 发送登录信息</a></p><p>在此先说明一下，使用 telegram 的主要原因是 telegram bot 向自己发送信息，iOS 客户端在锁屏不挂梯子的情况下照样正常能收到消息通知，这还好归因于 iOS 有统一的消息推送机制，而不像 Android 阵营，国内的毒瘤 app 们我行我素，我就是不走 Google Cloud Messaging 简称 GCM，我就是自己搞一套，于是 Android 阵营里，有 xiaomi PUSH 、vivo PUSH 、huawei PUSH 等等，非常恶心人。而如果使用 GCM 的推送的话，必须要挂梯子，全天挂着梯子还是很费电的。</p><p><img src="https://cdn.jsdelivr.net/gh/muzi502/blog/source/img/image-20200114214340893.png" alt="image-20200114214340893"></p><h2 id="短信转发"><a href="#短信转发" class="headerlink" title="短信转发"></a>短信转发</h2><p>自己有一部 Android 备用机，只有来接收短信和电话。电话通过无条件转移到主力机上。短信就通过 <a href="https://github.com/telegram-sms/telegram-sms" target="_blank" rel="noopener">telegram-sms</a> 转发到 telegram 上，这样出门的时候就可以把 Android 备用机放在家里啦😂。之前我使用 <a href="">tasker</a> 转发短信，但 tasker 太不稳定了，有时候短信触发器无法触发执行任务倒是很头疼。所以就一直使用了 <a href="https://github.com/telegram-sms/telegram-sms">telegram-sms</a> 来转发短信。默认是通过网络将短信转发到 telegram ，如果网络无法连接到 telegram 的话就使用短信转发到另一个手机号上。</p><p><img src="https://cdn.jsdelivr.net/gh/muzi502/blog/source/img/image-20200114214410801.png" alt="image-20200114214410801"></p><h2 id="机器人"><a href="#机器人" class="headerlink" title="机器人"></a>机器人</h2><h2 id="GitHub"><a href="#GitHub" class="headerlink" title="GitHub"></a>GitHub</h2><p><img src="https://cdn.jsdelivr.net/gh/muzi502/blog/source/img/image-20200114214446510.png" alt="image-20200114214446510"></p><h2 id="书籍记录"><a href="#书籍记录" class="headerlink" title="书籍记录"></a>书籍记录</h2><p>主要是存放一些要看的书籍，大部分都是在阅读别人博客的时候，看到别人的读书年度书单，在里面找到自己喜欢的，然后把图书的信息发送到频道里。</p><p><img src="https://cdn.jsdelivr.net/gh/muzi502/blog/source/img/image-20200114214519474.png" alt="image-20200114214519474"></p><h2 id="视频下载器"><a href="#视频下载器" class="headerlink" title="视频下载器"></a>视频下载器</h2><p>youtube 视频和音乐下载，很好用，不过好像有时候会推广告 <a href="https://t.me/utubebot" target="_blank" rel="noopener">https://t.me/utubebot</a></p><h2 id="临时邮箱"><a href="#临时邮箱" class="headerlink" title="临时邮箱"></a>临时邮箱</h2><p>参照<a href="https://www.xzymoe.com/telegram-bot/" target="_blank" rel="noopener">推荐两个有意思的Telegram机器人Bot</a></p><h2 id="待补充"><a href="#待补充" class="headerlink" title="待补充"></a>待补充</h2><p>半个多小时写这篇文章，时间仓促，所以以后发现更多好玩儿的再补充上来</p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;h2 id=&quot;末日三问？&quot;&gt;&lt;a href=&quot;#末日三问？&quot;
        
      
    
    </summary>
    
    
      <category term="工具" scheme="https://blog.502.li/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="telegram" scheme="https://blog.502.li/tags/telegram/"/>
    
  </entry>
  
  <entry>
    <title>高效批量下载 B 站视频并合并转码为 mp4</title>
    <link href="https://blog.502.li/merge-bilibili-flv-video.html"/>
    <id>https://blog.502.li/merge-bilibili-flv-video.html</id>
    <published>2020-01-12T16:00:00.000Z</published>
    <updated>2020-03-08T12:53:12.464Z</updated>
    
    <content type="html"><![CDATA[<h2 id="弄啥咧？"><a href="#弄啥咧？" class="headerlink" title="弄啥咧？"></a>弄啥咧？</h2><blockquote class="twitter-tweet"><p lang="zh" dir="ltr">B 站收藏夹里的视频一点一点 404 了，索性就把所有收藏里还存活的视频都使用 UWP 客户端下载下来了，大概 400 多 GB。<br>为了将 UWP 客户端下载的分段 .flv，写了个 shell 脚本来转码合并为 .mp4。<br>目前处理了 100 多GB 的 .flv 文件没啥大碍<br><br>需要的拿去<a href="https://t.co/GX4FsswcfC" target="_blank" rel="noopener">https://t.co/GX4FsswcfC</a> <a href="https://t.co/LG37IGrMdI" target="_blank" rel="noopener">pic.twitter.com/LG37IGrMdI</a></p>&mdash; 502.li (@muzi_ii) <a href="https://twitter.com/muzi_ii/status/1216726922157228035?ref_src=twsrc%5Etfw" target="_blank" rel="noopener">January 13, 2020</a></blockquote> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script><p>好很久没上小破站了，翻了一下自己的收藏夹，我咧个去，将近三分之一的视频都 404 了……，存活的不知道会不会被拉清单。索性就把自己收藏的视频都下载下来，永久保存在自己的硬盘上，咱也不用担心删帖封号了。其中收藏的视频绝大多数都是纪录片和科普视频，在此还是推荐一下[纪录片之家字幕组]，中英双语是英语学习的好材料。尤其是<code>走进工厂</code>系列，基本上每次都会追着看完😂。</p><p>另外把这些视频下载下来就不用担心哪天这些优秀的 UP 炸号了，这么宝贵的资源就飞灰湮灭了。所以，自己收藏的视频还是第一时间下载下来为好，另外平时观看的时候也方便。</p><p>我是通过 Windows 应用商店里的 <a href="">哔哩哔哩动画</a> 下载的，事实证明，这玩意下载起来最稳定，我房东家 100MBps 的带宽一直跑满，一天多的时间下载了将近 400GB 的视频。但下载的这些视频有的被分段存储了，而且格式都是 .flv 。然后就想着如何合并这些 flv 文件并转码为 mp4 格式。</p><h2 id="劝退三要素😂"><a href="#劝退三要素😂" class="headerlink" title="劝退三要素😂"></a>劝退三要素😂</h2><ul><li>需要在 Linux 命令行下操作，任何 Linux 发行版或者 Windows Subsystem for Linux，推荐 WSL</li><li>需要在 Linux 环境下安装 <code>ffmpeg</code> 和 <code>jq</code> 命令</li><li>需要 UWP 哔哩哔哩动画客户端下载和缓存视频文件</li></ul><h2 id="咋弄"><a href="#咋弄" class="headerlink" title="咋弄"></a>咋弄</h2><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>使用哔哩哔哩动画客户端下载下来的视频，每个视频有一 P 或者多 P ，每一 P 分别存放在从 1 开始正整数命名的文件夹内。每个 P 有的被分割成了若干个 flv 文件，有的是单个 flv 文件。在每个 P 的目录下分别有以下文件.</p><h4 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">- .flv <span class="comment"># 视频文件，有一个或多个</span></span><br><span class="line">- xml  <span class="comment"># 弹幕文件，可忽略</span></span><br><span class="line">- info <span class="comment"># 视频元数据信息，有每个视频的 Title 以及每一 P 的名称</span></span><br><span class="line">╭─debian@debian /mnt/d/Downloads/bilibili/6918663</span><br><span class="line">╰─$ tree</span><br><span class="line">.</span><br><span class="line">├── 1</span><br><span class="line">│   ├── 6918663_1_0.flv</span><br><span class="line">│   ├── 6918663_1_10.flv</span><br><span class="line">│   ├── 6918663_1_11.flv</span><br><span class="line">│   ├── 6918663_1_12.flv</span><br><span class="line">│   ├── 6918663_1_1.flv</span><br><span class="line">│   ├── 6918663_1_2.flv</span><br><span class="line">│   ├── 6918663_1_3.flv</span><br><span class="line">│   ├── 6918663_1_4.flv</span><br><span class="line">│   ├── 6918663_1_5.flv</span><br><span class="line">│   ├── 6918663_1_6.flv</span><br><span class="line">│   ├── 6918663_1_7.flv</span><br><span class="line">│   ├── 6918663_1_8.flv</span><br><span class="line">│   ├── 6918663_1_9.flv</span><br><span class="line">│   ├── 6918663_1.xml <span class="comment"># 视频弹幕文件</span></span><br><span class="line">│   └── 6918663.info <span class="comment"># 每 P 视频的元数据信息</span></span><br><span class="line">├── 6918663.dvi <span class="comment"># 视频元数据信息</span></span><br><span class="line">└── cover.jpg <span class="comment"># 视频封面</span></span><br></pre></td></tr></table></figure><p>多 P 的情况下</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line">╭─debian@debian /mnt/d/Downloads/bilibili/29656570</span><br><span class="line">╰─$ tree</span><br><span class="line">.</span><br><span class="line">├── 1</span><br><span class="line">│   ├── 29656570_1_0.flv</span><br><span class="line">│   ├── 29656570_1.xml</span><br><span class="line">│   └── 29656570.info</span><br><span class="line">├── 10</span><br><span class="line">│   ├── 29656570_10_0.flv</span><br><span class="line">│   ├── 29656570_10_1.flv</span><br><span class="line">│   ├── 29656570_10_2.flv</span><br><span class="line">│   ├── 29656570_10_3.flv</span><br><span class="line">│   ├── 29656570_10_4.flv</span><br><span class="line">│   ├── 29656570_10_5.flv</span><br><span class="line">│   ├── 29656570_10_6.flv</span><br><span class="line">│   ├── 29656570_10_7.flv</span><br><span class="line">│   ├── 29656570_10.xml</span><br><span class="line">│   └── 29656570.info</span><br><span class="line">├── 11</span><br><span class="line">│   ├── 29656570_11_0.flv</span><br><span class="line">│   ├── 29656570_11_1.flv</span><br><span class="line">│   ├── 29656570_11_2.flv</span><br><span class="line">│   ├── 29656570_11_3.flv</span><br><span class="line">│   ├── 29656570_11_4.flv</span><br><span class="line">│   ├── 29656570_11_5.flv</span><br><span class="line">│   ├── 29656570_11_6.flv</span><br><span class="line">│   ├── 29656570_11_7.flv</span><br><span class="line">│   ├── 29656570_11.xml</span><br><span class="line">│   └── 29656570.info</span><br><span class="line">├── 12</span><br><span class="line">│   ├── 29656570_12_0.flv</span><br><span class="line">│   ├── 29656570_12_1.flv</span><br><span class="line">│   ├── 29656570_12_2.flv</span><br><span class="line">│   ├── 29656570_12_3.flv</span><br><span class="line">│   ├── 29656570_12_4.flv</span><br><span class="line">│   ├── 29656570_12_5.flv</span><br><span class="line">│   ├── 29656570_12_6.flv</span><br><span class="line">│   ├── 29656570_12_7.flv</span><br><span class="line">│   ├── 29656570_12.xml</span><br><span class="line">│   └── 29656570.info</span><br><span class="line">├── 13</span><br><span class="line">│   ├── 29656570_13_0.flv</span><br><span class="line">│   ├── 29656570_13.xml</span><br><span class="line">│   └── 29656570.info</span><br><span class="line">├── 2</span><br><span class="line">│   ├── 29656570_2_0.flv</span><br><span class="line">│   ├── 29656570_2.xml</span><br><span class="line">│   └── 29656570.info</span><br><span class="line">├── 29656570.dvi</span><br><span class="line">├── 3</span><br><span class="line">│   ├── 29656570_3_0.flv</span><br><span class="line">│   ├── 29656570_3.xml</span><br><span class="line">│   └── 29656570.info</span><br><span class="line">├── 4</span><br><span class="line">│   ├── 29656570_4_0.flv</span><br><span class="line">│   ├── 29656570_4_1.flv</span><br><span class="line">│   ├── 29656570_4_2.flv</span><br><span class="line">│   ├── 29656570_4_3.flv</span><br><span class="line">│   ├── 29656570_4_4.flv</span><br><span class="line">│   ├── 29656570_4_5.flv</span><br><span class="line">│   ├── 29656570_4_6.flv</span><br><span class="line">│   ├── 29656570_4_7.flv</span><br><span class="line">│   ├── 29656570_4.xml</span><br><span class="line">│   └── 29656570.info</span><br><span class="line">├── 5</span><br><span class="line">│   ├── 29656570_5_0.flv</span><br><span class="line">│   ├── 29656570_5_1.flv</span><br><span class="line">│   ├── 29656570_5_2.flv</span><br><span class="line">│   ├── 29656570_5_3.flv</span><br><span class="line">│   ├── 29656570_5_4.flv</span><br><span class="line">│   ├── 29656570_5_5.flv</span><br><span class="line">│   ├── 29656570_5_6.flv</span><br><span class="line">│   ├── 29656570_5_7.flv</span><br><span class="line">│   ├── 29656570_5.xml</span><br><span class="line">│   └── 29656570.info</span><br><span class="line">├── 6</span><br><span class="line">│   ├── 29656570_6_0.flv</span><br><span class="line">│   ├── 29656570_6.xml</span><br><span class="line">│   └── 29656570.info</span><br><span class="line">├── 7</span><br><span class="line">│   ├── 29656570_7_0.flv</span><br><span class="line">│   ├── 29656570_7_1.flv</span><br><span class="line">│   ├── 29656570_7_2.flv</span><br><span class="line">│   ├── 29656570_7_3.flv</span><br><span class="line">│   ├── 29656570_7_4.flv</span><br><span class="line">│   ├── 29656570_7_5.flv</span><br><span class="line">│   ├── 29656570_7_6.flv</span><br><span class="line">│   ├── 29656570_7_7.flv</span><br><span class="line">│   ├── 29656570_7.xml</span><br><span class="line">│   └── 29656570.info</span><br><span class="line">├── 8</span><br><span class="line">│   ├── 29656570_8_0.flv</span><br><span class="line">│   ├── 29656570_8_1.flv</span><br><span class="line">│   ├── 29656570_8_2.flv</span><br><span class="line">│   ├── 29656570_8_3.flv</span><br><span class="line">│   ├── 29656570_8_4.flv</span><br><span class="line">│   ├── 29656570_8_5.flv</span><br><span class="line">│   ├── 29656570_8_6.flv</span><br><span class="line">│   ├── 29656570_8_7.flv</span><br><span class="line">│   ├── 29656570_8.xml</span><br><span class="line">│   └── 29656570.info</span><br><span class="line">├── 9</span><br><span class="line">│   ├── 29656570_9_0.flv</span><br><span class="line">│   ├── 29656570_9_1.flv</span><br><span class="line">│   ├── 29656570_9_2.flv</span><br><span class="line">│   ├── 29656570_9_3.flv</span><br><span class="line">│   ├── 29656570_9_4.flv</span><br><span class="line">│   ├── 29656570_9_5.flv</span><br><span class="line">│   ├── 29656570_9_6.flv</span><br><span class="line">│   ├── 29656570_9_7.flv</span><br><span class="line">│   ├── 29656570_9.xml</span><br><span class="line">│   └── 29656570.info</span><br><span class="line">├── cover.jpg</span><br><span class="line">└── desktop.ini</span><br></pre></td></tr></table></figure><h4 id="info-文件"><a href="#info-文件" class="headerlink" title="info 文件"></a>info 文件</h4><p>这个 .info 文件时是以视频 av 号命名的(老司机们不要误以为是番号😂)，是压缩过的 json 格式，在 Linux 命令行下可以使用 jq 命令来格式化压缩过的 json 文件</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"Type"</span>: <span class="number">0</span>,</span><br><span class="line">  <span class="attr">"GroupKey"</span>: <span class="literal">null</span>,</span><br><span class="line">  <span class="attr">"File"</span>: <span class="literal">null</span>,</span><br><span class="line">  <span class="attr">"IsSelected"</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">"IsLastHit"</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">"DownloadState"</span>: <span class="string">"正在下载弹幕"</span>,</span><br><span class="line">  <span class="attr">"Aid"</span>: <span class="string">"6918663"</span>,</span><br><span class="line">  <span class="attr">"Cid"</span>: <span class="string">"11273505"</span>,</span><br><span class="line">  <span class="attr">"SeasonId"</span>: <span class="literal">null</span>,</span><br><span class="line">  <span class="attr">"EpisodeId"</span>: <span class="literal">null</span>,</span><br><span class="line">  <span class="attr">"Title"</span>: <span class="string">"【宇宙】卡西尼号：去往土星的伟大航程【中英字幕】"</span>,</span><br><span class="line">  <span class="attr">"Uploader"</span>: <span class="string">"魔术师Magic"</span>,</span><br><span class="line">  <span class="attr">"Description"</span>: <span class="string">"人人影视 卡西尼号：去往土星的伟大航程（Cassini-Epic Journey at Saturn）"</span>,</span><br><span class="line">  <span class="attr">"CoverURL"</span>: <span class="string">"http://i1.hdslb.com/bfs/archive/8430c49571dc1f61f3f9a7260f06ceb79418235f.jpg"</span>,</span><br><span class="line">  <span class="attr">"Tag"</span>: <span class="literal">null</span>,</span><br><span class="line">  <span class="attr">"From"</span>: <span class="string">"vupload"</span>,</span><br><span class="line">  <span class="attr">"PartNo"</span>: <span class="string">"1"</span>,</span><br><span class="line">  <span class="attr">"PartName"</span>: <span class="literal">null</span>,</span><br><span class="line">  <span class="attr">"Format"</span>: <span class="number">1</span>,</span><br><span class="line">  <span class="attr">"TotalParts"</span>: <span class="number">13</span>,</span><br><span class="line">  <span class="attr">"DownloadTimeRelative"</span>: <span class="number">166896023</span>,</span><br><span class="line">  <span class="attr">"CreateDate"</span>: <span class="string">"2016-11-01 19:14"</span>,</span><br><span class="line">  <span class="attr">"TotalTime"</span>: <span class="string">"01:16:21.0890000"</span>,</span><br><span class="line">  <span class="attr">"TotalTimeString"</span>: <span class="literal">null</span>,</span><br><span class="line">  <span class="attr">"PartTime"</span>: [</span><br><span class="line">    <span class="number">327169</span>,</span><br><span class="line">    <span class="number">408276</span>,</span><br><span class="line">    <span class="number">240210</span>,</span><br><span class="line">    <span class="number">429477</span>,</span><br><span class="line">    <span class="number">417077</span>,</span><br><span class="line">    <span class="number">325544</span>,</span><br><span class="line">    <span class="number">297610</span>,</span><br><span class="line">    <span class="number">469810</span>,</span><br><span class="line">    <span class="number">286511</span>,</span><br><span class="line">    <span class="number">493610</span>,</span><br><span class="line">    <span class="number">370544</span>,</span><br><span class="line">    <span class="number">197277</span>,</span><br><span class="line">    <span class="number">317974</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">"TotalSizeString"</span>: <span class="string">"544MB"</span>,</span><br><span class="line">  <span class="attr">"IsSinglePart"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="attr">"IsDownloaded"</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">"HasDanmaku"</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="attr">"FontSize6"</span>: <span class="number">10</span>,</span><br><span class="line">  <span class="attr">"FontSize8"</span>: <span class="number">12</span>,</span><br><span class="line">  <span class="attr">"FontSize10"</span>: <span class="number">14</span>,</span><br><span class="line">  <span class="attr">"FontSize12"</span>: <span class="number">16</span>,</span><br><span class="line">  <span class="attr">"FontSize14"</span>: <span class="number">18</span>,</span><br><span class="line">  <span class="attr">"FontSize16"</span>: <span class="number">20</span>,</span><br><span class="line">  <span class="attr">"FontSize18"</span>: <span class="number">22</span>,</span><br><span class="line">  <span class="attr">"FontSize20"</span>: <span class="number">24</span>,</span><br><span class="line">  <span class="attr">"FontSize22"</span>: <span class="number">26</span>,</span><br><span class="line">  <span class="attr">"FontSize24"</span>: <span class="number">28</span>,</span><br><span class="line">  <span class="attr">"FontSize30"</span>: <span class="number">34</span>,</span><br><span class="line">  <span class="attr">"FontSize34"</span>: <span class="number">38</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们需要在这个 info 文件中提取几个关键字段来重命合并转码后的 mp4 文件，为了方便起见我们选择 <code>Title</code> 、<code>PartName</code> 、 <code>CreateDate</code> 这三个字段来重命名转码合并后的视频文件。如果视频是单 P 的话 <code>PartName</code> 的值为 <code>null</code>。在 shell 中获取这三个值也比较简单。在此用 <code>tr</code> 命令去除掉不能当作文件名的特殊字符。</p><ul><li>Title</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 使用 sed 和 tr 去除不能当作文件名的特殊字符</span></span><br><span class="line">video_name=$(jq <span class="string">".Title"</span> *.info | tr -d <span class="string">"[:punct:]\040\011\012\015"</span>)</span><br></pre></td></tr></table></figure><ul><li>PartName</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">part_name=$(jq <span class="string">".PartName"</span> *.info | tr -d <span class="string">"[:punct:]\040\011\012\015"</span>)</span><br></pre></td></tr></table></figure><ul><li>CreateDate</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">upload_time=$(grep -Eo <span class="string">"20[0-9][0-9]-[0-9][0-9]-[0-9][0-9]"</span> *.info)</span><br></pre></td></tr></table></figure><h2 id="flv-合并"><a href="#flv-合并" class="headerlink" title="flv 合并"></a>flv 合并</h2><p>合并 flv 视频文件使用 ffmpeg 工具很简单就能完成，debian/ubuntu 的下直接 <code>apt update &amp;&amp; apt install ffmpeg -y</code> 一把梭就行啦，其他发行使用各自的包管理器安装即可</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 如果执行环境没有安装 jq 命令的话需要安装上哦</span></span><br><span class="line">apt update</span><br><span class="line">apt install ffmpeg jq -y</span><br></pre></td></tr></table></figure><h3 id="合并多个-flv-文件"><a href="#合并多个-flv-文件" class="headerlink" title="合并多个 flv 文件"></a>合并多个 flv 文件</h3><p>使用 ffmpeg 合并文件需要准备一个文本文件，里面记录类似一下的格式：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">file <span class="string">'/path/1.flv'</span></span><br><span class="line">file <span class="string">'/path/2.flv'</span></span><br><span class="line">file <span class="string">'/path/3.flv'</span></span><br></pre></td></tr></table></figure><p>而我们在 shell 脚本中可以通过 <code>ls *.flv &gt; ff.txt;sed -i ‘s/^/file /g’ ff.txt</code> 来生成该文件</p><h2 id="脚本"><a href="#脚本" class="headerlink" title="脚本"></a>脚本</h2><p>我放在了 GitHub 上，<a href="https://github.com/muzi502/mbcf/blob/master/merge_bilibili_client_flv.sh" target="_blank" rel="noopener">mbcf </a> 方便维护和问题反馈</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment"># for: bulk merge bilibili UWP download file *.flv</span></span><br><span class="line"><span class="comment"># by: muzi502 blog.502.li</span></span><br><span class="line"><span class="comment"># date: 2019-01-12</span></span><br><span class="line"><span class="comment"># 执行环境需要安装 ffmpeg、jq</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span> -xu</span><br><span class="line">start_time=$(date)</span><br><span class="line">root_dir=$(<span class="built_in">pwd</span>)</span><br><span class="line">mp4_dir=<span class="variable">$&#123;root_dir&#125;</span>/mp4</span><br><span class="line">mkdir -p <span class="variable">$&#123;root_dir&#125;</span>/mp4</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> dir <span class="keyword">in</span> $(ls | sort -n | grep -v .sh | grep -v mp4)</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">  <span class="built_in">cd</span> <span class="variable">$&#123;root_dir&#125;</span>/<span class="variable">$&#123;dir&#125;</span></span><br><span class="line">  <span class="keyword">for</span> p_dir <span class="keyword">in</span> $(ls | sort -n | grep -E -v <span class="string">".dvi|.jpg|.ini|.mp4|.txt"</span>)</span><br><span class="line">  <span class="keyword">do</span></span><br><span class="line">    <span class="built_in">cd</span> <span class="variable">$&#123;root_dir&#125;</span>/<span class="variable">$&#123;dir&#125;</span>/<span class="variable">$&#123;p_dir&#125;</span></span><br><span class="line">    video_name=$(jq <span class="string">".Title"</span> *.info | tr -d <span class="string">"[:punct:]\040\011\012\015"</span>)</span><br><span class="line">    part_name=$(jq <span class="string">".PartName"</span> *.info | tr -d <span class="string">"[:punct:]\040\011\012\015"</span>)</span><br><span class="line">    upload_time=$(grep -Eo <span class="string">"20[0-9][0-9]-[0-9][0-9]-[0-9][0-9]"</span> *.info)</span><br><span class="line">    <span class="keyword">if</span> [ <span class="string">"null"</span> = <span class="string">"<span class="variable">$&#123;part_name&#125;</span>"</span> ];<span class="keyword">then</span></span><br><span class="line">      mp4_file_name=<span class="variable">$&#123;upload_time&#125;</span>_<span class="variable">$&#123;video_name&#125;</span>.mp4</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">      mp4_file_name=<span class="variable">$&#123;upload_time&#125;</span>_<span class="variable">$&#123;video_name&#125;</span>_<span class="variable">$&#123;p_dir&#125;</span>_<span class="variable">$&#123;part_name&#125;</span>.mp4</span><br><span class="line">    <span class="keyword">fi</span></span><br><span class="line">    ls *.flv | sort -n &gt; ff.txt</span><br><span class="line">    sed -i <span class="string">'s/^/file /g'</span> ff.txt</span><br><span class="line">    ffmpeg -f concat -i ff.txt -c copy <span class="variable">$&#123;mp4_dir&#125;</span>/<span class="string">"<span class="variable">$&#123;mp4_file_name&#125;</span>"</span>;rm -rf ff.txt</span><br><span class="line">    <span class="built_in">cd</span> <span class="variable">$&#123;root_dir&#125;</span>/<span class="variable">$&#123;dir&#125;</span></span><br><span class="line">  <span class="built_in">cd</span> <span class="variable">$&#123;root_dir&#125;</span></span><br><span class="line">  <span class="keyword">done</span></span><br><span class="line"><span class="comment"># 如果需要保留原视频请注释掉下面这一行</span></span><br><span class="line"><span class="comment"># rm -rf $&#123;root_dir&#125;/$&#123;dir&#125;</span></span><br><span class="line"><span class="keyword">done</span></span><br></pre></td></tr></table></figure><p>把 UWP 哔哩哔哩动画客户端或者 Android 客户端下载缓存视频的目录拷贝到 PC 工作目录下（我的环境是 <code>Windows 10 WSL GNU/Debian</code>），然后创建该脚本。接着安装好 ffmpeg 和 jq 这两个工具。然后在命令行下执行这个脚本就可以了。合并转码后的 mp4 文件都放在了脚本执行目录下的 mp4 文件夹中。在此一定要将脚本放在正确的目录下执行。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">╭─debian@debian /mnt/d/Downloads/bilibili</span><br><span class="line">╰─$ tree</span><br><span class="line">364 directories, 1542 files</span><br><span class="line">╭─debian@debian /mnt/d/Downloads/bilibili</span><br><span class="line">╰─$ du -sh</span><br><span class="line">114G    .</span><br><span class="line">╭─debian@debian /mnt/d/Downloads/bilibili</span><br><span class="line">╰─$ ./merge_bilibili_video.sh</span><br><span class="line">+ end_time=<span class="string">'Tue 14 Jan 2020 10:52:32 AM CST'</span></span><br><span class="line">++ du -sh /mnt/d/Downloads/bilibili/mp4</span><br><span class="line">+ mp4_size=<span class="string">'113G        /mnt/d/Downloads/bilibili/mp4'</span></span><br><span class="line">+ <span class="built_in">echo</span> <span class="string">'Tue 14 Jan 2020 10:42:07 AM CST'</span></span><br><span class="line">Tue 14 Jan 2020 10:42:07 AM CST</span><br><span class="line">+ <span class="built_in">echo</span> <span class="string">'Tue 14 Jan 2020 10:52:32 AM CST'</span></span><br><span class="line">Tue 14 Jan 2020 10:52:32 AM CST</span><br><span class="line">+ <span class="built_in">echo</span> <span class="string">'all flv size 114G       /mnt/d/Downloads/bilibili'</span></span><br><span class="line">all flv size 114G       /mnt/d/Downloads/bilibili</span><br><span class="line">+ <span class="built_in">echo</span> <span class="string">'all output mp4 size 113G        /mnt/d/Downloads/bilibili/mp4'</span></span><br><span class="line">all output mp4 size 113G        /mnt/d/Downloads/bilibili/mp4</span><br></pre></td></tr></table></figure><h2 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h2><p>合并转码的速度主要取决于磁盘性能，我放在 5200RPM 的机械硬盘下转码合并 110 多 GB 的 flv 文件，耗时 1 个多小时，放在 NVME 的固态硬盘下十几分钟就转换完了。</p><ul><li>截取一小部分😂</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">2016-08-06_【木鱼微剧场】《帝国的毁灭》万恶之源.mp4</span><br><span class="line">2018-06-06_【木鱼微剧场】蝴蝶效应真的存在吗？《混沌：数学探秘》（下）.mp4</span><br><span class="line">2018-06-22_【木鱼微剧场】《海豚湾》豆瓣Top250排名最高的纪录片.mp4</span><br><span class="line">2018-08-19_央视纪录片《大国崛起TheRiseOfGreatNations》全12集国语中字720P高清纪录片_10_大国崛起10新国新梦——美国.mp4</span><br><span class="line">2018-08-19_央视纪录片《大国崛起TheRiseOfGreatNations》全12集国语中字720P高清纪录片_11_大国崛起11危局新政——美国.mp4</span><br><span class="line">2018-08-19_央视纪录片《大国崛起TheRiseOfGreatNations》全12集国语中字720P高清纪录片_12_大国崛起12大道行思——大国之谜.mp4</span><br><span class="line">2018-08-19_央视纪录片《大国崛起TheRiseOfGreatNations》全12集国语中字720P高清纪录片_13_《大国崛起》高清片头国语高清.mp4</span><br><span class="line">2018-08-19_央视纪录片《大国崛起TheRiseOfGreatNations》全12集国语中字720P高清纪录片_1_大国崛起1海洋时代——葡萄牙、西班牙.mp4</span><br><span class="line">2018-08-19_央视纪录片《大国崛起TheRiseOfGreatNations》全12集国语中字720P高清纪录片_2_大国崛起2小国大业——荷兰.mp4</span><br><span class="line">2018-08-19_央视纪录片《大国崛起TheRiseOfGreatNations》全12集国语中字720P高清纪录片_3_大国崛起3走向现代——英国.mp4</span><br><span class="line">2018-08-19_央视纪录片《大国崛起TheRiseOfGreatNations》全12集国语中字720P高清纪录片_4_大国崛起4工业先声——英国.mp4</span><br><span class="line">2018-08-19_央视纪录片《大国崛起TheRiseOfGreatNations》全12集国语中字720P高清纪录片_5_大国崛起5激情岁月——法国.mp4</span><br><span class="line">2018-08-19_央视纪录片《大国崛起TheRiseOfGreatNations》全12集国语中字720P高清纪录片_6_大国崛起6帝国春秋——德国.mp4</span><br><span class="line">2018-08-19_央视纪录片《大国崛起TheRiseOfGreatNations》全12集国语中字720P高清纪录片_7_大国崛起7百年维新——日本.mp4</span><br><span class="line">2018-08-19_央视纪录片《大国崛起TheRiseOfGreatNations》全12集国语中字720P高清纪录片_8_大国崛起8寻道图强——俄罗斯.mp4</span><br><span class="line">2018-08-19_央视纪录片《大国崛起TheRiseOfGreatNations》全12集国语中字720P高清纪录片_9_大国崛起9风云新途——俄罗斯.mp4</span><br><span class="line">2018-08-30_生命起源的奇幻旅程ROSETTACOMETCHASERAJOURNEYTOTHEO.mp4</span><br><span class="line">2019-02-18_【经济】复旦大学新城与债务：造城运动真的带来发展吗？全4讲主讲陆铭_1_1.mp4</span><br><span class="line">2019-02-18_【经济】复旦大学新城与债务：造城运动真的带来发展吗？全4讲主讲陆铭_2_2.mp4</span><br><span class="line">2019-02-18_【经济】复旦大学新城与债务：造城运动真的带来发展吗？全4讲主讲陆铭_3_3.mp4</span><br><span class="line">2019-02-18_【经济】复旦大学新城与债务：造城运动真的带来发展吗？全4讲主讲陆铭_4_4.mp4</span><br><span class="line">2019-04-07_湊あくあlettersong自制spiral版.mp4</span><br><span class="line">2019-04-12_【爱的旋律】与你相遇，便是我生命中最美好的时光——最美的爱情.mp4</span><br><span class="line">2020-01-14_【纪录片】食物的历史4【双语特效字幕】【纪录片之家字幕组】.mp4</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;h2 id=&quot;弄啥咧？&quot;&gt;&lt;a href=&quot;#弄啥咧？&quot;
        
      
    
    </summary>
    
    
      <category term="工具" scheme="https://blog.502.li/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="技巧" scheme="https://blog.502.li/tags/%E6%8A%80%E5%B7%A7/"/>
    
  </entry>
  
</feed>
