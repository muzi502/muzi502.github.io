<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>木子</title>
  <icon>https://blog.k8s.li/icon.png</icon>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://blog.k8s.li/"/>
  <updated>2020-06-13T16:00:00.000Z</updated>
  <id>https://blog.k8s.li/</id>
  
  <author>
    <name>木子</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>深入浅出容器镜像的一生🤔</title>
    <link href="https://blog.k8s.li/Exploring-container-image.html"/>
    <id>https://blog.k8s.li/Exploring-container-image.html</id>
    <published>2020-06-13T16:00:00.000Z</published>
    <updated>2020-06-13T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>上周在写<a href="https://blog.k8s.li/skopeo.html">《镜像搬运工 skopeo 》</a> 的时候看了很多关于容器镜像相关的博客，从大佬们那里偷偷学了不少知识，对容器镜像有了一点点深入的了解。这周末一个人闲着宅在家里没事就把最近所学的知识整理一下分享出来，供大家一起来食用。内容比较多，耐心看完的话，还是能收获一些<del>没用的</del>知识滴😂。</p><h2 id="更新记录"><a href="#更新记录" class="headerlink" title="更新记录"></a>更新记录</h2><ul><li>2020-06-13：还有一些没有写完，后续补充</li><li>2020-06-06： 初稿</li></ul><h2 id="镜像是怎样炼成的🤔"><a href="#镜像是怎样炼成的🤔" class="headerlink" title="镜像是怎样炼成的🤔"></a>镜像是怎样炼成的🤔</h2><p>所谓炼成像就是构建镜像啦，下面用到的<strong>搓</strong>和<strong>炼制</strong>都是指的构建镜像啦，只是个人习惯用语而已😂。</p><p>提到容器镜像就不得不提一下 OCI ，即 Open Container Initiative 旨在围绕容器格式和运行时制定一个开放的工业化标准。目前 OCI 主要有三个规范：运行时规范 <a href="https://github.com/opencontainers/runtime-spec" target="_blank" rel="noopener">runtime-spec</a> ，镜像规范 <a href="http://www.github.com/opencontainers/image-spec" target="_blank" rel="noopener">image-spec</a> 以及不常见的镜像仓库规范 <a href="https://github.com/opencontainers/distribution-spec" target="_blank" rel="noopener">distribution-spec</a> 。关于 OCI 这些规范的作用的作用，就引用一下 <a href="https://wilhelmguo.cn/blog/post/william/%E5%AE%B9%E5%99%A8%E5%BC%80%E6%94%BE%E6%8E%A5%E5%8F%A3%E8%A7%84%E8%8C%83%EF%BC%88CRI-OCI%EF%BC%89-2" target="_blank" rel="noopener">容器开放接口规范（CRI OCI）</a> 中的内容，我也就懒得自己组织语言灌水了😂（凑字数</p><blockquote><p>制定容器格式标准的宗旨概括来说就是不受上层结构的绑定，如特定的客户端、编排栈等，同时也不受特定的供应商或项目的绑定，即不限于某种特定操作系统、硬件、CPU架构、公有云等。</p><p>这两个协议通过 OCI runtime filesytem bundle 的标准格式连接在一起，OCI 镜像可以通过工具转换成 bundle，然后 OCI 容器引擎能够识别这个 bundle 来运行容器</p><ul><li>操作标准化：容器的标准化操作包括使用标准容器创建、启动、停止容器，使用标准文件系统工具复制和创建容器快照，使用标准化网络工具进行下载和上传。</li><li>内容无关：内容无关指不管针对的具体容器内容是什么，容器标准操作执行后都能产生同样的效果。如容器可以用同样的方式上传、启动，不管是PHP应用还是MySQL数据库服务。</li><li>基础设施无关：无论是个人的笔记本电脑还是AWS S3，亦或是OpenStack，或者其它基础设施，都应该对支持容器的各项操作。</li><li>为自动化量身定制：制定容器统一标准，是的操作内容无关化、平台无关化的根本目的之一，就是为了可以使容器操作全平台自动化。</li><li>工业级交付：制定容器标准一大目标，就是使软件分发可以达到工业级交付成为现实</li></ul></blockquote><p>其实 OCI 规范就是一堆 markdown 文件啦，内容也很容易理解，不像 RFC 和 ISO 那么高深莫测，所以汝想对容器镜像有个深入的了解还是推荐大家去读一下这些 markdown 文件😂。OCI 规范是免费的哦，不像大多数 ISO 规范还要交钱才能看（︶^︶）哼。</p><h3 id="OCI-image-spec"><a href="#OCI-image-spec" class="headerlink" title="OCI image-spec"></a>OCI image-spec</h3><p>OCI 规范中的镜像规范 <a href="http://www.github.com/opencontainers/image-spec" target="_blank" rel="noopener">image-spec</a> 决定了我们的镜像按照什么标准来构建，以及构建完镜像之后如何存放，接着下文提到的 Dockerfile 则决定了镜像的 layer 内容以及镜像的一些元数据信息。一个镜像规范 image-spec 和一个 Dockerfile 就指导着我们构建一个镜像，那么接下来我们就简单了解一下这个镜像规范，看看镜像是长什么样子的，对镜像有个大体的主观认识。</p><p>根据官方文档的描述，OCI 镜像规范的主要由以下几个 markdown 文件组成：</p><blockquote><ul><li><a href="https://github.com/opencontainers/image-spec/blob/master/manifest.md" target="_blank" rel="noopener">Image Manifest</a> - a document describing the components that make up a container image</li><li><a href="https://github.com/opencontainers/image-spec/blob/master/image-index.md" target="_blank" rel="noopener">Image Index</a> - an annotated index of image manifests</li><li><a href="https://github.com/opencontainers/image-spec/blob/master/image-layout.md" target="_blank" rel="noopener">Image Layout</a> - a filesystem layout representing the contents of an image</li><li><a href="https://github.com/opencontainers/image-spec/blob/master/layer.md" target="_blank" rel="noopener">Filesystem Layer</a> - a changeset that describes a container’s filesystem</li><li><a href="https://github.com/opencontainers/image-spec/blob/master/config.md" target="_blank" rel="noopener">Image Configuration</a> - a document determining layer ordering and configuration of the image suitable for translation into a <a href="https://github.com/opencontainers/runtime-spec" target="_blank" rel="noopener">runtime bundle</a></li><li><a href="https://github.com/opencontainers/image-spec/blob/master/conversion.md" target="_blank" rel="noopener">Conversion</a> - a document describing how this translation should occur</li><li><a href="https://github.com/opencontainers/image-spec/blob/master/descriptor.md" target="_blank" rel="noopener">Descriptor</a> - a reference that describes the type, metadata and content address of referenced content</li></ul></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">├── annotations.md         # 注解规范</span><br><span class="line">├── config.md              # image config 文件规范</span><br><span class="line">├── considerations.md      # 注意事项</span><br><span class="line">├── conversion.md          # 转换为 OCI 运行时</span><br><span class="line">├── descriptor.md          # OCI Content Descriptors 内容描述</span><br><span class="line">├── image-index.md         # manifest list 文件</span><br><span class="line">├── image-layout.md        # 镜像的布局</span><br><span class="line">├── implementations.md     # 使用 OCI 规范的项目</span><br><span class="line">├── layer.md               # 镜像层 layer 规范</span><br><span class="line">├── manifest.md            # manifest 规范</span><br><span class="line">├── media-types.md         # 文件类型</span><br><span class="line">├── README.md              # README 文档</span><br><span class="line">├── spec.md                # OCI 镜像规范的概览</span><br></pre></td></tr></table></figure><p>总结以上几个 markdown 文件， OCI 容器镜像规范主要包括以下几块内容：</p><h4 id="layer"><a href="#layer" class="headerlink" title="layer"></a>layer</h4><p><a href="https://github.com/opencontainers/image-spec/blob/master/layer.md" target="_blank" rel="noopener">文件系统</a>：以 layer （镜像层）保存的文件系统，每个 layer 保存了和上层之间变化的部分，layer 应该保存哪些文件，怎么表示增加、修改和删除的文件等。</p><h4 id="image-config"><a href="#image-config" class="headerlink" title="image config"></a>image config</h4><p><a href="https://github.com/opencontainers/image-spec/blob/master/config.md" target="_blank" rel="noopener">image config 文件</a>：保存了文件系统的层级信息（每个层级的 hash 值，以及历史信息），以及容器运行时需要的一些信息（比如环境变量、工作目录、命令参数、mount 列表），指定了镜像在某个特定平台和系统的配置，比较接近我们使用 <code>docker inspect &lt;image_id&gt;</code> 看到的内容。</p><ul><li>example</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"architecture"</span>: <span class="string">"amd64"</span>,</span><br><span class="line">  <span class="attr">"config"</span>: &#123;</span><br><span class="line">    <span class="attr">"Hostname"</span>: <span class="string">""</span>,</span><br><span class="line">    <span class="attr">"Domainname"</span>: <span class="string">""</span>,</span><br><span class="line">    <span class="attr">"User"</span>: <span class="string">""</span>,</span><br><span class="line">    <span class="attr">"AttachStdin"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">"AttachStdout"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">"AttachStderr"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">"Tty"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">"OpenStdin"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">"StdinOnce"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">"Env"</span>: [</span><br><span class="line">      <span class="string">"PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">"Cmd"</span>: [</span><br><span class="line">      <span class="string">"bash"</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">"Image"</span>: <span class="string">"sha256:ba8f577813c7bdf6b737f638dffbc688aa1df2ff28a826a6c46bae722977b549"</span>,</span><br><span class="line">    <span class="attr">"Volumes"</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">"WorkingDir"</span>: <span class="string">""</span>,</span><br><span class="line">    <span class="attr">"Entrypoint"</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">"OnBuild"</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">"Labels"</span>: <span class="literal">null</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"container"</span>: <span class="string">"38501d5aa48c080884f4dc6fd4b1b6590ff1607d9e7a12e1cef1d86a3fdc32df"</span>,</span><br><span class="line">  <span class="attr">"container_config"</span>: &#123;</span><br><span class="line">    <span class="attr">"Hostname"</span>: <span class="string">"38501d5aa48c"</span>,</span><br><span class="line">    <span class="attr">"Domainname"</span>: <span class="string">""</span>,</span><br><span class="line">    <span class="attr">"User"</span>: <span class="string">""</span>,</span><br><span class="line">    <span class="attr">"AttachStdin"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">"AttachStdout"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">"AttachStderr"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">"Tty"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">"OpenStdin"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">"StdinOnce"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">"Env"</span>: [</span><br><span class="line">      <span class="string">"PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">"Cmd"</span>: [</span><br><span class="line">      <span class="string">"/bin/sh"</span>,</span><br><span class="line">      <span class="string">"-c"</span>,</span><br><span class="line">      <span class="string">"#(nop) "</span>,</span><br><span class="line">      <span class="string">"CMD [\"bash\"]"</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">"Image"</span>: <span class="string">"sha256:ba8f577813c7bdf6b737f638dffbc688aa1df2ff28a826a6c46bae722977b549"</span>,</span><br><span class="line">    <span class="attr">"Volumes"</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">"WorkingDir"</span>: <span class="string">""</span>,</span><br><span class="line">    <span class="attr">"Entrypoint"</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">"OnBuild"</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">"Labels"</span>: &#123;&#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"created"</span>: <span class="string">"2020-06-07T01:59:47.348924716Z"</span>,</span><br><span class="line">  <span class="attr">"docker_version"</span>: <span class="string">"19.03.5"</span>,</span><br><span class="line">  <span class="attr">"history"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"created"</span>: <span class="string">"2020-06-07T01:59:46.877600299Z"</span>,</span><br><span class="line">      <span class="attr">"created_by"</span>: <span class="string">"/bin/sh -c #(nop) ADD file:a82014afc29e7b364ac95223b22ebafad46cc9318951a85027a49f9ce1a99461 in / "</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"created"</span>: <span class="string">"2020-06-07T01:59:47.348924716Z"</span>,</span><br><span class="line">      <span class="attr">"created_by"</span>: <span class="string">"/bin/sh -c #(nop)  CMD [\"bash\"]"</span>,</span><br><span class="line">      <span class="attr">"empty_layer"</span>: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">"os"</span>: <span class="string">"linux"</span>,</span><br><span class="line">  <span class="attr">"rootfs"</span>: &#123;</span><br><span class="line">    <span class="attr">"type"</span>: <span class="string">"layers"</span>,</span><br><span class="line">    <span class="attr">"diff_ids"</span>: [</span><br><span class="line">      <span class="string">"sha256:d1b85e6186f67d9925c622a7a6e66faa447e767f90f65ae47cdc817c629fa956"</span></span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="manifest"><a href="#manifest" class="headerlink" title="manifest"></a>manifest</h4><p><a href="https://github.com/opencontainers/image-spec/blob/master/manifest.md" target="_blank" rel="noopener">manifest 文件</a> ：镜像的 config 文件索引，有哪些 layer，额外的 annotation 信息，manifest 文件中保存了很多和当前平台有关的信息。另外 manifest 中的 layer 和 config 中的 layer 表达的虽然都是镜像的 layer ，但二者代表的意义不太一样，稍后会讲到。manifest 文件是存放在 registry 中，当我们拉取镜像的时候，会根据该文件拉取相应的 layer 。根据 OCI image-spec 规范中 <a href="https://github.com/opencontainers/image-spec/blob/master/manifest.md" target="_blank" rel="noopener">OCI Image Manifest Specification</a> 的定义可以得知，镜像的 manifest 文件主要有以下三个目标：（英语不好就不翻译了😥</p><blockquote><p>There are three main goals of the Image Manifest Specification.</p><ul><li>The first goal is content-addressable images, by supporting an image model where the image’s configuration can be hashed to generate a unique ID for the image and its components.</li><li>The second goal is to allow multi-architecture images, through a “fat manifest” which references image manifests for platform-specific versions of an image. In OCI, this is codified in an <a href="https://github.com/opencontainers/image-spec/blob/master/image-index.md" target="_blank" rel="noopener">image index</a>.</li><li>The third goal is to be <a href="https://github.com/opencontainers/image-spec/blob/master/conversion.md" target="_blank" rel="noopener">translatable</a> to the <a href="https://github.com/opencontainers/runtime-spec" target="_blank" rel="noopener">OCI Runtime Specification</a>.</li></ul></blockquote><p>另外 manifest 也分好几个版本，目前主流的版本是  <code>Manifest Version 2, Schema 2</code> ，可以参考 docker 的官方文档 <a href="https://github.com/docker/distribution/blob/master/docs/spec/manifest-v2-2.md" target="_blank" rel="noopener">Image Manifest Version 2, Schema 2</a> 。registry 中会有个 <code>Manifest List</code> 文件，该文件是为不同处理器体系架构而设计的，通过该文件指向与该处理器体系架构相对应的 Image Manifest ，这一点不要搞混。</p><ul><li>Example Manifest List</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"schemaVersion"</span>: <span class="number">2</span>,</span><br><span class="line">  <span class="attr">"mediaType"</span>: <span class="string">"application/vnd.docker.distribution.manifest.list.v2+json"</span>,</span><br><span class="line">  <span class="attr">"manifests"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"mediaType"</span>: <span class="string">"application/vnd.docker.distribution.manifest.v2+json"</span>,</span><br><span class="line">      <span class="attr">"size"</span>: <span class="number">7143</span>,</span><br><span class="line">      <span class="attr">"digest"</span>: <span class="string">"sha256:e692418e4cbaf90ca69d05a66403747baa33ee08806650b51fab815ad7fc331f"</span>,</span><br><span class="line">      <span class="attr">"platform"</span>: &#123;</span><br><span class="line">        <span class="attr">"architecture"</span>: <span class="string">"ppc64le"</span>,</span><br><span class="line">        <span class="attr">"os"</span>: <span class="string">"linux"</span>,</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"mediaType"</span>: <span class="string">"application/vnd.docker.distribution.manifest.v2+json"</span>,</span><br><span class="line">      <span class="attr">"size"</span>: <span class="number">7682</span>,</span><br><span class="line">      <span class="attr">"digest"</span>: <span class="string">"sha256:5b0bcabd1ed22e9fb1310cf6c2dec7cdef19f0ad69efa1f392e94a4333501270"</span>,</span><br><span class="line">      <span class="attr">"platform"</span>: &#123;</span><br><span class="line">        <span class="attr">"architecture"</span>: <span class="string">"amd64"</span>,</span><br><span class="line">        <span class="attr">"os"</span>: <span class="string">"linux"</span>,</span><br><span class="line">        <span class="attr">"features"</span>: [</span><br><span class="line">          <span class="string">"sse4"</span></span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Image Manifest</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  "schemaVersion": 2,</span><br><span class="line">  "mediaType": "application/vnd.docker.distribution.manifest.v2+json",</span><br><span class="line">  "config": &#123;</span><br><span class="line">    "mediaType": "application/vnd.docker.container.image.v1+json",</span><br><span class="line">    "size": 1509,</span><br><span class="line">    "digest": "sha256:a24bb4013296f61e89ba57005a7b3e52274d8edd3ae2077d04395f806b63d83e"</span><br><span class="line">  &#125;,</span><br><span class="line">  "layers": [</span><br><span class="line">    &#123;</span><br><span class="line">      "mediaType": "application/vnd.docker.image.rootfs.diff.tar.gzip",</span><br><span class="line">      "size": 5844992,</span><br><span class="line">      "digest": "sha256:50644c29ef5a27c9a40c393a73ece2479de78325cae7d762ef3cdc19bf42dd0a"</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后再补充一段高策大佬的 <a href="http://gaocegege.com/Blog/ormb" target="_blank" rel="noopener">解释</a> ：</p><blockquote><p>Manifest 是一个 JSON 文件，其定义包括两个部分，分别是 <a href="https://github.com/opencontainers/image-spec/blob/master/config.md" target="_blank" rel="noopener">Config</a> 和 <a href="https://github.com/opencontainers/image-spec/blob/master/layer.md" target="_blank" rel="noopener">Layers</a>。Config 是一个 JSON 对象，Layers 是一个由 JSON 对象组成的数组。可以看到，Config 与 Layers 中的每一个对象的结构相同，都包括三个字段，分别是 digest、mediaType 和 size。其中 digest 可以理解为是这一对象的 ID。mediaType 表明了这一内容的类型。size 是这一内容的大小。</p><p>容器镜像的 Config 有着固定的 mediaType <code>application/vnd.oci.image.config.v1+json</code>。一个 Config 的示例配置如下，它记录了关于容器镜像的配置，可以理解为是镜像的元数据。通常它会被镜像仓库用来在 UI 中展示信息，以及区分不同操作系统的构建等。</p><p>而容器镜像的 Layers 是由多层 mediaType 为 <code>application/vnd.oci.image.layer.v1.*</code>（其中最常见的是 <code>application/vnd.oci.image.layer.v1.tar+gzip</code>) 的内容组成的。众所周知，容器镜像是分层构建的，每一层就对应着 Layers 中的一个对象。</p><p>容器镜像的 Config，和 Layers 中的每一层，都是以 Blob 的方式存储在镜像仓库中的，它们的 digest 作为 Key 存在。因此，在请求到镜像的 Manifest 后，Docker 会利用 digest 并行下载所有的 Blobs，其中就包括 Config 和所有的 Layers。</p></blockquote><h4 id="image-manifest-index"><a href="#image-manifest-index" class="headerlink" title="image manifest index"></a>image manifest index</h4><p><a href="https://github.com/opencontainers/image-spec/blob/master/image-index.md" target="_blank" rel="noopener">index 文件</a> ：其实就是我们上面提到的 Manifest List 啦。在 docker 的 <a href="https://github.com/docker/distribution" target="_blank" rel="noopener">distribution</a> 中称之为 <code>Manifest List</code> 在 OCI 中就叫 <a href="https://github.com/opencontainers/image-spec/blob/master/image-index.md" target="_blank" rel="noopener">OCI Image Index Specification</a> 。其实两者是指的同一个文件，甚至两者 GitHub 上文档给的 example 都一一模样🤣，应该是 OCI 复制粘贴 Docker 的文档😂。index 文件是个可选的文件，包含着一个列表为同一个镜像不同的处理器 arch 指向不同平台的 manifest 文件，这个文件能保证一个镜像可以跨平台使用，每个处理器 arch 平台拥有不同的 manifest 文件，使用 index 作为索引。当我们使用 arm 架构的处理器时要额外注意，在拉取镜像的时候要拉取 arm 架构的镜像，一般处理器的架构都接在镜像的 tag 后面，默认 latest tag 的镜像是 x86 的，在 arm 处理器的机器这些镜像上是跑不起来的。</p><h3 id="Dockerfile"><a href="#Dockerfile" class="headerlink" title="Dockerfile"></a>Dockerfile</h3><p>众所周知 docker 镜像需要一个 Dockerfile 来构建而成，当我们对 OCI 镜像规范有了个大致的了解之后，我们接下来就拿着 Dockerfile 这个 ”图纸“ 去一步步构建镜像。本文不再细讲 Dockerfile 的详细书写和技巧，网上也有很多众所周知的关于写好 Dockerfile 的技巧，比如我之前水过的一篇 <a href="https://blog.k8s.li/dockerfile-tips.html">Dockerfile 搓镜像的小技巧</a> 。</p><p>下面就是 <a href="https://webp.sh" target="_blank" rel="noopener">webp server go</a> Dockerfile 的例子：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> golang:alpine as builder</span><br><span class="line"><span class="keyword">ARG</span> IMG_PATH=/opt/pics</span><br><span class="line"><span class="keyword">ARG</span> EXHAUST_PATH=/opt/exhaust</span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> apk update ;\</span></span><br><span class="line"><span class="bash">    apk add alpine-sdk ;\</span></span><br><span class="line"><span class="bash">    git <span class="built_in">clone</span> https://github.com/webp-sh/webp_server_go /build ;\</span></span><br><span class="line"><span class="bash">    <span class="built_in">cd</span> /build ;\</span></span><br><span class="line"><span class="bash">    sed -i <span class="string">"s|.\/pics|<span class="variable">$&#123;IMG_PATH&#125;</span>|g"</span> config.json ;\</span></span><br><span class="line"><span class="bash">    sed -i <span class="string">"s|\"\"|\"<span class="variable">$&#123;EXHAUST_PATH&#125;</span>\"|g"</span> config.json ;\</span></span><br><span class="line"><span class="bash">    sed -i <span class="string">'s/127.0.0.1/0.0.0.0/g'</span> config.json</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /build</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> go build -o webp-server .</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">FROM</span> alpine</span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> --from=builder /build/webp-server  /usr/bin/webp-server</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> --from=builder /build/config.json /etc/config.json</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /opt</span></span><br><span class="line"><span class="keyword">VOLUME</span><span class="bash"> /opt/exhaust</span></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> [<span class="string">"/usr/bin/webp-server"</span>, <span class="string">"--config"</span>, <span class="string">"/etc/config.json"</span>]</span></span><br></pre></td></tr></table></figure><p>需要注意的是，在 RUN 指令的每行结尾我使用的是 <code>;\</code> 来接下一行 shell ，另一种写法是 <code>&amp;&amp;</code> 。二者有本质的区别，比如 COMMAND 1;COMMAND 2 ，当 COMMAND 1 运行失败时会继续运行 COMMAND2 ，并不会退出。而 COMMAND 1&amp;&amp; COMMAND 2，时 COMMAND 1 运行成功时才接着运行 COMMAND 2 ，COMMAND 1 运行失败会退出。如果没有十足的把握保证每一行 shell 都能每次运行成功建议用 <code>&amp;&amp;</code> ，这样失败了就退出构建镜像，不然构建出来的镜像会有问题。如果是老司机🚗 的话建议用 <code>;</code> ，逛了一圈 docker hub 官方镜像中用 <code>;</code> 较多一些，因为 <code>;</code> 比 <code>&amp;&amp;</code> 要美观一些（大雾😂。</p><ul><li>风格一：比如 <a href="https://github.com/nginxinc/docker-nginx/blob/master/stable/buster/Dockerfile" target="_blank" rel="noopener">nginx</a> 官方镜像是用的 <code>&amp;&amp;</code>，貌似也混入了 <code>;</code>🤣</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">RUN set -x \</span><br><span class="line"><span class="meta">#</span><span class="bash"> create nginx user/group first, to be consistent throughout docker variants</span></span><br><span class="line">    &amp;&amp; addgroup --system --gid 101 nginx \</span><br><span class="line">    &amp;&amp; adduser --system --disabled-login --ingroup nginx --no-create-home --home /nonexistent --gecos "nginx user" --shell /bin/false --uid 101 nginx \</span><br><span class="line">    &amp;&amp; apt-get update \</span><br><span class="line">    &amp;&amp; apt-get install --no-install-recommends --no-install-suggests -y gnupg1 ca-certificates \</span><br><span class="line">    &amp;&amp; \</span><br><span class="line">    NGINX_GPGKEY=573BFD6B3D8FBC641079A6ABABF5BD827BD9BF62; \</span><br><span class="line">    found=''; \</span><br><span class="line">    for server in \</span><br><span class="line">        ha.pool.sks-keyservers.net \</span><br><span class="line">        hkp://keyserver.ubuntu.com:80 \</span><br><span class="line">        hkp://p80.pool.sks-keyservers.net:80 \</span><br><span class="line">        pgp.mit.edu \</span><br><span class="line">    ; do \</span><br></pre></td></tr></table></figure><ul><li>风格二：比如 <a href="https://github.com/docker-library/redis/blob/23af5b6adb271bcebbcebc93308884438512a4af/6.0/Dockerfile" target="_blank" rel="noopener">redis</a> 官方镜像就清一色使用的 <code>;</code></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">RUN set -eux; \</span><br><span class="line">savedAptMark="$(apt-mark showmanual)"; \</span><br><span class="line">apt-get update; \</span><br><span class="line">apt-get install -y --no-install-recommends ca-certificates dirmngr gnupg wget; \</span><br><span class="line">rm -rf /var/lib/apt/lists/*; \</span><br><span class="line">dpkgArch="$(dpkg --print-architecture | awk -F- '&#123; print $NF &#125;')"; \</span><br><span class="line">wget -O /usr/local/bin/gosu "https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$dpkgArch"; \</span><br><span class="line">wget -O /usr/local/bin/gosu.asc "https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$dpkgArch.asc"; \</span><br><span class="line">export GNUPGHOME="$(mktemp -d)"; \</span><br><span class="line">gpg --batch --keyserver hkps://keys.openpgp.org --recv-keys B42F6819007F00F88E364FD4036A9C25BF357DD4; \</span><br><span class="line">gpg --batch --verify /usr/local/bin/gosu.asc /usr/local/bin/gosu; \</span><br><span class="line">gpgconf --kill all; \</span><br><span class="line">rm -rf "$GNUPGHOME" /usr/local/bin/gosu.asc; \</span><br><span class="line">apt-mark auto '.*' &gt; /dev/null; \</span><br><span class="line">[ -z "$savedAptMark" ] || apt-mark manual $savedAptMark &gt; /dev/null; \</span><br><span class="line">apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false; \</span><br><span class="line">chmod +x /usr/local/bin/gosu; \</span><br><span class="line">gosu --version; \</span><br><span class="line">gosu nobody true</span><br></pre></td></tr></table></figure><p>汝喜欢哪种风格呢？快在评论区留言吧😋</p><h4 id="镜像工厂🛠"><a href="#镜像工厂🛠" class="headerlink" title="镜像工厂🛠"></a>镜像工厂🛠</h4><blockquote><p>Docker 是一个典型的 C/S 架构的应用，分为 Docker 客户端（即平时敲的 docker 命令） Docker 服务端（dockerd 守护进程）。</p><p>Docker 客户端通过 REST API 和服务端进行交互，docker 客户端每发送一条指令，底层都会转化成 REST API 调用的形式发送给服务端，服务端处理客户端发送的请求并给出响应。</p><p>Docker 镜像的构建、容器创建、容器运行等工作都是 Docker 服务端来完成的，Docker 客户端只是承担发送指令的角色。</p><p>Docker 客户端和服务端可以在同一个宿主机，也可以在不同的宿主机，如果在同一个宿主机的话，Docker 客户端默认通过 UNIX 套接字(<code>/var/run/docker.sock</code>)和服务端通信。</p></blockquote><p>类比于钢铁是怎样炼成的，如果说炼制镜像也需要个工厂的话，那么我们的 dockerd 这个守护进程就是个生产镜像的工厂。能生产镜像的不止 docker 一家，红帽子家的 <a href="https://buildah.io/" target="_blank" rel="noopener">buildah</a> 也能生产镜像，不过用的人并不多。二者的最大区别在于 buildah 可以不用 root 权限来构建镜像，而使用 docker 构建镜像时需要用到 root 权限，没有 root 权限的用户构建镜像会当场翻车。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Got permission denied while trying to connect to the Docker daemon socket at unix:///var/run/docker.sock:</span><br></pre></td></tr></table></figure><p>不过 buildah 构建出来的镜像有一堆堆的兼容性问题，所以我们还是使用 docker 来构建镜像吧。当我们使用 docker build 命令构建一个镜像的时候第一行日志就是 <code>Sending build context to Docker daemon xx MB</code>。这一步是 docker cli 这个命令行客户端将我们当前目录（即构建上下文） <code>build context</code> 打包发送 <code>Docker daemon</code> 守护进程 （即 dockerd）的过程。</p><p><img src="img/docker-architecture.png" alt="img"></p><p>docker build 构建镜像的流程大概就是：</p><ul><li>执行 <code>docker build -t &lt;imageName:Tag&gt; .</code>，可以使用 <code>-f</code>参数来指定 Dockerfile 文件；</li><li>docker 客户端会将构建命令后面指定的路径(<code>.</code>)下的所有文件打包成一个 tar 包，发送给 Docker 服务端;</li><li>docker 服务端收到客户端发送的 tar 包，然后解压，接下来根据 Dockerfile 里面的指令进行镜像的分层构建；</li><li>docker 下载 FROM 语句中指定的基础镜像，然后将基础镜像的 layer 联合挂载为一层，并在上面创建一个空目录；</li><li>接着启动一个临时的容器并在 chroot 中启动一个 bash，运行 <code>RUN</code> 语句中的命令：<code>RUN: chroot . /bin/bash -c &quot;apt get update……&quot;</code>；</li><li>一条 <code>RUN</code> 命令结束后，会把上层目录压缩，形成新镜像中的新的一层；</li><li>如果 Dockerfile 中包含其它命令，就以之前构建的层次为基础，从第二步开始重复创建新层，直到完成所有语句后退出；</li><li>构建完成之后为该镜像打上 tag；</li></ul><p>以上就是构建镜像的大致流程，我们也可以通过 <code>docker history &lt;imageName:Tag&gt;</code> 命令来逆向推算出 docker build 的过程。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">╭─root@sg-02 ~/buster/slim</span><br><span class="line">╰─# docker history webpsh/webps</span><br><span class="line">IMAGE               CREATED             CREATED BY          SIZE                COMMENT</span><br><span class="line">30d9679b0b1c        2 weeks ago         /bin/sh -c #(nop)  CMD ["/usr/bin/webp-serve…   0B</span><br><span class="line">&lt;missing&gt;           2 weeks ago         /bin/sh -c #(nop)  VOLUME [/opt/exhaust]        0B</span><br><span class="line">&lt;missing&gt;           2 weeks ago         /bin/sh -c #(nop) WORKDIR /opt                  0B</span><br><span class="line">&lt;missing&gt;           2 weeks ago         /bin/sh -c #(nop) COPY file:1497d882aeef5f77…   168B</span><br><span class="line">&lt;missing&gt;           2 weeks ago         /bin/sh -c #(nop) COPY file:327020918e4dc998…   14.9MB</span><br><span class="line">&lt;missing&gt;           6 weeks ago         /bin/sh -c #(nop)  CMD ["/bin/sh"]              0B</span><br><span class="line">&lt;missing&gt;           6 weeks ago         /bin/sh -c #(nop) ADD file:b91adb67b670d3a6f…   5.61MB</span><br><span class="line"></span><br><span class="line">╭─root@sg-02 ~/buster/slim</span><br><span class="line">╰─# docker history debian:v2</span><br><span class="line">IMAGE               CREATED             CREATED BY           SIZE                COMMENT</span><br><span class="line">e6e782a57a51        38 hours ago        /bin/sh -c #(nop)  CMD ["bash"]                 0B</span><br><span class="line">ba8f577813c7        38 hours ago        /bin/sh -c #(nop) ADD file:a82014afc29e7b364…   69.2MB</span><br></pre></td></tr></table></figure><h4 id="base-image"><a href="#base-image" class="headerlink" title="base image"></a>base image</h4><p>当我们在写 Dockerfile 的时候都需要用 <code>FROM</code> 语句来指定一个基础镜像，这些基础镜像并不是无中生有，也需要一个 Dockerfile 来构建成镜像。下面我们拿来 <a href="https://hub.docker.com/_/debian" target="_blank" rel="noopener">debian:buster</a> 这个基础镜像的 <a href="https://github.com/debuerreotype/docker-debian-artifacts/blob/18cb4d0418be1c80fb19141b69ac2e0600b2d601/buster/Dockerfile" target="_blank" rel="noopener">Dockerfile</a> 来看一下基础镜像是如何炼成的。</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> scratch</span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> rootfs.tar.xz /</span></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> [<span class="string">"bash"</span>]</span></span><br></pre></td></tr></table></figure><p>一个基础镜像的 Dockerfile 一般仅有三行。第一行 <code>FROM scratch</code> 中的<code>scratch</code> 这个镜像并不真实的存在。当你使用 <code>docker pull scratch</code> 命令来拉取这个镜像的时候会翻车哦，提示 <code>Error response from daemon: &#39;scratch&#39; is a reserved name</code>。这是因为自从 docker 1.5 版本开始，在 Dockerfile 中 <code>FROM scratch</code> 指令并不进行任何操作，也就是不会创建一个镜像层；接着第二行的 <code>ADD rootfs.tar.xz /</code> 会自动把 <code>rootfs.tar.xz</code>  解压到 <code>/</code> 目录下，由此产生的一层镜像就是最终构建的镜像真实的 layer 内容；第三行 <code>CMD [&quot;bash&quot;]</code> 指定这镜像在启动容器的时候执行的应用程序，一般基础镜像的 CMD 默认为 bash 或者 sh 。</p><blockquote><p>As of Docker 1.5.0 (specifically, <a href="https://github.com/docker/docker/pull/8827" target="_blank" rel="noopener"><code>docker/docker#8827</code></a>), <code>FROM scratch</code> is a no-op in the Dockerfile , and will not create an extra layer in your image (so a previously 2-layer image will be a 1-layer image instead).</p></blockquote><p><code>ADD rootfs.tar.xz /</code> 中，这个 <code>rootfs.tar.xz</code> 就是我们经过一系列骚操作（一般是发行版源码编译）搓出来的根文件系统，这个操作比较复杂，木子太菜了🥬就不在这里瞎掰掰了🙃，如果汝对源码构建 <code>rootfs.tar.xz</code> 这个过程感兴趣可以去看一下构建 debian 基础镜像的 Jenkins 流水线任务 <a href="https://doi-janky.infosiftr.net/job/tianon/job/debuerreotype/" target="_blank" rel="noopener">debuerreotype</a>，上面有构建这个 <code>rootfs.tar.xz</code> 完整过程，或者参考 Debian 官方的 <a href="https://github.com/debuerreotype/docker-debian-artifacts" target="_blank" rel="noopener">docker-debian-artifacts</a> 这个 repo 里的 shell 脚本。</p><p>需要额外注意一点，在这里往镜像里添加 <code>rootfs.tar.xz</code> 时使用的是 <code>ADD</code> 而不是 <code>COPY</code> ，因为在 Dockerfile 中的 ADD 指令 src 文件如果是个 tar 包，在构建的时候 docker 会帮我们把 tar 包解开到指定目录，使用 copy 指令则不会解开 tar 包。另外一点区别就是 ADD 指令是添加一个文件，这个文件可以是构建上下文环境中的文件，也可以是个 URL，而 COPY 则只能添加构建上下文中的文件，所谓的构建上下文就是我们构建镜像的时候最后一个参数啦。</p><blockquote><p>PS：面试的时候经常被问 ADD 与 COPY 的区别；CMD 与 ENTRYPOINT 的区别😂。</p></blockquote><p>搓这个 <code>rootfs.tar.xz</code> 不同的发行版方法可能不太一样，Debian 发行版的 <code>rootfs.tar.xz</code> 可以在 <a href="https://github.com/debuerreotype/docker-debian-artifacts" target="_blank" rel="noopener">docker-debian-artifacts</a> 这个 repo 上找到，根据不同处理器 arch 选择相应的 branch ，然后这个 branch 下的目录就对应着该发行版的不同的版本的代号。意外发现 Debian 官方是将所有 arch 和所有版本的 <code>rootfs.tar.xz</code> 都放在这个 repo 里的，以至于这个 repo 的大小接近 2.88 GiB 😨，当网盘来用的嘛🤣（：手动滑稽</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">╭─root@sg-02 ~</span><br><span class="line">╰─# git clone https://github.com/debuerreotype/docker-debian-artifacts</span><br><span class="line">Cloning into 'docker-debian-artifacts'...</span><br><span class="line">remote: Enumerating objects: 278, done.</span><br><span class="line">remote: Counting objects: 100% (278/278), done.</span><br><span class="line">Receiving objects:  67% (443/660), 1.60 GiB | 16.96 MiB/s</span><br><span class="line">remote: Total 660 (delta 130), reused 244 (delta 97), pack-reused 382</span><br><span class="line">Receiving objects: 100% (660/660), 2.88 GiB | 16.63 MiB/s, done.</span><br><span class="line">Resolving deltas: 100% (267/267), done.</span><br></pre></td></tr></table></figure><p>我们把这个 <code>rootfs.tar.xz</code> 解开就可以看到，这就是一个 Linux 的根文件系统，不同于我们使用 ISO 安装系统的那个根文件系统，这个根文件系统是经过一系列的裁剪，去掉了一些在容器运行中不必要的文件，使之更加轻量适用于容器运行的场景，整个根文件系统的大小为 125M，如果使用 slim 的<code>rootfs.tar.xz</code> 会更小一些，仅仅 76M。当然相比于仅仅几 M 的 <code>alpine</code> ，这算是够大的了。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">╭─root@sg-02 ~/docker-debian-artifacts/buster ‹dist-amd64*›</span><br><span class="line">╰─# git checkout dist-amd64</span><br><span class="line">╭─root@sg-02 ~/docker-debian-artifacts/buster ‹dist-amd64*›</span><br><span class="line">╰─# cd buster</span><br><span class="line">╭─root@sg-02 ~/docker-debian-artifacts/buster ‹dist-amd64*›</span><br><span class="line">╰─# mkdir rootfs</span><br><span class="line">╭─root@sg-02 ~/docker-debian-artifacts/buster ‹dist-amd64*›</span><br><span class="line">╰─# tar -xvf rootfs.tar.xz -C !$</span><br><span class="line">╭─root@sg-02 ~/docker-debian-artifacts/buster ‹dist-amd64*›</span><br><span class="line">╰─# ls rootfs/</span><br><span class="line">bin  boot  dev  etc  home  lib  lib64  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var</span><br><span class="line">╭─root@sg-02 ~/docker-debian-artifacts/buster ‹dist-amd64*›</span><br><span class="line">╰─# du -sh rootfs</span><br><span class="line">125M    rootfs</span><br><span class="line">╭─root@sg-02 ~/docker-debian-artifacts/buster ‹dist-amd64*›</span><br><span class="line">╰─# du -sh slim/rootfs</span><br><span class="line">76M     slim/rootfs</span><br></pre></td></tr></table></figure><p>想要自己构建一个 <code>debian:buster</code> 基础镜像其实很简单，就像下面这样一把梭操作下来就行😂：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/debuerreotype/docker-debian-artifacts debian</span><br><span class="line">cd !$</span><br><span class="line">git checkout dist-amd64</span><br><span class="line">cd buster</span><br><span class="line">docker build -t debian:buster .</span><br></pre></td></tr></table></figure><p>下面就是构建 Debian 基础镜像的过程，正如 Dockerfile 中的那样，最终只产生了一层镜像。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">docker build -t debian:buster .</span><br><span class="line">Sending build context to Docker daemon  30.12MB</span><br><span class="line">Step 1/3 : FROM scratch</span><br><span class="line"><span class="meta"> ---&gt;</span></span><br><span class="line">Step 2/3 : ADD rootfs.tar.xz /</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> 1756d6a585ae</span></span><br><span class="line">Step 3/3 : CMD ["bash"]</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> Running <span class="keyword">in</span> c86a8b6deb3d</span></span><br><span class="line">Removing intermediate container c86a8b6deb3d</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> 04948daa3c2e</span></span><br><span class="line">Successfully built 04948daa3c2e</span><br><span class="line">Successfully tagged debian:buster</span><br></pre></td></tr></table></figure><h2 id="镜像是怎样存放的-（一）本地存储-🙄"><a href="#镜像是怎样存放的-（一）本地存储-🙄" class="headerlink" title="镜像是怎样存放的 （一）本地存储 🙄"></a>镜像是怎样存放的 （一）本地存储 🙄</h2><p>当我们构建完一个镜像之后，镜像就存储在了我们 docker 本地存储目录，默认情况下为 <code>/var/lib/docker</code> ，下面就探寻一下镜像是以什么样的目录结构存放的。在开始 hack 之前我们先统一一下环境信息，我使用的机器是 Ubuntu 1804，<code>docker info</code> 信息如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">╭─root@sg-02</span> <span class="string">/var/lib/docker</span></span><br><span class="line"><span class="string">╰─#</span> <span class="string">docker</span> <span class="string">info</span></span><br><span class="line"><span class="attr">Client:</span></span><br><span class="line"> <span class="attr">Debug Mode:</span> <span class="literal">false</span></span><br><span class="line"> <span class="attr">Plugins:</span></span><br><span class="line">  <span class="attr">buildx:</span> <span class="string">Build</span> <span class="string">with</span> <span class="string">BuildKit</span> <span class="string">(Docker</span> <span class="string">Inc.,</span> <span class="string">v0.3.1-tp-docker)</span></span><br><span class="line">  <span class="attr">app:</span> <span class="string">Docker</span> <span class="string">Application</span> <span class="string">(Docker</span> <span class="string">Inc.,</span> <span class="string">v0.8.0)</span></span><br><span class="line"><span class="attr">Server:</span></span><br><span class="line"> <span class="attr">Containers:</span> <span class="number">0</span></span><br><span class="line">  <span class="attr">Running:</span> <span class="number">0</span></span><br><span class="line">  <span class="attr">Paused:</span> <span class="number">0</span></span><br><span class="line">  <span class="attr">Stopped:</span> <span class="number">0</span></span><br><span class="line"> <span class="attr">Images:</span> <span class="number">2</span></span><br><span class="line"> <span class="attr">Server Version:</span> <span class="number">19.03</span><span class="number">.5</span></span><br><span class="line"> <span class="attr">Storage Driver:</span> <span class="string">overlay2</span></span><br><span class="line">  <span class="attr">Backing Filesystem:</span> <span class="string">extfs</span></span><br><span class="line">  <span class="attr">Supports d_type:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">Native Overlay Diff:</span> <span class="literal">true</span></span><br><span class="line"> <span class="attr">Logging Driver:</span> <span class="string">json-file</span></span><br><span class="line"> <span class="attr">Cgroup Driver:</span> <span class="string">cgroupfs</span></span><br><span class="line"> <span class="attr">Plugins:</span></span><br><span class="line">  <span class="attr">Volume:</span> <span class="string">local</span></span><br><span class="line">  <span class="attr">Network:</span> <span class="string">bridge</span> <span class="string">host</span> <span class="string">ipvlan</span> <span class="string">macvlan</span> <span class="literal">null</span> <span class="string">overlay</span></span><br><span class="line">  <span class="attr">Log:</span> <span class="string">awslogs</span> <span class="string">fluentd</span> <span class="string">gcplogs</span> <span class="string">gelf</span> <span class="string">journald</span> <span class="string">json-file</span> <span class="string">local</span> <span class="string">logentries</span> <span class="string">splunk</span> <span class="string">syslog</span></span><br><span class="line"> <span class="attr">Swarm:</span> <span class="string">inactive</span></span><br><span class="line"> <span class="attr">Runtimes:</span> <span class="string">runc</span></span><br><span class="line"> <span class="attr">Default Runtime:</span> <span class="string">runc</span></span><br><span class="line"> <span class="attr">Init Binary:</span> <span class="string">docker-init</span></span><br><span class="line"> <span class="attr">containerd version:</span> <span class="string">b34a5c8af56e510852c35414db4c1f4fa6172339</span></span><br><span class="line"> <span class="attr">runc version:</span> <span class="string">3e425f80a8c931f88e6d94a8c831b9d5aa481657</span></span><br><span class="line"> <span class="attr">init version:</span> <span class="string">fec3683</span></span><br><span class="line"> <span class="attr">Security Options:</span></span><br><span class="line">  <span class="string">apparmor</span></span><br><span class="line">  <span class="string">seccomp</span></span><br><span class="line">   <span class="attr">Profile:</span> <span class="string">default</span></span><br><span class="line"> <span class="attr">Kernel Version:</span> <span class="number">4.15</span><span class="number">.0</span><span class="number">-1052</span><span class="string">-aws</span></span><br><span class="line"> <span class="attr">Operating System:</span> <span class="string">Ubuntu</span> <span class="number">18.04</span><span class="number">.1</span> <span class="string">LTS</span></span><br><span class="line"> <span class="attr">OSType:</span> <span class="string">linux</span></span><br><span class="line"> <span class="attr">Architecture:</span> <span class="string">x86_64</span></span><br><span class="line"> <span class="attr">CPUs:</span> <span class="number">1</span></span><br><span class="line"> <span class="attr">Total Memory:</span> <span class="number">983.</span><span class="string">9MiB</span></span><br><span class="line"> <span class="attr">Name:</span> <span class="string">sg-02</span></span><br><span class="line"> <span class="attr">ID:</span> <span class="string">B7J5:Y7ZM:Y477:7AS6:WMYI:6NLV:YOMA:W32Y:H4NZ:UQVD:XHDX:Y5EF</span></span><br><span class="line"> <span class="attr">Docker Root Dir:</span> <span class="string">/opt/docker</span></span><br><span class="line"> <span class="attr">Debug Mode:</span> <span class="literal">false</span></span><br><span class="line"> <span class="attr">Username:</span> <span class="string">webpsh</span></span><br><span class="line"> <span class="attr">Registry:</span> <span class="string">https://index.docker.io/v1/</span></span><br><span class="line"> <span class="attr">Labels:</span></span><br><span class="line"> <span class="attr">Experimental:</span> <span class="literal">false</span></span><br><span class="line"> <span class="attr">Insecure Registries:</span></span><br><span class="line">  <span class="number">127.0</span><span class="number">.0</span><span class="number">.0</span><span class="string">/8</span></span><br><span class="line"> <span class="attr">Registry Mirrors:</span></span><br><span class="line">  <span class="string">https://registry.k8s.li/</span></span><br><span class="line"> <span class="attr">Live Restore Enabled:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><p>为了方便分析，我将其他的 docker image 全部清空掉，只保留 <code>debian:v1</code> 和 <code>debian:v2</code> 这两个镜像，这两个镜像足够帮助我们理解容器镜像是如何存放的，镜像多了多话分析下面存储目录的时候可能不太方便（＞﹏＜），这两个镜像是我们之前使用 Debian 的 <code>rootfs.tar.xz</code> 构建出来的基础镜像。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">╭─root@sg-02 /var/lib/docker</span><br><span class="line">╰─# docker images</span><br><span class="line">REPOSITORY       TAG         IMAGE ID            CREATED             SIZE</span><br><span class="line">debian           v2          e6e782a57a51        22 hours ago        69.2MB</span><br><span class="line">debian           v1          cfba37fd24f8        22 hours ago        69.2MB</span><br></pre></td></tr></table></figure><h3 id="docker-var-lib-docker"><a href="#docker-var-lib-docker" class="headerlink" title="docker (/var/lib/docker)"></a>docker (/var/lib/docker)</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">╭─root@sg-02 /var/lib/docker</span><br><span class="line">╰─# tree -d -L 1</span><br><span class="line">.</span><br><span class="line">├── builder</span><br><span class="line">├── buildkit</span><br><span class="line">├── containers</span><br><span class="line">├── image</span><br><span class="line">├── network</span><br><span class="line">├── overlay2</span><br><span class="line">├── plugins</span><br><span class="line">├── runtimes</span><br><span class="line">├── swarm</span><br><span class="line">├── tmp</span><br><span class="line">├── trust</span><br><span class="line">└── volumes</span><br><span class="line"></span><br><span class="line">12 directories</span><br></pre></td></tr></table></figure><p>根据目录的名字我们可以大致推断出关于容器镜像的存储，我们只关心 image 和 overlay2 这两个文件夹即可，容器的元数据存放在 image 目录下，容器的 layer 数据则存放在 overlay2 目录下。</p><h3 id="var-lib-docker-image-目录结构"><a href="#var-lib-docker-image-目录结构" class="headerlink" title="/var/lib/docker/image 目录结构"></a>/var/lib/docker/image 目录结构</h3><p>overlay2 代表着本地 docker 存储使用的是 overlay2 该存储驱动，目前最新版本的 docker 默认优先采用 <strong>overlay2</strong> 作为存储驱动，对于已支持该驱动的 Linux 发行版，不需要任何进行任何额外的配置，可使用 lsmod 命令查看当前系统内核是否支持 overlay2 。</p><p>另外值得一提的是<code>devicemapper</code> 存储驱动已经在 docker 18.09 版本中被废弃，docker 官方推荐使用 <code>overlay2</code> 替代<code>devicemapper</code>。（之前我老东家用的 docker 1.13 版本，<code>devicemapper</code>的存储驱动在生产环境翻过车😂。所以呢，都 2020 年了，当你使用 baidu 这种垃圾搜素引擎去搜索 “CentOS 安装 docker” 时它会给你一堆垃圾的教程，叫你去安装 <code>device-mapper-persistent-data lvm2</code>，对于这种抄来抄去的博客平台，离得越远越好。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">image</span><br><span class="line">└── overlay2</span><br><span class="line">    ├── distribution</span><br><span class="line">    │   ├── diffid-by-digest</span><br><span class="line">    │   │   └── sha256</span><br><span class="line">    │   │       ├── 039b991354af4dcbc534338f687e27643c717bb57e11b87c2e81d50bdd0b2376</span><br><span class="line">    │   │       ├── 09a4142c5c9dde2fbf35e7a6e6475eba75a8c28540c375c80be7eade4b7cb438</span><br><span class="line">    │   └── v2metadata-by-diffid</span><br><span class="line">    │       └── sha256</span><br><span class="line">    │           ├── 0683de2821778aa9546bf3d3e6944df779daba1582631b7ea3517bb36f9e4007</span><br><span class="line">    │           ├── 0f7493e3a35bab1679e587b41b353b041dca1e7043be230670969703f28a1d83</span><br><span class="line">    ├── imagedb</span><br><span class="line">    │   ├── content</span><br><span class="line">    │   │   └── sha256</span><br><span class="line">    │   │       ├── 708bc6af7e5e539bdb59707bbf1053cc2166622f5e1b17666f0ba5829ca6aaea</span><br><span class="line">    │   │       └── f70734b6a266dcb5f44c383274821207885b549b75c8e119404917a61335981a</span><br><span class="line">    │   └── metadata</span><br><span class="line">    │       └── sha256</span><br><span class="line">    ├── layerdb</span><br><span class="line">    │   ├── mounts</span><br><span class="line">    │   ├── sha256</span><br><span class="line">    │   │   ├── b9835d6a62886d4e85b65abb120c0ea44ff1b3d116d7a707620785d4664d8c1a</span><br><span class="line">    │   │   │   ├── cache-id</span><br><span class="line">    │   │   │   ├── diff</span><br><span class="line">    │   │   │   ├── parent</span><br><span class="line">    │   │   │   ├── size</span><br><span class="line">    │   │   │   └── tar-split.json.gz</span><br><span class="line">    │   │   └── d9b567b77bcdb9d8944d3654ea9bb5f6f4f7c4d07a264b2e40b1bb09af171dd3</span><br><span class="line">    │   │       ├── cache-id</span><br><span class="line">    │   │       ├── diff</span><br><span class="line">    │   │       ├── parent</span><br><span class="line">    │   │       ├── size</span><br><span class="line">    │   │       └── tar-split.json.gz</span><br><span class="line">    │   └── tmp</span><br><span class="line">    └── repositories.json</span><br><span class="line">21 directories, 119 files</span><br></pre></td></tr></table></figure><ul><li><code>repositories.json</code></li></ul><p>repositories.json 就是存储镜像元数据信息，主要是 image name 和 image id 的对应，digest 和 image id 的对应。当 pull 完一个镜像的时候 docker 会更新这个文件。当我们 docker run 一个容器的时候也用到这个文件去索引本地是否存在该镜像，没有镜像的话就自动去 pull 这个镜像。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">╭─root@sg-02 /var/lib/docker/image/overlay2</span><br><span class="line">╰─# jq "." repositories.json</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"Repositories"</span>: &#123;</span><br><span class="line">    <span class="attr">"debian"</span>: &#123;</span><br><span class="line">      <span class="attr">"debian:v1"</span>: <span class="string">"sha256:cfba37fd24f80f59e5d7c1f7735cae7a383e887d8cff7e2762fdd78c0d73568d"</span>,</span><br><span class="line">      <span class="attr">"debian:v2"</span>: <span class="string">"sha256:e6e782a57a51d01168907938beb5cd5af24fcb7ebed8f0b32c203137ace6d3df"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"localhost:5000/library/debian"</span>: &#123;</span><br><span class="line">      <span class="attr">"localhost:5000/library/debian:v1"</span>: <span class="string">"sha256:cfba37fd24f80f59e5d7c1f7735cae7a383e887d8cff7e2762fdd78c0d73568d"</span>,</span><br><span class="line">      <span class="attr">"localhost:5000/library/debian:v2"</span>: <span class="string">"sha256:e6e782a57a51d01168907938beb5cd5af24fcb7ebed8f0b32c203137ace6d3df"</span>,</span><br><span class="line">      <span class="attr">"localhost:5000/library/debian@sha256:b9caca385021f231e15aee34929eac332c49402372a79808d07ee66866792239"</span>: <span class="string">"sha256:cfba37fd24f80f59e5d7c1f7735cae7a383e887d8cff7e2762fdd78c0d73568d"</span>,</span><br><span class="line">      <span class="attr">"localhost:5000/library/debian@sha256:c805f078bb47c575e9602b09af7568eb27fd1c92073199acba68c187bc5bcf11"</span>: <span class="string">"sha256:e6e782a57a51d01168907938beb5cd5af24fcb7ebed8f0b32c203137ace6d3df"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"registry"</span>: &#123;</span><br><span class="line">      <span class="attr">"registry:latest"</span>: <span class="string">"sha256:708bc6af7e5e539bdb59707bbf1053cc2166622f5e1b17666f0ba5829ca6aaea"</span>,</span><br><span class="line">      <span class="attr">"registry@sha256:7d081088e4bfd632a88e3f3bcd9e007ef44a796fddfe3261407a3f9f04abe1e7"</span>: <span class="string">"sha256:708bc6af7e5e539bdb59707bbf1053cc2166622f5e1b17666f0ba5829ca6aaea"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="var-lib-docker-overlay2"><a href="#var-lib-docker-overlay2" class="headerlink" title="/var/lib/docker/overlay2"></a>/var/lib/docker/overlay2</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">overlay2</span><br><span class="line">├── 259cf6934509a674b1158f0a6c90c60c133fd11189f98945c7c3a524784509ff</span><br><span class="line">│   └── diff</span><br><span class="line">│       ├── bin</span><br><span class="line">│       ├── dev</span><br><span class="line">│       ├── etc</span><br><span class="line">│       ├── home</span><br><span class="line">│       ├── lib</span><br><span class="line">│       ├── media</span><br><span class="line">│       ├── mnt</span><br><span class="line">│       ├── opt</span><br><span class="line">│       ├── proc</span><br><span class="line">│       ├── root</span><br><span class="line">│       ├── run</span><br><span class="line">│       ├── sbin</span><br><span class="line">│       ├── srv</span><br><span class="line">│       ├── sys</span><br><span class="line">│       ├── tmp</span><br><span class="line">│       ├── usr</span><br><span class="line">│       └── var</span><br><span class="line">├── 27f9e9b74a88a269121b4e77330a665d6cca4719cb9a58bfc96a2b88a07af805</span><br><span class="line">│   ├── diff</span><br><span class="line">│   └── work</span><br><span class="line">├── a0df3cc902cfbdee180e8bfa399d946f9022529d12dba3bc0b13fb7534120015</span><br><span class="line">│   ├── diff</span><br><span class="line">│   │   └── bin</span><br><span class="line">│   └── work</span><br><span class="line">├── b2fbebb39522cb6f1f5ecbc22b7bec5e9bc6ecc25ac942d9e26f8f94a028baec</span><br><span class="line">│   ├── diff</span><br><span class="line">│   │   ├── etc</span><br><span class="line">│   │   ├── lib</span><br><span class="line">│   │   ├── usr</span><br><span class="line">│   │   └── var</span><br><span class="line">│   └── work</span><br><span class="line">├── be8c12f63bebacb3d7d78a09990dce2a5837d86643f674a8fd80e187d8877db9</span><br><span class="line">│   ├── diff</span><br><span class="line">│   │   └── etc</span><br><span class="line">│   └── work</span><br><span class="line">├── e8f6e78aa1afeb96039c56f652bb6cd4bbd3daad172324c2172bad9b6c0a968d</span><br><span class="line">│   └── diff</span><br><span class="line">│       ├── bin</span><br><span class="line">│       ├── dev</span><br><span class="line">│       ├── etc</span><br><span class="line">│       ├── home</span><br><span class="line">│       ├── lib</span><br><span class="line">│       ├── media</span><br><span class="line">│       ├── mnt</span><br><span class="line">│       ├── proc</span><br><span class="line">│       ├── root</span><br><span class="line">│       ├── run</span><br><span class="line">│       ├── sbin</span><br><span class="line">│       ├── srv</span><br><span class="line">│       ├── sys</span><br><span class="line">│       ├── tmp</span><br><span class="line">│       ├── usr</span><br><span class="line">│       └── var</span><br><span class="line">└── l</span><br><span class="line">    ├── 526XCHXRJMZXRIHN4YWJH2QLPY -&gt; ../b2fbebb39522cb6f1f5ecbc22b7bec5e9bc6ecc25ac942d9e26f8f94a028baec/diff</span><br><span class="line">    ├── 5RZOXYR35NSGAWTI36CVUIRW7U -&gt; ../be8c12f63bebacb3d7d78a09990dce2a5837d86643f674a8fd80e187d8877db9/diff</span><br><span class="line">    ├── LBWRL4ZXGBWOTN5JDCDZVNOY7H -&gt; ../a0df3cc902cfbdee180e8bfa399d946f9022529d12dba3bc0b13fb7534120015/diff</span><br><span class="line">    ├── MYRYBGZRI4I76MJWQHN7VLZXLW -&gt; ../27f9e9b74a88a269121b4e77330a665d6cca4719cb9a58bfc96a2b88a07af805/diff</span><br><span class="line">    ├── PCIS4FYUJP4X2D4RWB7ETFL6K2 -&gt; ../259cf6934509a674b1158f0a6c90c60c133fd11189f98945c7c3a524784509ff/diff</span><br><span class="line">    └── XK5IA4BWQ2CIS667J3SXPXGQK5 -&gt; ../e8f6e78aa1afeb96039c56f652bb6cd4bbd3daad172324c2172bad9b6c0a968d/diff</span><br></pre></td></tr></table></figure><p>在 <code>/var/lib/docker/overlay2</code> 目录下，我们可以看到，镜像 layer 的内容都存放在一个 <code>diff</code> 的文件夹下，diff 的上级目录就是以镜像 layer 的 digest 为名的目录。其中还有个 <code>l</code> 文件夹，下面有一坨坨的硬链接文件指向上级目录的 layer 目录。这个 l 其实就是 link 的缩写，l 下的文件都是一些比 digest 文件夹名短一些的，方面不至于 mount 的参数过长。</p><h2 id="镜像是怎么搬运的🤣"><a href="#镜像是怎么搬运的🤣" class="headerlink" title="镜像是怎么搬运的🤣"></a>镜像是怎么搬运的🤣</h2><p>当我们在本地构建完成一个镜像之后，如何传递给他人呢？这就涉及到镜像是怎么搬运的一些知识，搬运镜像就像我们在 GitHub 上搬运代码一样，docker 也有类似于 git clone 和 git push 的搬运方式。docker push 就和我们使用 git push 一样，将本地的镜像推送到一个称之为 registry 的镜像仓库，这个 registry 镜像仓库就像 GitHub 用来存放公共/私有的镜像，一个中心化的镜像仓库方便大家来进行交流和搬运镜像。docker pull 就像我们使用 git pull 一样，将远程的镜像拉拉取本地。</p><h3 id="docker-pull"><a href="#docker-pull" class="headerlink" title="docker pull"></a>docker pull</h3><p>理解 docker pull 一个镜像的流程最好的办法是查看 OCI registry 规范中的这段文档 <a href="https://github.com/opencontainers/distribution-spec/blob/master/spec.md#pulling-an-image" target="_blank" rel="noopener">pulling-an-image</a> ，在这里我结合大佬的博客简单梳理一下 pull 一个镜像的大致流程。下面这张图是从 <a href="https://github.com/helios741/myblog/blob/new/learn_go/src/2019/20191206_docker_disk_storage/README.md" target="_blank" rel="noopener">浅谈docker中镜像和容器在本地的存储)</a> 借来的😂</p><p><img src="https://user-images.githubusercontent.com/12036324/70367494-646d2380-18db-11ea-992a-d2bca4cbfeb0.png" alt="image"></p><p>docker pull 就和我们使用 git clone 一样效果，将远程的镜像仓库拉取到本地来给容器运行时使用，结合上图大致的流程如下：</p><ul><li>第一步应该是使用<code>~/.docker/config.json</code> 中的 auth 认证信息在 registry 那里进行鉴权授权，拿到一个 token，后面的所有的 HTTP 请求中都要包含着该 token 才能有权限进行操作。</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">╭─root@sg-02 /home/ubuntu</span><br><span class="line">╰─# cat ~/.docker/config.json</span><br><span class="line">&#123;</span><br><span class="line">        <span class="attr">"auths"</span>: &#123;</span><br><span class="line">                <span class="attr">"https://registry.k8s.li/v2/"</span>: &#123;</span><br><span class="line">                        <span class="attr">"auth"</span>: <span class="string">"d2VicH855828WM7bSVsslJFpmQE43Sw=="</span></span><br><span class="line">                &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"HttpHeaders"</span>: &#123;</span><br><span class="line">                <span class="attr">"User-Agent"</span>: <span class="string">"Docker-Client/19.03.5 (linux)"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"experimental"</span>: <span class="string">"enabled"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>dockerd 守护进程解析 docker 客户端参数，由镜像名 + tag 向 registry 请求 Manifest 文件，HTTP 请求为<code>GET /v2/&lt;name&gt;/manifests/&lt;reference&gt;</code>。registry 中一个镜像有多个 tag 或者多个处理器体系架构的镜像，则根据这个 tag 来返回给客户端与之对应的  manifest 文件；</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">GET /v2/&lt;name&gt;/manifests/&lt;reference&gt;</span><br><span class="line">&#123;</span><br><span class="line">   <span class="attr">"annotations"</span>: &#123;</span><br><span class="line">      <span class="attr">"com.example.key1"</span>: <span class="string">"value1"</span>,</span><br><span class="line">      <span class="attr">"com.example.key2"</span>: <span class="string">"value2"</span></span><br><span class="line">   &#125;,</span><br><span class="line">   <span class="attr">"config"</span>: &#123;</span><br><span class="line">      <span class="attr">"digest"</span>: <span class="string">"sha256:6f4e69a5ff18d92e7315e3ee31c62165ebf25bfa05cad05c0d09d8f412dae401"</span>,</span><br><span class="line">      <span class="attr">"mediaType"</span>: <span class="string">"application/vnd.oci.image.config.v1+json"</span>,</span><br><span class="line">      <span class="attr">"size"</span>: <span class="number">452</span></span><br><span class="line">   &#125;,</span><br><span class="line">   <span class="attr">"layers"</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">         <span class="attr">"digest"</span>: <span class="string">"sha256:6f4e69a5ff18d92e7315e3ee31c62165ebf25bfa05cad05c0d09d8f412dae401"</span>,</span><br><span class="line">         <span class="attr">"mediaType"</span>: <span class="string">"application/vnd.oci.image.layer.v1.tar+gzip"</span>,</span><br><span class="line">         <span class="attr">"size"</span>: <span class="number">78343</span></span><br><span class="line">      &#125;</span><br><span class="line">   ],</span><br><span class="line">   <span class="attr">"schemaVersion"</span>: <span class="number">2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>docker 守护进程解析这个 Manifest 文件获取镜像的 layer 的信息；</p></li><li><p>dockerd 守护进程并行下载各 layer ，HTTP 请求为<code>GET /v2/&lt;name&gt;/blobs/&lt;digest&gt;</code>。 </p></li><li><p>dockerd 起一个单独的进程 <code>docker-untar</code> 来 gzip 解压缩已经下载完成的 layer 文件；对于有些比较大的镜像（比如几十 GB 的镜像），往往镜像的 layer 已经下载完成了，但还没有解压完😂。</p></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-untar /var/lib/docker/overlay2/a076db6567c7306f3cdab6040cd7d083ef6a39d125171353eedbb8bde7f203b4/diff</span><br></pre></td></tr></table></figure><ul><li><p>验证 image config 中的 RootFS.DiffIDs 是否与下载（解压后）hash 相同；</p></li><li><p>解析 Manifest 获取镜像 Configuration，验证镜像是否正确。</p></li></ul><h3 id="docker-push"><a href="#docker-push" class="headerlink" title="docker push"></a>docker push</h3><p>push 推送一个镜像到远程的 registry 流程恰好和 pull 拉取镜像到本地的流程相反。我们 pull 一个镜像的时候往往需要先获取包含着镜像 layer 信息的 Manifest 文件，然后根据这个文件中的 layer 信息取 pull 相应的 layer。push 一个镜像，需要先将镜像的各个 layer 推送到 registry ，当所有的镜像 layer 上传完毕之后最后再 push Image Manifest 到 registry。大体的流程如下：</p><blockquote><p>  All layer uploads use two steps to manage the upload process. The first step starts the upload in the registry service, returning a url to carry out the second step. The second step uses the upload url to transfer the actual data. Uploads are started with a POST request which returns a url that can be used to push data and check upload status.</p></blockquote><ul><li><p>第一步和 pull 一个镜像一样也是进行鉴权授权，拿到一个 token；</p></li><li><p>向 registry 发送 <code>POST /v2/&lt;name&gt;/blobs/uploads/</code>请求，registry 返回一个上传镜像 layer 时要应到的 URL；</p></li><li><p>客户端通过 <code>HEAD /v2/&lt;name&gt;/blobs/&lt;digest&gt;</code> 请求检查 registry 中是否已经存在镜像的 layer。</p></li><li><p>客户端通过URL 使用 POST 方法来实时上传 layer 数据，上传镜像 layer 分为 <code>Monolithic Upload</code> （整体上传）和<code>Chunked Upload</code>（分块上传）两种方式。</p><ul><li>Monolithic Upload </li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">PUT /v2/&lt;name&gt;/blobs/uploads/&lt;session_id&gt;?digest=&lt;digest&gt;</span><br><span class="line"><span class="attribute">Content-Length</span>: &lt;size of layer&gt;</span><br><span class="line"><span class="attribute">Content-Type</span>: application/octet-stream</span><br><span class="line"></span><br><span class="line">&lt;Layer Binary Data&gt;</span><br></pre></td></tr></table></figure><ul><li>Chunked Upload</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">PATCH /v2/&lt;name&gt;/blobs/uploads/&lt;session_id&gt;</span><br><span class="line"><span class="attribute">Content-Length</span>: &lt;size of chunk&gt;</span><br><span class="line"><span class="attribute">Content-Range</span>: &lt;start of range&gt;-&lt;end of range&gt;</span><br><span class="line"><span class="attribute">Content-Type</span>: application/octet-stream</span><br><span class="line"></span><br><span class="line">&lt;Layer Chunk Binary Data&gt;</span><br></pre></td></tr></table></figure></li><li><p>镜像的 layer 上传完成之后，客户端需要向 registry 发送一个 PUT HTTP 请求告知该 layer 已经上传完毕。</p></li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">PUT /v2/&lt;name&gt;/blobs/uploads/&lt;session_id&gt;?digest=&lt;digest&gt;</span><br><span class="line"><span class="attribute">Content-Length</span>: &lt;size of chunk&gt;</span><br><span class="line"><span class="attribute">Content-Range</span>: &lt;start of range&gt;-&lt;end of range&gt;</span><br><span class="line"><span class="attribute">Content-Type</span>: application/octet-stream</span><br><span class="line"></span><br><span class="line">&lt;Last Layer Chunk Binary Data&gt;</span><br></pre></td></tr></table></figure><ul><li>最后当所有的 layer 上传完之后，客户端再讲 manifest 推送上去就完事儿了。</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">PUT /v2/&lt;name&gt;/manifests/&lt;reference&gt;</span><br><span class="line">Content-Type: &lt;manifest media type&gt;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">   <span class="attr">"annotations"</span>: &#123;</span><br><span class="line">      <span class="attr">"com.example.key1"</span>: <span class="string">"value1"</span>,</span><br><span class="line">      <span class="attr">"com.example.key2"</span>: <span class="string">"value2"</span></span><br><span class="line">   &#125;,</span><br><span class="line">   <span class="attr">"config"</span>: &#123;</span><br><span class="line">      <span class="attr">"digest"</span>: <span class="string">"sha256:6f4e69a5ff18d92e7315e3ee31c62165ebf25bfa05cad05c0d09d8f412dae401"</span>,</span><br><span class="line">      <span class="attr">"mediaType"</span>: <span class="string">"application/vnd.oci.image.config.v1+json"</span>,</span><br><span class="line">      <span class="attr">"size"</span>: <span class="number">452</span></span><br><span class="line">   &#125;,</span><br><span class="line">   <span class="attr">"layers"</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">         <span class="attr">"digest"</span>: <span class="string">"sha256:6f4e69a5ff18d92e7315e3ee31c62165ebf25bfa05cad05c0d09d8f412dae401"</span>,</span><br><span class="line">         <span class="attr">"mediaType"</span>: <span class="string">"application/vnd.oci.image.layer.v1.tar+gzip"</span>,</span><br><span class="line">         <span class="attr">"size"</span>: <span class="number">78343</span></span><br><span class="line">      &#125;</span><br><span class="line">   ],</span><br><span class="line">   <span class="attr">"schemaVersion"</span>: <span class="number">2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Python-docker-drag"><a href="#Python-docker-drag" class="headerlink" title="Python docker-drag"></a>Python <a href="https://github.com/NotGlop/docker-drag" target="_blank" rel="noopener">docker-drag</a></h3><p>这是一个很简单粗暴的 Python 脚本，使用 request 库请求 registry API 来从镜像仓库中拉取镜像，并保存为一个 tar 包，拉完之后使用 docker load 加载一下就能食用啦。该 python 脚本简单到去掉空行和注释不到 200 行，如果把这个脚本源码读一遍的话就能大概知道 docker pull 和 skopeo copy 的一些原理，他们都是去调用 registry 的 API ，所以还是推荐去读一下这个它的源码。</p><p>食用起来也很简单直接 <code>python3 docker_pull.py [image name]</code>，貌似只能拉取 docker.io 上的镜像。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">╭─root@sg-02 /home/ubuntu</span><br><span class="line">╰─# wget https://raw.githubusercontent.com/NotGlop/docker-drag/master/docker_pull.py</span><br><span class="line">╭─root@sg-02 /home/ubuntu</span><br><span class="line">╰─# python3 docker_pull.py nginx</span><br><span class="line">Creating image structure in: tmp_nginx_latest</span><br><span class="line">afb6ec6fdc1c: Pull complete [27098756]</span><br><span class="line">dd3ac8106a0b: Pull complete [26210578]                                       ]</span><br><span class="line">8de28bdda69b: Pull complete [538]</span><br><span class="line">a2c431ac2669: Pull complete [900]</span><br><span class="line">e070d03fd1b5: Pull complete [669]</span><br><span class="line">Docker image pulled: library_nginx.tar</span><br><span class="line">╭─root@sg-02 /home/ubuntu</span><br><span class="line">╰─# docker load -i library_nginx.tar</span><br><span class="line">ffc9b21953f4: Loading layer [==================================================&gt;]  72.49MB/72.49MB</span><br><span class="line">d9c0b16c8d5b: Loading layer [==================================================&gt;]  63.81MB/63.81MB</span><br><span class="line">8c7fd6263c1f: Loading layer [==================================================&gt;]  3.072kB/3.072kB</span><br><span class="line">077ae58ac205: Loading layer [==================================================&gt;]  4.096kB/4.096kB</span><br><span class="line">787328500ad5: Loading layer [==================================================&gt;]  3.584kB/3.584kB</span><br><span class="line">Loaded image: nginx:latest</span><br></pre></td></tr></table></figure><h3 id="skopeo"><a href="#skopeo" class="headerlink" title="skopeo"></a>skopeo</h3><p>这个工具是红帽子家的，是 Podman、Skopeo 和 Buildah （简称 PSB ）下一代容器新架构中的一员，不过木子觉着 Podman 想要取代 docker 和 containerd 容器运行时还有很长的路要走，虽然它符合 OCI 规范，但对于企业来讲，替换的成本并不值得他们去换到 PSB 上去。</p><p>其中的 skopeo 这个镜像搬运工具简直是个神器，尤其是在 CI/CD 流水线中搬运两个镜像仓库里的镜像简直爽的不得了。我入职新公司后做的一个工作就是优化我们的 Jenkins 流水线中同步两个镜像仓库的过程，使用 了skopeo 替代 docker 来同步两个镜像仓库中的镜像，将原来需要 2h 小时缩短到了 25min 😀。</p><p>关于这个工具的详细使用推荐大家去读一下我之前写的一篇博客 <a href="https://blog.k8s.li/skopeo.html">镜像搬运工 skopeo 初体验</a> 。在这里只讲两个木子最常用的功能。</p><h4 id="skopeo-copy"><a href="#skopeo-copy" class="headerlink" title="skopeo copy"></a>skopeo copy</h4><p>使用 skopeo copy 两个 registry 中的镜像时，skopeo 请求两个 registry API 直接 copy <code>original blob</code> 到另一个 registry ，这样免去了像 docker pull –&gt; docker tag –&gt; docker push 那样 pull 镜像对镜像进行解压缩，push 镜像进行压缩。尤其是在搬运一些较大的镜像（几GB 或者几十 GB的镜像，比如 <code>nvidia/cuda</code> ），使用 skopeo copy 的加速效果十分明显。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">DEBU[0000] Detected compression format gzip</span><br><span class="line">DEBU[0000] Using original blob without modification</span><br><span class="line"></span><br><span class="line">Getting image source signatures</span><br><span class="line">Copying blob 09a9f6a07669 done</span><br><span class="line">Copying blob f8cdeb3c6c18 done</span><br><span class="line">Copying blob 22c4d5853f25 done</span><br><span class="line">Copying blob 76abc3f50d9b done</span><br><span class="line">Copying blob 3386b7c9ccd4 done</span><br><span class="line">Copying blob b9207193f1af [==============================&gt;-------] 224.2MiB / 271.2MiB</span><br><span class="line">Copying blob 2f32d819e6ce done</span><br><span class="line">Copying blob 5dbc3047e646 done</span><br><span class="line">Copying blob f8dfcc3265c3 [==================&gt;-------------------] 437.1MiB / 864.3MiB</span><br><span class="line">Copying blob 13d3556105d1 done</span><br><span class="line">Copying blob f9b7fa6a027e [=========================&gt;------------] 84.0MiB / 124.3MiB</span><br><span class="line">Copying blob a1a0f6abe73b [====================&gt;-----------------] 417.9MiB / 749.1MiB</span><br><span class="line">Copying blob bcc9947fc8a4 done</span><br><span class="line">Copying blob 9563b2824fef done</span><br><span class="line">Copying blob a1b8faa0044b [===&gt;----------------------------------] 88.0MiB / 830.1MiB</span><br><span class="line">Copying blob 9917e218edfd [===============&gt;----------------------] 348.6MiB / 803.6MiB</span><br><span class="line">Copying blob 776b9ff2f788 done</span><br><span class="line">Copying config d0c3cfd730 done</span><br><span class="line">Writing manifest to image destination</span><br><span class="line">Storing signatures</span><br></pre></td></tr></table></figure><h4 id="skopeo-inspect"><a href="#skopeo-inspect" class="headerlink" title="skopeo inspect"></a>skopeo inspect</h4><p>用 skopeo inspect 命令可以很方方便地通过 registry 的 API 来查看镜像的 manifest 文件，以前我都是用 curl 命令的，要 token 还要加一堆参数，所以比较麻烦，所以后来就用上了  skopeo inspect😀。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">root@deploy:/root # skopeo inspect docker://index.docker.io/webpsh/webps:latest --raw</span><br><span class="line">&#123;</span><br><span class="line">   <span class="attr">"schemaVersion"</span>: <span class="number">2</span>,</span><br><span class="line">   <span class="attr">"mediaType"</span>: <span class="string">"application/vnd.docker.distribution.manifest.v2+json"</span>,</span><br><span class="line">   <span class="attr">"config"</span>: &#123;</span><br><span class="line">      <span class="attr">"mediaType"</span>: <span class="string">"application/vnd.docker.container.image.v1+json"</span>,</span><br><span class="line">      <span class="attr">"size"</span>: <span class="number">2534</span>,</span><br><span class="line">      <span class="attr">"digest"</span>: <span class="string">"sha256:30d9679b0b1ca7e56096eca0cdb7a6eedc29b63968f25156ef60dec27bc7d206"</span></span><br><span class="line">   &#125;,</span><br><span class="line">   <span class="attr">"layers"</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">         <span class="attr">"mediaType"</span>: <span class="string">"application/vnd.docker.image.rootfs.diff.tar.gzip"</span>,</span><br><span class="line">         <span class="attr">"size"</span>: <span class="number">2813316</span>,</span><br><span class="line">         <span class="attr">"digest"</span>: <span class="string">"sha256:cbdbe7a5bc2a134ca8ec91be58565ec07d037386d1f1d8385412d224deafca08"</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">         <span class="attr">"mediaType"</span>: <span class="string">"application/vnd.docker.image.rootfs.diff.tar.gzip"</span>,</span><br><span class="line">         <span class="attr">"size"</span>: <span class="number">8088920</span>,</span><br><span class="line">         <span class="attr">"digest"</span>: <span class="string">"sha256:54335262c2ed2d4155e62b45b187a1394fbb6f39e0a4a171ab8ce0c93789e6b0"</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">         <span class="attr">"mediaType"</span>: <span class="string">"application/vnd.docker.image.rootfs.diff.tar.gzip"</span>,</span><br><span class="line">         <span class="attr">"size"</span>: <span class="number">262</span>,</span><br><span class="line">         <span class="attr">"digest"</span>: <span class="string">"sha256:31555b34852eddc7c01f26fa9c0e5e577e36b4e7ccf1b10bec977eb4593a376b"</span></span><br><span class="line">      &#125;</span><br><span class="line">   ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="镜像是怎么存放的-二-registry-存储🙄"><a href="#镜像是怎么存放的-二-registry-存储🙄" class="headerlink" title="镜像是怎么存放的 (二) registry 存储🙄"></a>镜像是怎么存放的 (二) registry 存储🙄</h2><p>文章的开头我们提到过 OCI 规范中的镜像仓库规范 <a href="https://github.com/opencontainers/distribution-spec" target="_blank" rel="noopener">distribution-spec</a>，该规范就定义着容器镜像如何存储在远端（即 registry）上。我们可以把 registry 看作镜像的仓库，使用该规范可以帮助我们把这些镜像按照约定俗成的格式来存放，目前实现该规范的 registry 就 docker 家的 registry 使用的多一些。其他的 registry 比如 harbor ，quay.io 使用的也比较多。</p><h3 id="registry-registry-docker-v2"><a href="#registry-registry-docker-v2" class="headerlink" title="registry (/registry/docker/v2)"></a>registry (/registry/docker/v2)</h3><p>想要分析一下镜像是如何存放在 registry 上的，我们在本地使用 docker run 来起 registry 的容器即可，我们仅仅是来分析 registry 中镜像时如何存储的，这种场景下不太适合用 harbor 这种重量级的 registry 。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">╭─root@sg-02 /home/ubuntu</span><br><span class="line">╰─# docker run -d --name registry -p 5000:5000 -v /var/lib/registry:/var/lib/registry registry</span><br><span class="line">335ea763a2fa4508ebf3ec6f8b11f3b620a11bdcaa0ab43176b781427e0beee6</span><br></pre></td></tr></table></figure><p>启动完 registry 容器之后我们给之前已经构建好的镜像重新打上改 registry 的 tag 方便后续 push 到 registry 上。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">╭─root@sg-02 ~/buster/slim</span><br><span class="line">╰─# docker tag debian:v1  localhost:5000/library/debian:v1</span><br><span class="line">╭─root@sg-02 ~/buster/slim</span><br><span class="line">╰─# ^v1^v2</span><br><span class="line">╭─root@sg-02 ~/buster/slim</span><br><span class="line">╰─# docker tag debian:v2  localhost:5000/library/debian:v2</span><br><span class="line">╭─root@sg-02 ~/buster/slim</span><br><span class="line">╰─# docker images</span><br><span class="line">REPOSITORY                      TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">debian                          v2                  e6e782a57a51        5 minutes ago       69.2MB</span><br><span class="line">localhost:5000/library/debian   v2                  e6e782a57a51        5 minutes ago       69.2MB</span><br><span class="line">debian                          v1                  cfba37fd24f8        9 minutes ago       69.2MB</span><br><span class="line">localhost:5000/library/debian   v1                  cfba37fd24f8        9 minutes ago       69.2MB</span><br><span class="line">╭─root@sg-02 ~/buster/slim</span><br><span class="line">╰─# docker push localhost:5000/library/debian:v1</span><br><span class="line">The push refers to repository [localhost:5000/library/debian]</span><br><span class="line">d1b85e6186f6: Pushed</span><br><span class="line">v1: digest: sha256:b9caca385021f231e15aee34929eac332c49402372a79808d07ee66866792239 size: 529</span><br><span class="line">╭─root@sg-02 ~/buster/slim</span><br><span class="line">╰─# docker push localhost:5000/library/debian:v2</span><br><span class="line">The push refers to repository [localhost:5000/library/debian]</span><br><span class="line">d1b85e6186f6: Layer already exists</span><br><span class="line">v2: digest: sha256:c805f078bb47c575e9602b09af7568eb27fd1c92073199acba68c187bc5bcf11 size: 529</span><br></pre></td></tr></table></figure><p>当我们在本地启动一个 registry 容器之后，容器内默认的存储位置为 <code>/var/lib/registry</code> ，所以我们在启动的时候加了参数 <code>-v /var/lib/registry:/var/lib/registry</code> 将本机的路径挂载到容器内。进入这里路径我们使用 tree 命令查看一下这个目录的存储结构。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">╭─root@sg-02 /var/lib/registry/docker/registry/v2</span><br><span class="line">╰─# tree -h</span><br><span class="line">.</span><br><span class="line">├── [4.0K]  blobs</span><br><span class="line">│   └── [4.0K]  sha256</span><br><span class="line">│       ├── [4.0K]  aa</span><br><span class="line">│       │   └── [4.0K]  aaae33815489895f602207ac5a583422b8a8755b3f67fc6286ca9484ba685bdb</span><br><span class="line">│       │       └── [ 26M]  data</span><br><span class="line">│       ├── [4.0K]  b9</span><br><span class="line">│       │   └── [4.0K]  b9caca385021f231e15aee34929eac332c49402372a79808d07ee66866792239</span><br><span class="line">│       │       └── [ 529]  data</span><br><span class="line">│       ├── [4.0K]  c8</span><br><span class="line">│       │   └── [4.0K]  c805f078bb47c575e9602b09af7568eb27fd1c92073199acba68c187bc5bcf11</span><br><span class="line">│       │       └── [ 529]  data</span><br><span class="line">│       ├── [4.0K]  cf</span><br><span class="line">│       │   └── [4.0K]  cfba37fd24f80f59e5d7c1f7735cae7a383e887d8cff7e2762fdd78c0d73568d</span><br><span class="line">│       │       └── [1.4K]  data</span><br><span class="line">│       └── [4.0K]  e6</span><br><span class="line">│           └── [4.0K]  e6e782a57a51d01168907938beb5cd5af24fcb7ebed8f0b32c203137ace6d3df</span><br><span class="line">│               └── [1.4K]  data</span><br><span class="line">└── [4.0K]  repositories</span><br><span class="line">    └── [4.0K]  library</span><br><span class="line">        └── [4.0K]  debian</span><br><span class="line">            ├── [4.0K]  _layers</span><br><span class="line">            │   └── [4.0K]  sha256</span><br><span class="line">            │       ├── [4.0K]  aaae33815489895f602207ac5a583422b8a8755b3f67fc6286ca9484ba685bdb</span><br><span class="line">            │       │   └── [  71]  link</span><br><span class="line">            │       ├── [4.0K]  cfba37fd24f80f59e5d7c1f7735cae7a383e887d8cff7e2762fdd78c0d73568d</span><br><span class="line">            │       │   └── [  71]  link</span><br><span class="line">            │       └── [4.0K]  e6e782a57a51d01168907938beb5cd5af24fcb7ebed8f0b32c203137ace6d3df</span><br><span class="line">            │           └── [  71]  link</span><br><span class="line">            ├── [4.0K]  _manifests</span><br><span class="line">            │   ├── [4.0K]  revisions</span><br><span class="line">            │   │   └── [4.0K]  sha256</span><br><span class="line">            │   │       ├── [4.0K]  b9caca385021f231e15aee34929eac332c49402372a79808d07ee66866792239</span><br><span class="line">            │   │       │   └── [  71]  link</span><br><span class="line">            │   │       └── [4.0K]  c805f078bb47c575e9602b09af7568eb27fd1c92073199acba68c187bc5bcf11</span><br><span class="line">            │   │           └── [  71]  link</span><br><span class="line">            │   └── [4.0K]  tags</span><br><span class="line">            │       ├── [4.0K]  v1</span><br><span class="line">            │       │   ├── [4.0K]  current</span><br><span class="line">            │       │   │   └── [  71]  link</span><br><span class="line">            │       │   └── [4.0K]  index</span><br><span class="line">            │       │       └── [4.0K]  sha256</span><br><span class="line">            │       │           └── [4.0K]  b9caca385021f231e15aee34929eac332c49402372a79808d07ee66866792239</span><br><span class="line">            │       │               └── [  71]  link</span><br><span class="line">            │       └── [4.0K]  v2</span><br><span class="line">            │           ├── [4.0K]  current</span><br><span class="line">            │           │   └── [  71]  link</span><br><span class="line">            │           └── [4.0K]  index</span><br><span class="line">            │               └── [4.0K]  sha256</span><br><span class="line">            │                   └── [4.0K]  c805f078bb47c575e9602b09af7568eb27fd1c92073199acba68c187bc5bcf11</span><br><span class="line">            │                       └── [  71]  link</span><br><span class="line">            └── [4.0K]  _uploads</span><br><span class="line"></span><br><span class="line">37 directories, 14 files</span><br></pre></td></tr></table></figure><p>树形的结构看着不太直观，木子就画了一张层级结构的图：</p><p><img src="img/registry-arch.png" alt="img"></p><h3 id="blobs-目录"><a href="#blobs-目录" class="headerlink" title="blobs 目录"></a>blobs 目录</h3><p>之前我们向 registry 种推送了两个镜像，这两个镜像的 layer 相同但不是用一个镜像，在我们之前 push image 的时候也看到了 <code>d1b85e6186f6: Layer already exists</code>。也就可以证明了，虽然两个镜像不同，但它们的 layer 在 registry 中存储的时候可能是相同的。</p><p>在 <code>blobs/sha256</code> 目录下一共有 5 个名为 data 的文件，我们可以推测一下最大的那个 <code>[ 26M]</code> 应该是镜像的 layer ，最小的 <code>[ 529]</code> 那个应该是 manifest，剩下的那个 <code>[1.4K]</code> 应该就是 image config 文件。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">╭─root@sg-02 /var/lib/registry/docker/registry/v2/blobs/sha256</span><br><span class="line">╰─# tree -h</span><br><span class="line">.</span><br><span class="line">├── [4.0K]  aa</span><br><span class="line">│   └── [4.0K]  aaae33815489895f602207ac5a583422b8a8755b3f67fc6286ca9484ba685bdb</span><br><span class="line">│       └── [ 26M]  data</span><br><span class="line">├── [4.0K]  b9</span><br><span class="line">│   └── [4.0K]  b9caca385021f231e15aee34929eac332c49402372a79808d07ee66866792239</span><br><span class="line">│       └── [ 529]  data</span><br><span class="line">├── [4.0K]  c8</span><br><span class="line">│   └── [4.0K]  c805f078bb47c575e9602b09af7568eb27fd1c92073199acba68c187bc5bcf11</span><br><span class="line">│       └── [ 529]  data</span><br><span class="line">├── [4.0K]  cf</span><br><span class="line">│   └── [4.0K]  cfba37fd24f80f59e5d7c1f7735cae7a383e887d8cff7e2762fdd78c0d73568d</span><br><span class="line">│       └── [1.4K]  data</span><br><span class="line">└── [4.0K]  e6</span><br><span class="line">    └── [4.0K]  e6e782a57a51d01168907938beb5cd5af24fcb7ebed8f0b32c203137ace6d3df</span><br><span class="line">        └── [1.4K]  data</span><br></pre></td></tr></table></figure><p>在 <code>registry</code> 的存储目录下，<code>blobs</code> 目录用来存放镜像的三种文件： layer 的真实数据，镜像的 manifest 文件，镜像的 image config 文件。这些文件都是以 <code>data</code> 为名的文件存放在于该文件 <code>sha256</code> 相对应的目录下。 使用以内容寻址的 <code>sha256</code> 散列存储方便索引文件，在 <code>blob digest</code> 目录下有一个名为 <code>data</code>的文件，对于 layer 来讲，这是个 <code>data</code> 文件的格式是 <code>vnd.docker.image.rootfs.diff.tar.gzip</code> ，我们可以使用 <code>tar -xvf</code> 命令将这个 layer 解开。当我们使用 docker pull 命令拉取镜像的时候，也是去下载这个 <code>data</code>文件，下载完成之后会有一个 <code>docker-untar</code>的进程将这个 <code>data</code>文件解开存放在<code>/var/lib/docker/overlay2/${digest}/diff</code> 目录下。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">├── [4.0K]  blobs</span><br><span class="line">│   └── [4.0K]  sha256</span><br><span class="line">│       ├── [4.0K]  aa</span><br><span class="line">│       │   └── [4.0K]  aaae33815489895f602207ac5a583422b8a8755b3f67fc6286ca9484ba685bdb</span><br><span class="line">│       │       └── [ 26M]  data</span><br></pre></td></tr></table></figure><h4 id="manifest-文件"><a href="#manifest-文件" class="headerlink" title="manifest 文件"></a>manifest 文件</h4><p>就是一个普通的 json 文件啦，记录了一个镜像所包含的 layer 信息，当我们 pull 镜像的时候会使用到这个文件。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">╭─root@sg-02 /var/lib/registry/docker/registry/v2/blobs/sha256/b9/b9caca385021f231e15aee34929eac332c49402372a79808d07ee66866792239</span><br><span class="line">╰─# cat data</span><br><span class="line">&#123;</span><br><span class="line">   <span class="attr">"schemaVersion"</span>: <span class="number">2</span>,</span><br><span class="line">   <span class="attr">"mediaType"</span>: <span class="string">"application/vnd.docker.distribution.manifest.v2+json"</span>,</span><br><span class="line">   <span class="attr">"config"</span>: &#123;</span><br><span class="line">      <span class="attr">"mediaType"</span>: <span class="string">"application/vnd.docker.container.image.v1+json"</span>,</span><br><span class="line">      <span class="attr">"size"</span>: <span class="number">1462</span>,</span><br><span class="line">      <span class="attr">"digest"</span>: <span class="string">"sha256:cfba37fd24f80f59e5d7c1f7735cae7a383e887d8cff7e2762fdd78c0d73568d"</span></span><br><span class="line">   &#125;,</span><br><span class="line">   <span class="attr">"layers"</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">         <span class="attr">"mediaType"</span>: <span class="string">"application/vnd.docker.image.rootfs.diff.tar.gzip"</span>,</span><br><span class="line">         <span class="attr">"size"</span>: <span class="number">27097859</span>,</span><br><span class="line">         <span class="attr">"digest"</span>: <span class="string">"sha256:aaae33815489895f602207ac5a583422b8a8755b3f67fc6286ca9484ba685bdb"</span></span><br><span class="line">      &#125;</span><br><span class="line">   ]</span><br><span class="line">&#125;#</span><br></pre></td></tr></table></figure><h4 id="image-config-文件"><a href="#image-config-文件" class="headerlink" title="image config 文件"></a>image config 文件</h4><p>image config 文件里并没有包含镜像的 tag 信息。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line">╭─root@sg-02 /var/lib/registry/docker/registry/v2/blobs/sha256/e6/e6e782a57a51d01168907938beb5cd5af24fcb7ebed8f0b32c203137ace6d3df</span><br><span class="line">╰─# cat data | jq "."</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"architecture"</span>: <span class="string">"amd64"</span>,</span><br><span class="line">  <span class="attr">"config"</span>: &#123;</span><br><span class="line">    <span class="attr">"Hostname"</span>: <span class="string">""</span>,</span><br><span class="line">    <span class="attr">"Domainname"</span>: <span class="string">""</span>,</span><br><span class="line">    <span class="attr">"User"</span>: <span class="string">""</span>,</span><br><span class="line">    <span class="attr">"AttachStdin"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">"AttachStdout"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">"AttachStderr"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">"Tty"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">"OpenStdin"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">"StdinOnce"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">"Env"</span>: [</span><br><span class="line">      <span class="string">"PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">"Cmd"</span>: [</span><br><span class="line">      <span class="string">"bash"</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">"Image"</span>: <span class="string">"sha256:ba8f577813c7bdf6b737f638dffbc688aa1df2ff28a826a6c46bae722977b549"</span>,</span><br><span class="line">    <span class="attr">"Volumes"</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">"WorkingDir"</span>: <span class="string">""</span>,</span><br><span class="line">    <span class="attr">"Entrypoint"</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">"OnBuild"</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">"Labels"</span>: <span class="literal">null</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"container"</span>: <span class="string">"38501d5aa48c080884f4dc6fd4b1b6590ff1607d9e7a12e1cef1d86a3fdc32df"</span>,</span><br><span class="line">  <span class="attr">"container_config"</span>: &#123;</span><br><span class="line">    <span class="attr">"Hostname"</span>: <span class="string">"38501d5aa48c"</span>,</span><br><span class="line">    <span class="attr">"Domainname"</span>: <span class="string">""</span>,</span><br><span class="line">    <span class="attr">"User"</span>: <span class="string">""</span>,</span><br><span class="line">    <span class="attr">"AttachStdin"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">"AttachStdout"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">"AttachStderr"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">"Tty"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">"OpenStdin"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">"StdinOnce"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">"Env"</span>: [</span><br><span class="line">      <span class="string">"PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">"Cmd"</span>: [</span><br><span class="line">      <span class="string">"/bin/sh"</span>,</span><br><span class="line">      <span class="string">"-c"</span>,</span><br><span class="line">      <span class="string">"#(nop) "</span>,</span><br><span class="line">      <span class="string">"CMD [\"bash\"]"</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">"Image"</span>: <span class="string">"sha256:ba8f577813c7bdf6b737f638dffbc688aa1df2ff28a826a6c46bae722977b549"</span>,</span><br><span class="line">    <span class="attr">"Volumes"</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">"WorkingDir"</span>: <span class="string">""</span>,</span><br><span class="line">    <span class="attr">"Entrypoint"</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">"OnBuild"</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">"Labels"</span>: &#123;&#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"created"</span>: <span class="string">"2020-06-07T01:59:47.348924716Z"</span>,</span><br><span class="line">  <span class="attr">"docker_version"</span>: <span class="string">"19.03.5"</span>,</span><br><span class="line">  <span class="attr">"history"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"created"</span>: <span class="string">"2020-06-07T01:59:46.877600299Z"</span>,</span><br><span class="line">      <span class="attr">"created_by"</span>: <span class="string">"/bin/sh -c #(nop) ADD file:a82014afc29e7b364ac95223b22ebafad46cc9318951a85027a49f9ce1a99461 in / "</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"created"</span>: <span class="string">"2020-06-07T01:59:47.348924716Z"</span>,</span><br><span class="line">      <span class="attr">"created_by"</span>: <span class="string">"/bin/sh -c #(nop)  CMD [\"bash\"]"</span>,</span><br><span class="line">      <span class="attr">"empty_layer"</span>: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">"os"</span>: <span class="string">"linux"</span>,</span><br><span class="line">  <span class="attr">"rootfs"</span>: &#123;</span><br><span class="line">    <span class="attr">"type"</span>: <span class="string">"layers"</span>,</span><br><span class="line">    <span class="attr">"diff_ids"</span>: [</span><br><span class="line">      <span class="string">"sha256:d1b85e6186f67d9925c622a7a6e66faa447e767f90f65ae47cdc817c629fa956"</span></span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="uploads-文件夹"><a href="#uploads-文件夹" class="headerlink" title="_uploads 文件夹"></a>_uploads 文件夹</h4><p>_uploads 文件夹是个临时的文件夹，主要用来存放 push 镜像过程中的文件数据，当镜像 <code>layer</code> 上传完成之后会清空该文件夹。其中的 <code>data</code> 文件上传完毕后会移动到 <code>blobs</code> 目录下，根据该文件的 <code>sha256</code> 值来进行散列存储到相应的目录下。</p><p>上传过程中的目录结构：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">_uploads</span><br><span class="line">├── [  53]  0d6c996e-638f-4436-b2b6-54fa7ad430d2</span><br><span class="line">│   ├── [198M]  data</span><br><span class="line">│   ├── [  20]  hashstates</span><br><span class="line">│   │   └── [  15]  sha256</span><br><span class="line">│   │       └── [ 108]  0</span><br><span class="line">│   └── [  20]  startedat</span><br><span class="line">└── [  53]  ba31818e-4217-47ef-ae46-2784c9222614</span><br><span class="line">    ├── [571M]  data</span><br><span class="line">    ├── [  20]  hashstates</span><br><span class="line">    │   └── [  15]  sha256</span><br><span class="line">    │       └── [ 108]  0</span><br><span class="line">    └── [  20]  startedat</span><br><span class="line"></span><br><span class="line">6 directories, 6 files</span><br></pre></td></tr></table></figure><ul><li>上传完镜像之后，<code>_uploads</code> 文件夹就会被清空，正常情况下这个文件夹是空的。但也有异常的时候😂，比如网络抖动导致上传意外中断，该文件夹就可能不为空。</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">_uploads</span><br><span class="line"></span><br><span class="line">0 directories, 0 files</span><br></pre></td></tr></table></figure><h4 id="manifests-文件夹"><a href="#manifests-文件夹" class="headerlink" title="_manifests 文件夹"></a>_manifests 文件夹</h4><p><code>_manifests</code> 文件夹是镜像上传完成之后由 registry 来生成的，并且该目录下的文件都是一个名为 <code>link</code>的文本文件，它的值指向 blobs 目录下与之对应的目录。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">╭─root@sg-02 /var/lib/registry/docker/registry/v2/repositories/library</span><br><span class="line">╰─# find . -type f</span><br><span class="line">./debian/_layers/sha256/aaae33815489895f602207ac5a583422b8a8755b3f67fc6286ca9484ba685bdb/link</span><br><span class="line">./debian/_layers/sha256/e6e782a57a51d01168907938beb5cd5af24fcb7ebed8f0b32c203137ace6d3df/link</span><br><span class="line">./debian/_layers/sha256/cfba37fd24f80f59e5d7c1f7735cae7a383e887d8cff7e2762fdd78c0d73568d/link</span><br><span class="line">./debian/_manifests/tags/v2/current/link</span><br><span class="line">./debian/_manifests/tags/v2/index/sha256/c805f078bb47c575e9602b09af7568eb27fd1c92073199acba68c187bc5bcf11/link</span><br><span class="line">./debian/_manifests/tags/v1/current/link</span><br><span class="line">./debian/_manifests/tags/v1/index/sha256/b9caca385021f231e15aee34929eac332c49402372a79808d07ee66866792239/link</span><br><span class="line">./debian/_manifests/revisions/sha256/b9caca385021f231e15aee34929eac332c49402372a79808d07ee66866792239/link</span><br><span class="line">./debian/_manifests/revisions/sha256/c805f078bb47c575e9602b09af7568eb27fd1c92073199acba68c187bc5bcf11/link</span><br></pre></td></tr></table></figure><p><code>_manifests</code> 文件夹下包含着镜像的 <code>tags</code> 和 <code>revisions</code> 信息，每一个镜像的每一个 tag 对应着于 tag 名相同的目录。镜像的 tag 并不存储在 image config 中，而是以目录的形式来形成镜像的 tag，这一点比较奇妙，这和我们 Dockerfile 中并不包含镜像名和 tag 一个道理？</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── [4.0K]  _layers</span><br><span class="line">│   └── [4.0K]  sha256</span><br><span class="line">│       ├── [4.0K]  aaae33815489895f602207ac5a583422b8a8755b3f67fc6286ca9484ba685bdb</span><br><span class="line">│       │   └── [  71]  link</span><br><span class="line">│       ├── [4.0K]  cfba37fd24f80f59e5d7c1f7735cae7a383e887d8cff7e2762fdd78c0d73568d</span><br><span class="line">│       │   └── [  71]  link</span><br><span class="line">│       └── [4.0K]  e6e782a57a51d01168907938beb5cd5af24fcb7ebed8f0b32c203137ace6d3df</span><br><span class="line">│           └── [  71]  link</span><br><span class="line">├── [4.0K]  _manifests</span><br><span class="line">│   ├── [4.0K]  revisions</span><br><span class="line">│   │   └── [4.0K]  sha256</span><br><span class="line">│   │       ├── [4.0K]  b9caca385021f231e15aee34929eac332c49402372a79808d07ee66866792239</span><br><span class="line">│   │       │   └── [  71]  link</span><br><span class="line">│   │       └── [4.0K]  c805f078bb47c575e9602b09af7568eb27fd1c92073199acba68c187bc5bcf11</span><br><span class="line">│   │           └── [  71]  link</span><br><span class="line">│   └── [4.0K]  tags</span><br><span class="line">│       ├── [4.0K]  v1</span><br><span class="line">│       │   ├── [4.0K]  current</span><br><span class="line">│       │   │   └── [  71]  link</span><br><span class="line">│       │   └── [4.0K]  index</span><br><span class="line">│       │       └── [4.0K]  sha256</span><br><span class="line">│       │           └── [4.0K]  b9caca385021f231e15aee34929eac332c49402372a79808d07ee66866792239</span><br><span class="line">│       │               └── [  71]  link</span><br><span class="line">│       └── [4.0K]  v2</span><br><span class="line">│           ├── [4.0K]  current</span><br><span class="line">│           │   └── [  71]  link</span><br><span class="line">│           └── [4.0K]  index</span><br><span class="line">│               └── [4.0K]  sha256</span><br><span class="line">│                   └── [4.0K]  c805f078bb47c575e9602b09af7568eb27fd1c92073199acba68c187bc5bcf11</span><br><span class="line">│                       └── [  71]  link</span><br><span class="line">└── [4.0K]  _uploads</span><br><span class="line"></span><br><span class="line">22 directories, 9 files</span><br></pre></td></tr></table></figure><h4 id="镜像的-tag"><a href="#镜像的-tag" class="headerlink" title="镜像的 tag"></a>镜像的 tag</h4><p> 每个 <code>tag</code>名目录下面有 <code>current</code> 目录和 <code>index</code> 目录， <code>current</code> 目录下的 link 文件保存了该 tag 目前的 manifest 文件的 sha256 编码，对应在 <code>blobs</code> 中的 <code>sha256</code> 目录下的 <code>data</code> 文件，而 <code>index</code> 目录则列出了该 <code>tag</code> 历史上传的所有版本的 <code>sha256</code> 编码信息。<code>_revisions</code> 目录里存放了该 <code>repository</code> 历史上上传版本的所有 sha256 编码信息。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">╭─root@sg-02 /var/lib/registry/docker/registry/v2/repositories/library/debian/_manifests/tags/v1</span><br><span class="line">╰─# cat current/link</span><br><span class="line">sha256:b9caca385021f231e15aee34929eac332c49402372a79808d07ee66866792239</span><br><span class="line">╭─root@sg-02 /var/lib/registry/docker/registry/v2/blobs/sha256</span><br><span class="line">╰─# tree -h</span><br><span class="line">.</span><br><span class="line">├── [4.0K]  aa</span><br><span class="line">│   └── [4.0K]  aaae33815489895f602207ac5a583422b8a8755b3f67fc6286ca9484ba685bdb</span><br><span class="line">│       └── [ 26M]  data</span><br><span class="line">├── [4.0K]  b9</span><br><span class="line">│   └── [4.0K]  b9caca385021f231e15aee34929eac332c49402372a79808d07ee66866792239</span><br><span class="line">│       └── [ 529]  data</span><br></pre></td></tr></table></figure><p>当我们 <code>pull</code> 镜像的时候如果不指定镜像的 <code>tag</code>名，默认就是 latest，registry 会从 HTTP 请求中解析到这个 tag 名，然后根据 tag 名目录下的 link 文件找到该镜像的 manifest 的位置返回给客户端，客户端接着去请求这个 manifest 文件，客户端根据这个 manifest 文件来 pull 相应的镜像 layer 。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">╭─root@sg-02 /var/lib/registry/docker/registry/v2/repositories/library/debian/_manifests/tags/v1</span><br><span class="line">╰─# cat  /var/lib/registry/docker/registry/v2/blobs/sha256/b9/b9caca385021f231e15aee34929eac332c49402372a79808d07ee66866792239/data</span><br><span class="line">&#123;</span><br><span class="line">   <span class="attr">"schemaVersion"</span>: <span class="number">2</span>,</span><br><span class="line">   <span class="attr">"mediaType"</span>: <span class="string">"application/vnd.docker.distribution.manifest.v2+json"</span>,</span><br><span class="line">   <span class="attr">"config"</span>: &#123;</span><br><span class="line">      <span class="attr">"mediaType"</span>: <span class="string">"application/vnd.docker.container.image.v1+json"</span>,</span><br><span class="line">      <span class="attr">"size"</span>: <span class="number">1462</span>,</span><br><span class="line">      <span class="attr">"digest"</span>: <span class="string">"sha256:cfba37fd24f80f59e5d7c1f7735cae7a383e887d8cff7e2762fdd78c0d73568d"</span></span><br><span class="line">   &#125;,</span><br><span class="line">   <span class="attr">"layers"</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">         <span class="attr">"mediaType"</span>: <span class="string">"application/vnd.docker.image.rootfs.diff.tar.gzip"</span>,</span><br><span class="line">         <span class="attr">"size"</span>: <span class="number">27097859</span>,</span><br><span class="line">         <span class="attr">"digest"</span>: <span class="string">"sha256:aaae33815489895f602207ac5a583422b8a8755b3f67fc6286ca9484ba685bdb"</span></span><br><span class="line">      &#125;</span><br><span class="line">   ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后再补充一点就是，同一个镜像在 registry 中存储的位置是相同的，具体的分析可以参考 <a href="https://supereagle.github.io/2018/04/24/docker-registry/" target="_blank" rel="noopener">镜像仓库中镜像存储的原理解析</a> 这篇博客。</p><blockquote><ul><li>通过 Registry API 获得的两个镜像仓库中相同镜像的 manifest 信息完全相同。</li><li>两个镜像仓库中相同镜像的 manifest 信息的存储路径和内容完全相同。</li><li>两个镜像仓库中相同镜像的 blob 信息的存储路径和内容完全相同。</li></ul></blockquote><p>从上面这三个结论中我们可以推断出 registry 存储目录里并不会存储与该 registry 相关的信息，比我们 push 镜像的时候需要给镜像加上 <code>localhost:5000</code> 这个前缀，这个前缀并不会存储在 registry 存储中。加入我要迁移一个很大的 registry 镜像仓库，镜像的数量在 5k 以上。最便捷的办法就是打包这个 registry 存储目录，将这个 tar 包 rsync 到另一台机器即可。需要强调一点，打包 registry 存储目录的时候不需要进行压缩，直接 <code>tar -cvf</code> 即可。因为 registry 存储的镜像 layer 已经是个 <code>tar.gzip</code> 格式的文件，再进行压缩的话效果甚微而且还浪费 CPU 时间得不偿失。</p><h3 id="docker-archive"><a href="#docker-archive" class="headerlink" title="docker-archive"></a>docker-archive</h3><p>本来我想着 docker save 出来的并不是一个镜像，而是一个 <code>.tar</code> 文件，但我想了又想，还是觉着它是一个镜像，只不过存在的方式不同而已。于在 docker 和 registry 中存放的方式不同，使用 docker save 出来的镜像是一个孤立的存在。就像是从蛋糕店里拿出来的蛋糕，外面肯定要有个精美的包装是吧，你总没见过。放在哪里都可以，使用的时候我们使用 docker load 拆开外包装(<code>.tar</code>)就可。比如我们离线部署 harbor 的时候就是使用官方的镜像 tar 包来进行加载镜像启动容器的。</p><h2 id="镜像是怎么食用的😋"><a href="#镜像是怎么食用的😋" class="headerlink" title="镜像是怎么食用的😋"></a>镜像是怎么食用的😋</h2><p>当我们拿到一个镜像之后，如果用它来启动一个容器呢？这里就涉及到了 OCI 规范中的另一个规范即运行时规范 <a href="https://github.com/opencontainers/runtime-spec" target="_blank" rel="noopener">runtime-spec</a> 。容器运行时通过一个叫 <a href="https://github.com/opencontainers/runtime-spec/blob/master/bundle.md" target="_blank" rel="noopener"> OCI runtime filesytem bundle</a> 的标准格式将 OCI 镜像通过工具转换为 bundle ，然后 OCI 容器引擎能够识别这个 bundle 来运行容器。</p><blockquote><p>filesystem bundle 是个目录，用于给 runtime 提供启动容器必备的配置文件和文件系统。标准的容器 bundle 包含以下内容：</p><ul><li>config.json: 该文件包含了容器运行的配置信息，该文件必须存在 bundle 的根目录，且名字必须为 config.json</li><li>容器的根目录，可以由 config.json 中的 root.path 指定</li></ul></blockquote><p><img src="img/006tNc79gy1fl7l7qihpmj30vi0lj756.jpg" alt="img"></p><h3 id="docker-run"><a href="#docker-run" class="headerlink" title="docker run"></a>docker run</h3><p>当我们启动一个容器之后我们使用 tree 命令来分析一下 overlay2 就会发现，较之前的目录，容器启动之后 overlay2 目录下多了一个 <code>merged</code> 的文件夹，该文件夹就是容器内看到的。docker 通过 overlayfs 联合挂载的技术将镜像的多层 layer 挂载为一层，这层的内容就是容器里所看到的，也就是 merged 文件夹。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">╭─root@sg-02 /var/lib/docker</span><br><span class="line">╰─# tree overlay2 -d -L 3</span><br><span class="line">overlay2</span><br><span class="line">├── 259cf6934509a674b1158f0a6c90c60c133fd11189f98945c7c3a524784509ff</span><br><span class="line">│   └── diff</span><br><span class="line">│       ├── bin</span><br><span class="line">|</span><br><span class="line">│       └── var</span><br><span class="line">├── 27f9e9b74a88a269121b4e77330a665d6cca4719cb9a58bfc96a2b88a07af805</span><br><span class="line">│   ├── diff</span><br><span class="line">│   └── work</span><br><span class="line">├── 5f85c914c55220ec2635bce0080d2ad677f739dcfac4fd266b773625e3051844</span><br><span class="line">│   ├── diff</span><br><span class="line">│   │   └── var</span><br><span class="line">│   ├── merged</span><br><span class="line">│   │   ├── bin</span><br><span class="line">│   │   ├── dev</span><br><span class="line">│   │   ├── etc</span><br><span class="line">│   │   ├── home</span><br><span class="line">│   │   ├── lib</span><br><span class="line">│   │   ├── media</span><br><span class="line">│   │   ├── mnt</span><br><span class="line">│   │   ├── proc</span><br><span class="line">│   │   ├── root</span><br><span class="line">│   │   ├── run</span><br><span class="line">│   │   ├── sbin</span><br><span class="line">│   │   ├── srv</span><br><span class="line">│   │   ├── sys</span><br><span class="line">│   │   ├── tmp</span><br><span class="line">│   │   ├── usr</span><br><span class="line">│   │   └── var</span><br><span class="line">│   └── work</span><br><span class="line">│       └── work</span><br><span class="line">├── 5f85c914c55220ec2635bce0080d2ad677f739dcfac4fd266b773625e3051844-init</span><br><span class="line">│   ├── diff</span><br><span class="line">│   │   ├── dev</span><br><span class="line">│   │   └── etc</span><br><span class="line">│   └── work</span><br><span class="line">│       └── work</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">overlay on / type overlay (rw,relatime,lowerdir=/opt/docker/overlay2/l/4EPD2X5VF62FH5PZOZHZDKAKGL:/opt/docker/overlay2/l/MYRYBGZRI4I76MJWQHN7VLZXLW:/opt/docker/overlay2/l/5RZOXYR35NSGAWTI36CVUIRW7U:/opt/docker/overlay2/l/LBWRL4ZXGBWOTN5JDCDZVNOY7H:/opt/docker/overlay2/l/526XCHXRJMZXRIHN4YWJH2QLPY:/opt/docker/overlay2/l/XK5IA4BWQ2CIS667J3SXPXGQK5,upperdir=/opt/docker/overlay2/f913d81219134e23eb0827a1c27668494dfaea2f1b5d1d0c70382366eabed629/diff,workdir=/opt/docker/overlay2/f913d81219134e23eb0827a1c27668494dfaea2f1b5d1d0c70382366eabed629/work)</span><br></pre></td></tr></table></figure><p>从 docker 官方文档 <a href="https://docs.docker.com/storage/storagedriver/overlayfs-driver/" target="_blank" rel="noopener">Use the OverlayFS storage driver</a> 里偷来的一张图片</p><p><img src="img/overlay_constructs.jpg" alt="overlayfs lowerdir, upperdir, merged"></p><p>关于上图中这些 Dir 的作用，下面是一段从 <a href="https://stackoverflow.com/questions/56550890/docker-image-merged-diff-work-lowerdir-components-of-graphdriver" target="_blank" rel="noopener">StackOverflow</a> 上搬运过来的解释。</p><blockquote><p><strong>LowerDir</strong>: these are the read-only layers of an overlay filesystem. For docker, these are the image layers assembled in order.</p><p><strong>UpperDir</strong>: this is the read-write layer of an overlay filesystem. For docker, that is the equivalent of the container specific layer that contains changes made by that container.</p><p><strong>WorkDir</strong>: this is a required directory for overlay, it needs an empty directory for internal use.</p><p><strong>MergedDir</strong>: this is the result of the overlay filesystem. Docker effectively chroot’s into this directory when running the container.</p></blockquote><p>如果想对 overlayfs 文件系统有详细的了解，可以参考 Linux 内核官网上的这篇文档 <a href="https://www.kernel.org/doc/Documentation/filesystems/overlayfs.txt" target="_blank" rel="noopener">overlayfs.txt</a> 。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><h3 id="官方文档"><a href="#官方文档" class="headerlink" title="官方文档"></a>官方文档</h3><ul><li><a href="https://docs.docker.com/develop/develop-images/baseimages/" target="_blank" rel="noopener">Create a base image</a></li><li><a href="https://hub.docker.com/_/scratch" target="_blank" rel="noopener">FROM scratch</a></li><li><a href="https://docs.docker.com/registry/" target="_blank" rel="noopener">Docker Registry</a></li><li><a href="https://github.com/docker/distribution/blob/master/docs/spec/manifest-v2-2.md" target="_blank" rel="noopener">Image Manifest Version 2, Schema 2</a></li><li><a href="https://docs.docker.com/registry/spec/api/" target="_blank" rel="noopener">Docker Registry HTTP API V2</a></li><li><a href="https://github.com/containers/image" target="_blank" rel="noopener">image</a></li><li><a href="https://github.com/opencontainers/image-spec" target="_blank" rel="noopener">OCI Image Manifest Specification</a></li><li><a href="https://github.com/opencontainers/distribution-spec" target="_blank" rel="noopener">distribution-spec</a></li><li><a href="https://doi-janky.infosiftr.net/job/tianon/job/debuerreotype/" target="_blank" rel="noopener">debuerreotype/</a></li><li><a href="https://www.kernel.org/doc/Documentation/filesystems/overlayfs.txt" target="_blank" rel="noopener">overlayfs.txt</a></li></ul><h3 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h3><ul><li><a href="https://github.com/docker-library/oi-janky-groovy" target="_blank" rel="noopener">oi-janky-groovy</a></li><li><a href="https://github.com/debuerreotype/docker-debian-artifacts" target="_blank" rel="noopener">docker-debian-artifacts</a></li><li><a href="https://github.com/NotGlop/docker-drag" target="_blank" rel="noopener">docker-drag</a></li><li><a href="https://github.com/deislabs/oras" target="_blank" rel="noopener">oras</a></li><li><a href="https://github.com/containers/skopeo" target="_blank" rel="noopener">skopeo</a></li><li><a href="https://github.com/vbatts/tar-split" target="_blank" rel="noopener">tar-split</a></li></ul><h3 id="博客"><a href="#博客" class="headerlink" title="博客"></a>博客</h3><ul><li><a href="https://supereagle.github.io/2018/04/24/docker-registry/" target="_blank" rel="noopener">镜像仓库中镜像存储的原理解析</a></li><li><a href="http://gaocegege.com/Blog/ormb" target="_blank" rel="noopener">ormb：像管理 Docker 容器镜像一样管理机器学习模型</a></li><li><a href="https://blog.fleeto.us/post/how-are-docker-images-built/" target="_blank" rel="noopener">镜像是怎样炼成的</a></li><li><a href="https://duyanghao.github.io/docker-registry-pull-manifest-v2/" target="_blank" rel="noopener">docker pull分析</a></li><li><a href="https://github.com/helios741/myblog/blob/new/learn_go/src/2019/20191206_docker_disk_storage/README.md" target="_blank" rel="noopener">浅谈docker中镜像和容器在本地的存储</a></li><li><a href="https://www.qedev.com/cloud/103860.html" target="_blank" rel="noopener">容器OCI规范 镜像规范</a></li><li><a href="https://xuanwo.io/2019/08/06/oci-intro/" target="_blank" rel="noopener">开放容器标准(OCI) 内部分享</a></li><li><a href="https://wilhelmguo.cn/blog/post/william/%E5%AE%B9%E5%99%A8%E5%BC%80%E6%94%BE%E6%8E%A5%E5%8F%A3%E8%A7%84%E8%8C%83%EF%BC%88CRI-OCI%EF%BC%89-2" target="_blank" rel="noopener">容器开放接口规范（CRI OCI）</a></li><li><a href="https://segmentfault.com/a/1190000014284289" target="_blank" rel="noopener">Docker镜像的存储机制</a></li><li><a href="http://open.daocloud.io/docker-source-code-analysis-part10/" target="_blank" rel="noopener">Docker源码分析（十）：Docker镜像下载</a></li><li><a href="http://open.daocloud.io/docker-source-code-analysis-part9/" target="_blank" rel="noopener">Docker源码分析（九）：Docker镜像</a></li><li><a href="https://www.twblogs.net/a/5b8aab392b71775d1ce86eca" target="_blank" rel="noopener">docker push 過程 distribution源碼 分析</a></li><li><a href="http://open.daocloud.io/tag/allen-tan-docker/" target="_blank" rel="noopener">Allen 谈 Docker</a></li><li><a href="http://open.daocloud.io/shen-ru-li-jie-dockerjing-xiang-jsonwen-jian-2/" target="_blank" rel="noopener">深入理解 Docker 镜像 json 文件</a></li><li><a href="http://open.daocloud.io/docker-jing-xiang-nei-you-sha-cun-na-ntitled/" target="_blank" rel="noopener">Docker 镜像内有啥，存哪？</a></li><li><a href="http://open.daocloud.io/allen-tan-docker-xi-lie-zhi-shen-ke-li-jie-docker-jing-xiang-da-xiao/" target="_blank" rel="noopener">理解 Docker 镜像大小</a></li><li><a href="http://open.daocloud.io/allen-tan-docker-xi-lie-zhi-tu-kan-jin-docker-rong-qi-wen-jian-xi-tong/" target="_blank" rel="noopener">看尽 docker 容器文件系统</a></li><li><a href="https://qhh.me/2019/02/17/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3-Docker-%E6%9E%84%E5%BB%BA%E4%B8%8A%E4%B8%8B%E6%96%87/" target="_blank" rel="noopener">深入理解 Docker 构建上下文</a></li><li><a href="https://cizixs.com/2017/11/05/oci-and-runc/" target="_blank" rel="noopener">OCI 和 runc：容器标准化和 docker</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;上周在写&lt;a
        
      
    
    </summary>
    
    
      <category term="技术" scheme="https://blog.k8s.li/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="docker" scheme="https://blog.k8s.li/tags/docker/"/>
    
      <category term="registry" scheme="https://blog.k8s.li/tags/registry/"/>
    
      <category term="image" scheme="https://blog.k8s.li/tags/image/"/>
    
  </entry>
  
  <entry>
    <title>mount 命令之 --bind 挂载参数</title>
    <link href="https://blog.k8s.li/mount-bind.html"/>
    <id>https://blog.k8s.li/mount-bind.html</id>
    <published>2020-06-01T16:00:00.000Z</published>
    <updated>2020-06-18T14:28:38.129Z</updated>
    
    <content type="html"><![CDATA[<h2 id="翻车（："><a href="#翻车（：" class="headerlink" title="翻车（："></a>翻车（：</h2><p>由于我的 VPS 不是大盘鸡(就是大容量磁盘机器啦😂)， docker 存储目录 <code>/var/lib/docker</code> 所在的分区严重不足，于是就想着在不改变 docker 配置的下将 <code>/opt</code> 目录下的分区分配给 <code>/var/lib/docker</code> 目录。首先想到的是把 <code>/var/lib/docker</code> 复制到 <code>/opt/docker</code>，然后再将 <code>/opt/docker</code> 软链接到 <code>/var/lib/docker</code> 。</p><p>于是我就一顿操作猛如虎，<code>mv /var/lib/docker /opt/docker &amp;&amp; ln -s /opt/docker /var/lib/docker</code> 一把梭，然后我启动一个容器的时候当场就翻车了🤣。</p><p>原来有些程序是不支持软链接目录的，还有一点就是软链接的路径也有点坑。比如我将 <code>/opt/docker -&gt; /var/lib/docker/</code> ，在 <code>/var/lib/docker</code> 目录下执行 <code>ls ../</code> 即它的上一级目录是 <code>/opt</code> 而不是 <code>/var/lib</code> ，对于一些依赖相对路径的应用（尤其是 shell 脚本）来讲这样使用软链接的方式也容易翻车😂。</p><p>那么有没有一种更好的办法将两个目录进行“硬链接”呢，注意我在此用的是双引号，并非是真正的”硬链接“，搜了一圈发现 mount –bind 这种骚操作。无论我们对文件使用软链接/硬链接/bind，还是对目录使用软链接，其实都是希望操作的 <code>src</code> 和 <code>dest</code> 他们二者都能保持一致。通过 bind 挂载的方式具有着挂载点的一些特性，这是链接是不具有的，对一些不支持链接的应用来讲，bind 的方式要友好一些。</p><h2 id="bind"><a href="#bind" class="headerlink" title="bind"></a>bind</h2><p>其实 bind 这个挂载选项我们在使用 docker 或者 kubernetes 多少都会用到的，尤其是当使用 kubernetes  时 kubelet 在启动容器挂载存储的时候底层是将 node 节点本机的 <code>/var/lib/kubelet/pods/&lt;Pod的ID&gt;/volumes/kubernetes.io~&lt;Volume类型&gt;/&lt;Volume名字&gt;</code> 目录通过 bind 的方式挂载到容器中的，详细的分析可以参考之前我写的一篇博客 <a href="https://blog.k8s.li/kubelet-mount-volumes-analysis.html">kubelet 挂载 volume 原理分析</a> 。</p><blockquote><ul><li><strong>Volumes</strong> are stored in a part of the host filesystem which is <em>managed by Docker</em> (<code>/var/lib/docker/volumes/</code> on Linux). Non-Docker processes should not modify this part of the filesystem. Volumes are the best way to persist data in Docker.</li><li><strong>Bind mounts</strong> may be stored <em>anywhere</em> on the host system. They may even be important system files or directories. Non-Docker processes on the Docker host or a Docker container can modify them at any time.</li><li><strong><code>tmpfs</code> mounts</strong> are stored in the host system’s memory only, and are never written to the host system’s filesystem.</li></ul></blockquote><p>不过那时候并没有详细地去了解 bind 的原理，直到最近翻了一次车才想起来 bind ，于是接下来就详细地分析以下 mount –bind 挂载参数。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 使用软链接链接目录</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> ls -i 显示文件/目录的 inode 号</span></span><br><span class="line">╭─root@sg-02 /var/lib</span><br><span class="line">╰─# ln -s /opt/docker /var/lib/docker</span><br><span class="line">╭─root@sg-02 /var/lib</span><br><span class="line">╰─# ls -i /opt | grep docker</span><br><span class="line">2304916 docker</span><br><span class="line">╭─root@sg-02 /var/lib</span><br><span class="line">╰─# ls -i /var/lib | grep docker</span><br><span class="line">    211 docker</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 使用硬链接链接两个文件</span></span><br><span class="line">╭─root@sg-02 /var/lib</span><br><span class="line">╰─# ln /usr/local/bin/docker-compose /usr/bin/docker-compose</span><br><span class="line">╭─root@sg-02 /var/lib</span><br><span class="line">╰─# ls -i /usr/bin/docker-compose</span><br><span class="line">112 /usr/bin/docker-compose</span><br><span class="line">╭─root@sg-02 /var/lib</span><br><span class="line">╰─# ls -i /usr/bin/docker-compose</span><br><span class="line">112 /usr/bin/docker-compose</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 使用 --<span class="built_in">bind</span> 挂载目录</span></span><br><span class="line">╭─root@sg-02 /var/lib</span><br><span class="line">╰─# mount --bind /opt/docker /var/lib/docker</span><br><span class="line">╭─root@sg-02 /var/lib</span><br><span class="line">╰─# ls -i /var/lib | grep docker</span><br><span class="line">2304916 docker</span><br><span class="line">╭─root@sg-02 /var/lib</span><br><span class="line">╰─# ls -i /opt | grep docker</span><br><span class="line">2304916 docker</span><br></pre></td></tr></table></figure><p>我们可以看到当使用使用硬链接或 bind 挂载目录时，两个文件 inode 号是相同的，使用软链接的两个文件的 inode 号是不同的。但目录又不能使用硬链接，而且硬链接不支持跨分区。我们是否可以将 bind 的效果和<br>“硬链接目录“ 样来使用呢？其实可以这样用，但这样类比并不严谨。</p><p>当我们使用 bind 的时候，是将一个目录 A  挂载到另一个目录 B ，目录 B 原有的内容就被屏”蔽掉“了，目录 B 里面的内容就是目录 A 里面的内容。这和我们挂在其他分区到挂载点目录一样，目录 B 的内容还是存在的，只不过是被”屏蔽“掉了，当我们 umount B 后，原内容就会复现。</p><p>当我们使用 <code>docker run -v PATH:PATH</code> 启动一个容器的时候，实质上也是会用到 <code>bind</code>，docker 会将主机的目录通过 <code>bind</code> 的方式挂载到容器目录。下面我们启动一个 alpine 容器来实验一下。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker run --name alpine -v /opt/bind/:/var --privileged --rm -it alpine sh</span><br><span class="line">docker inspect alpine</span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">"Mounts": [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">"Type"</span>: <span class="string">"bind"</span>,</span><br><span class="line">        <span class="attr">"Source"</span>: <span class="string">"/opt/bind"</span>,</span><br><span class="line">        <span class="attr">"Destination"</span>: <span class="string">"/var"</span>,</span><br><span class="line">        <span class="attr">"Mode"</span>: <span class="string">""</span>,</span><br><span class="line">        <span class="attr">"RW"</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">"Propagation"</span>: <span class="string">"rprivate"</span></span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>在容器内使用 umount 命令卸载掉 <code>/var</code> ，umount 操作需要 root 权限，这也是为什么要在容器启动的时候加上 <code>--privileged</code> 参数来启动一个特权容器的原因。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">/ # ls /var/</span><br><span class="line">74898710_p21.jpg    MJSTEALEY.md        docker-compose.yml  letsencrypt         resolv.conf</span><br><span class="line">CONSOLE.md          README.md           hostname            logs                stop-and-remove.sh</span><br><span class="line">LICENSE             config              hosts               nginx               webp-server</span><br><span class="line">/ # umount /var/</span><br><span class="line"><span class="meta">#</span><span class="bash"> umount 之后容器内原来的 /var 目录内容<span class="string">"恢复"</span>了</span></span><br><span class="line">/ # ls /var/</span><br><span class="line">cache  empty  lib    local  lock   log    mail   opt    run    spool  tmp</span><br></pre></td></tr></table></figure><h2 id="其他用处🤔"><a href="#其他用处🤔" class="headerlink" title="其他用处🤔"></a>其他用处🤔</h2><h3 id="无缝更新-Webp-Server-Go"><a href="#无缝更新-Webp-Server-Go" class="headerlink" title="无缝更新 Webp Server Go"></a>无缝更新 Webp Server Go</h3><p>在 <a href="">小土豆</a>、<a href="">Nona</a> 大佬讨论 <a href="">Webp Server Go</a> 无缝更新的时候我们提出了一个思路：</p><blockquote><ul><li><p>在更新之前先对 nginx 配置文件进行修改，去掉 webp server 的 location 字段：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">location</span> <span class="regexp">~* \.(png|jpg|jpeg)$</span> &#123;</span><br><span class="line">    <span class="attribute">proxy_pass</span> http://127.0.0.1:3333;</span><br><span class="line">    <span class="attribute">proxy_set_header</span> HOST <span class="variable">$http_host</span>;</span><br><span class="line">    <span class="attribute">add_header</span> Cache-Control <span class="string">'no-store, no-cache, must-revalidate, proxy-revalidate, max-age=0'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>然后再 nginx -s reload 不中断 reload 一</p></li><li><p>接着停掉 webp server 服务 <code>systemctl stop webps</code></p></li><li><p>mv webp-server{.bak,}</p></li><li><p>mv ./upload/webp-server-linux-amd64 webp-server</p></li><li><p>接着启动 webp server 服务 <code>systemctl start webps</code></p></li><li><p>然后开倒车把 nginx 配置文件再改回去🍞</p></li></ul></blockquote><p>在此需要提几点，我们希望<strong>无缝更新</strong>，即在更新的过程中不会导致用户请求图片资源失败，那怕 <code>+1s</code>都不行，所以我们需要暂时性地在 nginx 配置文件里去掉 webp server ，使它去请求原图片，等更新完 webp server 之后再添加上去。</p><p>对于木子这种经常删库跑路的手残菜鸟来讲，对一个配置文件改来改去不是好方法，万一 nginx 配置文件改来改去没改好， nginx -s reload 一下 nginx 服务就炸了😂。那么使用 cp 和 mv 怎么样。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">cp blog.conf&#123;,.bak&#125;</span><br><span class="line">vim blog.conf</span><br><span class="line">nginx -s reload</span><br><span class="line">- update webp server</span><br><span class="line">mv blog.conf&#123;,.bak2&#125;</span><br><span class="line">mv blog.conf&#123;.bak,&#125;</span><br><span class="line">nginx -s reload</span><br></pre></td></tr></table></figure><p>使用 bind 呢？好像少了一步，下次更新 webp server 的时候只需要 umount 一下，更新完之后再 mount 一下就可以啦。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cp blog.conf&#123;,.bak&#125;</span><br><span class="line">vim blog.conf</span><br><span class="line">nginx -s reload</span><br><span class="line">- update webp server</span><br><span class="line">mount --bind blog.conf.bak blohg.conf</span><br><span class="line">nginx -s reload</span><br></pre></td></tr></table></figure><h3 id="VPS-搬家助手"><a href="#VPS-搬家助手" class="headerlink" title="VPS 搬家助手"></a>VPS 搬家助手</h3><p>其实还有很多用途啦，这里就不罗列了</p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;h2 id=&quot;翻车（：&quot;&gt;&lt;a href=&quot;#翻车（：&quot;
        
      
    
    </summary>
    
    
      <category term="技术" scheme="https://blog.k8s.li/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="linux" scheme="https://blog.k8s.li/tags/linux/"/>
    
      <category term="overlay2" scheme="https://blog.k8s.li/tags/overlay2/"/>
    
      <category term="docker" scheme="https://blog.k8s.li/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>镜像搬运工 skopeo 初体验</title>
    <link href="https://blog.k8s.li/skopeo.html"/>
    <id>https://blog.k8s.li/skopeo.html</id>
    <published>2020-05-26T16:00:00.000Z</published>
    <updated>2020-05-28T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="搬砖工具"><a href="#搬砖工具" class="headerlink" title="搬砖工具"></a>搬砖工具</h2><p>上周末的时候更新完一篇《木子的搬砖工具😂》，最近因为项目需求又发现了个搬砖工具，所以来水篇博客分享给大家。</p><blockquote><p>  我司项目组中的一个需求就是：在一台机器上去 pull 一个镜像列表中的镜像，这些镜像存储在 registry A Harbor 上，pull 完这些镜像之后重新打上 tag 然后再 push 到另一个 registry B Harbor  上去。相当于一个同步镜像操作，但和 harbor 里在带的那个镜像同步还有很大的不同，我们仅仅需要同步特定 tag 的镜像，而不是整个 harbor 或者 project 里的全部镜像。目前我们的做法还是最简单的方式，使用 docker 命令行的方式来 pull 镜像，然后打 tag 接着 push 到 B harbor。但是啊，当同步二三百个的镜像，或者镜像的总大小几十 GB 的时候这种原始的方法速度还是太慢了，于是就思考有没有另一个工具可以直接将 registry A 中的某个镜像同步到 registry B 中去。</p></blockquote><p>之前我看到过 <a href="https://mritd.me/" target="_blank" rel="noopener">漠然大佬</a> 写的博客<a href="https://mritd.me/2020/03/31/how-to-download-docker-image-without-docker/" target="_blank" rel="noopener">《如何不通过 docker 下载 docker image》</a> ，于是咱也就上手试一下这个工具看看能不能帮咱搬点砖😂。结合这个工具的使用，又一次加深了对容器镜像分发存储的了解，收获颇丰😋</p><h3 id="image"><a href="#image" class="headerlink" title="image"></a>image</h3><p>关于镜像的详细分析可以参考 <a href="https://github.com/helios741/myblog/tree/new/learn_go/src/2019/20191206_docker_disk_storage" target="_blank" rel="noopener">浅谈docker中镜像和容器在本地的存储</a></p><h3 id="registry"><a href="#registry" class="headerlink" title="registry"></a>registry</h3><p>根据 <a href="https://supereagle.github.io/" target="_blank" rel="noopener">Robin</a> 大佬在 <a href="https://supereagle.github.io/2018/04/24/docker-registry/" target="_blank" rel="noopener">镜像仓库中镜像存储的原理解析</a> 文章里得出的结论：</p><blockquote><ul><li>通过 Registry API 获得的两个镜像仓库中相同镜像的 manifest 信息完全相同。</li><li>两个镜像仓库中相同镜像的 manifest 信息的存储路径和内容完全相同。</li><li>两个镜像仓库中相同镜像的 blob 信息的存储路径和内容完全相同。</li></ul></blockquote><h3 id="docker-pull-和-docker-push"><a href="#docker-pull-和-docker-push" class="headerlink" title="docker pull 和 docker push"></a>docker pull 和 docker push</h3><p>之所以想使用 skopeo 替代原有使用 docker pull –&gt; docker tag –&gt; docker push 的操作，是因为 docker pull 镜像的时候，registry 中存储的镜像 layer 格式是 <code>vnd.docker.image.rootfs.diff.tar.gzip</code> ，这是一个 tar.gz 类型的文件。我们可以在本地搭建一个 harbor ，并向 harbor 推送一个 alpine:latest 镜像，来分析一下镜像是如何在 registry 中存储的。</p><ul><li>harbor 的存储目录</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">tree</span><br><span class="line">`-- registry</span><br><span class="line">    `-- v2      # registry V2 版本</span><br><span class="line">        |-- blobs # blobs 目录下存储镜像的 raw 数据，存储的最小单元为 layer</span><br><span class="line">        |   `-- sha256</span><br><span class="line">        |       |-- 39</span><br><span class="line">        |       |-- cb</span><br><span class="line">        |       `-- f7</span><br><span class="line">        `-- repositories # 镜像的元数据信息</span><br><span class="line">            `-- library</span><br><span class="line">                `-- alpine</span><br></pre></td></tr></table></figure><ul><li>镜像的 <a href="https://github.com/opencontainers/image-spec/blob/master/manifest.md" target="_blank" rel="noopener">manifest</a> 是针对registry服务端的配置信息</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">sh-4.2# skopeo inspect docker://index.docker.io/library/alpine:latest --raw</span><br><span class="line">&#123;</span><br><span class="line">   "schemaVersion": 2,</span><br><span class="line">   "mediaType": "application/vnd.docker.distribution.manifest.v2+json",</span><br><span class="line">   "config": &#123;</span><br><span class="line">      "mediaType": "application/vnd.docker.container.image.v1+json",</span><br><span class="line">      "size": 1507,</span><br><span class="line">      "digest": "sha256:f70734b6a266dcb5f44c383274821207885b549b75c8e119404917a61335981a"</span><br><span class="line">   &#125;,</span><br><span class="line">   "layers": [</span><br><span class="line">      &#123;</span><br><span class="line">         "mediaType": "application/vnd.docker.image.rootfs.diff.tar.gzip",</span><br><span class="line">         "size": 2813316,</span><br><span class="line">         "digest": "sha256:cbdbe7a5bc2a134ca8ec91be58565ec07d037386d1f1d8385412d224deafca08"</span><br><span class="line">      &#125;</span><br><span class="line">   ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>仔细看一下 <code>digest</code> 和下面文件夹的名称，他们是一一对应的，因为 manifest 信息就是镜像在 registry 中存储的信息。</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">tree</span><br><span class="line">|-- [  20]  blobs</span><br><span class="line">|   `-- [  36]  sha256</span><br><span class="line">|       |-- [  78]  39</span><br><span class="line">|       |   `-- [  18]  39eda93d15866957feaee28f8fc5adb545276a64147445c64992ef69804dbf01</span><br><span class="line">|       |       `-- [ 528]  data</span><br><span class="line">|       |-- [  78]  cb</span><br><span class="line">|       |   `-- [  18]  cbdbe7a5bc2a134ca8ec91be58565ec07d037386d1f1d8385412d224deafca08</span><br><span class="line">|       |       `-- [2.7M]  data </span><br><span class="line">|       `-- [  78]  f7</span><br><span class="line">|           `-- [  18]  f70734b6a266dcb5f44c383274821207885b549b75c8e119404917a61335981a</span><br><span class="line">|               `-- [1.5K]  data</span><br><span class="line">`-- [  21]  repositories</span><br><span class="line">    `-- [  20]  library</span><br><span class="line">        `-- [  55]  alpine</span><br><span class="line">            |-- [  20]  _layers</span><br><span class="line">            |   `-- [ 150]  sha256</span><br><span class="line">            |       |-- [  18]  cbdbe7a5bc2a134ca8ec91be58565ec07d037386d1f1d8385412d224deafca08</span><br><span class="line">            |       |   `-- [  71]  link</span><br><span class="line">            |       `-- [  18]  f70734b6a266dcb5f44c383274821207885b549b75c8e119404917a61335981a</span><br><span class="line">            |           `-- [  71]  link</span><br><span class="line">            |-- [  35]  _manifests</span><br><span class="line">            |   |-- [  20]  revisions</span><br><span class="line">            |   |   `-- [  78]  sha256</span><br><span class="line">            |   |       `-- [  18]  39eda93d15866957feaee28f8fc5adb545276a64147445c64992ef69804dbf01</span><br><span class="line">            |   |           `-- [  71]  link</span><br><span class="line">            |   `-- [  20]  tags</span><br><span class="line">            |       `-- [  34]  latest</span><br><span class="line">            |           |-- [  18]  current</span><br><span class="line">            |           |   `-- [  71]  link</span><br><span class="line">            |           `-- [  20]  index</span><br><span class="line">            |               `-- [  78]  sha256</span><br><span class="line">            |                   `-- [  18]  39eda93d15866957feaee28f8fc5adb545276a64147445c64992ef69804dbf01</span><br><span class="line">            |                       `-- [  71]  link</span><br><span class="line">            `-- [   6]  _uploads</span><br><span class="line"></span><br><span class="line">26 directories, 8 files</span><br></pre></td></tr></table></figure><ul><li>我们去看一下 <code>[2.7M]  data</code>  这个文件，其他文件估计是一些 json 文本用于保存元数据信息。使用 file 命令查看 blobs/sha256/cb/cbdbe7a5bc2a134ca8ec91be58565ec07d037386d1f1d8385412d224deafca08 目录下的 <code>data</code> 文件。镜像的每一层都是存放在一个 64 位长度名称的文件夹下，文件名就是 <code>data</code> 。而且这个文件还是个 gzip 压缩后的文件。我么可以使用 tar 命令将其解压开来。</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cd registry/v2/blobs/sha256/cb/cbdbe7a5bc2a134ca8ec91be58565ec07d037386d1f1d8385412d224deafca08</span><br><span class="line">sh-4.2# file data</span><br><span class="line">data: gzip compressed data</span><br><span class="line">sh-4.2# mkdir layer</span><br><span class="line">sh-4.2# tar -xvf data -C layer/</span><br></pre></td></tr></table></figure><ul><li>将其解压到 layer 目录下，使用 tree 命令看一下文件夹下的内容就会明白，这不就是我们的 alpine 镜像真实的内容嘛😂。</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">sh-4.2# tree -L 1 -d layer</span><br><span class="line">layer</span><br><span class="line">|-- bin</span><br><span class="line">|-- dev</span><br><span class="line">|-- etc</span><br><span class="line">|-- home</span><br><span class="line">|-- lib</span><br><span class="line">|-- media</span><br><span class="line">|-- mnt</span><br><span class="line">|-- opt</span><br><span class="line">|-- proc</span><br><span class="line">|-- root</span><br><span class="line">|-- run</span><br><span class="line">|-- sbin</span><br><span class="line">|-- srv</span><br><span class="line">|-- sys</span><br><span class="line">|-- tmp</span><br><span class="line">|-- usr</span><br><span class="line">`-- var</span><br></pre></td></tr></table></figure><p>知道了镜像在 registry 中是如何存储的，我们也就能够明白在当前仅仅为了同步两个 registry 上的镜像使用 docker pull –&gt; docker tag –&gt; docker push 操作的弊端。因为 docker pull 镜像时会对 registry 上的 layer 进行解压缩，这一点和我们的浏览器解压缩一些  gzip 压缩的资源一样道理，为了减少网络传输的流量。当我们 pull 镜像的时候，docker 会有一个单独的进程对镜像进行解压缩，在使用 docker pull 拉取镜像的时候使用 ps 查看一下进程就会找到 <code>docker-untar</code>  这个进程。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-untar /var/lib/docker/overlay2/a076db6567c7306f3cdab6040cd7d083ef6a39d125171353eedbb8bde7f203b4/diff</span><br></pre></td></tr></table></figure><p>对于一些很大的镜像比如 2GB 以上，有时候镜像 layer 已经 download 完了，但是还在进行镜像的解压缩，性能的瓶颈也就在了解压镜像这一块。对于 docker push 来讲，也是如此。</p><p>有没有一种办法可以直接将 registry 上的 blob 复制到另一个 registry，中间过程不涉及对镜像 layer 的解压缩，这岂不美哉😂。</p><h2 id="skopeo-install"><a href="#skopeo-install" class="headerlink" title="skopeo install"></a>skopeo install</h2><h3 id="yum-dnf-zypper-brew"><a href="#yum-dnf-zypper-brew" class="headerlink" title="yum/dnf/zypper/brew"></a>yum/dnf/zypper/brew</h3><p>安装方式很简单，对于常见的发相伴直接 install 一把梭就行，从官方文档偷来的安装方式😂</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo dnf install skopeo</span></span><br></pre></td></tr></table></figure><p>on RHEL/CentOS ≤ 7.x:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo yum install skopeo</span></span><br></pre></td></tr></table></figure><p>for openSUSE:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo zypper install skopeo</span></span><br></pre></td></tr></table></figure><p>on alpine:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo apk add skopeo</span></span><br></pre></td></tr></table></figure><p>on macOS:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> brew install skopeo</span></span><br></pre></td></tr></table></figure><h3 id="build"><a href="#build" class="headerlink" title="build"></a>build</h3><p>由于我的 VPS 机器是 Ubuntu 1804 的 OS ，配置 apt 源并没成功，当场翻车。为了能够快速体验一把还是本地起一个 alpine 容器，在 alpine 里通过 apk add 的方式安装 skopeo。但 alpine 里的 skopeo 版本 还是 0.14.0 😥，GitHub 上的 master 分支已经 1.0.0了，而且并没有 sync 的选项。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">/ # skopeo --help</span><br><span class="line">NAME:</span><br><span class="line">   skopeo - Various operations with container images and container image registries</span><br><span class="line">USAGE:</span><br><span class="line">   skopeo [global options] command [command options] [arguments...]</span><br><span class="line">VERSION:</span><br><span class="line">   0.1.40</span><br><span class="line">COMMANDS:</span><br><span class="line">     copy               Copy an IMAGE-NAME from one location to another</span><br><span class="line">     inspect            Inspect image IMAGE-NAME</span><br><span class="line">     delete             Delete image IMAGE-NAME</span><br><span class="line">     manifest-digest    Compute a manifest digest of a file</span><br><span class="line">     standalone-sign    Create a signature using local files</span><br><span class="line">     standalone-verify  Verify a signature using local files</span><br><span class="line">     help, h            Shows a list of commands or help for one command</span><br></pre></td></tr></table></figure><p>真是一波三折啊，绕了一圈最终还是亲自<del>指挥</del> build 一份吧，不过这个 build 过程也很简单。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/containers/skopeo skopeo</span><br><span class="line">cd !$</span><br><span class="line">git checkout v1.0.0</span><br><span class="line">make binary-static DISABLE_CGO=1</span><br><span class="line">cp skopeo /usr/bin/</span><br></pre></td></tr></table></figure><ul><li>在这里需要注意一点，如果汝想构建一个在各 Linux 发行版通用的二进制可执行文件，一定要使用 <code>make binary-static DISABLE_CGO=1</code> ，之前我没有仔细看文档直接 make 一把梭，然后在 Ubuntu 上构建出来的二进制执行文件拿到 CentOS 上去用，当场翻车提示以下错误：</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">skopeo: error while loading shared libraries: libdevmapper.so.1.02.1: cannot open shared object file: No such file or directory</span><br></pre></td></tr></table></figure><ul><li>然后我傻乎乎地去安装 CentOS 上的这个库，但还是提示 <code>libdevmapper.so.1.02.1</code> 不存在。因为 Ubuntu 上的这个库和 CentOS 上的这个库是不一样名称的😑。所以说要在编译的时候加上 <code>DISABLE_CGO=1</code> 这个参数进行静态链接编译，这样编译出来的二进制可执行文件就可以在 Linux 发行版之间通用了。</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">ldd skopeo_d #</span><br><span class="line">        linux-vdso.so.1 (0x00007ffed9e66000)</span><br><span class="line">        libgpgme.so.11 =&gt; /usr/lib/x86_64-linux-gnu/libgpgme.so.11 (0x00007f94aed2e000)</span><br><span class="line">        libpthread.so.0 =&gt; /lib/x86_64-linux-gnu/libpthread.so.0 (0x00007f94aeb0f000)</span><br><span class="line">        libdevmapper.so.1.02.1 =&gt; /lib/x86_64-linux-gnu/libdevmapper.so.1.02.1 (0x00007f94ae8a4000)</span><br><span class="line">        libc.so.6 =&gt; /lib/x86_64-linux-gnu/libc.so.6 (0x00007f94ae4b3000)</span><br><span class="line">        libassuan.so.0 =&gt; /usr/lib/x86_64-linux-gnu/libassuan.so.0 (0x00007f94ae2a0000)</span><br><span class="line">        libgpg-error.so.0 =&gt; /lib/x86_64-linux-gnu/libgpg-error.so.0 (0x00007f94ae08b000)</span><br><span class="line">        /lib64/ld-linux-x86-64.so.2 (0x00007f94b0ac4000)</span><br><span class="line">        libselinux.so.1 =&gt; /lib/x86_64-linux-gnu/libselinux.so.1 (0x00007f94ade63000)</span><br><span class="line">        libudev.so.1 =&gt; /lib/x86_64-linux-gnu/libudev.so.1 (0x00007f94adc45000)</span><br><span class="line">        libm.so.6 =&gt; /lib/x86_64-linux-gnu/libm.so.6 (0x00007f94ad8a7000)</span><br><span class="line">        libpcre.so.3 =&gt; /lib/x86_64-linux-gnu/libpcre.so.3 (0x00007f94ad635000)</span><br><span class="line">        libdl.so.2 =&gt; /lib/x86_64-linux-gnu/libdl.so.2 (0x00007f94ad431000)</span><br><span class="line">        librt.so.1 =&gt; /lib/x86_64-linux-gnu/librt.so.1 (0x00007f94ad229000)</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 加上 DISABLE_CGO=1 编译后的二进制可执行文件</span></span><br><span class="line">ldd skopeo_s #</span><br><span class="line">        not a dynamic executable</span><br></pre></td></tr></table></figure><h2 id="usage"><a href="#usage" class="headerlink" title="usage"></a>usage</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">Various operations with container images and container image registries</span><br><span class="line"></span><br><span class="line">Usage:</span><br><span class="line">  skopeo [command]</span><br><span class="line"></span><br><span class="line">Available Commands:</span><br><span class="line">  copy                      Copy an IMAGE-NAME from one location to another</span><br><span class="line">  delete                    Delete image IMAGE-NAME</span><br><span class="line">  help                      Help about any command</span><br><span class="line">  inspect                   Inspect image IMAGE-NAME</span><br><span class="line">  list-tags                 List tags in the transport/repository specified by the</span><br><span class="line">  login                     Login to a container registry</span><br><span class="line">  logout                    Logout of a container registry</span><br><span class="line">  manifest-digest           Compute a manifest digest of a file</span><br><span class="line">  standalone-sign           Create a signature using local files</span><br><span class="line">  standalone-verify         Verify a signature using local files</span><br><span class="line">  sync                      Synchronize one or more images from one location to another</span><br><span class="line"></span><br><span class="line">skopeo version 1.0.0 commit: bd162028cd83ceecd8915736f2d66d5ca73ee54a</span><br></pre></td></tr></table></figure><p>可以看到  skopeo 的功能很简单：</p><ul><li>copy：复制一个镜像从 A 到 B，这里的 A 和 B 可以为本地 docker 镜像或者 registry 上的镜像。</li><li>inspect：查看一个镜像的 manifest 火车 image config 详细信息</li><li>delete：删除一个镜像，可以是本地 docker 镜像或者 registry 上的镜像</li><li>list-tags：列出一个 registry 上某个镜像的所有 tag</li><li>login：登录到某个 registry，和 docker login 类似</li><li>logout： 退出已经登录到某个 registry 的 auth 信息，和 docker logout 类似</li><li>manifest-digest、standalone-sign、standalone-verify 这三个用的不多</li><li>sync：同步一个镜像从 A 到  B，感觉和 copy 一样，但 sync 支持的参数更多，功能更强大。在 0.14.0 版本的时候是没有 sync 选项的，到了 0.14.2 才有，现在是 1.0.0</li></ul><h3 id="IMAGE-NAMES"><a href="#IMAGE-NAMES" class="headerlink" title="IMAGE NAMES"></a>IMAGE NAMES</h3><p>在使用 skopeo 之前，我们首先要知道在命令行中镜像的格式，下面是官方详细的文档格式。无论我们的 src 镜像还是 desc 镜像都要满足以下格式才可以。</p><blockquote><p>  Most commands refer to container images, using a <em>transport<em><code>:</code></em>details</em> format. The following formats are supported:</p><p>  <strong>containers-storage:*</strong>docker-reference* An image located in a local containers/storage image store. Both the location and image store are specified in /etc/containers/storage.conf. (Backend for Podman, CRI-O, Buildah and friends)</p><p>  <strong>dir:*</strong>path* An existing local directory <em>path</em> storing the manifest, layer tarballs and signatures as individual files. This is a non-standardized format, primarily useful for debugging or noninvasive container inspection.</p><p>  <strong>docker://*</strong>docker-reference* An image in a registry implementing the “Docker Registry HTTP API V2”. By default, uses the authorization state in either <code>$XDG_RUNTIME_DIR/containers/auth.json</code>, which is set using <code>(skopeo login)</code>. If the authorization state is not found there, <code>$HOME/.docker/config.json</code> is checked, which is set using <code>(docker login)</code>.</p><p>  <strong>docker-archive:*</strong>path<em>[<strong>:*</strong>docker-reference*] An image is stored in the <code>docker save</code> formatted file. *docker-reference</em> is only used when creating such a file, and it must not contain a digest.</p><p>  <strong>docker-daemon:*</strong>docker-reference* An image <em>docker-reference</em> stored in the docker daemon internal storage. <em>docker-reference</em> must contain either a tag or a digest. Alternatively, when reading images, the format can be docker-daemon:algo:digest (an image ID).</p><p>  <strong>oci:*</strong>path<strong><em>:</em></strong>tag* An image <em>tag</em> in a directory compliant with “Open Container Image Layout Specification” at <em>path</em>.</p></blockquote><p>需要注意的是，这几种镜像的名字，对应着镜像存在的方式，不同存在的方式对镜像的 layer 处理的方式也不一样，比如 <code>docker://</code> 这种方式是存在 registry 上的，<code>docker-daemon:</code> 是存在本地 docker pull 下来的，再比如 <code>docker-archive</code> 是通过 docker save 出来的镜像。同一个镜像有这几种存在的方式就像水有气体、液体、固体一样。可以这样去理解，他们表述的都是同一个镜像，只不过是存在的方式不一样而已。</p><table><thead><tr><th>IMAGE NAMES</th><th>example</th></tr></thead><tbody><tr><td><strong>containers-storage:</strong></td><td>containers-storage:</td></tr><tr><td><strong>dir:</strong></td><td>dir:/PATH</td></tr><tr><td><strong>docker://</strong></td><td>docker://k8s.gcr.io/kube-apiserver:v1.17.5</td></tr><tr><td><strong>docker-daemon:</strong></td><td>docker-daemon:alpine:latest</td></tr><tr><td><strong>docker-archive:</strong></td><td>docker-archive:alpine.tar (docker save)</td></tr><tr><td><strong>oci:</strong></td><td>oci:alpine:latest</td></tr></tbody></table><h3 id="skopeo-copy"><a href="#skopeo-copy" class="headerlink" title="skopeo copy"></a>skopeo copy</h3><blockquote><p>  Copy an IMAGE-NAME from one location to another </p></blockquote><p>注意一下，这里的 location 就是指的上面提到的 <code>IMAGE NAMES</code> ，也就是说 <code>skopeo copy src dest</code> 可以有6*6=36 种组合！比如我可以将一个镜像从一个 registry 复制到另一个 registry，<code>skopeo copy docker://IMAGE_NAME docker://IMAGE_NAME</code>，再强调一遍，一定要注意 <code>IMAGE_NAME</code> 的命名的格式。</p><p>skopeo 的详细使用可以参考官方的文档，在使用之前先创建一个</p><p>在使用 skopeo 之前如果镜像是存放在 registry 上的话，需要先登录到 registry。使用 skopeo login 或者  docker login 都可以。成功登录之后会在本地保存一个为 config.json 的文件，里面保存了登录需要的验证信息，skopeo 拿到这个验证信息才有权限往 registry push 镜像。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">╭─root@sg-02 /home/ubuntu/skopeo ‹master*›</span><br><span class="line">╰─# jq "." ~/.docker/config.json                                                             </span><br><span class="line">&#123;</span><br><span class="line">  "auths": &#123;</span><br><span class="line">    "https://index.docker.io/v1/": &#123;</span><br><span class="line">      "auth": "d2sddaqWM7bSVlJFpmQE43Sw=="</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  "HttpHeaders": &#123;</span><br><span class="line">    "User-Agent": "Docker-Client/19.03.5 (linux)"</span><br><span class="line">  &#125;,</span><br><span class="line">  "experimental": "enabled"</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>从 <code>k8s.gcr.io/kube-apiserver:v1.17.5</code> 复制镜像到 <code>index.docker.io/webpsh/kube-apiserver:v1.17.5</code> </li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">╭─root@sg-02 ~/skopeo ‹master›</span><br><span class="line">╰─# skopeo copy docker://k8s.gcr.io/kube-apiserver:v1.17.5 docker://index.docker.io/webpsh/kube-apiserver:v1.17.5 --dest-authfile /root/.docker/config.json</span><br><span class="line">Getting image source signatures</span><br><span class="line">Copying blob 597de8ba0c30 done</span><br><span class="line">Copying blob e13a88fa950c done</span><br><span class="line">Copying config f640481f6d done</span><br><span class="line">Writing manifest to image destination</span><br><span class="line">Storing signatures</span><br></pre></td></tr></table></figure><ul><li>skopeo 输出的日志显示是 <code>Copying blob 597de8ba0c30 done</code> ，可以看到 skopeo 是直接 copy 镜像 layer 的 blob，而 blob 是在 registry 进行压缩存储的格式。</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 然后从重新 pul 下来刚刚 push 到 docker hub 上的镜像，验证是否正确</span></span><br><span class="line">╭─root@sg-02 ~/skopeo ‹master›</span><br><span class="line">╰─# docker pull webpsh/kube-apiserver:v1.17.5</span><br><span class="line">v1.17.5: Pulling from webpsh/kube-apiserver</span><br><span class="line">Digest: sha256:5ddc5c77f52767f2f225a531a257259228d74b32d8aac9cfe087251f998c42f3</span><br><span class="line">Status: Downloaded newer image for webpsh/kube-apiserver:v1.17.5</span><br><span class="line">docker.io/webpsh/kube-apiserver:v1.17.5</span><br></pre></td></tr></table></figure><ul><li>copy 镜像到本地</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">╭─root@sg-02 /home/ubuntu</span><br><span class="line">╰─# skopeo copy docker-daemon:alpine:latest oci:alpine</span><br><span class="line">Getting image source signatures</span><br><span class="line">Copying blob 3e207b409db3 done</span><br><span class="line">Copying config af88fdb253 done</span><br><span class="line">Writing manifest to image destination</span><br><span class="line">Storing signatures</span><br><span class="line">╭─root@sg-02 /home/ubuntu</span><br><span class="line">╰─# tree -h alpine</span><br><span class="line">alpine</span><br><span class="line">├── [4.0K]  blobs</span><br><span class="line">│   └── [4.0K]  sha256</span><br><span class="line">│       ├── [ 348]  1c6f747c933450c5169f349f2a57b9d31e833c0452e1ec712b8aab0cbfea4d2c</span><br><span class="line">│       ├── [2.8M]  3eee30c545e47333e6fe551863f6f29c3dcd850187ae3f37c606adb991444886</span><br><span class="line">│       └── [ 583]  af88fdb253aac46693de7883c9c55244327908c77248d7654841503f744aae8b</span><br><span class="line">├── [ 186]  index.json</span><br><span class="line">└── [  31]  oci-layout</span><br></pre></td></tr></table></figure><p>有点好奇这个镜像格式，所以我们来分析一下 copy 出来的镜像，可以看到在导出来的.</p><p>这个应该是镜像的 mainfaet 文件</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">╭─root@sg-02 /home/ubuntu/alpine/blobs/sha256</span><br><span class="line">╰─# jq "." 1c6f747c933450c5169f349f2a57b9d31e833c0452e1ec712b8aab0cbfea4d2c</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"schemaVersion"</span>: <span class="number">2</span>,</span><br><span class="line">  <span class="attr">"config"</span>: &#123;</span><br><span class="line">    <span class="attr">"mediaType"</span>: <span class="string">"application/vnd.oci.image.config.v1+json"</span>,</span><br><span class="line">    <span class="attr">"digest"</span>: <span class="string">"sha256:af88fdb253aac46693de7883c9c55244327908c77248d7654841503f744aae8b"</span>,</span><br><span class="line">    <span class="attr">"size"</span>: <span class="number">583</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"layers"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"mediaType"</span>: <span class="string">"application/vnd.oci.image.layer.v1.tar+gzip"</span>,</span><br><span class="line">      <span class="attr">"digest"</span>: <span class="string">"sha256:3eee30c545e47333e6fe551863f6f29c3dcd850187ae3f37c606adb991444886"</span>,</span><br><span class="line">      <span class="attr">"size"</span>: <span class="number">2898973</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>这个就是镜像的 image config 文件</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">╭─root@sg-02 /home/ubuntu/alpine/blobs/sha256</span><br><span class="line">╰─# jq "." af88fdb253aac46693de7883c9c55244327908c77248d7654841503f744aae8b</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"created"</span>: <span class="string">"2020-04-24T01:05:03.92860976Z"</span>,</span><br><span class="line">  <span class="attr">"architecture"</span>: <span class="string">"amd64"</span>,</span><br><span class="line">  <span class="attr">"os"</span>: <span class="string">"linux"</span>,</span><br><span class="line">  <span class="attr">"config"</span>: &#123;</span><br><span class="line">    <span class="attr">"Env"</span>: [</span><br><span class="line">      <span class="string">"PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">"Cmd"</span>: [</span><br><span class="line">      <span class="string">"/bin/sh"</span></span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"rootfs"</span>: &#123;</span><br><span class="line">    <span class="attr">"type"</span>: <span class="string">"layers"</span>,</span><br><span class="line">    <span class="attr">"diff_ids"</span>: [</span><br><span class="line">      <span class="string">"sha256:3e207b409db364b595ba862cdc12be96dcdad8e36c59a03b7b3b61c946a5741a"</span></span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"history"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"created"</span>: <span class="string">"2020-04-24T01:05:03.608058404Z"</span>,</span><br><span class="line">      <span class="attr">"created_by"</span>: <span class="string">"/bin/sh -c #(nop) ADD file:b91adb67b670d3a6ff9463e48b7def903ed516be66fc4282d22c53e41512be49 in / "</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"created"</span>: <span class="string">"2020-04-24T01:05:03.92860976Z"</span>,</span><br><span class="line">      <span class="attr">"created_by"</span>: <span class="string">"/bin/sh -c #(nop)  CMD [\"/bin/sh\"]"</span>,</span><br><span class="line">      <span class="attr">"empty_layer"</span>: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="skopeo-inspect"><a href="#skopeo-inspect" class="headerlink" title="skopeo inspect"></a>skopeo inspect</h3><p>这个命令可以查看一个镜像的 image config 和 mainf 文件，和 docker inspect 命令差不多</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">╭─root@sg-02 /home/ubuntu/alpine/blobs/sha256</span><br><span class="line">╰─# skopeo inspect docker-daemon:alpine:latest --raw | jq "."</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"schemaVersion"</span>: <span class="number">2</span>,</span><br><span class="line">  <span class="attr">"mediaType"</span>: <span class="string">"application/vnd.docker.distribution.manifest.v2+json"</span>,</span><br><span class="line">  <span class="attr">"config"</span>: &#123;</span><br><span class="line">    <span class="attr">"mediaType"</span>: <span class="string">"application/vnd.docker.container.image.v1+json"</span>,</span><br><span class="line">    <span class="attr">"size"</span>: <span class="number">1507</span>,</span><br><span class="line">    <span class="attr">"digest"</span>: <span class="string">"sha256:f70734b6a266dcb5f44c383274821207885b549b75c8e119404917a61335981a"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"layers"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"mediaType"</span>: <span class="string">"application/vnd.docker.image.rootfs.diff.tar.gzip"</span>,</span><br><span class="line">      <span class="attr">"size"</span>: <span class="number">5878784</span>,</span><br><span class="line">      <span class="attr">"digest"</span>: <span class="string">"sha256:3e207b409db364b595ba862cdc12be96dcdad8e36c59a03b7b3b61c946a5741a"</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="skopeo-delete"><a href="#skopeo-delete" class="headerlink" title="skopeo delete"></a>skopeo delete</h3><p>使用这个命令可以删除镜像，对于删除 registry 上的镜像很有帮助，因为目前想要删除 registry 上的镜像常规的做法还是登录到 registry 在 WEB 上手动删除。skopeo delete 也是调用 registry 的 API 来进行删除镜像。</p><h3 id="skopeo-list-tags"><a href="#skopeo-list-tags" class="headerlink" title="skopeo list-tags"></a>skopeo list-tags</h3><p>这个命令常用来列出 registry 上的某个镜像的所有 tag ，在一些 shell 脚本中可能会又用得到。</p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;h2 id=&quot;搬砖工具&quot;&gt;&lt;a href=&quot;#搬砖工具&quot;
        
      
    
    </summary>
    
    
      <category term="技术" scheme="https://blog.k8s.li/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="docker" scheme="https://blog.k8s.li/tags/docker/"/>
    
      <category term="registry" scheme="https://blog.k8s.li/tags/registry/"/>
    
      <category term="镜像" scheme="https://blog.k8s.li/tags/%E9%95%9C%E5%83%8F/"/>
    
      <category term="搬砖工具" scheme="https://blog.k8s.li/tags/%E6%90%AC%E7%A0%96%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>木子的搬砖工具😂</title>
    <link href="https://blog.k8s.li/My-brick-lifting-tools.html"/>
    <id>https://blog.k8s.li/My-brick-lifting-tools.html</id>
    <published>2020-05-21T16:00:00.000Z</published>
    <updated>2020-06-18T14:28:38.129Z</updated>
    
    <content type="html"><![CDATA[<h2 id="咕咕咕"><a href="#咕咕咕" class="headerlink" title="咕咕咕"></a>咕咕咕</h2><p>本来打算上上周就该更新完的这篇博文，但最近因为离职的事宜拖到今天晚上才捡起来，最终还是咕咕咕了😂。虽然文章还未补充完，等到以后再继续更新上吧。</p><h2 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h2><p>确切地来讲 Linux 仅仅是一个操作系统的内核，而且它的代码在一个发行版中的占用率也不到 20%。</p><h3 id="入门"><a href="#入门" class="headerlink" title="入门"></a>入门</h3><p>咱一直觉着学习技术吧，并不是看书看视频能学会的。对于一些底层的只是确实需要仔细研读书籍来吃透他，这趟会让我们对操作系统这个体系结构有更下透彻的认识。但是呢，光看不练还是不行滴，咱学习 Linux 纯靠瞎玩，瞎折腾。咱大学时学校没有开设 Linux 课程，只能靠自己自学。于是乎，和大家一样，搭建 WordPress ，一步步安装 LAMP 环境，配置 iptables，写 shell 脚本备份网站，搭建梯子等等。可谓是玩得不亦乐乎😂。</p><p>所以说学习和入门 Linux 咱还是推荐鸟哥的《鸟哥 Linux 私房菜》这本书，结合着自己搭建网站一步步来就可以。</p><h3 id="放弃"><a href="#放弃" class="headerlink" title="放弃"></a>放弃</h3><p>入门完 Linux 之后就开始挑战高难度的啦，比如：</p><ul><li>OpenStack</li><li>Docker</li><li>Kubernetes</li><li>CI/CD</li></ul><p>目前来讲在运维这个搬砖行业，kubernetes 云原生无疑是最具有挑战性和前景的，所以如果汝想更近一层楼就不妨学习一下 Docker 和 Kuberneets 这一块。</p><h3 id="发行版"><a href="#发行版" class="headerlink" title="发行版"></a>发行版</h3><p>从运维这个搬砖行业来讲，企业内部使用的 Linux 发行版当属 RedHat 和 Debian 家族的最多，像其他的什么 archlinux 咱还真没见过有在生产环境使用的，毕竟滚动更新不小心就滚挂了不好说😂。国内企业和云计算厂商使用最多的当然是 CentOS 啦，我记得是在 2018 年年末的时候阿里云/腾讯云还没有 Ubuntu 1804 的云主机可用😑。国外使用 Ubuntu 的较多一些，咱是倾向于使用 Ubuntu 😝</p><p>从 <a href="https://www.datanyze.com" target="_blank" rel="noopener">datanyze</a> 家偷来一张企业 Linux 市场占有率的统计表格 <a href="https://www.datanyze.com/market-share/operating-systems--443" target="_blank" rel="noopener">Operating Systems</a>😂</p><table><thead><tr><th align="center">Ranking</th><th align="left">Technology</th><th align="right">Domains</th><th align="right">Market Share</th></tr></thead><tbody><tr><td align="center">1</td><td align="left"><a href="https://www.datanyze.com/market-share/operating-systems--443/ubuntu-market-share" target="_blank" rel="noopener">Ubuntu</a></td><td align="right">278,611</td><td align="right">29.30%</td></tr><tr><td align="center">2</td><td align="left"><a href="https://www.datanyze.com/market-share/operating-systems--443/unix-market-share" target="_blank" rel="noopener">Unix</a></td><td align="right">192,215</td><td align="right">20.21%</td></tr><tr><td align="center">3</td><td align="left"><a href="https://www.datanyze.com/market-share/operating-systems--443/centos-market-share" target="_blank" rel="noopener">CentOS</a></td><td align="right">165,640</td><td align="right">17.42%</td></tr><tr><td align="center">4</td><td align="left"><a href="https://www.datanyze.com/market-share/operating-systems--443/debian-market-share" target="_blank" rel="noopener">Debian</a></td><td align="right">108,373</td><td align="right">11.40%</td></tr><tr><td align="center">5</td><td align="left"><a href="https://www.datanyze.com/market-share/operating-systems--443/linux-market-share" target="_blank" rel="noopener">Linux</a></td><td align="right">24,563</td><td align="right">2.58%</td></tr><tr><td align="center">6</td><td align="left"><a href="https://www.datanyze.com/market-share/operating-systems--443/windows-server-market-share" target="_blank" rel="noopener">Windows Server</a></td><td align="right">23,872</td><td align="right">2.51%</td></tr><tr><td align="center">7</td><td align="left"><a href="https://www.datanyze.com/market-share/operating-systems--443/gentoo-market-share" target="_blank" rel="noopener">Gentoo</a></td><td align="right">16,756</td><td align="right">1.76%</td></tr><tr><td align="center">8</td><td align="left"><a href="https://www.datanyze.com/market-share/operating-systems--443/red-hat-enterprise-linux-market-share" target="_blank" rel="noopener">Red Hat Enterprise Linux</a></td><td align="right">13,659</td><td align="right">1.44%</td></tr><tr><td align="center">9</td><td align="left"><a href="https://www.datanyze.com/market-share/operating-systems--443/windows-7-market-share" target="_blank" rel="noopener">Windows 7</a></td><td align="right">11,843</td><td align="right">1.25%</td></tr><tr><td align="center">10</td><td align="left"><a href="https://www.datanyze.com/market-share/operating-systems--443/microsoft-windows-os-market-share" target="_blank" rel="noopener">Microsoft Windows OS</a></td><td align="right">10,986</td><td align="right">1.16%</td></tr></tbody></table><table><thead><tr><th align="left">op Competitors</th><th align="right">Websites</th><th align="right">Market Share</th><th align="right">Versus Page</th></tr></thead><tbody><tr><td align="left"><a href="https://www.datanyze.com/market-share/operating-systems--443/ubuntu-market-share" target="_blank" rel="noopener">Ubuntu</a></td><td align="right">278,611</td><td align="right">29.30%</td><td align="right"><a href="https://www.datanyze.com/market-share/operating-systems--443/linux-vs-ubuntu" target="_blank" rel="noopener">Linux vs. Ubuntu</a></td></tr><tr><td align="left"><a href="https://www.datanyze.com/market-share/operating-systems--443/unix-market-share" target="_blank" rel="noopener">Unix</a></td><td align="right">192,215</td><td align="right">20.21%</td><td align="right"><a href="https://www.datanyze.com/market-share/operating-systems--443/linux-vs-unix" target="_blank" rel="noopener">Linux vs. Unix</a></td></tr><tr><td align="left"><a href="https://www.datanyze.com/market-share/operating-systems--443/centos-market-share" target="_blank" rel="noopener">CentOS</a></td><td align="right">165,640</td><td align="right">17.42%</td><td align="right"><a href="https://www.datanyze.com/market-share/operating-systems--443/linux-vs-centos" target="_blank" rel="noopener">Linux vs. CentOS</a></td></tr><tr><td align="left"><a href="https://www.datanyze.com/market-share/operating-systems--443/debian-market-share" target="_blank" rel="noopener">Debian</a></td><td align="right">108,373</td><td align="right">11.40%</td><td align="right"><a href="https://www.datanyze.com/market-share/operating-systems--443/linux-vs-debian" target="_blank" rel="noopener">Linux vs. Debian</a></td></tr><tr><td align="left"><a href="https://www.datanyze.com/market-share/operating-systems--443/windows-server-market-share" target="_blank" rel="noopener">Windows Server</a></td><td align="right">23,872</td><td align="right">2.51%</td><td align="right"><a href="https://www.datanyze.com/market-share/operating-systems--443/linux-vs-windows-server" target="_blank" rel="noopener">Linux vs. Windows Server</a></td></tr><tr><td align="left"><a href="https://www.datanyze.com/market-share/operating-systems--443/gentoo-market-share" target="_blank" rel="noopener">Gentoo</a></td><td align="right">16,756</td><td align="right">1.76%</td><td align="right"><a href="https://www.datanyze.com/market-share/operating-systems--443/linux-vs-gentoo" target="_blank" rel="noopener">Linux vs. Gentoo</a></td></tr><tr><td align="left"><a href="https://www.datanyze.com/market-share/operating-systems--443/red-hat-enterprise-linux-market-share" target="_blank" rel="noopener">Red Hat Enterprise Linux</a></td><td align="right">13,659</td><td align="right">1.44%</td><td align="right"><a href="https://www.datanyze.com/market-share/operating-systems--443/linux-vs-red-hat-enterprise-linux" target="_blank" rel="noopener">Linux vs. Red Hat Enterprise Linux</a></td></tr><tr><td align="left"><a href="https://www.datanyze.com/market-share/operating-systems--443/windows-7-market-share" target="_blank" rel="noopener">Windows 7</a></td><td align="right">11,843</td><td align="right">1.25%</td><td align="right"><a href="https://www.datanyze.com/market-share/operating-systems--443/linux-vs-windows-7" target="_blank" rel="noopener">Linux vs. Windows 7</a></td></tr><tr><td align="left"><a href="https://www.datanyze.com/market-share/operating-systems--443/microsoft-windows-os-market-share" target="_blank" rel="noopener">Microsoft Windows OS</a></td><td align="right">10,986</td><td align="right">1.16%</td><td align="right"><a href="https://www.datanyze.com/market-share/operating-systems--443/linux-vs-microsoft-windows-os" target="_blank" rel="noopener">Linux vs. Microsoft Windows OS</a></td></tr><tr><td align="left"><a href="https://www.datanyze.com/market-share/operating-systems--443/freebsd-market-share" target="_blank" rel="noopener">FreeBSD</a></td><td align="right">9,633</td><td align="right">1.01%</td><td align="right"><a href="https://www.datanyze.com/market-share/operating-systems--443/linux-vs-freebsd" target="_blank" rel="noopener">Linux vs. FreeBSD</a></td></tr></tbody></table><h4 id="RedHat-CentOS"><a href="#RedHat-CentOS" class="headerlink" title="RedHat/CentOS"></a>RedHat/CentOS</h4><h4 id="Debian-Ubuntu"><a href="#Debian-Ubuntu" class="headerlink" title="Debian/Ubuntu"></a>Debian/Ubuntu</h4><p>咱的 VPS 清一色 Ubuntu 1804 ，主要是省事儿。</p><h2 id="命令行工具"><a href="#命令行工具" class="headerlink" title="命令行工具"></a>命令行工具</h2><h3 id="文本处理"><a href="#文本处理" class="headerlink" title="文本处理"></a>文本处理</h3><p>提到 Linux 上的文本处理工具当然是离不开三剑客（awk、grep、sed），这也是咱当初跟着《鸟哥 Linux 私房菜》学来的😂。</p><h4 id="sed"><a href="#sed" class="headerlink" title="sed"></a>sed</h4><h4 id="awk"><a href="#awk" class="headerlink" title="awk"></a>awk</h4><h4 id="grep"><a href="#grep" class="headerlink" title="grep"></a>grep</h4><h4 id="jq"><a href="#jq" class="headerlink" title="jq"></a>jq</h4><h4 id="tr"><a href="#tr" class="headerlink" title="tr"></a>tr</h4><h4 id="sort"><a href="#sort" class="headerlink" title="sort"></a>sort</h4><h4 id="wc"><a href="#wc" class="headerlink" title="wc"></a>wc</h4><h4 id="join"><a href="#join" class="headerlink" title="join"></a>join</h4><h4 id="cut"><a href="#cut" class="headerlink" title="cut"></a>cut</h4><h3 id="系统信息"><a href="#系统信息" class="headerlink" title="系统信息"></a>系统信息</h3><h4 id="htop"><a href="#htop" class="headerlink" title="htop"></a>htop</h4><p>top 黑乎乎的颜值太低了，咱还是喜欢花花绿绿的 htop （大雾</p><ul><li>install</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> RHEL/CentOS</span></span><br><span class="line">yum install htop</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Debian/Ubuntu</span></span><br><span class="line">apt install htop</span><br></pre></td></tr></table></figure><p><img src="img/image-20200506142544440.png" alt="image-20200506142544440"></p><h3 id="bashtop"><a href="#bashtop" class="headerlink" title="bashtop"></a><a href="https://github.com/aristocratos/bashtop" target="_blank" rel="noopener">bashtop</a></h3><p>bashtop 相比于 htop 有种吊炸天的感觉，炫酷无比😄</p><ul><li>install</li></ul><p>安装起来很简单，其实这是一个 shell 可执行文件，直接使用 curl 或者 wget 命令下载到本地并赋予 +x 权限即可。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -fsSL https://raw.githubusercontent.com/aristocratos/bashtop/master/bashtop -o /usr/bin/bashtop &amp;&amp; chmod +x /usr/bin/bashtop</span><br></pre></td></tr></table></figure><p>国内用户推荐使用 jsdelivr.net 的 CDN 来下载该脚本😑，（fuck GFW by jsdelivr😡</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -fsSL https://cdn.jsdelivr.net/gh/aristocratos/bashtop/bashtop  -o /usr/bin/bashtop ;chmod +x /usr/bin/bashtop</span><br></pre></td></tr></table></figure><p><img src="img/image-20200506151706148.png" alt="image-20200506151706148"></p><h4 id="pstree"><a href="#pstree" class="headerlink" title="pstree"></a>pstree</h4><p>以树状图的方式展现进程之间的派生关系，显示效果比 ps 更直观一些，可以很清楚地分辨出子进程和父进程之间的关系。可以用来排查一些孤儿进程。</p><ul><li>install</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> RHEL/CentOS</span></span><br><span class="line">yum install psmisc</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Debian/Ubuntu</span></span><br><span class="line">apt install psmisc</span><br></pre></td></tr></table></figure><ul><li>output example</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">╭─root@k8s-node-3 /proc</span><br><span class="line">╰─# pstree</span><br><span class="line">systemd─┬─agetty</span><br><span class="line">        ├─auditd───&#123;auditd&#125;</span><br><span class="line">        ├─containerd─┬─6*[containerd-shim─┬─pause]</span><br><span class="line">        │            │                    └─9*[&#123;containerd-shim&#125;]]</span><br><span class="line">        │            ├─containerd-shim─┬─kube-proxy───12*[&#123;kube-proxy&#125;]</span><br><span class="line">        │            │                 └─9*[&#123;containerd-shim&#125;]</span><br><span class="line">        │            ├─4*[containerd-shim─┬─pause]</span><br><span class="line">        │            │                    └─10*[&#123;containerd-shim&#125;]]</span><br><span class="line">        │            ├─containerd-shim─┬─lvscare───11*[&#123;lvscare&#125;]</span><br><span class="line">        │            │                 └─10*[&#123;containerd-shim&#125;]</span><br><span class="line">        │            ├─containerd-shim─┬─agent───10*[&#123;agent&#125;]</span><br><span class="line">        │            │                 └─10*[&#123;containerd-shim&#125;]</span><br><span class="line">        │            ├─containerd-shim─┬─runsvdir─┬─runsv───bird6</span><br><span class="line">        │            │                 │          ├─runsv───calico-node───18*[&#123;calico-node&#125;]</span><br><span class="line">        │            │                 │          ├─runsv───calico-node───15*[&#123;calico-node&#125;]</span><br><span class="line">        │            │                 │          └─runsv───bird</span><br><span class="line">        │            │                 └─12*[&#123;containerd-shim&#125;]</span><br><span class="line">        │            ├─containerd-shim─┬─node_exporter───4*[&#123;node_exporter&#125;]</span><br><span class="line">        │            │                 └─10*[&#123;containerd-shim&#125;]</span><br><span class="line">        │            ├─containerd-shim─┬─nginx-proxy─┬─confd───11*[&#123;confd&#125;]</span><br><span class="line">        │            │                 │             └─nginx───nginx</span><br><span class="line">        │            │                 └─9*[&#123;containerd-shim&#125;]</span><br><span class="line">        │            ├─containerd-shim─┬─deploy.sh───sleep</span><br><span class="line">        │            │                 └─10*[&#123;containerd-shim&#125;]</span><br><span class="line">        │            ├─containerd-shim─┬─nginx-ingress─┬─nginx───4*[nginx]</span><br><span class="line">        │            │                 │               └─14*[&#123;nginx-ingress&#125;]</span><br><span class="line">        │            │                 └─10*[&#123;containerd-shim&#125;]</span><br><span class="line">        │            ├─containerd-shim─┬─configmap-reloa───4*[&#123;configmap-reloa&#125;]</span><br><span class="line">        │            │                 └─9*[&#123;containerd-shim&#125;]</span><br><span class="line">        │            ├─containerd-shim─┬─bash</span><br><span class="line">        │            │                 └─9*[&#123;containerd-shim&#125;]</span><br><span class="line">        │            ├─containerd-shim─┬─ruby2.3─┬─ruby2.3───4*[&#123;ruby2.3&#125;]</span><br><span class="line">        │            │                 │         └─11*[&#123;ruby2.3&#125;]</span><br><span class="line">        │            │                 └─10*[&#123;containerd-shim&#125;]</span><br><span class="line">        │            └─46*[&#123;containerd&#125;]</span><br><span class="line">        ├─crond</span><br><span class="line">        ├─dbus-daemon───&#123;dbus-daemon&#125;</span><br><span class="line">        ├─dockerd───25*[&#123;dockerd&#125;]</span><br><span class="line">        ├─gssproxy───5*[&#123;gssproxy&#125;]</span><br><span class="line">        ├─irqbalance</span><br><span class="line">        ├─kubelet───26*[&#123;kubelet&#125;]</span><br><span class="line">        ├─lvmetad</span><br><span class="line">        ├─polkitd───6*[&#123;polkitd&#125;]</span><br><span class="line">        ├─rpc.idmapd</span><br><span class="line">        ├─rpc.mountd</span><br><span class="line">        ├─rpc.statd</span><br><span class="line">        ├─rpcbind</span><br><span class="line">        ├─rsyslogd───2*[&#123;rsyslogd&#125;]</span><br><span class="line">        ├─sshd───sshd───zsh───pstree</span><br><span class="line">        ├─systemd-journal</span><br><span class="line">        ├─systemd-logind</span><br><span class="line">        ├─systemd-udevd</span><br><span class="line">        └─tuned───4*[&#123;tuned&#125;]</span><br></pre></td></tr></table></figure><ul><li><p>可以看到 init 进程 systemd 为系统的 PID 1 号进程，所有的进程都在 systemd 的管理之下。</p></li><li><p>在运行 docker 的服务器上，容器进程的父进程并不是 dockerd 这个守护进程，而是一个名为　<code>containerd-shim-${container_name}</code>　而 containerd-shim 的父进程为容器运行时 <a href="https://containerd.io/" target="_blank" rel="noopener">containerd</a>，docker 是通过 gRPC 协议与 containerd 进程通信来，以此来进行管理所运行的容器。关于容器运行时的关系可以参考 <a href="https://xuanwo.io/2019/08/06/oci-intro/" target="_blank" rel="noopener">开放容器标准(OCI) 内部分享</a>，当时理解 dockerd 、containerd、containerd-shim 这些关系时感觉有点绕，不过用 pstree 命令看一下进程树结构就一目了然了😂，对理解进程之间的关系很有帮助。</p></li></ul><h4 id="ncdu"><a href="#ncdu" class="headerlink" title="ncdu"></a>ncdu</h4><p>面试的时候被问道过 <code>Linux 下如何查看文件见大小？</code>，当然是 <code>du -sh</code> 啦😂。不过咱还是喜欢用 ncdu</p><p>使用 <code>ncdu</code> 的好处就是可以通过交互式的方式查看目录占用空间的大小，要比 <code>du -sh</code> 命令方便很多，不过缺点也有，就是该命令为扫描目标目录下的所有文件，很耗时！如果想要立即查看一下目录占用的大小，还是用 <code>du -sh</code> 最方便，使用 ncdu 可以帮助我们分析文件夹下各个文件占用的情况。</p><ul><li>install</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> RHEL/CentOS</span></span><br><span class="line">yum install ncdu</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Debian/Ubuntu</span></span><br><span class="line">apt install ncdu</span><br></pre></td></tr></table></figure><ul><li>output example</li></ul><p>使用反向键和回车键进行目录奇幻，很方便的说😂</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">ncdu 1.13 ~ Use the arrow keys to navigate, press ? for help</span><br><span class="line">--- / ------------</span><br><span class="line">    5.2 GiB [##########] /var</span><br><span class="line">    2.2 GiB [####      ] /opt</span><br><span class="line">    2.0 GiB [###       ] /usr</span><br><span class="line">  363.6 MiB [          ] /root</span><br><span class="line">45.8 MiB [          ] /boot</span><br><span class="line">45.2 MiB [          ] /run</span><br><span class="line"> 4.6 MiB [          ] /etc</span><br><span class="line">44.0 KiB [          ] /tmp</span><br><span class="line">24.0 KiB [          ] /home</span><br><span class="line">e  16.0 KiB [          ] /lost+found</span><br><span class="line"> 8.0 KiB [          ] /media</span><br><span class="line">e   4.0 KiB [          ] /srv</span><br><span class="line">e   4.0 KiB [          ] /mnt</span><br><span class="line">.   0.0   B [          ] /proc</span><br><span class="line"> 0.0   B [          ] /sys</span><br><span class="line"> 0.0   B [          ] /dev</span><br><span class="line">@   0.0   B [          ]  initrd.img.old</span><br><span class="line">@   0.0   B [          ]  initrd.img</span><br><span class="line">@   0.0   B [          ]  vmlinuz.old</span><br><span class="line">@   0.0   B [          ]  vmlinuz</span><br><span class="line">@   0.0   B [          ]  libx32</span><br><span class="line">@   0.0   B [          ]  lib64</span><br><span class="line">@   0.0   B [          ]  lib32</span><br><span class="line">@   0.0   B [          ]  sbin</span><br><span class="line"></span><br><span class="line">ncdu 1.13 ~ Use the arrow keys to navigate, press ? for help</span><br><span class="line">--- /var --------------</span><br><span class="line"> 3.5 GiB [##########] /lib</span><br><span class="line"> 1.4 GiB [####      ] /opt</span><br><span class="line">  156.9 MiB [          ] /cache</span><br><span class="line">79.6 MiB [          ] /log</span><br><span class="line"> 1.8 MiB [          ] /backups</span><br><span class="line">20.0 KiB [          ] /tmp</span><br><span class="line">16.0 KiB [          ] /spool</span><br><span class="line">e   4.0 KiB [          ] /mail</span><br><span class="line">e   4.0 KiB [          ] /local</span><br><span class="line">@   0.0   B [          ]  lock</span><br><span class="line">@   0.0   B [          ]  run</span><br></pre></td></tr></table></figure><ul><li>G/GB</li></ul><blockquote><p>The SIZE argument is an integer and optional unit (example: 10K is 10*1024). Units are K,M,G,T,P,E,Z,Y (powers of 1024) or KB,MB,… (powers of 1000).</p></blockquote><h4 id="nload"><a href="#nload" class="headerlink" title="nload"></a>nload</h4><p>nload 命令是一个实时监控网络流量和带宽使用的控制台应用程序，使用两个图表可视化地展示接收和发送的流量，并提供诸如数据交换总量、最小/最大网络带宽使用量等附加信息。</p><ul><li>install</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> RHEL/CentOS</span></span><br><span class="line">yum install nload</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Debian/Ubuntu</span></span><br><span class="line">apt install nload</span><br></pre></td></tr></table></figure><ul><li>output example</li></ul><p>按下回车键可以切换不同的网卡</p><p><img src="img/image-20200506143310955.png" alt="image-20200506143310955"></p><h3 id="ls-兄弟们"><a href="#ls-兄弟们" class="headerlink" title="ls 兄弟们"></a>ls 兄弟们</h3><p>以 ls 开头的命令大多都是列出 XX 信息，这些工具也可以方便我们快速了解一下目前系统的状态。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">╭─root@gitlab /opt</span><br><span class="line">╰─<span class="comment"># ls</span></span><br><span class="line">ls           lsblk        LS_COLORS    lsinitramfs  lslogins     lsns         lspgpot</span><br><span class="line">lsa          lsb_release  lscpu        lsipc        lsmem        lsof</span><br><span class="line">lsattr       LSCOLORS     lshw         lslocks      lsmod        lspci</span><br></pre></td></tr></table></figure><h4 id="ls"><a href="#ls" class="headerlink" title="ls"></a>ls</h4><blockquote><p>ls - list directory contents 列出文件夹内容</p></blockquote><h4 id="lsattr"><a href="#lsattr" class="headerlink" title="lsattr"></a>lsattr</h4><blockquote><p>lsattr - list file attributes on a Linux second extended file system</p></blockquote><p>列出文件的属性，</p><h4 id="lsblk"><a href="#lsblk" class="headerlink" title="lsblk"></a>lsblk</h4><blockquote><p>lsblk - list block devices 列出块设备</p></blockquote><p>这个命令在查看块设备（磁盘) 分区和挂载点，以及磁盘尚未分配的空间信息很有帮助，要比 fdisk 更直观一些。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">╭─root@gitlab /opt</span><br><span class="line">╰─<span class="comment"># lsblk</span></span><br><span class="line">NAME                      MAJ:MIN RM SIZE RO TYPE MOUNTPOINT</span><br><span class="line">sda                         8:0    0  30G  0 disk</span><br><span class="line">├─sda1                      8:1    0   1M  0 part</span><br><span class="line">├─sda2                      8:2    0   1G  0 part /boot</span><br><span class="line">└─sda3                      8:3    0  29G  0 part</span><br><span class="line">  └─ubuntu--vg-ubuntu--lv 253:0    0  28G  0 lvm  /</span><br></pre></td></tr></table></figure><h4 id="lsb-release"><a href="#lsb-release" class="headerlink" title="lsb_release"></a>lsb_release</h4><blockquote><p>lsb_release - print distribution-specific information 打印发行版详情</p></blockquote><p>有些发行版尚未安装</p><h4 id="lscpu"><a href="#lscpu" class="headerlink" title="lscpu"></a>lscpu</h4><blockquote><p>lscpu - display information about the CPU architecture</p></blockquote><p>列出 CPU 的信息，和 cat /proc/cpuinfo 输出结果类似。相当于 Linux 下的 CPU-Z 😂</p><ul><li>output example</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">╭─root@gitlab</span> <span class="string">/opt</span></span><br><span class="line"><span class="string">╰─#</span> <span class="string">lscpu</span></span><br><span class="line"><span class="attr">Architecture:</span>        <span class="string">x86_64</span></span><br><span class="line"><span class="string">CPU</span> <span class="string">op-mode(s):</span>      <span class="number">32</span><span class="string">-bit,</span> <span class="number">64</span><span class="string">-bit</span></span><br><span class="line"><span class="attr">Byte Order:</span>          <span class="string">Little</span> <span class="string">Endian</span></span><br><span class="line"><span class="string">CPU(s):</span>              <span class="number">4</span></span><br><span class="line"><span class="string">On-line</span> <span class="string">CPU(s)</span> <span class="attr">list:</span> <span class="number">0</span><span class="number">-3</span></span><br><span class="line"><span class="string">Thread(s)</span> <span class="attr">per core:</span>  <span class="number">1</span></span><br><span class="line"><span class="string">Core(s)</span> <span class="attr">per socket:</span>  <span class="number">1</span></span><br><span class="line"><span class="string">Socket(s):</span>           <span class="number">4</span></span><br><span class="line"><span class="string">NUMA</span> <span class="string">node(s):</span>        <span class="number">1</span></span><br><span class="line"><span class="attr">Vendor ID:</span>           <span class="string">GenuineIntel</span></span><br><span class="line"><span class="attr">CPU family:</span>          <span class="number">6</span></span><br><span class="line"><span class="attr">Model:</span>               <span class="number">60</span></span><br><span class="line"><span class="attr">Model name:</span>          <span class="string">Intel(R)</span> <span class="string">Xeon(R)</span> <span class="string">CPU</span> <span class="string">E3-1271</span> <span class="string">v3</span> <span class="string">@</span> <span class="number">3.</span><span class="string">60GHz</span></span><br><span class="line"><span class="attr">Stepping:</span>            <span class="number">3</span></span><br><span class="line"><span class="attr">CPU MHz:</span>             <span class="number">3591.683</span></span><br><span class="line"><span class="attr">BogoMIPS:</span>            <span class="number">7183.36</span></span><br><span class="line"><span class="attr">Hypervisor vendor:</span>   <span class="string">VMware</span></span><br><span class="line"><span class="attr">Virtualization type:</span> <span class="string">full</span></span><br><span class="line"><span class="attr">L1d cache:</span>           <span class="string">32K</span></span><br><span class="line"><span class="attr">L1i cache:</span>           <span class="string">32K</span></span><br><span class="line"><span class="attr">L2 cache:</span>            <span class="string">256K</span></span><br><span class="line"><span class="attr">L3 cache:</span>            <span class="string">8192K</span></span><br><span class="line"><span class="string">NUMA</span> <span class="string">node0</span> <span class="string">CPU(s):</span>   <span class="number">0</span><span class="number">-3</span></span><br><span class="line"><span class="attr">Flags:</span>               <span class="string">fpu</span> <span class="string">vme</span> <span class="string">de</span> <span class="string">pse</span> <span class="string">tsc</span> <span class="string">msr</span> <span class="string">pae</span> <span class="string">mce</span> <span class="string">cx8</span> <span class="string">apic</span> <span class="string">sep</span> <span class="string">mtrr</span> <span class="string">pge</span> <span class="string">mca</span> <span class="string">cmov</span> <span class="string">pat</span> <span class="string">pse36</span> <span class="string">clflush</span> <span class="string">dts</span> <span class="string">mmx</span> <span class="string">fxsr</span> <span class="string">sse</span> <span class="string">sse2</span> <span class="string">ss</span> <span class="string">syscall</span> <span class="string">nx</span> <span class="string">pdpe1gb</span> <span class="string">rdtscp</span> <span class="string">lm</span> <span class="string">constant_tsc</span> <span class="string">arch_perfmon</span> <span class="string">pebs</span> <span class="string">bts</span> <span class="string">nopl</span> <span class="string">xtopology</span> <span class="string">tsc_reliable</span> <span class="string">nonstop_tsc</span> <span class="string">cpuid</span> <span class="string">aperfmperf</span> <span class="string">pni</span> <span class="string">pclmulqdq</span> <span class="string">ssse3</span> <span class="string">fma</span> <span class="string">cx16</span> <span class="string">pcid</span> <span class="string">sse4_1</span> <span class="string">sse4_2</span> <span class="string">x2apic</span> <span class="string">movbe</span> <span class="string">popcnt</span> <span class="string">tsc_deadline_timer</span> <span class="string">aes</span> <span class="string">xsave</span> <span class="string">avx</span> <span class="string">f16c</span> <span class="string">rdrand</span> <span class="string">hypervisor</span> <span class="string">lahf_lm</span> <span class="string">abm</span> <span class="string">cpuid_fault</span> <span class="string">epb</span> <span class="string">invpcid_single</span> <span class="string">pti</span> <span class="string">fsgsbase</span> <span class="string">tsc_adjust</span> <span class="string">bmi1</span> <span class="string">avx2</span> <span class="string">smep</span> <span class="string">bmi2</span> <span class="string">invpcid</span> <span class="string">xsaveopt</span> <span class="string">dtherm</span> <span class="string">ida</span> <span class="string">arat</span> <span class="string">pln</span> <span class="string">pts</span></span><br></pre></td></tr></table></figure><p><code>cat /proc/cpuinfo</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">╭─root@gitlab</span> <span class="string">/opt</span></span><br><span class="line"><span class="string">╰─#</span> <span class="string">cat</span> <span class="string">/proc/cpuinfo</span></span><br><span class="line"><span class="attr">processor       :</span> <span class="number">0</span></span><br><span class="line"><span class="attr">vendor_id       :</span> <span class="string">GenuineIntel</span></span><br><span class="line"><span class="attr">cpu family      :</span> <span class="number">6</span></span><br><span class="line"><span class="attr">model           :</span> <span class="number">60</span></span><br><span class="line"><span class="attr">model name      :</span> <span class="string">Intel(R)</span> <span class="string">Xeon(R)</span> <span class="string">CPU</span> <span class="string">E3-1271</span> <span class="string">v3</span> <span class="string">@</span> <span class="number">3.</span><span class="string">60GHz</span></span><br><span class="line"><span class="attr">stepping        :</span> <span class="number">3</span></span><br><span class="line"><span class="attr">microcode       :</span> <span class="number">0x1c</span></span><br><span class="line"><span class="attr">cpu MHz         :</span> <span class="number">3591.683</span></span><br><span class="line"><span class="attr">cache size      :</span> <span class="number">8192</span> <span class="string">KB</span></span><br><span class="line"><span class="attr">physical id     :</span> <span class="number">0</span></span><br><span class="line"><span class="attr">siblings        :</span> <span class="number">1</span></span><br><span class="line"><span class="attr">core id         :</span> <span class="number">0</span></span><br><span class="line"><span class="attr">cpu cores       :</span> <span class="number">1</span></span><br><span class="line"><span class="attr">apicid          :</span> <span class="number">0</span></span><br><span class="line"><span class="attr">initial apicid  :</span> <span class="number">0</span></span><br><span class="line"><span class="attr">fpu             :</span> <span class="literal">yes</span></span><br><span class="line"><span class="attr">fpu_exception   :</span> <span class="literal">yes</span></span><br><span class="line"><span class="attr">cpuid level     :</span> <span class="number">13</span></span><br><span class="line"><span class="attr">wp              :</span> <span class="literal">yes</span></span><br><span class="line"><span class="attr">flags           :</span> <span class="string">fpu</span> <span class="string">vme</span> <span class="string">de</span> <span class="string">pse</span> <span class="string">tsc</span> <span class="string">msr</span> <span class="string">pae</span> <span class="string">mce</span> <span class="string">cx8</span> <span class="string">apic</span> <span class="string">sep</span> <span class="string">mtrr</span> <span class="string">pge</span> <span class="string">mca</span> <span class="string">cmov</span> <span class="string">pat</span> <span class="string">pse36</span> <span class="string">clflush</span> <span class="string">dts</span> <span class="string">mmx</span> <span class="string">fxsr</span> <span class="string">sse</span> <span class="string">sse2</span> <span class="string">ss</span> <span class="string">syscall</span> <span class="string">nx</span> <span class="string">pdpe1gb</span> <span class="string">rdtscp</span> <span class="string">lm</span> <span class="string">constant_tsc</span> <span class="string">arch_perfmon</span> <span class="string">pebs</span> <span class="string">bts</span> <span class="string">nopl</span> <span class="string">xtopology</span> <span class="string">tsc_reliable</span> <span class="string">nonstop_tsc</span> <span class="string">cpuid</span> <span class="string">aperfmperf</span> <span class="string">pni</span> <span class="string">pclmulqdq</span> <span class="string">ssse3</span> <span class="string">fma</span> <span class="string">cx16</span> <span class="string">pcid</span> <span class="string">sse4_1</span> <span class="string">sse4_2</span> <span class="string">x2apic</span> <span class="string">movbe</span> <span class="string">popcnt</span> <span class="string">tsc_deadline_timer</span> <span class="string">aes</span> <span class="string">xsave</span> <span class="string">avx</span> <span class="string">f16c</span> <span class="string">rdrand</span> <span class="string">hypervisor</span> <span class="string">lahf_lm</span> <span class="string">abm</span> <span class="string">cpuid_fault</span> <span class="string">epb</span> <span class="string">invpcid_single</span> <span class="string">pti</span> <span class="string">fsgsbase</span> <span class="string">tsc_adjust</span> <span class="string">bmi1</span> <span class="string">avx2</span> <span class="string">smep</span> <span class="string">bmi2</span> <span class="string">invpcid</span> <span class="string">xsaveopt</span> <span class="string">dtherm</span> <span class="string">ida</span> <span class="string">arat</span> <span class="string">pln</span> <span class="string">pts</span></span><br><span class="line"><span class="attr">bugs            :</span> <span class="string">cpu_meltdown</span> <span class="string">spectre_v1</span> <span class="string">spectre_v2</span> <span class="string">spec_store_bypass</span> <span class="string">l1tf</span> <span class="string">mds</span> <span class="string">swapgs</span></span><br><span class="line"><span class="attr">bogomips        :</span> <span class="number">7183.36</span></span><br><span class="line"><span class="attr">clflush size    :</span> <span class="number">64</span></span><br><span class="line"><span class="attr">cache_alignment :</span> <span class="number">64</span></span><br><span class="line"><span class="attr">address sizes   :</span> <span class="number">42</span> <span class="string">bits</span> <span class="string">physical,</span> <span class="number">48</span> <span class="string">bits</span> <span class="string">virtual</span></span><br><span class="line"><span class="attr">power management:</span></span><br></pre></td></tr></table></figure><h4 id="lshw"><a href="#lshw" class="headerlink" title="lshw"></a>lshw</h4><blockquote><p>lshw - list hardware 列出硬件设备</p><p>lshw is a small tool to extract detailed information on the hardware configuration of the machine. It  can report exact memory configuration, firmware version, mainboard configuration, CPU version and speed, cache configuration, bus speed, etc. on DMI-capable x86 or IA-64 systems and on some PowerPC machines  (PowerMac G4 is known to work).It  currently  supports  DMI (x86 and IA-64 only), OpenFirmware device tree (PowerPC only), PCI/AGP, CPUID (x86), IDE/ATA/ATAPI, PCMCIA (only tested on x86), SCSI and USB.</p></blockquote><p>这个命令就相当于 Windows 下的设备管理器，列出系统里的硬件设备。</p><ul><li>install</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> RHEL/CentOS</span></span><br><span class="line">yum install lshw</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Debian/Ubuntu</span></span><br><span class="line">apt install lshw</span><br></pre></td></tr></table></figure><ul><li>output example</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br></pre></td><td class="code"><pre><span class="line">╭─root@sg-02 /home/ubuntu</span><br><span class="line">╰─# lshw</span><br><span class="line">sg-02</span><br><span class="line"> description: Computer</span><br><span class="line"> product: HVM domU</span><br><span class="line"> vendor: Xen</span><br><span class="line"> version: 4.2.amazon</span><br><span class="line"> serial: ec2c5773-d127-c5a4-60a3-221becf4e6ae</span><br><span class="line"> width: 64 bits</span><br><span class="line"> capabilities: smbios-2.7 dmi-2.7 vsyscall32</span><br><span class="line"> configuration: boot=normal uuid=73572CEC-27D1-A4C5-60A3-221BECF4E6AE</span><br><span class="line">  *-core</span><br><span class="line"> description: Motherboard</span><br><span class="line"> physical id: 0</span><br><span class="line">  *-firmware</span><br><span class="line"> description: BIOS</span><br><span class="line"> vendor: Xen</span><br><span class="line"> physical id: 0</span><br><span class="line"> version: 4.2.amazon</span><br><span class="line"> date: 08/24/2006</span><br><span class="line"> size: 96KiB</span><br><span class="line"> capabilities: pci edd</span><br><span class="line">  *-cpu</span><br><span class="line"> description: CPU</span><br><span class="line"> product: Intel(R) Xeon(R) CPU E5-2676 v3 @ 2.40GHz</span><br><span class="line"> vendor: Intel Corp.</span><br><span class="line"> physical id: 401</span><br><span class="line"> bus info: cpu@0</span><br><span class="line"> slot: CPU 1</span><br><span class="line"> size: 2400MHz</span><br><span class="line"> capacity: 2400MHz</span><br><span class="line"> width: 64 bits</span><br><span class="line"> capabilities: fpu fpu_exception wp vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush mmx fxsr sse sse2 ht syscall nx rdtscp x86-64 constant_tsc rep_good nopl xtopology cpuid pni pclmulqdq ssse3 fma cx16 pcid sse4_1 sse4_2 x2apic movbe popcnt tsc_deadline_timer aes xsave avx f16c rdrand hypervisor lahf_lm abm cpuid_fault invpcid_single pti fsgsbase bmi1 avx2 smep bmi2 erms invpcid xsaveopt</span><br><span class="line">  *-memory</span><br><span class="line"> description: System Memory</span><br><span class="line"> physical id: 1000</span><br><span class="line"> size: 1GiB</span><br><span class="line"> capacity: 1GiB</span><br><span class="line"> capabilities: ecc</span><br><span class="line"> configuration: errordetection=multi-bit-ecc</span><br><span class="line">  *-bank</span><br><span class="line"> description: DIMM RAM</span><br><span class="line"> physical id: 0</span><br><span class="line"> slot: DIMM 0</span><br><span class="line"> size: 1GiB</span><br><span class="line"> width: 64 bits</span><br><span class="line">  *-pci</span><br><span class="line"> description: Host bridge</span><br><span class="line"> product: 440FX - 82441FX PMC [Natoma]</span><br><span class="line"> vendor: Intel Corporation</span><br><span class="line"> physical id: 100</span><br><span class="line"> bus info: pci@0000:00:00.0</span><br><span class="line"> version: 02</span><br><span class="line"> width: 32 bits</span><br><span class="line"> clock: 33MHz</span><br><span class="line">  *-isa</span><br><span class="line"> description: ISA bridge</span><br><span class="line"> product: 82371SB PIIX3 ISA [Natoma/Triton II]</span><br><span class="line"> vendor: Intel Corporation</span><br><span class="line"> physical id: 1</span><br><span class="line"> bus info: pci@0000:00:01.0</span><br><span class="line"> version: 00</span><br><span class="line"> width: 32 bits</span><br><span class="line"> clock: 33MHz</span><br><span class="line"> capabilities: isa bus_master</span><br><span class="line"> configuration: latency=0</span><br><span class="line">  *-ide</span><br><span class="line"> description: IDE interface</span><br><span class="line"> product: 82371SB PIIX3 IDE [Natoma/Triton II]</span><br><span class="line"> vendor: Intel Corporation</span><br><span class="line"> physical id: 1.1</span><br><span class="line"> bus info: pci@0000:00:01.1</span><br><span class="line"> version: 00</span><br><span class="line"> width: 32 bits</span><br><span class="line"> clock: 33MHz</span><br><span class="line"> capabilities: ide bus_master</span><br><span class="line"> configuration: driver=ata_piix latency=64</span><br><span class="line"> resources: irq:0 ioport:1f0(size=8) ioport:3f6 ioport:170(size=8) ioport:376 ioport:c100(size=16)</span><br><span class="line">  *-bridge UNCLAIMED</span><br><span class="line"> description: Bridge</span><br><span class="line"> product: 82371AB/EB/MB PIIX4 ACPI</span><br><span class="line"> vendor: Intel Corporation</span><br><span class="line"> physical id: 1.3</span><br><span class="line"> bus info: pci@0000:00:01.3</span><br><span class="line"> version: 01</span><br><span class="line"> width: 32 bits</span><br><span class="line"> clock: 33MHz</span><br><span class="line"> capabilities: bridge bus_master</span><br><span class="line"> configuration: latency=0</span><br><span class="line">  *-display UNCLAIMED</span><br><span class="line"> description: VGA compatible controller</span><br><span class="line"> product: GD 5446</span><br><span class="line"> vendor: Cirrus Logic</span><br><span class="line"> physical id: 2</span><br><span class="line"> bus info: pci@0000:00:02.0</span><br><span class="line"> version: 00</span><br><span class="line"> width: 32 bits</span><br><span class="line"> clock: 33MHz</span><br><span class="line"> capabilities: vga_controller bus_master</span><br><span class="line"> configuration: latency=0</span><br><span class="line"> resources: memory:f0000000-f1ffffff memory:f3000000-f3000fff memory:c0000-dffff</span><br><span class="line">  *-generic</span><br><span class="line"> description: Unassigned class</span><br><span class="line"> product: Xen Platform Device</span><br><span class="line"> vendor: XenSource, Inc.</span><br><span class="line"> physical id: 3</span><br><span class="line"> bus info: pci@0000:00:03.0</span><br><span class="line"> version: 01</span><br><span class="line"> width: 32 bits</span><br><span class="line"> clock: 33MHz</span><br><span class="line"> capabilities: bus_master</span><br><span class="line"> configuration: driver=xen-platform-pci latency=0</span><br><span class="line"> resources: irq:28 ioport:c000(size=256) memory:f2000000-f2ffffff</span><br><span class="line">  *-network:0</span><br><span class="line"> description: Ethernet interface</span><br><span class="line"> physical id: 1</span><br><span class="line"> logical name: eth0</span><br><span class="line"> serial: 02:24:d2:49:f2:94</span><br><span class="line"> capabilities: ethernet physical</span><br><span class="line"> configuration: broadcast=yes driver=vif ip=172.26.17.53 link=yes multicast=yes</span><br><span class="line">  *-network:1</span><br><span class="line"> description: Ethernet interface</span><br><span class="line"> physical id: 2</span><br><span class="line"> logical name: docker0</span><br><span class="line"> serial: 02:42:37:cf:cf:aa</span><br><span class="line"> capabilities: ethernet physical</span><br><span class="line"> configuration: broadcast=yes driver=bridge driverversion=2.3 firmware=N/A ip=172.17.0.1 link=no multicast=yes</span><br><span class="line">╭─root@sg-02 /home/ubuntu</span><br><span class="line">╰─#</span><br></pre></td></tr></table></figure><h4 id="lsinitramfs"><a href="#lsinitramfs" class="headerlink" title="lsinitramfs"></a>lsinitramfs</h4><blockquote><p>lsinitramfs - list content of an initramfs image</p><p>The  lsinitramfs  command  lists the content of given initramfs images. It allows one to quickly check the content of one (or multiple) specified initramfs files.</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">╭─root@gitlab /opt</span><br><span class="line">╰─<span class="comment"># lsinitramfs /boot/initrd.img-4.15.0-58-generic | head -n 10</span></span><br><span class="line">.</span><br><span class="line">usr</span><br><span class="line">usr/share</span><br><span class="line">usr/share/plymouth</span><br><span class="line">usr/share/plymouth/themes</span><br><span class="line">usr/share/plymouth/themes/details</span><br><span class="line">usr/share/plymouth/themes/details/details.plymouth</span><br><span class="line">usr/share/plymouth/themes/text.plymouth</span><br><span class="line">usr/share/plymouth/themes/ubuntu-text</span><br><span class="line">usr/share/plymouth/themes/ubuntu-text/ubuntu-text.plymouth.in</span><br></pre></td></tr></table></figure><h4 id="lsipc"><a href="#lsipc" class="headerlink" title="lsipc"></a>lsipc</h4><blockquote><p>lsipc - show information on IPC facilities currently employed in the system</p><p>lsipc  shows  information on the inter-process communication facilities for which the calling process has read access.</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">╭─root@gitlab /opt</span><br><span class="line">╰─<span class="comment"># lsipc</span></span><br><span class="line">RESOURCE DESCRIPTION                                     LIMIT USED  USE%</span><br><span class="line">MSGMNI   Number of message queues                        32000    0 0.00%</span><br><span class="line">MSGMAX   Max size of message (bytes)                      8192    -     -</span><br><span class="line">MSGMNB   Default max size of queue (bytes)               16384    -     -</span><br><span class="line">SHMMNI   Shared memory segments                           4096    1 0.02%</span><br><span class="line">SHMALL   Shared memory pages                           4194304    0 0.00%</span><br><span class="line">SHMMAX   Max size of shared memory segment (bytes) 17179869184    -     -</span><br><span class="line">SHMMIN   Min size of shared memory segment (bytes)           1    -     -</span><br><span class="line">SEMMNI   Number of semaphore identifiers                   262    0 0.00%</span><br><span class="line">SEMMNS   Total number of semaphores                      32000    0 0.00%</span><br><span class="line">SEMMSL   Max semaphores per semaphore <span class="built_in">set</span>.                 250    -     -</span><br><span class="line">SEMOPM   Max number of operations per semop(2)              32    -     -</span><br><span class="line">SEMVMX   Semaphore max value                             32767    -     -</span><br></pre></td></tr></table></figure><h4 id="lslocks"><a href="#lslocks" class="headerlink" title="lslocks"></a>lslocks</h4><blockquote><p>lslocks - list local system locks</p><p>lslocks lists information about all the currently held file locks in a Linux system</p></blockquote><p>列出当前系统中被加锁的文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">╭─root@gitlab /opt</span><br><span class="line">╰─<span class="comment"># lslocks</span></span><br><span class="line">COMMAND           PID  TYPE SIZE MODE  M START END PATH</span><br><span class="line">cron              900 FLOCK   4B WRITE 0     0   0 /run/crond.pid</span><br><span class="line">svlogd          53065 FLOCK   0B WRITE 0     0   0 /var/<span class="built_in">log</span>/gitlab/redis/lock</span><br><span class="line">runsv           54095 FLOCK   0B WRITE 0     0   0 /opt/gitlab/sv/sidekiq/supervise/lock</span><br><span class="line">runsv           54095 FLOCK   0B WRITE 0     0   0 /opt/gitlab/sv/sidekiq/<span class="built_in">log</span>/supervise/lock</span><br></pre></td></tr></table></figure><h4 id="lslogins"><a href="#lslogins" class="headerlink" title="lslogins"></a>lslogins</h4><p>列出当前已经登录的用户信息</p><blockquote><p>lslogins - display information about known users in the system</p><p>Examine the wtmp and btmp logs, /etc/shadow (if necessary) and /etc/passwd and output the desired data. The default action is to list info about all the users in the system.</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">╭─root@gitlab /opt</span><br><span class="line">╰─<span class="comment"># lslogins</span></span><br><span class="line">  UID USER              PROC PWD-LOCK PWD-DENY LAST-LOGIN GECOS</span><br><span class="line"> 0 root               211        0        0      06:58 root</span><br><span class="line"> 1 daemon               1        0        1            daemon</span><br><span class="line"> 2 bin                  0        0        1            bin</span><br><span class="line"> 3 sys                  0        0        1            sys</span><br><span class="line"> 4 sync                 0        0        1            sync</span><br><span class="line"> 5 games                0        0        1            games</span><br><span class="line"> 6 man                  0        0        1            man</span><br><span class="line"> 7 lp                   0        0        1            lp</span><br><span class="line"> 8 mail                 0        0        1            mail</span><br><span class="line"> 9 news                 0        0        1            news</span><br><span class="line">10 uucp                 0        0        1            uucp</span><br><span class="line">13 proxy                0        0        1            proxy</span><br><span class="line">33 www-data             0        0        1            www-data</span><br><span class="line">34 backup               0        0        1            backup</span><br><span class="line">38 list                 0        0        1            Mailing List Manager</span><br><span class="line">39 irc                  0        0        1            ircd</span><br><span class="line">41 gnats                0        0        1            Gnats Bug-Reporting System (admin)</span><br><span class="line">  100 systemd-network      1        0        1            systemd Network Management,,,</span><br><span class="line">  101 systemd-resolve      1        0        1            systemd Resolver,,,</span><br><span class="line">  102 syslog               1        0        1</span><br><span class="line">  103 messagebus           1        0        1</span><br><span class="line">  104 _apt                 0        0        1</span><br><span class="line">  105 lxd                  0        0        1</span><br><span class="line">  106 uuidd                0        0        1</span><br><span class="line">  107 dnsmasq              0        0        1            dnsmasq,,,</span><br><span class="line">  108 landscape            0        0        1</span><br><span class="line">  109 pollinate            0        0        1</span><br><span class="line">  110 sshd                 0        0        1</span><br><span class="line">  995 gitlab-prometheus    4        0        1</span><br><span class="line">  996 gitlab-psql         18        0        1</span><br><span class="line">  997 gitlab-redis         2        0        1</span><br><span class="line">  998 git                 16        0        1</span><br><span class="line">  999 gitlab-www           5        0        1</span><br><span class="line"> 1000 ubuntu               0        0        0 2019-Aug28 ubuntu</span><br><span class="line">65534 nobody               0        0        1            nobody</span><br></pre></td></tr></table></figure><h4 id="lsmem"><a href="#lsmem" class="headerlink" title="lsmem"></a>lsmem</h4><blockquote><p>lsmem - list the ranges of available memory with their online status</p><p>The  lsmem command lists the ranges of available memory with their online status. The listed memory blocks correspond to the memory block representation in sysfs. The command also shows the memory block  size  and the amount of memory in online and offline state.</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">╭─root@gitlab /opt</span><br><span class="line">╰─<span class="comment"># lsmem                                                                                                     127 ↵</span></span><br><span class="line">RANGE                                  SIZE  STATE REMOVABLE BLOCK</span><br><span class="line">0x0000000000000000-0x0000000007ffffff  128M online        no     0</span><br><span class="line">0x0000000008000000-0x000000000fffffff  128M online       yes     1</span><br><span class="line">0x0000000010000000-0x000000001fffffff  256M online        no   2-3</span><br><span class="line">0x0000000020000000-0x0000000027ffffff  128M online       yes     4</span><br><span class="line">0x0000000028000000-0x0000000037ffffff  256M online        no   5-6</span><br><span class="line">0x0000000038000000-0x000000003fffffff  128M online       yes     7</span><br><span class="line">0x0000000040000000-0x000000006fffffff  768M online        no  8-13</span><br><span class="line">0x0000000070000000-0x0000000077ffffff  128M online       yes    14</span><br><span class="line">0x0000000078000000-0x00000000bfffffff  1.1G online        no 15-23</span><br><span class="line">0x0000000100000000-0x000000013fffffff    1G online        no 32-39</span><br><span class="line"></span><br><span class="line">Memory block size:       128M</span><br><span class="line">Total online memory:       4G</span><br><span class="line">Total offline memory:      0B</span><br></pre></td></tr></table></figure><h4 id="lsmod"><a href="#lsmod" class="headerlink" title="lsmod"></a>lsmod</h4><p>列出系统内核模块</p><blockquote><p>lsmod - Show the status of modules in the Linux Kernel</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line">╭─root@gitlab /opt</span><br><span class="line">╰─<span class="comment"># lsmod</span></span><br><span class="line">Module                  Size  Used by</span><br><span class="line">tcp_diag               16384  0</span><br><span class="line">inet_diag              24576  1 tcp_diag</span><br><span class="line">joydev                 24576  0</span><br><span class="line">input_leds             16384  0</span><br><span class="line">vmw_balloon            20480  0</span><br><span class="line">serio_raw              16384  0</span><br><span class="line">vmw_vsock_vmci_transport    28672  1</span><br><span class="line">vsock                  36864  2 vmw_vsock_vmci_transport</span><br><span class="line">vmw_vmci               69632  2 vmw_balloon,vmw_vsock_vmci_transport</span><br><span class="line">sch_fq_codel           20480  5</span><br><span class="line">ib_iser                49152  0</span><br><span class="line">rdma_cm                61440  1 ib_iser</span><br><span class="line">iw_cm                  45056  1 rdma_cm</span><br><span class="line">ib_cm                  53248  1 rdma_cm</span><br><span class="line">ib_core               225280  4 rdma_cm,iw_cm,ib_iser,ib_cm</span><br><span class="line">iscsi_tcp              20480  0</span><br><span class="line">libiscsi_tcp           20480  1 iscsi_tcp</span><br><span class="line">libiscsi               53248  3 libiscsi_tcp,iscsi_tcp,ib_iser</span><br><span class="line">scsi_transport_iscsi    98304  3 iscsi_tcp,ib_iser,libiscsi</span><br><span class="line">ip_tables              28672  0</span><br><span class="line">x_tables               40960  1 ip_tables</span><br><span class="line">autofs4                40960  2</span><br><span class="line">btrfs                1130496  0</span><br><span class="line">zstd_compress         163840  1 btrfs</span><br><span class="line">raid10                 53248  0</span><br><span class="line">raid456               143360  0</span><br><span class="line">async_raid6_recov      20480  1 raid456</span><br><span class="line">async_memcpy           16384  2 raid456,async_raid6_recov</span><br><span class="line">async_pq               16384  2 raid456,async_raid6_recov</span><br><span class="line">async_xor              16384  3 async_pq,raid456,async_raid6_recov</span><br><span class="line">async_tx               16384  5 async_pq,async_memcpy,async_xor,raid456,async_raid6_recov</span><br><span class="line">xor                    24576  2 async_xor,btrfs</span><br><span class="line">raid6_pq              114688  4 async_pq,btrfs,raid456,async_raid6_recov</span><br><span class="line">libcrc32c              16384  1 raid456</span><br><span class="line">raid1                  40960  0</span><br><span class="line">raid0                  20480  0</span><br><span class="line">multipath              16384  0</span><br><span class="line">linear                 16384  0</span><br><span class="line">crct10dif_pclmul       16384  0</span><br><span class="line">crc32_pclmul           16384  0</span><br><span class="line">ghash_clmulni_intel    16384  0</span><br><span class="line">pcbc                   16384  0</span><br><span class="line">vmwgfx                274432  1</span><br><span class="line">ttm                   106496  1 vmwgfx</span><br><span class="line">drm_kms_helper        172032  1 vmwgfx</span><br><span class="line">aesni_intel           188416  0</span><br><span class="line">syscopyarea            16384  1 drm_kms_helper</span><br><span class="line">aes_x86_64             20480  1 aesni_intel</span><br><span class="line">sysfillrect            16384  1 drm_kms_helper</span><br><span class="line">crypto_simd            16384  1 aesni_intel</span><br><span class="line">sysimgblt              16384  1 drm_kms_helper</span><br><span class="line">glue_helper            16384  1 aesni_intel</span><br><span class="line">fb_sys_fops            16384  1 drm_kms_helper</span><br><span class="line">cryptd                 24576  3 crypto_simd,ghash_clmulni_intel,aesni_intel</span><br><span class="line">psmouse               147456  0</span><br><span class="line">drm                   401408  4 vmwgfx,drm_kms_helper,ttm</span><br><span class="line">mptspi                 24576  2</span><br><span class="line">mptscsih               40960  1 mptspi</span><br><span class="line">mptbase               102400  2 mptspi,mptscsih</span><br><span class="line">ahci                   40960  0</span><br><span class="line">libahci                32768  1 ahci</span><br><span class="line">i2c_piix4              24576  0</span><br><span class="line">vmxnet3                57344  0</span><br><span class="line">scsi_transport_spi     32768  1 mptspi</span><br><span class="line">pata_acpi              16384  0</span><br></pre></td></tr></table></figure><h4 id="lsns-list-namespaces"><a href="#lsns-list-namespaces" class="headerlink" title="lsns - list namespaces"></a>lsns - list namespaces</h4><p>lsns  lists  information  about all the currently accessible namespaces or about the given namespace.  The namespace identifier is an inode number.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">╭─root@gitlab /opt</span><br><span class="line">╰─<span class="comment"># lsns</span></span><br><span class="line">  NS TYPE   NPROCS   PID USER             COMMAND</span><br><span class="line">4026531835 cgroup    264     1 root             /lib/systemd/systemd --system --deserialize 39</span><br><span class="line">4026531836 pid       264     1 root             /lib/systemd/systemd --system --deserialize 39</span><br><span class="line">4026531837 user      264     1 root             /lib/systemd/systemd --system --deserialize 39</span><br><span class="line">4026531838 uts       264     1 root             /lib/systemd/systemd --system --deserialize 39</span><br><span class="line">4026531839 ipc       264     1 root             /lib/systemd/systemd --system --deserialize 39</span><br><span class="line">4026531840 mnt       259     1 root             /lib/systemd/systemd --system --deserialize 39</span><br><span class="line">4026531861 mnt         1    31 root             kdevtmpfs</span><br><span class="line">4026531993 net       264     1 root             /lib/systemd/systemd --system --deserialize 39</span><br><span class="line">4026532531 mnt         1 37609 root             /lib/systemd/systemd-udevd</span><br><span class="line">4026532556 mnt         1 42954 systemd-timesync /lib/systemd/systemd-timesyncd</span><br><span class="line">4026532557 mnt         1 42900 systemd-network  /lib/systemd/systemd-networkd</span><br><span class="line">4026532603 mnt         1 42924 systemd-resolve  /lib/systemd/systemd-resolved</span><br></pre></td></tr></table></figure><h4 id="lsof-list-open-files"><a href="#lsof-list-open-files" class="headerlink" title="lsof - list open files"></a>lsof - list open files</h4><p>lsof 列出打开的文件。绝对是个排查故障的利器，在一切皆文件的 Linux 世界里，lsof 可以查看打开的文件是：</p><ul><li>普通文件</li><li>目录</li><li>网络文件系统的文件</li><li>字符或设备文件</li><li>(函数)共享库</li><li>管道、命名管道</li><li>符号链接</li><li>网络文件（例如：NFS file、网络socket，unix域名socket）</li><li>还有其它类型的文件，等等</li></ul><p>另外 lsof 命令也是有着最多选项的Linux/Unix命令之一，另一个 nc 命令也是如此😂。</p><ul><li>列出端口号占用的进程</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">╭─root@blog &#x2F;opt&#x2F;shell</span><br><span class="line">╰─# lsof -i :53      ↵</span><br><span class="line">COMMAND   PID            USER   FD   TYPE DEVICE SIZE&#x2F;OFF NODE NAME</span><br><span class="line">systemd-r 538 systemd-resolve   12u  IPv4  13925      0t0  UDP localhost:domain</span><br><span class="line">systemd-r 538 systemd-resolve   13u  IPv4  13926      0t0  TCP localhost:domain (LISTEN)</span><br></pre></td></tr></table></figure><blockquote><p>PS：最近面试的时候被问到过</p><p>Q： Linux 下查看端口占用的命令？</p><p>A：<code>netstat -tunlp</code> 、<code>ss -tua</code>、<code>lsof -i</code> 😂</p></blockquote><h4 id="lspci-list-all-PCI-devices"><a href="#lspci-list-all-PCI-devices" class="headerlink" title="lspci - list all PCI devices"></a>lspci - list all PCI devices</h4><p>列出 PCI 设备，比如显卡</p><blockquote><p>lspci is a utility for displaying information about PCI buses in the system and devices connected to them.</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">╭─root@gitlab /opt</span><br><span class="line">╰─<span class="comment"># lspci</span></span><br><span class="line">00:00.0 Host bridge: Intel Corporation 440BX/ZX/DX - 82443BX/ZX/DX Host bridge (rev 01)</span><br><span class="line">00:01.0 PCI bridge: Intel Corporation 440BX/ZX/DX - 82443BX/ZX/DX AGP bridge (rev 01)</span><br><span class="line">00:07.0 ISA bridge: Intel Corporation 82371AB/EB/MB PIIX4 ISA (rev 08)</span><br><span class="line">00:07.1 IDE interface: Intel Corporation 82371AB/EB/MB PIIX4 IDE (rev 01)</span><br><span class="line">00:07.3 Bridge: Intel Corporation 82371AB/EB/MB PIIX4 ACPI (rev 08)</span><br><span class="line">00:07.7 System peripheral: VMware Virtual Machine Communication Interface (rev 10)</span><br><span class="line">00:0f.0 VGA compatible controller: VMware SVGA II Adapter</span><br><span class="line">00:10.0 SCSI storage controller: LSI Logic / Symbios Logic 53c1030 PCI-X Fusion-MPT Dual Ultra320 SCSI (rev 01)</span><br><span class="line">00:11.0 PCI bridge: VMware PCI bridge (rev 02)</span><br></pre></td></tr></table></figure><h3 id="proc"><a href="#proc" class="headerlink" title="proc"></a>proc</h3><p>确切来说这并不是一个工具，而是 Linux 的内存文件系统，它可以帮助我们了解一些系统信息，方便排查一些故障等。</p><h4 id="CPU"><a href="#CPU" class="headerlink" title="CPU"></a>CPU</h4><p><code>cat /proc/cpuinfo</code> 和 <code>lscpu</code> 二者输出类似</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">[root@k8s-master-01</span> <span class="string">~]#</span> <span class="string">cat</span> <span class="string">/proc/cpuinfo</span></span><br><span class="line"><span class="attr">processor       :</span> <span class="number">0</span></span><br><span class="line"><span class="attr">vendor_id       :</span> <span class="string">GenuineIntel</span></span><br><span class="line"><span class="attr">cpu family      :</span> <span class="number">6</span></span><br><span class="line"><span class="attr">model           :</span> <span class="number">60</span></span><br><span class="line"><span class="attr">model name      :</span> <span class="string">Intel(R)</span> <span class="string">Xeon(R)</span> <span class="string">CPU</span> <span class="string">E3-1271</span> <span class="string">v3</span> <span class="string">@</span> <span class="number">3.</span><span class="string">60GHz</span></span><br><span class="line"><span class="attr">stepping        :</span> <span class="number">3</span></span><br><span class="line"><span class="attr">microcode       :</span> <span class="number">0x1c</span></span><br><span class="line"><span class="attr">cpu MHz         :</span> <span class="number">3591.683</span></span><br><span class="line"><span class="attr">cache size      :</span> <span class="number">8192</span> <span class="string">KB</span></span><br><span class="line"><span class="attr">physical id     :</span> <span class="number">0</span></span><br><span class="line"><span class="attr">siblings        :</span> <span class="number">1</span></span><br><span class="line"><span class="attr">core id         :</span> <span class="number">0</span></span><br><span class="line"><span class="attr">cpu cores       :</span> <span class="number">1</span></span><br><span class="line"><span class="attr">apicid          :</span> <span class="number">0</span></span><br><span class="line"><span class="attr">initial apicid  :</span> <span class="number">0</span></span><br><span class="line"><span class="attr">fpu             :</span> <span class="literal">yes</span></span><br><span class="line"><span class="attr">fpu_exception   :</span> <span class="literal">yes</span></span><br><span class="line"><span class="attr">cpuid level     :</span> <span class="number">13</span></span><br><span class="line"><span class="attr">wp              :</span> <span class="literal">yes</span></span><br><span class="line"><span class="attr">flags           :</span> <span class="string">fpu</span> <span class="string">vme</span> <span class="string">de</span> <span class="string">pse</span> <span class="string">tsc</span> <span class="string">msr</span> <span class="string">pae</span> <span class="string">mce</span> <span class="string">cx8</span> <span class="string">apic</span> <span class="string">sep</span> <span class="string">mtrr</span> <span class="string">pge</span> <span class="string">mca</span> <span class="string">cmov</span> <span class="string">pat</span> <span class="string">pse36</span> <span class="string">clflush</span> <span class="string">dts</span> <span class="string">mmx</span> <span class="string">fxsr</span> <span class="string">sse</span> <span class="string">sse2</span> <span class="string">ss</span> <span class="string">syscall</span> <span class="string">nx</span> <span class="string">pdpe1gb</span> <span class="string">rdtscp</span> <span class="string">lm</span> <span class="string">constant_tsc</span> <span class="string">arch_perfmon</span> <span class="string">pebs</span> <span class="string">bts</span> <span class="string">nopl</span> <span class="string">xtopology</span> <span class="string">tsc_reliable</span> <span class="string">nonstop_tsc</span> <span class="string">aperfmperf</span> <span class="string">eagerfpu</span> <span class="string">pni</span> <span class="string">pclmulqdq</span> <span class="string">ssse3</span> <span class="string">fma</span> <span class="string">cx16</span> <span class="string">pcid</span> <span class="string">sse4_1</span> <span class="string">sse4_2</span> <span class="string">x2apic</span> <span class="string">movbe</span> <span class="string">popcnt</span> <span class="string">tsc_deadline_timer</span> <span class="string">aes</span> <span class="string">xsave</span> <span class="string">avx</span> <span class="string">f16c</span> <span class="string">rdrand</span> <span class="string">hypervisor</span> <span class="string">lahf_lm</span> <span class="string">abm</span> <span class="string">epb</span> <span class="string">fsgsbase</span> <span class="string">tsc_adjust</span> <span class="string">bmi1</span> <span class="string">avx2</span> <span class="string">smep</span> <span class="string">bmi2</span> <span class="string">invpcid</span> <span class="string">xsaveopt</span> <span class="string">dtherm</span> <span class="string">ida</span> <span class="string">arat</span> <span class="string">pln</span> <span class="string">pts</span></span><br><span class="line"><span class="attr">bogomips        :</span> <span class="number">7183.36</span></span><br><span class="line"><span class="attr">clflush size    :</span> <span class="number">64</span></span><br><span class="line"><span class="attr">cache_alignment :</span> <span class="number">64</span></span><br><span class="line"><span class="attr">address sizes   :</span> <span class="number">42</span> <span class="string">bits</span> <span class="string">physical,</span> <span class="number">48</span> <span class="string">bits</span> <span class="string">virtual</span></span><br><span class="line"><span class="attr">power management:</span></span><br></pre></td></tr></table></figure><h4 id="RAM"><a href="#RAM" class="headerlink" title="RAM"></a>RAM</h4><p>用来查看一下系统内存的信息，另外 free 命令是从 /proc/meminfo 中读取信息的，跟我们直接读到的结果一样。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">[root@k8s-master-01</span> <span class="string">proc]#</span> <span class="string">cat</span> <span class="string">meminfo</span></span><br><span class="line"><span class="attr">MemTotal:</span>        <span class="number">3863636</span> <span class="string">kB</span></span><br><span class="line"><span class="attr">MemFree:</span>          <span class="number">247016</span> <span class="string">kB</span></span><br><span class="line"><span class="attr">MemAvailable:</span>    <span class="number">2096628</span> <span class="string">kB</span></span><br><span class="line"><span class="attr">Buffers:</span>           <span class="number">85612</span> <span class="string">kB</span></span><br><span class="line"><span class="attr">Cached:</span>          <span class="number">1952072</span> <span class="string">kB</span></span><br><span class="line"><span class="attr">SwapCached:</span>            <span class="number">0</span> <span class="string">kB</span></span><br><span class="line"><span class="attr">Active:</span>          <span class="number">2250028</span> <span class="string">kB</span></span><br><span class="line"><span class="attr">Inactive:</span>        <span class="number">1003588</span> <span class="string">kB</span></span><br><span class="line"><span class="string">Active(anon):</span>    <span class="number">1224120</span> <span class="string">kB</span></span><br><span class="line"><span class="string">Inactive(anon):</span>    <span class="number">21344</span> <span class="string">kB</span></span><br><span class="line"><span class="string">Active(file):</span>    <span class="number">1025908</span> <span class="string">kB</span></span><br><span class="line"><span class="string">Inactive(file):</span>   <span class="number">982244</span> <span class="string">kB</span></span><br><span class="line"><span class="attr">Unevictable:</span>           <span class="number">0</span> <span class="string">kB</span></span><br><span class="line"><span class="attr">Mlocked:</span>               <span class="number">0</span> <span class="string">kB</span></span><br><span class="line"><span class="attr">SwapTotal:</span>             <span class="number">0</span> <span class="string">kB</span></span><br><span class="line"><span class="attr">SwapFree:</span>              <span class="number">0</span> <span class="string">kB</span></span><br><span class="line"><span class="attr">Dirty:</span>               <span class="number">128</span> <span class="string">kB</span></span><br><span class="line"><span class="attr">Writeback:</span>             <span class="number">0</span> <span class="string">kB</span></span><br><span class="line"><span class="attr">AnonPages:</span>       <span class="number">1215816</span> <span class="string">kB</span></span><br><span class="line"><span class="attr">Mapped:</span>           <span class="number">196080</span> <span class="string">kB</span></span><br><span class="line"><span class="attr">Shmem:</span>             <span class="number">29532</span> <span class="string">kB</span></span><br><span class="line"><span class="attr">Slab:</span>             <span class="number">222544</span> <span class="string">kB</span></span><br><span class="line"><span class="attr">SReclaimable:</span>      <span class="number">92156</span> <span class="string">kB</span></span><br><span class="line"><span class="attr">SUnreclaim:</span>       <span class="number">130388</span> <span class="string">kB</span></span><br><span class="line"><span class="attr">KernelStack:</span>       <span class="number">15904</span> <span class="string">kB</span></span><br><span class="line"><span class="attr">PageTables:</span>        <span class="number">13024</span> <span class="string">kB</span></span><br><span class="line"><span class="attr">NFS_Unstable:</span>          <span class="number">0</span> <span class="string">kB</span></span><br><span class="line"><span class="attr">Bounce:</span>                <span class="number">0</span> <span class="string">kB</span></span><br><span class="line"><span class="attr">WritebackTmp:</span>          <span class="number">0</span> <span class="string">kB</span></span><br><span class="line"><span class="attr">CommitLimit:</span>     <span class="number">1931816</span> <span class="string">kB</span></span><br><span class="line"><span class="attr">Committed_AS:</span>    <span class="number">7402668</span> <span class="string">kB</span></span><br><span class="line"><span class="attr">VmallocTotal:</span>   <span class="number">34359738367</span> <span class="string">kB</span></span><br><span class="line"><span class="attr">VmallocUsed:</span>      <span class="number">187276</span> <span class="string">kB</span></span><br><span class="line"><span class="attr">VmallocChunk:</span>   <span class="number">34359310332</span> <span class="string">kB</span></span><br><span class="line"><span class="attr">HardwareCorrupted:</span>     <span class="number">0</span> <span class="string">kB</span></span><br><span class="line"><span class="attr">AnonHugePages:</span>    <span class="number">264192</span> <span class="string">kB</span></span><br><span class="line"><span class="attr">CmaTotal:</span>              <span class="number">0</span> <span class="string">kB</span></span><br><span class="line"><span class="attr">CmaFree:</span>               <span class="number">0</span> <span class="string">kB</span></span><br><span class="line"><span class="attr">HugePages_Total:</span>       <span class="number">0</span></span><br><span class="line"><span class="attr">HugePages_Free:</span>        <span class="number">0</span></span><br><span class="line"><span class="attr">HugePages_Rsvd:</span>        <span class="number">0</span></span><br><span class="line"><span class="attr">HugePages_Surp:</span>        <span class="number">0</span></span><br><span class="line"><span class="attr">Hugepagesize:</span>       <span class="number">2048</span> <span class="string">kB</span></span><br><span class="line"><span class="attr">DirectMap4k:</span>      <span class="number">206720</span> <span class="string">kB</span></span><br><span class="line"><span class="attr">DirectMap2M:</span>     <span class="number">3987456</span> <span class="string">kB</span></span><br><span class="line"><span class="attr">DirectMap1G:</span>     <span class="number">2097152</span> <span class="string">kB</span></span><br></pre></td></tr></table></figure><ul><li><p>buffer：表示块设备(block device)所占用的缓存页，包括：直接读写块设备、以及文件系统元数据(metadata)比如SuperBlock所使用的缓存页；</p></li><li><p>cache：表示普通文件数据所占用的缓存页。</p></li></ul><p>二者的区别推荐阅读 <a href="http://linuxperf.com/?p=32" target="_blank" rel="noopener">FREE命令显示的BUFFERS与CACHED的区别</a>，从 Linux 内核源码来区分。</p><h4 id="net"><a href="#net" class="headerlink" title="net"></a>net</h4><ul><li>arp</li></ul><p>用来查看系统 arp 缓存的映射表。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">╭─root@k8s-node-3 /proc/net</span><br><span class="line">╰─# cat arp</span><br><span class="line">IP address       HW type     Flags       HW address            Mask     Device</span><br><span class="line">169.254.169.254  0x1         0x0         00:00:00:00:00:00     *        ens160</span><br><span class="line">100.78.36.67     0x1         0x2         ee:25:17:a5:e9:3b     *        cali35f7ecfd8a4</span><br><span class="line">10.20.172.212    0x1         0x2         00:0c:29:16:f5:1f     *        ens160</span><br><span class="line">100.78.36.65     0x1         0x2         d6:80:af:8a:22:c7     *        calid838acfbeda</span><br><span class="line">10.20.172.1      0x1         0x2         00:00:5e:00:01:3a     *        ens160</span><br><span class="line">10.20.172.102    0x1         0x2         00:21:91:53:e8:a3     *        ens160</span><br><span class="line">10.20.172.254    0x1         0x2         5c:dd:70:05:e8:53     *        ens160</span><br><span class="line">10.20.172.106    0x1         0x2         98:90:96:d0:86:8a     *        ens160</span><br></pre></td></tr></table></figure><ul><li>route</li></ul><p>以树级结构列出系统的路由表信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line">╭─root@k8s-node-3 ~</span><br><span class="line">╰─# cat /proc/net/fib_trie</span><br><span class="line">Main:</span><br><span class="line">  +-- 0.0.0.0/0 3 1 5</span><br><span class="line">  +-- 0.0.0.0/4 2 0 2</span><br><span class="line">  |-- 0.0.0.0</span><br><span class="line">  /0 universe UNICAST</span><br><span class="line">  +-- 10.0.0.0/9 2 0 2</span><br><span class="line">  +-- 10.20.172.0/24 2 1 2</span><br><span class="line">  |-- 10.20.172.0</span><br><span class="line">  /32 link BROADCAST</span><br><span class="line">  /24 link UNICAST</span><br><span class="line">  +-- 10.20.172.192/26 2 0 2</span><br><span class="line">  |-- 10.20.172.211</span><br><span class="line">  /32 host LOCAL</span><br><span class="line">  |-- 10.20.172.255</span><br><span class="line">  /32 link BROADCAST</span><br><span class="line">  +-- 10.96.0.0/12 4 1 7</span><br><span class="line">  +-- 10.96.0.0/16 2 0 1</span><br><span class="line">  +-- 10.96.0.0/28 2 0 2</span><br><span class="line">  |-- 10.96.0.1</span><br><span class="line">  /32 host LOCAL</span><br><span class="line">  |-- 10.96.0.10</span><br><span class="line">  /32 host LOCAL</span><br><span class="line">  |-- 10.96.94.140</span><br><span class="line">  /32 host LOCAL</span><br><span class="line">  |-- 10.96.130.114</span><br><span class="line">  /32 host LOCAL</span><br><span class="line">  |-- 10.99.89.188</span><br><span class="line">  /32 host LOCAL</span><br><span class="line">  |-- 10.101.71.131</span><br><span class="line">  /32 host LOCAL</span><br><span class="line">  |-- 10.104.241.211</span><br><span class="line">  /32 host LOCAL</span><br><span class="line">  |-- 10.107.246.53</span><br><span class="line">  /32 host LOCAL</span><br><span class="line">  |-- 10.108.171.54</span><br><span class="line">  /32 host LOCAL</span><br><span class="line">  |-- 10.109.20.145</span><br><span class="line">  /32 host LOCAL</span><br><span class="line">  |-- 10.110.206.28</span><br><span class="line">  /32 host LOCAL</span><br><span class="line">  |-- 10.111.25.53</span><br><span class="line">  /32 host LOCAL</span><br><span class="line">  +-- 96.0.0.0/3 2 0 2</span><br><span class="line">  +-- 100.64.0.0/10 3 0 3</span><br><span class="line">  +-- 100.78.36.64/26 3 0 6</span><br><span class="line">  +-- 100.78.36.64/30 2 0 0</span><br><span class="line">  |-- 100.78.36.64</span><br><span class="line">  /32 host LOCAL</span><br><span class="line">  /32 link BROADCAST</span><br><span class="line">  /26 universe BLACKHOLE</span><br><span class="line">  |-- 100.78.36.65</span><br><span class="line">  /32 link UNICAST</span><br><span class="line">  |-- 100.78.36.66</span><br><span class="line">  /32 link UNICAST</span><br><span class="line">  |-- 100.78.36.67</span><br><span class="line">  /32 link UNICAST</span><br><span class="line">  |-- 100.78.36.105</span><br><span class="line">  /32 link UNICAST</span><br><span class="line">  |-- 100.87.114.192</span><br><span class="line">  /26 universe UNICAST</span><br><span class="line">  |-- 100.107.127.64</span><br><span class="line">  /26 universe UNICAST</span><br><span class="line">  |-- 100.112.151.128</span><br><span class="line">  /26 universe UNICAST</span><br><span class="line">  |-- 100.123.190.192</span><br><span class="line">  /26 universe UNICAST</span><br><span class="line">  +-- 127.0.0.0/8 2 0 2</span><br><span class="line">  +-- 127.0.0.0/31 1 0 0</span><br><span class="line">  |-- 127.0.0.0</span><br><span class="line">  /32 link BROADCAST</span><br><span class="line">  /8 host LOCAL</span><br><span class="line">  |-- 127.0.0.1</span><br><span class="line">  /32 host LOCAL</span><br><span class="line">  |-- 127.255.255.255</span><br><span class="line">  /32 link BROADCAST</span><br><span class="line">  +-- 168.0.0.0/5 2 0 2</span><br><span class="line">  |-- 169.254.0.0</span><br><span class="line">  /16 link UNICAST</span><br><span class="line">  +-- 172.16.0.0/14 3 0 6</span><br><span class="line">  +-- 172.17.0.0/31 1 0 0</span><br><span class="line">  |-- 172.17.0.0</span><br><span class="line">  /32 link BROADCAST</span><br><span class="line">  /16 link UNICAST</span><br><span class="line">  |-- 172.17.0.1</span><br><span class="line">  /32 host LOCAL</span><br><span class="line">  |-- 172.17.255.255</span><br><span class="line">  /32 link BROADCAST</span><br></pre></td></tr></table></figure><ul><li>nf_conntrack</li></ul><blockquote><p>nf_conntrack(在老版本的 Linux 内核中叫 ip_conntrack)是一个内核模块,用于跟踪一个连接的状态的。连接状态跟踪可以供其他模块使用,最常见的两个使用场景是 iptables 的 nat 的 state 模块。 iptables 的 nat 通过规则来修改目的/源地址,但光修改地址不行,我们还需要能让回来的包能路由到最初的来源主机。这就需要借助 nf_conntrack 来找到原来那个连接的记录才行。而 state 模块则是直接使用 nf_conntrack 里记录的连接的状态来匹配用户定义的相关规则。例如下面这条 INPUT 规则用于放行 80 端口上的状态为 NEW 的连接上的包。</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">╭─root@k8s-node-3 /proc/net</span><br><span class="line">╰─# cat nf_conntrack | head -n 4</span><br><span class="line">ipv4     2 tcp      6 102 SYN_SENT src=10.20.172.211 dst=10.10.107.214 sport=42562 dport=179 [UNREPLIED] src=10.10.107.214 dst=10.20.172.211 sport=179 dport=42562 mark=0 secctx=system_u:object_r:unlabeled_t:s0 zone=0 use=2</span><br><span class="line">ipv4     2 tcp      6 79 SYN_SENT src=10.20.172.211 dst=10.10.107.214 sport=60579 dport=179 [UNREPLIED] src=10.10.107.214 dst=10.20.172.211 sport=179 dport=60579 mark=0 secctx=system_u:object_r:unlabeled_t:s0 zone=0 use=2</span><br><span class="line">ipv4     2 tcp      6 86366 ESTABLISHED src=10.20.172.211 dst=10.10.107.121 sport=58589 dport=179 src=10.10.107.121 dst=10.20.172.211 sport=179 dport=58589 [ASSURED] mark=0 secctx=system_u:object_r:unlabeled_t:s0 zone=0 use=2</span><br><span class="line">ipv4     2 tcp      6 62 SYN_SENT src=10.20.172.211 dst=10.10.107.214 sport=37531 dport=179 [UNREPLIED] src=10.10.107.214 dst=10.20.172.211 sport=179 dport=37531 mark=0 secctx=system_u:object_r:unlabeled_t:s0 zone=0 use=2</span><br></pre></td></tr></table></figure><ul><li><a href="http://www.linvon.cn/post/%E8%BF%9E%E6%8E%A5%E8%B7%9F%E8%B8%AAnf_conntrack%E4%B8%8Enat%E5%92%8C%E7%8A%B6%E6%80%81iptables/" target="_blank" rel="noopener">连接跟踪nf_conntrack与NAT和状态防火墙</a></li><li><a href="https://www.cnblogs.com/liushaodong/archive/2013/02/26/2933593.html" target="_blank" rel="noopener">netfilter 链接跟踪机制与NAT原理</a></li><li><a href="http://blog.chinaunix.net/uid-23069658-id-3169450.html" target="_blank" rel="noopener">(五)洞悉linux下的Netfilter&amp;iptables：如何理解连接跟踪机制？</a></li><li><a href="https://clodfisher.github.io/2018/09/nf_conntrack/" target="_blank" rel="noopener">Iptables之nf_conntrack模块</a></li></ul><h4 id="kernel"><a href="#kernel" class="headerlink" title="kernel"></a>kernel</h4><p>可以用来查看一下系统内核版本信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-master-01 proc]# uname -a</span><br><span class="line">Linux k8s-master-01 3.10.0-862.el7.x86_64 #1 SMP Fri Apr 20 16:44:24 UTC 2018 x86_64 x86_64 x86_64 GNU/Linux</span><br><span class="line">[root@k8s-master-01 proc]# cat version</span><br><span class="line">Linux version 3.10.0-862.el7.x86_64 (builder@kbuilder.dev.centos.org) (gcc version 4.8.5 20150623 (Red Hat 4.8.5-28) (GCC) ) #1 SMP Fri Apr 20 16:44:24 UTC 2018</span><br></pre></td></tr></table></figure><h3 id="网络"><a href="#网络" class="headerlink" title="网络"></a>网络</h3><h4 id="nc-netcat"><a href="#nc-netcat" class="headerlink" title="nc netcat"></a>nc netcat</h4><p>nc 是个瑞士军刀啊，你能想到的你想不到的都能做，在这里仅仅列出几个常用常用的命令，咱平时主要用来判断主机端口是否正常，想要完整地了解推荐阅读下面提到的文章。之前编程随想大佬也写过 nc 命令的使用详解。</p><ul><li>install</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> RHEL/CentOS</span></span><br><span class="line">yum install netcat</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Debian/Ubuntu</span></span><br><span class="line">apt install netcat</span><br></pre></td></tr></table></figure><ul><li>查看主机端口是否打开</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 查看远程主机端口是否打开</span></span><br><span class="line">╭─root@blog /opt/shell</span><br><span class="line">╰─# nc -vz bing.com 443</span><br><span class="line">DNS fwd/rev mismatch: bing.com != a-0001.a-msedge.net</span><br><span class="line">Warning: inverse host lookup failed for 13.107.21.200: Unknown host</span><br><span class="line">bing.com [204.79.197.200] 443 (https) open</span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看本机端口是否被占用</span></span><br><span class="line">╭─root@blog /opt/shell</span><br><span class="line">╰─# nc -lp 80 -v                                                                    1 ↵</span><br><span class="line">retrying local 0.0.0.0:80 : Address already in use</span><br></pre></td></tr></table></figure><ul><li>用 nc 传输文件</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 接收端】（B 主机）运行如下命令（其中的 xxx 是端口号）</span></span><br><span class="line">nc -l -p xxx &gt; file2</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 然后在【发送端】（A 主机）运行如下命令</span></span><br><span class="line">nc x.x.x.x xxx &lt; file1</span><br></pre></td></tr></table></figure><ul><li><a href="https://program-think.blogspot.com/2019/09/Netcat-Tricks.html" target="_blank" rel="noopener">扫盲 netcat（网猫）的 N 种用法——从“网络诊断”到“系统入侵”</a></li></ul><h4 id="nmap"><a href="#nmap" class="headerlink" title="nmap"></a>nmap</h4><p>nmap 命令用的最多的就是端口扫描，在渗透领域多用来扫描内网机器。</p><ul><li>install</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> RHEL/CentOS</span></span><br><span class="line">yum install nmap</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Debian/Ubuntu</span></span><br><span class="line">apt install nmap</span><br></pre></td></tr></table></figure><ul><li>扫描类型</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">-sT    TCP connect() 扫描，这是最基本的 TCP 扫描方式。这种扫描很容易被检测到，在目标主机的日志中会记录大批的连接请求以及错误信息。</span><br><span class="line">-sS    TCP 同步扫描 (TCP SYN)，因为不必全部打开一个 TCP 连接，所以这项技术通常称为半开扫描 (half-open)。这项技术最大的好处是，很少有系统能够把这记入系统日志。不过，你需要 root 权限来定制 SYN 数据包。</span><br><span class="line">-sF,-sX,-sN    秘密 FIN 数据包扫描、圣诞树 (Xmas Tree)、空 (Null) 扫描模式。这些扫描方式的理论依据是：关闭的端口需要对你的探测包回应 RST 包，而打开的端口必需忽略有问题的包（参考 RFC 793 第 64 页）。</span><br><span class="line">-sP    ping 扫描，用 ping 方式检查网络上哪些主机正在运行。当主机阻塞 ICMP echo 请求包是 ping 扫描是无效的。nmap 在任何情况下都会进行 ping 扫描，只有目标主机处于运行状态，才会进行后续的扫描。</span><br><span class="line">-sU    UDP 的数据包进行扫描，如果你想知道在某台主机上提供哪些 UDP（用户数据报协议，RFC768) 服务，可以使用此选项。</span><br><span class="line">-sA    ACK 扫描，这项高级的扫描方法通常可以用来穿过防火墙。</span><br><span class="line">-sW    滑动窗口扫描，非常类似于 ACK 的扫描。</span><br><span class="line">-sR    RPC 扫描，和其它不同的端口扫描方法结合使用。</span><br><span class="line">-b    FTP 反弹攻击 (bounce attack)，连接到防火墙后面的一台 FTP 服务器做代理，接着进行端口扫描。</span><br></pre></td></tr></table></figure><ul><li>扫描参数</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">-P0    在扫描之前，不 ping 主机。</span><br><span class="line">-PT    扫描之前，使用 TCP ping 确定哪些主机正在运行。</span><br><span class="line">-PS    对于 root 用户，这个选项让 nmap 使用 SYN 包而不是 ACK 包来对目标主机进行扫描。</span><br><span class="line">-PI    设置这个选项，让 nmap 使用真正的 ping(ICMP echo 请求）来扫描目标主机是否正在运行。</span><br><span class="line">-PB    这是默认的 ping 扫描选项。它使用 ACK(-PT) 和 ICMP(-PI) 两种扫描类型并行扫描。如果防火墙能够过滤其中一种包，使用这种方法，你就能够穿过防火墙。</span><br><span class="line">-O    这个选项激活对 TCP/IP 指纹特征 (fingerprinting) 的扫描，获得远程主机的标志，也就是操作系统类型。</span><br><span class="line">-I    打开 nmap 的反向标志扫描功能。</span><br><span class="line">-f    使用碎片 IP 数据包发送 SYN、FIN、XMAS、NULL。包增加包过滤、入侵检测系统的难度，使其无法知道你的企图。</span><br><span class="line">-v    冗余模式。强烈推荐使用这个选项，它会给出扫描过程中的详细信息。</span><br><span class="line">-S &lt;IP&gt;    在一些情况下，nmap 可能无法确定你的源地址 (nmap 会告诉你）。在这种情况使用这个选项给出你的 IP 地址。</span><br><span class="line">-g port    设置扫描的源端口。一些天真的防火墙和包过滤器的规则集允许源端口为 DNS(53) 或者 FTP-DATA(20) 的包通过和实现连接。显然，如果攻击者把源端口修改为 20 或者 53，就可以摧毁防火墙的防护。</span><br><span class="line">-oN    把扫描结果重定向到一个可读的文件 logfilename 中。</span><br><span class="line">-oS    扫描结果输出到标准输出。</span><br><span class="line">--host_timeout    设置扫描一台主机的时间，以毫秒为单位。默认的情况下，没有超时限制。</span><br><span class="line">--max_rtt_timeout    设置对每次探测的等待时间，以毫秒为单位。如果超过这个时间限制就重传或者超时。默认值是大约 9000 毫秒。</span><br><span class="line">--min_rtt_timeout    设置 nmap 对每次探测至少等待你指定的时间，以毫秒为单位。</span><br><span class="line">-M count    置进行 TCP connect() 扫描时，最多使用多少个套接字进行并行的扫描。</span><br></pre></td></tr></table></figure><ul><li>获取远程主机系统类型和开放端口</li></ul><p>粗暴点就 <code>nmap -A IP</code>，或者 <code>nmap -sS -P0 -sV -O</code></p><ul><li>探测内网在线主机</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap -sP 192.168.0.0/24</span><br></pre></td></tr></table></figure><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><h4 id="fio"><a href="#fio" class="headerlink" title="fio"></a><a href="https://github.com/axboe/fio" target="_blank" rel="noopener">fio</a></h4><p>用来做磁盘性能测试，十分强大的磁盘性能测试工具，可配置项和参数也很丰富。</p><ul><li>install</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> RHEL/CentOS</span></span><br><span class="line">yum install fio</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Debian/Ubuntu</span></span><br><span class="line">apt install fio</span><br></pre></td></tr></table></figure><ul><li>usage</li></ul><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">filename</span>=/tmp        <span class="comment"># 测试文件名称，通常选择需要测试的盘的 data 目录</span></span><br><span class="line"><span class="attr">direct</span>=<span class="number">1</span>             <span class="comment"># 测试过程绕过机器自带的 buffer。使测试结果更真实</span></span><br><span class="line"><span class="attr">rw</span>=randwrite         <span class="comment"># 测试随机写的 I/O</span></span><br><span class="line"><span class="attr">rw</span>=randrw            <span class="comment"># 测试随机写和读的 I/O</span></span><br><span class="line"><span class="attr">bs</span>=<span class="number">16</span>k               <span class="comment"># 单次 io 的块文件大小为 16k</span></span><br><span class="line"><span class="attr">bsrange</span>=<span class="number">512</span>-<span class="number">2048</span>     <span class="comment"># 同上，提定数据块的大小范围</span></span><br><span class="line"><span class="attr">size</span>=<span class="number">5</span>G              <span class="comment"># 本次的测试文件大小为 5g，以每次 4k 的 io 进行测试</span></span><br><span class="line"><span class="attr">numjobs</span>=<span class="number">30</span>           <span class="comment"># 本次的测试线程为 30 个</span></span><br><span class="line"><span class="attr">runtime</span>=<span class="number">1000</span>         <span class="comment"># 测试时间 1000 秒，如果不写则一直将 5g 文件分 4k 每次写完为止</span></span><br><span class="line"><span class="attr">ioengine</span>=psync       <span class="comment">#io 引擎使用 psync 方式</span></span><br><span class="line"><span class="attr">rwmixwrite</span>=<span class="number">30</span>        <span class="comment"># 在混合读写的模式下，写占 30%</span></span><br><span class="line">group_reporting      # 关于显示结果的，汇总每个进程的信息</span><br><span class="line"></span><br><span class="line"><span class="attr">lockmem</span>=<span class="number">1</span>G           <span class="comment"># 只使用 1g 内存进行测试s</span></span><br><span class="line">zero_buffers         # 用 0 初始化系统 buffer</span><br><span class="line"><span class="attr">nrfiles</span>=<span class="number">8</span>            <span class="comment"># 每个进程生成文件的数量</span></span><br></pre></td></tr></table></figure><p><code>注意：</code> 只要不是测试空盘，<code>filename</code> 参数千万不要使用类似 <code>/dev/sda</code> 这无异于删库跑路😂。所以推荐使用路径而不是设备。</p><ul><li>output example</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">╭─root@nfs ~</span><br><span class="line">╰─# fio -filename=/tmp/test.file -direct=1 -iodepth 1 -thread -rw=randrw -rwmixread=70 -ioengine=psync -bs=16k -size=1G -numjobs=30 -runtime=100 -group_reporting -name=mytest1</span><br><span class="line">mytest1: (g=0): rw=randrw, bs=(R) 16.0KiB-16.0KiB, (W) 16.0KiB-16.0KiB, (T) 16.0KiB-16.0KiB, ioengine=psync, iodepth=1</span><br><span class="line">...</span><br><span class="line">fio-3.7</span><br><span class="line">Starting 30 threads</span><br><span class="line">mytest1: Laying out IO file (1 file / 1024MiB)</span><br><span class="line">Jobs: 30 (f=30): [m(30)][100.0%][r=1265KiB/s,w=560KiB/s][r=79,w=35 IOPS][eta 00m:00s]</span><br><span class="line">mytest1: (groupid=0, jobs=30): err= 0: pid=45930: Mon Apr 27 23:09:21 2020</span><br><span class="line">read: IOPS=71, BW=1149KiB/s (1177kB/s)(113MiB/100321msec)</span><br><span class="line"> clat (usec): min=349, max=999812, avg=292473.60, stdev=188905.70</span><br><span class="line">  lat (usec): min=349, max=999813, avg=292473.83, stdev=188905.69</span><br><span class="line"> clat percentiles (msec):</span><br><span class="line">  |  1.00th=[    5],  5.00th=[    8], 10.00th=[   11], 20.00th=[   24],</span><br><span class="line">  | 30.00th=[  247], 40.00th=[  313], 50.00th=[  342], 60.00th=[  372],</span><br><span class="line">  | 70.00th=[  401], 80.00th=[  430], 90.00th=[  481], 95.00th=[  542],</span><br><span class="line">  | 99.00th=[  751], 99.50th=[  818], 99.90th=[  894], 99.95th=[  936],</span><br><span class="line">  | 99.99th=[ 1003]</span><br><span class="line">bw (  KiB/s): min=   31, max=   96, per=3.53%, avg=40.55, stdev=14.30, samples=5661</span><br><span class="line">iops        : min=    1, max=    6, avg= 2.48, stdev= 0.93, samples=5661</span><br><span class="line">  write: IOPS=30, BW=483KiB/s (494kB/s)(47.3MiB/100321msec)</span><br><span class="line"> clat (msec): min=2, max=937, avg=297.02, stdev=194.75</span><br><span class="line">  lat (msec): min=2, max=937, avg=297.02, stdev=194.75</span><br><span class="line"> clat percentiles (msec):</span><br><span class="line">  |  1.00th=[    5],  5.00th=[    9], 10.00th=[   11], 20.00th=[   16],</span><br><span class="line">  | 30.00th=[  266], 40.00th=[  326], 50.00th=[  355], 60.00th=[  380],</span><br><span class="line">  | 70.00th=[  405], 80.00th=[  435], 90.00th=[  481], 95.00th=[  550],</span><br><span class="line">  | 99.00th=[  760], 99.50th=[  810], 99.90th=[  902], 99.95th=[  927],</span><br><span class="line">  | 99.99th=[  936]</span><br><span class="line">bw (  KiB/s): min=   31, max=  256, per=9.65%, avg=46.52, stdev=25.43, samples=2071</span><br><span class="line">iops        : min=    1, max=   16, avg= 2.85, stdev= 1.61, samples=2071</span><br><span class="line">  lat (usec)   : 500=0.02%, 750=0.02%</span><br><span class="line">  lat (msec)   : 4=0.28%, 10=8.53%, 20=10.86%, 50=6.42%, 100=0.90%</span><br><span class="line">  lat (msec)   : 250=2.90%, 500=62.21%, 750=6.79%, 1000=1.06%</span><br><span class="line">  cpu          : usr=0.00%, sys=0.01%, ctx=19413, majf=0, minf=7</span><br><span class="line">  IO depths    : 1=100.0%, 2=0.0%, 4=0.0%, 8=0.0%, 16=0.0%, 32=0.0%, &gt;=64=0.0%</span><br><span class="line">  submit    : 0=0.0%, 4=100.0%, 8=0.0%, 16=0.0%, 32=0.0%, 64=0.0%, &gt;=64=0.0%</span><br><span class="line">  complete  : 0=0.0%, 4=100.0%, 8=0.0%, 16=0.0%, 32=0.0%, 64=0.0%, &gt;=64=0.0%</span><br><span class="line">  issued rwts: total=7204,3026,0,0 short=0,0,0,0 dropped=0,0,0,0</span><br><span class="line">  latency   : target=0, window=0, percentile=100.00%, depth=1</span><br><span class="line"></span><br><span class="line">Run status group 0 (all jobs):</span><br><span class="line">READ: bw=1149KiB/s (1177kB/s), 1149KiB/s-1149KiB/s (1177kB/s-1177kB/s), io=113MiB (118MB), run=100321-100321msec</span><br><span class="line">  WRITE: bw=483KiB/s (494kB/s), 483KiB/s-483KiB/s (494kB/s-494kB/s), io=47.3MiB (49.6MB), run=100321-100321msec</span><br><span class="line"></span><br><span class="line">Disk stats (read/write):</span><br><span class="line"> dm-0: ios=7750/3320, merge=0/0, ticks=200950/123253, in_queue=324237, util=99.83%, aggrios=7765/3135, aggrmerge=0/192, aggrticks=201237/111717, aggrin_queue=312951, aggrutil=99.81%</span><br><span class="line">  sda: ios=7765/3135, merge=0/192, ticks=201237/111717, in_queue=312951, util=99.81%</span><br></pre></td></tr></table></figure><h4 id="qperf"><a href="#qperf" class="headerlink" title="qperf"></a>qperf</h4><ul><li>install</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum install qperf</span><br><span class="line">apt install qperf</span><br></pre></td></tr></table></figure><ul><li>usage</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">╭─root@debian /opt/trojan</span><br><span class="line">╰─# qperf --help examples</span><br><span class="line">In these examples, we first run qperf on a node called myserver in server</span><br><span class="line">mode by invoking it with no arguments.  In all the subsequent examples, we</span><br><span class="line">run qperf on another node and connect to the server which we assume has a</span><br><span class="line">hostname of myserver.</span><br><span class="line"> * To run a TCP bandwidth and latency test:</span><br><span class="line">  qperf myserver tcp_bw tcp_lat</span><br><span class="line"> * To run a SDP bandwidth test for 10 seconds:</span><br><span class="line">  qperf myserver -t 10 sdp_bw</span><br><span class="line"> * To run a UDP latency test and then cause the server to terminate:</span><br><span class="line">  qperf myserver udp_lat quit</span><br><span class="line"> * To measure the RDMA UD latency and bandwidth:</span><br><span class="line">  qperf myserver ud_lat ud_bw</span><br><span class="line"> * To measure RDMA UC bi-directional bandwidth:</span><br><span class="line">  qperf myserver rc_bi_bw</span><br><span class="line"> * To get a range of TCP latencies with a message size from 1 to 64K</span><br><span class="line">  qperf myserver -oo msg_size:1:64K:*2 -vu tcp_lat</span><br></pre></td></tr></table></figure><ul><li>output example</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">root@debian-node-02-656868cc46-72lc9:/# qperf  -t 30 100.107.127.100 -v tcp_bw udp_bw tcp_lat udp_lat conf</span><br><span class="line">tcp_bw:</span><br><span class="line"> bw              =  3.24 GB/sec</span><br><span class="line"> msg_rate        =  49.4 K/sec</span><br><span class="line"> time            =    30 sec</span><br><span class="line"> send_cost       =   542 ms/GB</span><br><span class="line"> recv_cost       =   542 ms/GB</span><br><span class="line"> send_cpus_used  =   176 % cpus</span><br><span class="line"> recv_cpus_used  =   176 % cpus</span><br><span class="line">udp_bw:</span><br><span class="line"> send_bw         =  2.62 GB/sec</span><br><span class="line"> recv_bw         =  2.37 GB/sec</span><br><span class="line"> msg_rate        =  72.3 K/sec</span><br><span class="line"> time            =    30 sec</span><br><span class="line"> send_cost       =   542 ms/GB</span><br><span class="line"> recv_cost       =   598 ms/GB</span><br><span class="line"> send_cpus_used  =   142 % cpus</span><br><span class="line"> recv_cpus_used  =   142 % cpus</span><br><span class="line">tcp_lat:</span><br><span class="line"> latency        =  17.3 us</span><br><span class="line"> msg_rate       =  57.7 K/sec</span><br><span class="line"> time           =    30 sec</span><br><span class="line"> loc_cpus_used  =   110 % cpus</span><br><span class="line"> rem_cpus_used  =   110 % cpus</span><br><span class="line">udp_lat:</span><br><span class="line"> latency        =  15.4 us</span><br><span class="line"> msg_rate       =  64.8 K/sec</span><br><span class="line"> time           =    30 sec</span><br><span class="line"> loc_cpus_used  =   111 % cpus</span><br><span class="line"> rem_cpus_used  =   111 % cpus</span><br><span class="line">conf:</span><br><span class="line"> loc_node   =  debian-node-02-656868cc46-72lc9</span><br><span class="line"> loc_cpu    =  8 Cores: Intel Xeon E3-1271 v3 @ 3.60GHz</span><br><span class="line"> loc_os     =  Linux 3.10.0-862.el7.x86_64</span><br><span class="line"> loc_qperf  =  0.4.11</span><br><span class="line"> rem_node   =  debian-node-02-656868cc46-xftvq</span><br><span class="line"> rem_cpu    =  8 Cores: Intel Xeon E3-1271 v3 @ 3.60GHz</span><br><span class="line"> rem_os     =  Linux 3.10.0-862.el7.x86_64</span><br><span class="line"> rem_qperf  =  0.4.11</span><br></pre></td></tr></table></figure><h4 id="iperf"><a href="#iperf" class="headerlink" title="iperf"></a>iperf</h4><ul><li><p>install</p></li><li><p>usage</p></li><li><p>output example</p></li></ul><h4 id="wrk"><a href="#wrk" class="headerlink" title="wrk"></a><a href="https://github.com/wg/wrk/" target="_blank" rel="noopener">wrk</a></h4><ul><li>install</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/wg/wrk.git --depth=1</span><br><span class="line">cd wrk</span><br><span class="line">make</span><br></pre></td></tr></table></figure><ul><li>usage</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">./wrk</span><br><span class="line">Usage: wrk &lt;options&gt; &lt;url&gt;</span><br><span class="line">  Options:</span><br><span class="line"> -c, --connections &lt;N&gt;  Connections to keep open 需要模拟的个并发请求连接数量</span><br><span class="line"> -d, --duration    &lt;T&gt;  Duration of test 测试的测试时长</span><br><span class="line"> -t, --threads     &lt;N&gt;  Number of threads to use 并发线程数量</span><br><span class="line"> -s, --script      &lt;S&gt;  Load Lua script file  指定 Lua 脚本的路径</span><br><span class="line"> -H, --header      &lt;H&gt;  Add header to request 指定请求带的 Header 参数</span><br><span class="line">  --latency          Print latency statistics 是否打印请求延迟统计</span><br><span class="line">  --timeout     &lt;T&gt;  Socket/request timeout 设置请求超时时间</span><br></pre></td></tr></table></figure><ul><li>output example</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 对 10.20.172.196 nginx 服务器进行测试</span></span><br><span class="line">╭─root@test ~/wrk ‹master›</span><br><span class="line">╰─# ./wrk -t100 -c512 -d30s http://10.20.172.196</span><br><span class="line">Running 30s test @ http://10.20.172.196</span><br><span class="line">  100 threads and 512 connections</span><br><span class="line">  Thread Stats   Avg      Stdev     Max   +/- Stdev</span><br><span class="line"> Latency    44.71ms  108.75ms   1.99s    89.05%</span><br><span class="line"> Req/Sec   369.78    207.57     1.68k    71.50%</span><br><span class="line">  987158 requests in 30.10s, 840.66MB read</span><br><span class="line">  Socket errors: connect 0, read 0, write 0, timeout 22</span><br><span class="line">Requests/sec:  32797.65</span><br><span class="line">Transfer/sec:     27.93MB</span><br><span class="line"><span class="meta">#</span><span class="bash"> 测试结果，基本能达到 3W+ 的 QPS 的性能</span></span><br></pre></td></tr></table></figure><h4 id="httperf"><a href="#httperf" class="headerlink" title="httperf"></a>httperf</h4><ul><li><p>install</p></li><li><p>usage</p></li><li><p>output example</p></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">╭─root@ubuntu-238 ~</span><br><span class="line">╰─# httperf --server 10.20.172.196 --port 80 --num-conns 100 --rate 10 --timeout 1</span><br><span class="line">httperf --timeout=1 --client=0/1 --server=10.20.172.196 --port=80 --uri=/ --rate=10 --send-buffer=4096 --recv-buffer=16384 --num-conns=100 --num-calls=1</span><br><span class="line">httperf: warning: open file limit &gt; FD_SETSIZE; limiting max. # of open files to FD_SETSIZE</span><br><span class="line">Maximum connect burst length: 1</span><br><span class="line"><span class="meta">#</span><span class="bash"> 响应速率</span></span><br><span class="line">Total: connections 100 requests 100 replies 100 test-duration 9.900 s</span><br><span class="line">Connection rate: 10.1 conn/s (99.0 ms/conn, &lt;=1 concurrent connections)</span><br><span class="line">Connection time [ms]: min 0.1 avg 0.1 max 0.2 median 0.5 stddev 0.0</span><br><span class="line">Connection time [ms]: connect 0.0</span><br><span class="line">Connection length [replies/conn]: 1.000</span><br><span class="line">Request rate: 10.1 req/s (99.0 ms/req)</span><br><span class="line">Request size [B]: 66.0</span><br><span class="line"><span class="meta">#</span><span class="bash"> 服务器从请求中接收到第一个字节开始，到连接收到第一个字节所消耗的时间</span></span><br><span class="line">Reply rate [replies/s]: min 10.0 avg 10.0 max 10.0 stddev 0.0 (1 samples)</span><br><span class="line">Reply time [ms]: response 0.1 transfer 0.0</span><br><span class="line"><span class="meta">#</span><span class="bash"> 统计每个回复的大小，每个维度的单位都是字节(bytes),且都是平均数</span></span><br><span class="line">Reply size [B]: header 244.0 content 649.0 footer 0.0 (total 893.0)</span><br><span class="line">Reply status: 1xx=0 2xx=100 3xx=0 4xx=0 5xx=0</span><br><span class="line"><span class="meta">#</span><span class="bash"> 客户端CPU使用率的统计，User用户模式，System模式</span></span><br><span class="line">CPU time [s]: user 3.85 system 6.05 (user 38.9% system 61.1% total 100.0%)</span><br><span class="line"><span class="meta">#</span><span class="bash"> 网络的吞吐量</span></span><br><span class="line">Net I/O: 9.5 KB/s (0.1*10^6 bps)</span><br><span class="line"><span class="meta">#</span><span class="bash"> 发生错误的总数,客户端超时计数，每次从生成请求开始，如果没有响应即超时,</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> TCP连接失败</span></span><br><span class="line">Errors: total 0 client-timo 0 socket-timo 0 connrefused 0 connreset 0</span><br><span class="line">Errors: fd-unavail 0 addrunavail 0 ftab-full 0 other 0</span><br></pre></td></tr></table></figure><h4 id="ab"><a href="#ab" class="headerlink" title="ab"></a><a href="">ab</a></h4><ul><li><p>install</p></li><li><p>usage</p></li><li><p>output example</p></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">╭─root@test ~</span><br><span class="line">╰─# ab -n 1000 -c 1000 http://10.20.172.196/</span><br><span class="line">This is ApacheBench, Version 2.3 &lt;$Revision: 1430300 $&gt;</span><br><span class="line">Copyright 1996 Adam Twiss, Zeus Technology Ltd, http://www.zeustech.net/</span><br><span class="line">Licensed to The Apache Software Foundation, http://www.apache.org/</span><br><span class="line">Benchmarking 10.20.172.196 (be patient)</span><br><span class="line">Completed 100 requests</span><br><span class="line">Completed 200 requests</span><br><span class="line">Completed 300 requests</span><br><span class="line">Completed 400 requests</span><br><span class="line">Completed 500 requests</span><br><span class="line">Completed 600 requests</span><br><span class="line">Completed 700 requests</span><br><span class="line">Completed 800 requests</span><br><span class="line">Completed 900 requests</span><br><span class="line">Completed 1000 requests</span><br><span class="line">Finished 1000 requests</span><br><span class="line">Server Software:        nginx/1.15.8.1</span><br><span class="line">Server Hostname:        10.20.172.196</span><br><span class="line">Server Port:            80</span><br><span class="line">Document Path:          /</span><br><span class="line">Document Length:        649 bytes</span><br><span class="line">Concurrency Level:      1000</span><br><span class="line">Time taken for tests:   0.107 seconds</span><br><span class="line">Complete requests:      1000</span><br><span class="line">Failed requests:        0</span><br><span class="line">Write errors:           0</span><br><span class="line">Total transferred:      888000 bytes</span><br><span class="line">HTML transferred:       649000 bytes</span><br><span class="line">Requests per second:    9313.50 [#/sec] (mean)</span><br><span class="line">Time per request:       107.371 [ms] (mean)</span><br><span class="line">Time per request:       0.107 [ms] (mean, across all concurrent requests)</span><br><span class="line">Transfer rate:          8076.55 [Kbytes/sec] received</span><br><span class="line"></span><br><span class="line">Connection Times (ms)</span><br><span class="line">  min  mean[+/-sd] median   max</span><br><span class="line">Connect:        0   29   8.1     29      42</span><br><span class="line">Processing:    17   36  14.3     45      51</span><br><span class="line">Waiting:        0   35  14.3     44      50</span><br><span class="line">Total:         42   65   9.0     64      87</span><br><span class="line"></span><br><span class="line">Percentage of the requests served within a certain time (ms)</span><br><span class="line"><span class="meta">  50%</span><span class="bash">     64</span></span><br><span class="line"><span class="meta">  66%</span><span class="bash">     69</span></span><br><span class="line"><span class="meta">  75%</span><span class="bash">     71</span></span><br><span class="line"><span class="meta">  80%</span><span class="bash">     73</span></span><br><span class="line"><span class="meta">  90%</span><span class="bash">     78</span></span><br><span class="line"><span class="meta">  95%</span><span class="bash">     81</span></span><br><span class="line"><span class="meta">  98%</span><span class="bash">     84</span></span><br><span class="line"><span class="meta">  99%</span><span class="bash">     86</span></span><br><span class="line"><span class="meta"> 100%</span><span class="bash">     87 (longest request)</span></span><br></pre></td></tr></table></figure><h4 id="stress"><a href="#stress" class="headerlink" title="stress"></a>stress</h4><blockquote><p><a href="https://www.tecmint.com/linux-cpu-load-stress-test-with-stress-ng-tool/" target="_blank" rel="noopener">Stress/Stress-NG</a>是Linux下两个常用的系统级压力测试工具，<strong>stress</strong>命令简单易用，<strong>stress-ng</strong>是stress的升级版，支持<strong>数百个参数定制各种压CPU、内存、IO、网络</strong>的姿势。在系统过载的场景下，应用服务可能会出现意想不到的错误或异常，在测试<strong>负载均衡和熔断降级</strong>时非常有用。这里只列举了几个常用的命令，详细使用参考”stress-ng –help”或”man stress-ng”。另外，这些“烤机”命令来测试服务器性能也是不错的。</p></blockquote><ul><li>install</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> RHRL/CentOS</span></span><br><span class="line">yum install epel-release</span><br><span class="line">yum install stress stress-ng</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Debian/Ubuntu</span></span><br><span class="line">apt install stress stress-ng</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> stress-ng 基本用法与stress完全兼容，但有更多的参数可选，并且可以查看统计信息</span></span><br></pre></td></tr></table></figure><ul><li>usage</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 在两个CPU核心上跑开方运算，并且启动一个不断分配释放1G内存的线程，运行10秒后停止</span></span><br><span class="line">stress --cpu 2 --vm 1 --vm-bytes 1G  -v --timeout 10</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 启动一个线程不断执行sync系统调用回写磁盘缓存，并且启动一个线程不停地写入删除512MB数据，运行10秒停止</span></span><br><span class="line">stress --io 1 --hdd 1 --hdd-bytes 512M -v --timeout 10</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> --sock 可以模拟大量的socket连接断开以及数据的发送接收等等</span></span><br><span class="line">stress-ng --sock 2 -v --timeout 10 --metrics-brief</span><br></pre></td></tr></table></figure><ul><li>output example</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">╭─root@debian /bashtop  ‹master›</span><br><span class="line">╰─# stress --cpu 4 --vm 1 --vm-bytes 1G  -v --timeout 3</span><br><span class="line">stress: info: [18174] dispatching hogs: 4 cpu, 0 io, 1 vm, 0 hdd</span><br><span class="line">stress: dbug: [18174] using backoff sleep of 3000us</span><br><span class="line">stress: dbug: [18174] setting timeout to 3s</span><br><span class="line">stress: dbug: [18174] --&gt; hogcpu worker 1 [18179] forked</span><br><span class="line">stress: dbug: [18176] allocating 1073741824 bytes ...</span><br><span class="line">stress: dbug: [18176] allocating 1073741824 bytes ...</span><br><span class="line">stress: dbug: [18176] touching bytes in strides of 4096 bytes ...</span><br><span class="line">stress: dbug: [18174] &lt;-- worker 18175 signalled normally</span><br><span class="line">stress: dbug: [18174] &lt;-- worker 18177 signalled normally</span><br><span class="line">stress: dbug: [18174] &lt;-- worker 18178 signalled normally</span><br><span class="line">stress: dbug: [18174] &lt;-- worker 18179 signalled normally</span><br><span class="line">stress: dbug: [18174] &lt;-- worker 18176 signalled normally</span><br><span class="line">stress: info: [18174] successful run completed in 3s</span><br></pre></td></tr></table></figure><p><img src="img/image-20200506154459952.png" alt="image-20200506154459952"></p><h3 id="小工具"><a href="#小工具" class="headerlink" title="小工具"></a>小工具</h3><h3 id="镜像源"><a href="#镜像源" class="headerlink" title="镜像源"></a>镜像源</h3><h2 id="发行版-1"><a href="#发行版-1" class="headerlink" title="发行版"></a>发行版</h2><h3 id="pxder"><a href="#pxder" class="headerlink" title="pxder"></a>pxder</h3><p>下班之后回到小窝之后就开始一天中最最愉悦的时刻，在 pixiv.net 上刷图。收藏喜欢的<del>老婆</del>插画。为了管理和下载自己收藏的插画作品，当然还是选择食用工具来下载啦😂。</p><p>在二月份的时候帮小土豆和 nova 同学测试 webp server go 的 benchmark ，这个 pxder 帮了咱很大的忙，下载了 3W 多张图片做测试样本，最终使用脚本筛选出合适的文件大小来进行 prefetc 测试。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">╭─debian@debian /mnt/f/illustrations</span><br><span class="line">╰─$ du -sh</span><br><span class="line">50G     .</span><br><span class="line">╭─debian@debian /mnt/f/illustrations</span><br><span class="line">╰─$ tree</span><br><span class="line">203 directories, 31831 files</span><br></pre></td></tr></table></figure><h3 id="杂七杂八的"><a href="#杂七杂八的" class="headerlink" title="杂七杂八的"></a>杂七杂八的</h3><h4 id="nginx"><a href="#nginx" class="headerlink" title="nginx"></a>nginx</h4><p>nginx，除了建站當 Web 服務器，是咱在 openwrt 上裝的，目的是為了擺脫 ip 的辦定限制。因為有些設備通過域名來訪問，更換網絡環境，比如搬家之後只需要維修改一下域名解析即可。比如咱使用 X.lo.502.li 作為三級子域名分配給本地內網機器用。</p><h4 id="ffmpeg"><a href="#ffmpeg" class="headerlink" title="ffmpeg"></a>ffmpeg</h4><p>ffmpeg 能干的事情太多了，咱使用最多的还是合并视频转码视频，比如咱的 <a href="">mbcf</a> ，全称 Merge bilibili cilent file</p><h4 id="pandoc"><a href="#pandoc" class="headerlink" title="pandoc"></a><a href="https://github.com/jgm/pandoc" target="_blank" rel="noopener">pandoc</a></h4><h4 id="rsync"><a href="#rsync" class="headerlink" title="rsync"></a>rsync</h4><h4 id="resilio-sync"><a href="#resilio-sync" class="headerlink" title="resilio sync"></a>resilio sync</h4><p>resilio sync ，是咱最重要的數據備份工具，比如咱使用 pxder 下載好收藏的老婆們，為了在手機上仔細欣賞老婆們，咱就用。resilio sync 將目錄同步到手機上，並且使用它來與 PC，iPhone ，Android ，Linux 三者無縫同步。簡直好用極了。</p><p>需要注意的是，如果跨公網同步，在一些網絡環境下因為 GFW 的緣故，無法建立起鏈接，這時候需要使用到預定義主機。其中有兩種比較好的方案，一是在公網 VPS 機器上安裝 resilio sync 並且加入到同步主機當中。這點缺點也明顯，需要佔用磁盤空間，如果同步大量文件以及幾十幾百GB級別的話，小盤機是扛不住的，需要另外添加磁盤。方法二是咱想到的，屢試不爽，就是將本機的 resilio sync 監聽端口 11354 使用 frp 內網穿透到公網服務器，然後在另一台機器上添加上預定義主機，IP 就是 frp 服務器的 IP，端口就是 frp 內網穿透的 remote port。這樣添加好預訂與主機之後，不到一分鐘就能發現主機並建立起連接。</p><h4 id="curl"><a href="#curl" class="headerlink" title="curl"></a>curl</h4><h4 id="wget"><a href="#wget" class="headerlink" title="wget"></a>wget</h4><h4 id="oh-my-zsh"><a href="#oh-my-zsh" class="headerlink" title="oh-my-zsh"></a>oh-my-zsh</h4><h4 id="zsh"><a href="#zsh" class="headerlink" title="zsh"></a>zsh</h4><h4 id="frp"><a href="#frp" class="headerlink" title="frp"></a>frp</h4><h4 id="openwrt"><a href="#openwrt" class="headerlink" title="openwrt"></a>openwrt</h4><h4 id="Trojan"><a href="#Trojan" class="headerlink" title="Trojan"></a>Trojan</h4><h3 id="shell-常用脚本"><a href="#shell-常用脚本" class="headerlink" title="shell 常用脚本"></a>shell 常用脚本</h3><h4 id="VPS-init"><a href="#VPS-init" class="headerlink" title="VPS init"></a>VPS init</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">apt update</span><br><span class="line">apt install nload ncdu zsh git wget curl htop sysstat psmisc nginx-full fail2ban</span><br><span class="line">curl  https://get.acme.sh | sh</span><br><span class="line">sh -c "$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)"</span><br><span class="line">sed -i 's/ZSH_THEME="robbyrussell"/ZSH_THEME="bira"/g' ~/.zshrc</span><br></pre></td></tr></table></figure><h4 id="rawg"><a href="#rawg" class="headerlink" title="rawg"></a>rawg</h4><p>raw wget 的缩写</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> data: 2020-03-31</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> author: muzi502</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="keyword">for</span>: Fuck GFW and download some raw file form github without proxy using jsDelivr CDN</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> usage: save the .she to your <span class="built_in">local</span> such as /usr/bin/rawg, and chmod +x /usr/bin/rawg</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> use rawg https://github.com/ohmyzsh/ohmyzsh/blob/master/tools/install.sh to download</span></span><br><span class="line"></span><br><span class="line">set -xue</span><br><span class="line"><span class="meta">#</span><span class="bash"> GitHub rul: https://github.com/ohmyzsh/ohmyzsh/blob/master/tools/install.sh</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> jsDelivr url: https://cdn.jsdelivr.net/gh/ohmyzsh/ohmyzsh/tools/install.sh</span></span><br><span class="line"></span><br><span class="line">wget $(echo $1 | sed 's/raw.githubusercontent.com/cdn.jsdelivr.net\/gh/' \</span><br><span class="line">                | sed 's/github.com/cdn.jsdelivr.net\/gh/' \</span><br><span class="line">                | sed 's/\/master//' | sed 's/\/blob//' )</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> curl $(<span class="built_in">echo</span> <span class="variable">$1</span> | sed <span class="string">'s/raw.githubusercontent.com/cdn.jsdelivr.net\/gh/'</span> \</span></span><br><span class="line"><span class="meta">#</span><span class="bash">                | sed <span class="string">'s/github.com/cdn.jsdelivr.net\/gh/'</span> \</span></span><br><span class="line"><span class="meta">#</span><span class="bash">                | sed <span class="string">'s/\/master//'</span> | sed <span class="string">'s/\/blob//'</span> )</span></span><br></pre></td></tr></table></figure><h4 id="kubeadm-pull-images"><a href="#kubeadm-pull-images" class="headerlink" title="kubeadm pull images"></a>kubeadm pull images</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="keyword">for</span>: pull kubeamd images and get kubeadm kubectl kubelet binary</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> date: 2020-04-29</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> author: muzi502</span></span><br><span class="line"></span><br><span class="line">set -xue</span><br><span class="line">apt-get update &amp;&amp; apt-get install -y apt-transport-https curl</span><br><span class="line">curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key add -</span><br><span class="line">cat &lt;&lt;EOF &gt;/etc/apt/sources.list.d/kubernetes.list</span><br><span class="line">deb https://apt.kubernetes.io/ kubernetes-xenial main</span><br><span class="line">EOF</span><br><span class="line">apt-get update</span><br><span class="line"></span><br><span class="line">for version in 1.17.5</span><br><span class="line">do</span><br><span class="line">    apt purge -y kubeadm kubelet kubectl</span><br><span class="line">    apt install -y kubeadm=$&#123;version&#125;-00 kubelet=$&#123;version&#125;-00 kubectl=$&#123;version&#125;-00</span><br><span class="line">    mkdir -p $&#123;version&#125;/bin</span><br><span class="line">    rm -rf $&#123;version&#125;/bin/*</span><br><span class="line">    cp -a $(whereis kubelet | awk -F ":" '&#123;print $2&#125;') $&#123;version&#125;/bin/</span><br><span class="line">    cp -a $(whereis kubeadm | awk -F ":" '&#123;print $2&#125;') $&#123;version&#125;/bin/</span><br><span class="line">    cp -a $(whereis kubectl | awk -F ":" '&#123;print $2&#125;') $&#123;version&#125;/bin/</span><br><span class="line">    kubeadm config images pull --kubernetes-version=$&#123;version&#125;</span><br><span class="line">    docker save -o kubeadm_v$&#123;version&#125;.tar `kubeadm config images list --kubernetes-version=$&#123;version&#125;`</span><br><span class="line">    mv kubeadm_v$&#123;version&#125;.tar $&#123;version&#125;</span><br><span class="line">    tar -czvf $&#123;version&#125;&#123;.tar.gz,&#125;</span><br><span class="line">done</span><br></pre></td></tr></table></figure><h4 id="ss-obfs"><a href="#ss-obfs" class="headerlink" title="ss-obfs"></a>ss-obfs</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">/bin/bash</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="keyword">for</span>: install shadowsocks-libev and obfs</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> date: 2019-03-11</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> by: muzi502</span></span><br><span class="line">apt-get update</span><br><span class="line">apt-get -y  install shadowsocks-libev simple-obfs rng-tools</span><br><span class="line">rngd -r /dev/urandom</span><br><span class="line">mkdir -p /etc/shadowsocks-libev/</span><br><span class="line"></span><br><span class="line">cat &gt; /etc/shadowsocks-libev/config.json &lt;&lt;EOF</span><br><span class="line">&#123;</span><br><span class="line">    "server":"0.0.0.0",</span><br><span class="line">    "server_port":8964,</span><br><span class="line">    "local_port":1080,</span><br><span class="line">    "password":"1984fuckGFW",</span><br><span class="line">    "timeout":60,</span><br><span class="line">    "method":"chacha20",</span><br><span class="line">    "plugin":"obfs-server",</span><br><span class="line">    "plugin_opts":"obfs=http"</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line">systemctl restart shadowsocks-libev.service</span><br><span class="line">modprobe tcp_bbr</span><br><span class="line">echo "tcp_bbr" &gt;&gt; /etc/modules-load.d/modules.conf</span><br><span class="line">echo "net.core.default_qdisc=fq" &gt;&gt; /etc/sysctl.conf</span><br><span class="line">echo "net.ipv4.tcp_congestion_control=bbr" &gt;&gt; /etc/sysctl.conf</span><br><span class="line">sysctl -p</span><br><span class="line">sysctl net.ipv4.tcp_available_congestion_control</span><br><span class="line">sysctl net.ipv4.tcp_congestion_control</span><br><span class="line">touch /etc/sysctl.d/local.conf</span><br><span class="line">echo "net.core.wmem_max = 67108864" &gt;&gt;/etc/sysctl.d/local.conf</span><br><span class="line">echo "net.core.rmem_default = 65536" &gt;&gt;/etc/sysctl.d/local.conf</span><br><span class="line">echo "net.core.wmem_default = 65536" &gt;&gt;/etc/sysctl.d/local.conf</span><br><span class="line">echo "net.core.netdev_max_backlog = 4096" &gt;&gt;/etc/sysctl.d/local.conf</span><br><span class="line">echo "net.core.somaxconn = 4096" &gt;&gt;/etc/sysctl.d/local.conf</span><br><span class="line">echo "net.ipv4.tcp_syncookies = 1" &gt;&gt;/etc/sysctl.d/local.conf</span><br><span class="line">echo "net.ipv4.tcp_tw_reuse = 1" &gt;&gt;/etc/sysctl.d/local.conf</span><br><span class="line">echo "net.ipv4.tcp_tw_recycle = 0" &gt;&gt;/etc/sysctl.d/local.conf</span><br><span class="line">echo "net.ipv4.tcp_fin_timeout = 30" &gt;&gt;/etc/sysctl.d/local.conf</span><br><span class="line">echo "net.ipv4.tcp_keepalive_time = 1200" &gt;&gt;/etc/sysctl.d/local.conf</span><br><span class="line">echo "net.ipv4.ip_local_port_range = 10000 65000" &gt;&gt;/etc/sysctl.d/local.conf</span><br><span class="line">echo "net.ipv4.tcp_max_syn_backlog = 4096" &gt;&gt;/etc/sysctl.d/local.conf</span><br><span class="line">echo "net.ipv4.tcp_max_tw_buckets = 5000" &gt;&gt;/etc/sysctl.d/local.conf</span><br><span class="line">echo "net.ipv4.tcp_fastopen = 3" &gt;&gt;/etc/sysctl.d/local.conf</span><br><span class="line">echo "net.ipv4.tcp_rmem = 4096 87380 67108864" &gt;&gt;/etc/sysctl.d/local.conf</span><br><span class="line">echo "net.ipv4.tcp_wmem = 4096 65536 67108864" &gt;&gt;/etc/sysctl.d/local.conf</span><br><span class="line">echo "net.ipv4.tcp_mtu_probing = 1" &gt;&gt;/etc/sysctl.d/local.conf</span><br><span class="line">sysctl --system</span><br><span class="line">lsmod | grep bbr</span><br></pre></td></tr></table></figure><h4 id="mcbf"><a href="#mcbf" class="headerlink" title="mcbf"></a>mcbf</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="keyword">for</span>: bulk merge bilibili UWP download file *.flv</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> by: blog.502.li</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> date: 2019-01-12</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 将该脚放到 UWP 客户端下载缓存主目录下执行，安装 ffmpeg、jq</span></span><br><span class="line"></span><br><span class="line">set -xu</span><br><span class="line">download_dir=$(pwd)</span><br><span class="line">mp4_dir=$&#123;download_dir&#125;/mp4</span><br><span class="line">mkdir -p $&#123;mp4_dir&#125;</span><br><span class="line"></span><br><span class="line">for video_dir in $(ls | sort -n | grep -E -v "\.|mp4")</span><br><span class="line">do</span><br><span class="line">  cd $&#123;download_dir&#125;/$&#123;video_dir&#125;</span><br><span class="line">  up_name=$(jq ".Uploader" *.dvi | tr -d "[:punct:]\040\011\012\015")</span><br><span class="line">  mkdir -p $&#123;mp4_dir&#125;/$&#123;up_name&#125;</span><br><span class="line">  for p_dir in $(ls | sort -n | grep -v "\.")</span><br><span class="line">  do</span><br><span class="line">    cd $&#123;download_dir&#125;/$&#123;video_dir&#125;/$&#123;p_dir&#125;</span><br><span class="line">    video_name=$(jq ".Title" *.info | tr -d "[:punct:]\040\011\012\015")</span><br><span class="line">    part_name=$(jq ".PartName" *.info | tr -d "[:punct:]\040\011\012\015")</span><br><span class="line">    upload_time=$(grep -Eo "20[0-9][0-9]-[0-9][0-9]-[0-9][0-9]" *.info)</span><br><span class="line">    Uploader=$(jq ".Uploader" *.info | tr -d "[:punct:]\040\011\012\015")</span><br><span class="line">    mp4_audio=$(jq ".VideoDashInfo" *.info | tr -d "[:punct:]\040\011\012\015")</span><br><span class="line"></span><br><span class="line">    if [ "null" = "$&#123;part_name&#125;" ];then</span><br><span class="line">    mp4_file_name=$&#123;video_name&#125;.mp4</span><br><span class="line">    else</span><br><span class="line">    mp4_file_name=$&#123;video_name&#125;_$&#123;p_dir&#125;_$&#123;part_name&#125;.mp4</span><br><span class="line">    fi</span><br><span class="line"></span><br><span class="line">    if [ "null" = "$&#123;mp4_audio&#125;" ];then</span><br><span class="line">    ls *.flv | sort -n &gt; ff.txt</span><br><span class="line">    sed -i 's/^/file /g' ff.txt</span><br><span class="line">    ffmpeg -f concat -i ff.txt -c copy $&#123;mp4_dir&#125;/$&#123;up_name&#125;/"$&#123;mp4_file_name&#125;";rm -rf ff.txt</span><br><span class="line">    else</span><br><span class="line">    ffmpeg  -i video.mp4 -i audio1.mp4 -c:v copy -c:a copy $&#123;mp4_dir&#125;/$&#123;up_name&#125;/"$&#123;mp4_file_name&#125;"</span><br><span class="line">    fi</span><br><span class="line">    cd $&#123;download_dir&#125;/$&#123;video_dir&#125;</span><br><span class="line">  cd $&#123;download_dir&#125;</span><br><span class="line">  done</span><br><span class="line"><span class="meta">#</span><span class="bash"> 如果需要保留原视频请注释掉下面这一行</span></span><br><span class="line"><span class="meta">#</span><span class="bash">rm -rf <span class="variable">$&#123;download_dir&#125;</span>/<span class="variable">$&#123;video_dir&#125;</span></span></span><br><span class="line">done</span><br></pre></td></tr></table></figure><h4 id="conoha-wallpaper-download"><a href="#conoha-wallpaper-download" class="headerlink" title="conoha wallpaper download"></a>conoha wallpaper download</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="keyword">for</span>: download conoha wallpaper</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> by: muzi502</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> date: 2020-02-11</span></span><br><span class="line">set -xue</span><br><span class="line"></span><br><span class="line">p=$(curl https://conoha.mikumo.com/wallpaper/ \</span><br><span class="line">| grep li | grep data-wallpaper-design= \</span><br><span class="line">| sed -e 's/&lt;li//g' | sed -e 's/"&gt;//g' | sed -e 's/^[ \t]*//g' \</span><br><span class="line">| sed -e 's/data-wallpaper-design="//g' \</span><br><span class="line">| sed 's/^/https:\/\/conoha.mikumo.com\/wp-content\/themes\/conohamikumo\/images\/wallpaper\//')</span><br><span class="line"></span><br><span class="line">for pic in $&#123;p&#125;</span><br><span class="line">do</span><br><span class="line">    file_name=$(echo $&#123;pic&#125; | awk -F "/" '&#123;print $9&#125;')</span><br><span class="line">    wget $&#123;pic&#125;/1080_1920.jpg -O $&#123;file_name&#125;_1080.jpg</span><br><span class="line">    wget $&#123;pic&#125;/2560_1440.jpg -O $&#123;file_name&#125;_1440.jpg</span><br><span class="line">done</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="http://code2life.top/2019/05/02/0035-fault-injection/" target="_blank" rel="noopener">[DevOps] Linux操作系统层的故障注入</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;h2 id=&quot;咕咕咕&quot;&gt;&lt;a href=&quot;#咕咕咕&quot;
        
      
    
    </summary>
    
    
      <category term="技术" scheme="https://blog.k8s.li/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Linux" scheme="https://blog.k8s.li/tags/Linux/"/>
    
      <category term="搬砖" scheme="https://blog.k8s.li/tags/%E6%90%AC%E7%A0%96/"/>
    
      <category term="工具" scheme="https://blog.k8s.li/tags/%E5%B7%A5%E5%85%B7/"/>
    
      <category term="命令行" scheme="https://blog.k8s.li/tags/%E5%91%BD%E4%BB%A4%E8%A1%8C/"/>
    
  </entry>
  
  <entry>
    <title>无砖可搬的日子|换厂记</title>
    <link href="https://blog.k8s.li/Brick-removal-note.html"/>
    <id>https://blog.k8s.li/Brick-removal-note.html</id>
    <published>2020-05-16T16:00:00.000Z</published>
    <updated>2020-06-18T14:28:38.129Z</updated>
    
    <content type="html"><![CDATA[<h2 id="咕咕咕"><a href="#咕咕咕" class="headerlink" title="咕咕咕"></a>咕咕咕</h2><p>本来打算写一篇《搬砖日记与思考》的，而且想写的内容都已经保存在了我的 telegram 里，但是后来考虑到我的博客将会公布给同事们，为了不必要的影响还是将一些冲塔的内容保存在自己的日记里，等以后再公布吧，或许是十年二十年之后吧。下面的内容就是我从前公司离职后这段时间的一些经历吧(●ˇ∀ˇ●)，因为是离职了，这段时间暂时性地成为了无业游民，也就无砖可搬了😂，所以题名就叫《无砖可搬的日子|换厂记》吧🤣</p><h2 id="面试小结"><a href="#面试小结" class="headerlink" title="面试小结"></a>面试小结</h2><table><thead><tr><th align="center">公司</th><th align="center">城市</th><th align="center">方式</th><th align="center">面试</th><th align="center">offer</th></tr></thead><tbody><tr><td align="center">XX</td><td align="center">深圳</td><td align="center">Email</td><td align="center">❌</td><td align="center">❌</td></tr><tr><td align="center">XX</td><td align="center">上海</td><td align="center">Email</td><td align="center">⭕</td><td align="center">❌</td></tr><tr><td align="center">XX</td><td align="center">上海</td><td align="center">Email</td><td align="center">❌</td><td align="center">❌</td></tr><tr><td align="center">XX科技</td><td align="center">杭州</td><td align="center">BOSS</td><td align="center">✅✅</td><td align="center">✅</td></tr><tr><td align="center">XX科技</td><td align="center">深圳</td><td align="center">Email</td><td align="center">✅</td><td align="center">✅</td></tr><tr><td align="center">XX科技</td><td align="center">深圳</td><td align="center">BOSS</td><td align="center">❌</td><td align="center">❌</td></tr><tr><td align="center">XX科技</td><td align="center">上海</td><td align="center">BOSS</td><td align="center">✅❌</td><td align="center">❌</td></tr><tr><td align="center">腾讯云</td><td align="center">深圳</td><td align="center">BOSS</td><td align="center">✅✅❌</td><td align="center">❌</td></tr><tr><td align="center">XX</td><td align="center">杭州</td><td align="center">BOSS</td><td align="center">✅❌</td><td align="center">❌</td></tr><tr><td align="center">XX</td><td align="center">深圳</td><td align="center">BOSS</td><td align="center">✅✅</td><td align="center">✅</td></tr><tr><td align="center">XX</td><td align="center">深圳</td><td align="center">Email</td><td align="center">✅✅</td><td align="center">✅</td></tr></tbody></table><h2 id="9-号"><a href="#9-号" class="headerlink" title="9 号"></a>9 号</h2><p>早上去了办公室上班，收拾了一下电脑，把自己的固态硬盘拆下来，又重新安装了 Windows 方便交接给同事。之后再找领导和公司董事签字，见到公司的董事，心里还是战战兢兢的。不过出乎意料，过程很顺利，公司董事也很贴切临走前简单地祝福了几句。签字完成之后还要回公司本部办理财务结算以及劳务合同终止协议。乘着地铁来到公司，测量体温登记就上楼找到人事。和人事部门经理简单聊了一下，主要是问了些薪资待遇、为什么要去一线城市的原因等等，这些问题在我面试的过程中也被经常问到过，也就如实地回答了。</p><p>说实话，前公司无论时待遇还是同事关系上，都很好，而且在我离职财务结算的时候，我本来需要缴纳一笔 5000 元左右的款项，但是公司领导层考虑到我还刚刚毕业一年，为我的前程着想暂时不予扣除。对我来说这笔钱简直是个大救星，因为在五一之后身上的余额不到 1 万元，若是没有公司的这笔款项豁免，或许现在的我只能睡几百块钱的青旅，将就着住几个月才能缓解下来，这一点的确对于我来说是极大的帮助。</p><p>和国内某些大厂相比，东家对待离职员工的态度真是高下立判啊😂。看来自己还是很幸运去年毕业的时候遇到这么好的公司，虽然已经离开了那里，但是很感谢他们在这段时间给予的帮助。</p><p><img src="img/image-20200516131617183.png" alt="image-20200516131617183"></p><p>还有一点，在四月份提出离职申请的时候，心里十分愧疚，因为在去年入职的时候刚答应了领导要在这里呆下去的。而且领导对我们新人也是十分关照有加：去年的时候去外地出差，那几天一直是领导请客吃饭；上个月公司组织去体检，我上午体检完回来后中午喜提 38 度发热大礼包😂。然后去医院做号新冠病毒检验，期间领导一直在打电话，前前后后一共打了二十个电话，一直关注着我身体情况怎么样，有没有好转，晚上睡觉前又打电话问退烧没有。生病的那几天，没有和家人说，真正担心到我的也只有领导以及我的另一个同事。那点时间才觉着，现实世界才是我们切切实实能感触到的，在自己最难过的时候，能主动帮自己的人是值得珍惜终生的朋友。</p><p>办完离职手续，拿到《终止劳动合同通知书》，有点像大学的录取通知书😂，唯有拿着它才能去下一家公司入职报到。还有一份之前签订的保密协议，因为从事的岗位涉及机密信息，有一点限制，比如离境或出国之前需要报备，这一点比较麻烦。不过还好啦，依照目前的疫情情况，估计一年之内不会离境或出国了。</p><p>晚上的时候在住的小区附近吃完了最后一顿晚饭，那种感觉真是……此生可恋😭</p><blockquote class="twitter-tweet"><p lang="zh" dir="ltr">晚上吃的这道菜叫 “火爆茄子”，的确够火爆的😡，吃完之后我火冒三丈想砸桌子，肚子里仿佛有千只草泥马奔腾着而过……菊花要遭受 DDoS 攻击了😭 <a href="https://t.co/V4whuhJFwQ" target="_blank" rel="noopener">pic.twitter.com/V4whuhJFwQ</a></p>&mdash; 木子 (@muzi_ii) <a href="https://twitter.com/muzi_ii/status/1259090385491488770?ref_src=twsrc%5Etfw" target="_blank" rel="noopener">May 9, 2020</a></blockquote> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script><p>晚上的时候进行了最后一场面试，面试的过程还算顺利，虽然还不知道结果，但是为了保底的选择，还是动身前往深圳。因为深圳的这家公司要求的入职时间就在近几天，到那里还要租房体检等一堆杂事儿要做，这需要几天的准备时间。</p><h2 id="10-号"><a href="#10-号" class="headerlink" title="10 号"></a>10 号</h2><p>第二天早上还是按照往常的时间起床，收拾好行李，临走之前环顾了一下生活了一年的小窝，多少有点不舍离开这座生活了五年的城市。回想起大一时从千里之外的家乡来到这里求学读书，在这里四五年的生活，渐渐地习惯了这座城市。大学和前女友恋爱的那段时间也曾计划或将来要在这里安身立命，成家立业，有一个幸福美满的家庭。我想这也是大多数人的正常生活和归宿吧。不幸的是后来还是和前女友分手了，自那以后也再也不想恋爱了，因为自己还是喜欢一个人的生活，而且喜欢/爱上他人是种不自由的生活，要考虑对方的感受，有时为了维系亲密关系不得不违背自己的原则，这样的生活真的热爱不起来，还是一个人玩泥巴爽呀😋。</p><p>去年毕业之后就找到这里住的，上下铺的青旅，四人间每人 300元，对于刚毕业的我来说这里无疑是最好的归宿，因为当时实习的工资每天也就 120 元，自己在公司附近单独住一间房子的话，每个月住房费用至少要 1300+ ，而住青旅的话每个月能节省 1000 元。其次选在住在这里是因为距离公司只有 5 分钟的步行路程，中午的时候还能回来午休睡一会，简直舒服极了，相比于一块入职的同事每天要 2 个多小时的上下班路程好很多。本来当时打算住到转正之后再搬出去住的，不过等到转正之后，发现渐渐地习惯上了，接着住下去也没问题，于是就一直住到我离开这里，将近一年的时间。</p><p>而下一座城市（深圳）也是找到上下铺的青旅，实在是住不起公司附近的房子，对于均价 3000+ 而且押一付三的房子来说，接近 1 万的租房费用就好花费我所有的积蓄了，没办法只能再去住上下铺的青旅来维持生计了，一个字，穷啊（（（</p><blockquote class="twitter-tweet"><p lang="zh" dir="ltr">溜了溜了，离开了居住了一年的小窝和生活了五年的城市）<br><br>只是再也找不到每月三百块钱的房子了（ <a href="https://t.co/HIIoYTo95P" target="_blank" rel="noopener">pic.twitter.com/HIIoYTo95P</a></p>&mdash; 木子 (@muzi_ii) <a href="https://twitter.com/muzi_ii/status/1259296422228197376?ref_src=twsrc%5Etfw" target="_blank" rel="noopener">May 10, 2020</a></blockquote> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script><p>到了时间点就动身前往机场，路程五十分钟左右，在车上拿起 kindle 接着看徐贲的《人以什么理由来记忆》。因为在二月份的时候剩余价值里的一期节目中提到过《布达佩斯往事：冷战时期一个东欧家庭的秘密档案》这本书，而这本书的序言正是徐贲老师写的，之前我也读过他的论文 <a href="https://matters.news/@philosophia1979/徐贲-中国的-新极权主义-及其末世景象-野兽荐读-bafyreiegbg5tti3ljc7newaah5wp36ncf7fvb2oaovd6p7elc4xqfhbcd4" target="_blank" rel="noopener">《中国的“新极权主义”及其末世景象》</a>) ，随意对他关注的内容也有所了解。总感觉这本书更像是阿伦特、加缪、萨特、哈维尔等人对于极权主义著作及思想的解析。就像在剩余价值里提到的，我们读这些历史的时候，而当下就仿佛置身于历史之中一样。书中记录苏联和纳粹德国极权统治改造人性的言论审查、秘密警察、集中营、无言论自由和新闻自由、党媒愚民洗脑等，这些描述极权统治的历史，再看一看当下，我们不正置身于其中吗？</p><p>来到机场在机场过安检检查行李的时候，一块祖传的永磁铁被扣下了，（这块磁铁是我高中时从家里破旧的音响上拆下来的，一直拿来磁吸一些螺丝用，垃圾佬常用的工具）。这才知道飞机上是不能携带磁铁的≡(▔﹏▔)≡，没办法，只能丢下了。</p><p>顺利过了安检，等待一段时间开始登机，座位在飞机靠窗的位置，中途的风景还不错。看到窗外的云朵，想起了《地球的演变故事》里有关大气层的科普：</p><blockquote><p>地球周围的大气层在垂直方向上可以分为对流层、平流层、中间层、热层和外层。其中对流层是最低的一层，和人类的关系最为密切。而大中型飞机除起飞和降落外，多是在平流层中飞行。这主要是因为：平流层中大气垂直运动很少，以平流运动为主，飞机在其中受力比较稳定；水汽和尘埃含量少，能见度很高；对地面的噪声污染相对较小；飞鸟飞行的高度一般达不到平流层，可以避免机鸟相撞的事故。平流层的这些特点，决定了飞机适宜在这层大气中飞行。平流层的海拔高度与纬度有很大关系。低纬度地区平均在16～18千米以上，中纬度地区平均在10～12千米以上；高纬度地区平均在8～9千米以上。</p><p>我国民航规定，中型以上的民航飞机都在高空飞行，此处的高空是指海拔7000～12000米的空间。飞行高度层高度8400米（含）以下，每300米为一个飞行高度层；飞行高度层高度8400米（不含）以上，每600米为一个飞行高度层。飞机在相对、交叉、超越飞行时，必须保持不得小于规定高度层米数的垂直间隔，以确保飞行安全和交通顺畅。 此外，小型飞机活动区域一般在3000米以下。</p></blockquote><p><img src="img/20200510_045930999_iOS.jpg" alt="image-20200516201412794"></p><p>下了飞机之后乘坐地铁到公司附近的地铁站，和房东约定好了来接我。出站之后房东带领着去她家，到了之后感觉落差十分巨大w(ﾟДﾟ)w。在不到 5 平米的房间里塞下一张 0.8m*2m的床，另外半边是不到一米的过道。这也是迫不得已的选择吧，因为附近的房子基本上都是押一付三，而且价格普遍在 3000+ ，再稍微远一点能找到 1500+ 左右的房子，不过对于押一付三来说我依旧无法承担的起。打算先暂时在这里将就一段时间，等存款足够了就搬出去单独住一间。这里的价格也不便宜，每月房租 800，押金 850，不需要交水电暖费用。和我以前住的 300 块钱的青旅环境还是差太远了😂。</p><p><img src="img/photo_2020-05-10_19-35-42.jpg" alt="img"></p><p>晚上在附近吃了三菜一汤的快餐，晚上睡觉的时候十分酸痛，我的行李还没有到，只能用床单简单地盖在身上。在这里睡了几晚，此生可恋，以后再也不想住青旅了。我觉着还是应该对自己好一点，拥有一个自己独立的小窝多么地重要。毕竟谁也不知道自己会不会发生意外突然离开这个世界，如果生前活得像我这样在是太惨了😂。感觉应该对自己更好一点，比如回家的时候买火车票的时候不能再像以前那样买二十几个小时的硬座，自己能赚钱了应该选择更省时舒适的出行方式，应该多多改善一下自己的生活，不能再像以前穷学生一样过得惨兮兮😂</p><h2 id="11-号"><a href="#11-号" class="headerlink" title="11 号"></a>11 号</h2><p>早起八点多去医院体检，去医院有点害怕。因为上个月公司组织去医院体检，从医院回来之后我就突然发烧了，血清检测是因为细菌感染。对于我这种长期（六年）素食的人来说，如果不注重营养均衡，免疫力会下降的，现在我就属于那种免疫力低下的人群，稍有不慎就会生病😐。不过为了坚持自己的原则，这点牺牲还是可以承受的(●ˇ∀ˇ●)。</p><p>没想到医院体检的人数那么多，需要预约到后天才有空位，最终还是预约到了后天。预约完体检的时间之后就回到住的地方，天气实在是太热了，刚来还是不太习惯，加上又是狭窄的空间，给人一种很烦躁的感觉。联系了一下另一家公司的 HR ，(也就是现在最终入职的公司)，给的回复是三天之内给出面试结果。内心也十分焦急地等待着，自己感觉只有三成的把握拿到 offer。如果拿到的话就要考虑离开这座城市，又要从头开始，找房子，寄行李，买机票等等。</p><p>躺床上休息会儿，床板子太硬了，还是坐起来拿着 kindle 看了会书，一会的时间就把《七堂极简物理课》看完了，这本书……写的真的不太好，对于具备只是一些简单的感念普及而已，倒不如去看看《星空的琴弦》或者《万物简史》。</p><p>下午的时候顺丰快递师傅打电话让我去取件，邮寄过来的行李已经到了。70 公斤的行李从小区门口搬运到 18 楼，还好快递师傅借给了我手推车方便了些。把行李拆开又重新分拣了一下</p><p>晚上的时候终于收到了面试通过的消息，简单谈了一下薪资。比现在的这家公司薪资要低 1k，虽然低了一点但还是能接受。于是就计划一下明天的事情，早早地睡觉了。</p><h2 id="12-号"><a href="#12-号" class="headerlink" title="12 号"></a>12 号</h2><p>早起去医院取消了体检退款很快就到账了。回来之后就收拾行李，把一些没用的破玩意都扔了，机箱取出来自己带在身上。为了减轻重量，上次邮寄回来 70KG 花了 318￥😭。这次最终减轻到 50KG ，邮寄费用 210￥，还算能接受的范围。真的<strong>是买书一时爽，搬家火葬场！</strong>几十斤中的书籍搬家真的是个累赘😭。收拾完毕后联系昨天给我派送快递的师傅邮寄快递，由于地点房子还没有找好，地址就填写了公司对面的小区，希望在那个小区里找到合适的房子吧。</p><p>上午十一点多的时候收到了公司的正式 offer ，约定好 18 号入职。随后联系将要（13号）入职的 A 公司 HR ，向她道歉并如实地说明了不能入职的原因。多少有点愧疚，因为第二天就要入职了，在前一天再通知人家说不去了，换做谁都很气愤吧。</p><p>下午的时候，收拾好行了就去机场附近的酒店，由于是早上的飞机，时间紧迫只好住在酒店附近了，还好酒店提供免费接送的服务，在前台登记一下出发时间，第二天司机师傅会开车送到机场。</p><p>晚上的时候约朋友吃饭，一个高中同学，关系还可以。这位朋友有点奇葩，大一的时候是在大连海事大学上的航海专业，大一上完之后的暑假又退学回家复读一年，最终考上了一所 211 大学并学的计算机专业，现在在 BAT 做后端开发，薪资比我高很多，而且还拿到了 shoppe 的 offer ，有点同辈压力🍐，感觉自己太菜了😥。交谈的过程中本以为他还是以往那样岁月静好，不过印象大反转。原来是他家也遭受到社会主义铁拳的重锤😂，和我一样的感受。然后谈了几位高中同学的现状，他还嘲讽另几位岁月静好的同班同学没有遭受社会铁拳的毒打🤣。哈哈啥，我倒是觉着岁月静好没有什么不对的，我希望祝福他们能这样安安稳稳地生活下去吧，但愿他们不要想我这样遭受社会主义铁拳的重锤。《心理测量者》小说里曾提到过这样一段对话：</p><blockquote><p>“安全，完美的社会只是个幻想罢了。我们生活的社会如今还是‘危险社会’”</p><p>“什么意思……？”</p><p>“很久以前……德国还算个国家的时候，有个社会学家，乌尔希里·贝克（经常说的话。指社会依赖‘便利但危险’的东西，政府让我们背负起风险……但风险被巧妙地分散，分配以至于谁也没觉察到，不对，不是没觉察到，而是即使觉察了也当没看见，或许每个人都在睁一只闭一只眼，危险固然存在，但如果不反过来当作其不存在的话就无法保持理智。 “这座城市的市民，会想到这么多么，就连我也算在内。“</p></blockquote><p>我们共同背负着政府强加给我们的危险，而这种危险来自于权力的集中化。这种危险巧妙地分散到每个人身上，以至于谁也察觉不到它的存在，即便是察觉到，也只能睁一只眼闭一只眼。如果不把它当作不存在的话，就无法在这个社会生存下去。</p><p>和朋友已快到海边逛了一会儿，大晚上的海边的风景确实没有什么值得欣赏的，之后就回到酒店休息了。</p><h2 id="13-号"><a href="#13-号" class="headerlink" title="13 号"></a>13 号</h2><p>凌晨乘飞机出发，还好酒店的师傅免费开车送到机场，在办理行李托运的时候，行李超重了 5KG，就把我的台式机机箱取了出来抱在怀里随身携带者吧，也不知道能不能过案件，毕竟是接近 5KG 的重货。过安检的时候没想到大摇大摆地抱着机箱就过了安检，有点出乎意料。顺利登机后坐在了靠窗的位置，休息两个小时之后就到达了目的城市。</p><p>下飞机后坐机场巴士到酒店，也是在公司附近。歇息一会儿后开始洗衣服，错把酒店洗衣房里的漂白粉当作洗衣粉用了，一股脑地放了一大勺再洗衣机里，洗完之后我那件黑色的 USTC LUG 定制版 T 恤被加上了一层红褐色的滤镜，我欲哭我累😭，太难受了，本打算下周入职的那天要穿的😭。一件好好地 T 恤就这样被摧残了，难受死了😑。</p><p>下午休息了一会去看房，联系的蛋壳公寓，看了两户房子，还算满意，并且可以押一付一，总价格不到 3000 元，还能接受。不过到最后蛋壳公寓的老哥才给我谈分期付款的事儿。之前我从未住过这种连锁公寓，没想到需要和微众银行签订一年的分期协议，这一点很坑，虽然价格诱人但我本人对这种分期的方式及其反感于是还是放弃了在蛋壳公寓上租房。房子和带我看房的老哥都很满意，只是不想使用分期付款的这种方式。之后再支乎上看到了 <a href="https://zhuanlan.zhihu.com/p/139490531" target="_blank" rel="noopener">但有“蛋壳”方面的租房找你，应届生请务必看完这篇文章</a>，还好我没有踩坑，庆幸庆幸。之后又联系了自如的房子，自如押一付一的房子价格贵了一大截，房租每月要 2100，押金 2000 有点接受不了就没有再考虑。贫穷使我住不起房（（</p><p>终于在闲鱼上联系到一个老哥，说是转租的房子，而且不需要押金，每月付房租就可以，这点很诱人啊。于是就迫不及待地看房，最终见面之后，很痛快的完成了交易，终于解决了最头疼得一件事儿。</p><h2 id="14-号"><a href="#14-号" class="headerlink" title="14 号"></a>14 号</h2><p>上午酒店退房，搬到新住的地方，收拾一下房间，拿以前的毛巾用手拖完了地板，做了一会家务。下午的时候顺丰快递寄行李，行李送到小区门口，50公斤的行李，从小区门口到楼下大概 200 米的距离，扛起来真的是有点远啊😭，因为是自从上大学之后就没再搬砖干农活的原因，体力大不如从前，扛着 100 斤的行李，200 米的距离换了十几次的肩停下来歇息几分钟，远远低于业界 100KG/5KM 不换肩的标准，实在是愧对于自己的肌肉啊🙃，惭愧惭愧（以前我十五岁辍学再工地上搬砖那年，自己一个人扛一百多斤中的机器在工地上行云流水穿梭于各个沟道之间，（偷笑，人老了啊，失去了年轻时的热血.jpg</p><p>晚上买些生活用品，小土豆告诉我在<code>还不晚</code>上买合适，价格便宜而且种类齐全。贫穷如我只能靠抠和薅来满足生活了，听小土豆的建议在马云家逛了一个多小时买好了以后要用到的生活物品。接着看了一会徐贲的书就睡着了，自己由于太忙的原因阅读的时间远不如从前了＞︿＜</p><h2 id="15-号"><a href="#15-号" class="headerlink" title="15 号"></a>15 号</h2><p>早上起来之后出门骑车单车往公司附近逛一圈，熟悉一下上班时的路线，看看需要花费多长时间。回来之后就接着去银行办理银行卡用作工资卡。接着完成之后又去了照相馆拍 1 寸的照片，办理社保卡的时候会用到。中午的时候在银行附近的兰州拉面餐馆里吃了碗鸡蛋拉面，味道还是正宗的兰州拉面。老板和厨师看样子也是回族人。看了一下菜单，番茄炒饭、酸辣白菜、酸辣土豆丝、鸡蛋拉面等。哈哈哈，这就是以后常来吃饭的地方了😂。</p><h2 id="16-号"><a href="#16-号" class="headerlink" title="16 号"></a>16 号</h2><p>早上八点的时候和闲鱼上的老哥约好去某地面基交易山地车，因为距离比较远所以就乘坐公交到了约定好的地方。见面之后简单寒暄了一下，先试骑了一段距离，刹车和变速都还可以，就很痛快地买下来这辆车。从此也是有车一族了（偷笑。有了一辆车真是方便啊，之前下楼后步行到小区门口需要 5 分钟，现在骑车只需 1 分钟就够了，比以往快了很多。之所以买一辆二手的山地车是因为早上上班时小区门口的共享单车都被上班族骑走了，为了节省时间还是整辆自己的单车吧，而且共享单车骑起来真费劲，速度太慢了。换做 24 速的山地车速度提升一倍，时间也能缩短一半，以往 15 分钟的骑行路程现在骑快一点的话只需要 10 分钟。那还是按照往常那样 8 点半出发，9 点之前赶到公司是没有问题的。而且自己最喜欢的运动也是骑行，高中的是基本上都是骑车去上学，高考完的时候曾自己一个人骑车去北京。来回 1000公里的距离，想想当初也是闲着蛋疼。曾在大一的时候计划或要去骑行川藏线，四年之后看来这个小目标要打水漂了。或者等到国庆的时候准备骑行去玩儿，骑行去海边玩儿，嗯，就这样定下来了，如果读者又想去的话可以联系咱一块去😂</p><p>下午修空调，感觉被宰了，我估计着应该就是一根跳线没有接好或者接对导致空调主机无法开启。要是换作我家的空调，这种小问题自己就能解决，毕竟家里的电磁炉洗衣机空调电视机电风扇等等家电自己都拆过修过😂。因为房东家的空调是中央空调价格昂贵自己还是不敢轻易尝试，所以还是让房东来请维修工人处理吧。下午的时候房东请来的维修工人倒腾一会儿硬是给我说主板坏了(* ￣︿￣)。于是好戏上场，我就和维修工人杠上了。我问他主板哪里坏了？他说电容坏了，需要更换主板。我内心一万匹草泥马奔腾而过，一个电容坏了就要换整个主板？？？？我当场掏出我祖传的电烙铁要给他演示一下怎么换电容，飞线换电容植球等等这点本领咱还是有滴，电容坏了换电容不得了？当我傻子来忽悠嘛。巴拉巴拉和他扯了半天，最终……还是收了 640￥。虽然这笔钱是房东来付的，但是还是很不心甘情愿，就这样被别人宰一刀，无论宰到谁身上都不好受。</p><p><strong>主板坏了</strong> 这招对于家电或者电子维修昂行业的神器呀，空调小毛病给你整个主板坏了的接口从你身上薅一把羊毛。类似的事情在修理笔记本电脑或者电视机等等都是常见的事情。</p><p>下午的时候散热硅脂和 CPU 延长线到了，拿了快递之后就开始组装台式机。在拆主板的时候，简直震惊死我，没想到我的主板 CPU 4PIN 延长线已经老化短路烧毁了，我使用了一年竟然浑然不知。之前在给 <a href="https://github.com/webp-sh/webp_server_go" target="_blank" rel="noopener">Webp Server Go</a> 做 benchmark 的时候，CPU 一旦满载就直接黑屏，各种排查都没有找到原因。直到今天我才明白，原来是 CPU 供电线的问题……，我内心一万匹草泥马。无良商家坑惨我了，去年的时候装机没有注意到这根线的质量这么差，还好现在拆机的时候发现了，不然那一天这根线抽搐了突然就 BOOM 可不好了😡。</p><p><img src="img/20200514_070432138_iOS.jpg" alt="image-20200517101303617"></p><p>组装后的台式机效果图，把路由器放在了机箱上面。主路由器还是原来的 <a href="https://www.netgear.com/support/product/R6300v2.aspx" target="_blank" rel="noopener">R6300V2</a> ，是去年的时候花了 170￥ 在闲鱼上捡垃圾搞来的。旁边白色的就是 N1 盒子，当软路由来用(<a href="https://blog.k8s.li/N1-openwrt.html">N1 盒子刷入 OpenWrt 并部署 K3s</a>)。R6300V2 的性能还是太弱，尤其是对于 AES-256 或者  GCM-256 这种加密算法还是力不从心，N1 盒子小钢炮当旁路网关再适合不过了。另外从 R6300V2 的 USB 接口给 ESP8266 开发板供电，用来远程开关机(<a href="https://blog.k8s.li/esp8266-pc-switch.html">使用 ESP8266 NodeMCU 打造 WiFi 开关</a>)。</p><p><img src="img/20200517_022447573_iOS.jpg" alt="img"></p><h2 id="17-号"><a href="#17-号" class="headerlink" title="17 号"></a>17 号</h2><p>今天又是一个平凡的日常，无非就是拿了些快递，在网上买的生活用品也到齐了，也渐渐地习惯了这里的生活，慢慢地融入到这里。买了一箱手抓饼和一些蔬菜，准备早上自己做饭吃，素食者的福音呀，一张饼裹上几片菜叶子，再加上一个煎蛋，抹上番茄酱和沙拉酱，朴素一餐😋</p><p>明天就要入职开始搬砖了，像新生开学一样，充满着期待又有一点害怕，希望明天顺利吧。感觉就像是大一新生开学一样，离开熟悉已久家来到这个陌生的城市，拿着<del>录取通知书</del>《录用通知书》和《离职证明》到新公司入职，认识新的朋友，开始一段新的旅程。</p><p>回想起这几天的经历，我从未想过会来到这里，也从未想过会离开生活已久的城市。若是说这一切的起点，就翻了翻去年写的<a href="https://blog.k8s.li/thinking-2019.html">《毕业后的一点思考》</a></p><blockquote><p>我依稀记得高中毕业时最后一堂课上，我们的班主任给我们班同学讲过一句话<strong>你所读过的书和你接触的人，决定了你以后能走什么样的路</strong>，我一直铭记至今，并把它当作大学四年的唯一信条，很庆幸，正是这则信条伴随着我完成了思想的改造和重塑。现在我手机上还保留着当时班主任讲话时的录音，或许这是我值得保存众生的财富。</p></blockquote><p>也正是因为这篇文章的影响，让我认识到了一些新的小伙伴：<a href="https://nova.moe/" target="_blank" rel="noopener">nova</a> 和 <a href="https://dmesg.app/" target="_blank" rel="noopener">小土豆</a> 。认识到他们之后有点同辈压力🍐，他俩都在很牛逼的公司上班，自己却在一个二线小城市过着安逸的生活，这也迫使我想要走出心里舒适圈，去上海或深圳闯一闯，而且和小土豆也约定好了一起去同一个城市。最后还是要感谢一下小土豆，在我刚开始投简历面试的那几天给予很多精神上的帮助😘。那段时间确实各种压力、挫败感、自我怀疑否定、抑郁等负面情绪特别严重，有时面试下来连呼吸都感受到压力胸闷。没有这两位朋友的帮助，或许刚想要破壳而出的我因为害怕就放弃了，现在可能还是原地不动。放弃安安稳稳的生活走出心里舒适圈，确实那种压力感不太好受，伤心难过的时候就找个朋友来倾诉一下，不要一个人憋着(o゜▽゜)o☆。</p><p>Bless, Bless!</p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;h2 id=&quot;咕咕咕&quot;&gt;&lt;a href=&quot;#咕咕咕&quot;
        
      
    
    </summary>
    
    
      <category term="生活" scheme="https://blog.k8s.li/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
  </entry>
  
  <entry>
    <title>kubelet 挂载 volume 原理分析</title>
    <link href="https://blog.k8s.li/kubelet-mount-volumes-analysis.html"/>
    <id>https://blog.k8s.li/kubelet-mount-volumes-analysis.html</id>
    <published>2020-04-30T16:00:00.000Z</published>
    <updated>2020-04-30T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近在 kubernetes 中使用 NFS 存储的时候遇到了一个小问题，也找到了解决办法，不过还是想深入地了解一下 kubelet 挂载存储的原理和过程，于是就水了这篇博客 😂。虽然平时也知道 PV 、PVC 、存储类等怎么使用，但背后的过程和原理却没有深究过，有点一知半解的感觉。唉，太菜了 😑 （<code>流下了没有技术的眼泪.jpg</code></p><h2 id="疑惑"><a href="#疑惑" class="headerlink" title="疑惑"></a>疑惑</h2><blockquote><p>当使用 NFS 存储的 Pod 调度到没有安装 NFS client (nfs-utils 、nfs-common) Node 节点上的时候，会提示 NFS volume 挂载失败，Node 宿主机安装上 NFS client 后就可以正常挂载了，我想是不是 kubelet 在启动容器之前是不是调用 system-run 去挂载 NFS ，如果 Node 宿主机没有安装 NFS client 就无法挂载。</p><p>翻了一下源码 <a href="https://github.com/kubernetes/kubernetes/blob/master/vendor/k8s.io/utils/mount/mount_linux.go#L115" target="_blank" rel="noopener">mount_linux.go</a> 和 <a href="https://github.com/kubernetes/kubernetes/pull/49640" target="_blank" rel="noopener">49640</a> 这个 PR。里面提到的是 kubelet 挂载存储卷的时候使用 system-run 挂载，这样一来，即便 kubelet 挂掉或者重启的时候也不会影响到容器使用 kubelet 挂载的存储卷。</p></blockquote><p>请教了一下两个大佬 <a href="https://zdyxry.github.io/" target="_blank" rel="noopener">Yiran</a> 和 <a href="http://gaocegege.com/Blog/about/" target="_blank" rel="noopener">高策</a>，他们也不太熟悉😂，不过也找到了解决思路。在使用 GlusterFS 的时候，Node 节点也需要安装 GlusterFS 的客户端，不然 kubelet 也是无法挂载 Pod 的 volume。由此可以确认的是： kubelet 在为 Pod 挂载 volume 的时候，根据 volume 的类型（NFS、GlusterFS、Ceph 等），Pod 所在的 Node 节点宿主机也需要安装好对应的客户端程序。</p><h2 id="问题复现"><a href="#问题复现" class="headerlink" title="问题复现"></a>问题复现</h2><p>集群信息：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-master-01 opt]# kubectl get node</span><br><span class="line">NAME            STATUS   ROLES    AGE    VERSION</span><br><span class="line">k8s-master-01   Ready    master   8d     v1.17.4</span><br><span class="line">k8s-master-02   Ready    master   8d     v1.17.4</span><br><span class="line">k8s-master-03   Ready    master   8d     v1.17.4</span><br><span class="line">k8s-node-02     Ready    &lt;none&gt; 8d     v1.17.4</span><br><span class="line">k8s-node-3      Ready    &lt;none&gt; 3d3h   v1.17.4</span><br><span class="line">node1           Ready    &lt;none&gt; 108s   v1.17.4</span><br></pre></td></tr></table></figure><p>为了方便复现问题还是在 Rancher 上创建了 PV 和 PVC，以及包含两个 Pod 的一个 <code>Deploment</code>，在创建 Deploment 的时候，指定将 Pod 调度到新加入的节点上，即这个节点上并没有安装 NFS 客户端。</p><p><strong>PV 信息如下：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-master-01 opt]# kubectl describe pv nfs211</span><br><span class="line">Name:            nfs211</span><br><span class="line">Labels:          cattle.io/creator=norman</span><br><span class="line">Annotations:     field.cattle.io/creatorId: user-gwgpp</span><br><span class="line">                 pv.kubernetes.io/bound-by-controller: yes</span><br><span class="line">Finalizers:      [kubernetes.io/pv-protection]</span><br><span class="line">StorageClass:    nfs216</span><br><span class="line">Status:          Bound</span><br><span class="line">Claim:           ops-test/nfs-211</span><br><span class="line">Reclaim Policy:  Retain</span><br><span class="line">Access Modes:    RWX</span><br><span class="line">VolumeMode:      Filesystem</span><br><span class="line">Capacity:        10Gi</span><br><span class="line">Node Affinity:   &lt;none&gt;</span><br><span class="line">Message:</span><br><span class="line">Source:</span><br><span class="line">    Type:      NFS (an NFS mount that lasts the lifetime of a pod)</span><br><span class="line">    Server:    10.20.172.211</span><br><span class="line">    Path:      /nfs</span><br><span class="line">    ReadOnly:  false</span><br><span class="line">Events:        &lt;none&gt;</span><br></pre></td></tr></table></figure><p><strong>PVC 信息如下</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"accessModes"</span>: [</span><br><span class="line">        <span class="string">"ReadWriteMany"</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">"annotations"</span>: &#123;</span><br><span class="line">        <span class="attr">"pv.kubernetes.io/bind-completed"</span>: <span class="string">"yes"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"baseType"</span>: <span class="string">"persistentVolumeClaim"</span>,</span><br><span class="line">    <span class="attr">"created"</span>: <span class="string">"2020-04-30T08:59:15Z"</span>,</span><br><span class="line">    <span class="attr">"createdTS"</span>: <span class="number">1588237155000</span>,</span><br><span class="line">    <span class="attr">"creatorId"</span>: <span class="string">"user-gwgpp"</span>,</span><br><span class="line">    <span class="attr">"id"</span>: <span class="string">"ops-test:nfs-211"</span>,</span><br><span class="line">    <span class="attr">"labels"</span>: &#123;</span><br><span class="line">        <span class="attr">"cattle.io/creator"</span>: <span class="string">"norman"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"links"</span>: &#123;</span><br><span class="line">        <span class="attr">"remove"</span>: <span class="string">"…/v3/project/c-rl5jz:p-knsxt/persistentVolumeClaims/ops-test:nfs-211"</span>,</span><br><span class="line">        <span class="attr">"self"</span>: <span class="string">"…/v3/project/c-rl5jz:p-knsxt/persistentVolumeClaims/ops-test:nfs-211"</span>,</span><br><span class="line">        <span class="attr">"update"</span>: <span class="string">"…/v3/project/c-rl5jz:p-knsxt/persistentVolumeClaims/ops-test:nfs-211"</span>,</span><br><span class="line">        <span class="attr">"yaml"</span>: <span class="string">"…/v3/project/c-rl5jz:p-knsxt/persistentVolumeClaims/ops-test:nfs-211/yaml"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"name"</span>: <span class="string">"nfs-211"</span>,</span><br><span class="line">    <span class="attr">"namespaceId"</span>: <span class="string">"ops-test"</span>,</span><br><span class="line">    <span class="attr">"projectId"</span>: <span class="string">"c-rl5jz:p-knsxt"</span>,</span><br><span class="line">    <span class="attr">"resources"</span>: &#123;</span><br><span class="line">        <span class="attr">"requests"</span>: &#123;</span><br><span class="line">            <span class="attr">"storage"</span>: <span class="string">"10Gi"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"type"</span>: <span class="string">"/v3/project/schemas/resourceRequirements"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"state"</span>: <span class="string">"bound"</span>,</span><br><span class="line">    <span class="attr">"status"</span>: &#123;</span><br><span class="line">        <span class="attr">"accessModes"</span>: [</span><br><span class="line">            <span class="string">"ReadWriteMany"</span></span><br><span class="line">        ],</span><br><span class="line">        <span class="attr">"capacity"</span>: &#123;</span><br><span class="line">            <span class="attr">"storage"</span>: <span class="string">"10Gi"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"phase"</span>: <span class="string">"Bound"</span>,</span><br><span class="line">        <span class="attr">"type"</span>: <span class="string">"/v3/project/schemas/persistentVolumeClaimStatus"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"storageClassId"</span>: <span class="string">"nfs216"</span>,</span><br><span class="line">    <span class="attr">"transitioning"</span>: <span class="string">"no"</span>,</span><br><span class="line">    <span class="attr">"transitioningMessage"</span>: <span class="string">""</span>,</span><br><span class="line">    <span class="attr">"type"</span>: <span class="string">"persistentVolumeClaim"</span>,</span><br><span class="line">    <span class="attr">"uuid"</span>: <span class="string">"660dc8d1-7911-4d30-b575-b54990de8667"</span>,</span><br><span class="line">    <span class="attr">"volumeId"</span>: <span class="string">"nfs211"</span>,</span><br><span class="line">    <span class="attr">"volumeMode"</span>: <span class="string">"Filesystem"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Deploment 信息如下：</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">annotations:</span></span><br><span class="line">    <span class="attr">deployment.kubernetes.io/revision:</span> <span class="string">"1"</span></span><br><span class="line">    <span class="attr">field.cattle.io/creatorId:</span> <span class="string">user-gwgpp</span></span><br><span class="line">  <span class="attr">creationTimestamp:</span> <span class="string">"2020-04-30T09:00:19Z"</span></span><br><span class="line">  <span class="attr">generation:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">cattle.io/creator:</span> <span class="string">norman</span></span><br><span class="line">    <span class="attr">workload.user.cattle.io/workloadselector:</span> <span class="string">deployment-ops-test-node1-nfs-test</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">node1-nfs-test</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">ops-test</span></span><br><span class="line">  <span class="attr">resourceVersion:</span> <span class="string">"1940561"</span></span><br><span class="line">  <span class="attr">selfLink:</span> <span class="string">/apis/apps/v1/namespaces/ops-test/deployments/node1-nfs-test</span></span><br><span class="line">  <span class="attr">uid:</span> <span class="string">5d14a158-1eef-4a94-8433-15ad002ee55c</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">progressDeadlineSeconds:</span> <span class="number">600</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">2</span></span><br><span class="line">  <span class="attr">revisionHistoryLimit:</span> <span class="number">10</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">workload.user.cattle.io/workloadselector:</span> <span class="string">deployment-ops-test-node1-nfs-test</span></span><br><span class="line">  <span class="attr">strategy:</span></span><br><span class="line">    <span class="attr">rollingUpdate:</span></span><br><span class="line">      <span class="attr">maxSurge:</span> <span class="number">1</span></span><br><span class="line">      <span class="attr">maxUnavailable:</span> <span class="number">0</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">RollingUpdate</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">annotations:</span></span><br><span class="line">        <span class="attr">cattle.io/timestamp:</span> <span class="string">"2020-04-30T09:01:05Z"</span></span><br><span class="line">        <span class="attr">workload.cattle.io/state:</span> <span class="string">'&#123;"bm9kZTE=":"c-rl5jz:machine-wbs6r"&#125;'</span></span><br><span class="line">      <span class="attr">creationTimestamp:</span> <span class="literal">null</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">workload.user.cattle.io/workloadselector:</span> <span class="string">deployment-ops-test-node1-nfs-test</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">image:</span> <span class="string">alpine</span></span><br><span class="line">        <span class="attr">imagePullPolicy:</span> <span class="string">Always</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">node1-nfs-test</span></span><br><span class="line">        <span class="attr">resources:</span> <span class="string">&#123;&#125;</span></span><br><span class="line">        <span class="attr">securityContext:</span></span><br><span class="line">          <span class="attr">allowPrivilegeEscalation:</span> <span class="literal">false</span></span><br><span class="line">          <span class="attr">capabilities:</span> <span class="string">&#123;&#125;</span></span><br><span class="line">          <span class="attr">privileged:</span> <span class="literal">false</span></span><br><span class="line">          <span class="attr">readOnlyRootFilesystem:</span> <span class="literal">false</span></span><br><span class="line">          <span class="attr">runAsNonRoot:</span> <span class="literal">false</span></span><br><span class="line">        <span class="attr">stdin:</span> <span class="literal">true</span></span><br><span class="line">        <span class="attr">terminationMessagePath:</span> <span class="string">/dev/termination-log</span></span><br><span class="line">        <span class="attr">terminationMessagePolicy:</span> <span class="string">File</span></span><br><span class="line">        <span class="attr">tty:</span> <span class="literal">true</span></span><br><span class="line">        <span class="attr">volumeMounts:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">mountPath:</span> <span class="string">/tmp</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">vol1</span></span><br><span class="line">      <span class="attr">dnsPolicy:</span> <span class="string">ClusterFirst</span></span><br><span class="line">      <span class="attr">nodeName:</span> <span class="string">node1</span></span><br><span class="line">      <span class="attr">restartPolicy:</span> <span class="string">Always</span></span><br><span class="line">      <span class="attr">schedulerName:</span> <span class="string">default-scheduler</span></span><br><span class="line">      <span class="attr">securityContext:</span> <span class="string">&#123;&#125;</span></span><br><span class="line">      <span class="attr">terminationGracePeriodSeconds:</span> <span class="number">30</span></span><br><span class="line">      <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">vol1</span></span><br><span class="line">        <span class="attr">persistentVolumeClaim:</span></span><br><span class="line">          <span class="attr">claimName:</span> <span class="string">nfs-211</span></span><br></pre></td></tr></table></figure><p>创建完 Deploment 之后，使用 kubectl get pod 命令查看 Pod 创建的进度，发现一直卡在 <code>ContainerCreating</code> 状态</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-master-01 opt]# kubectl get pod -n ops-test</span><br><span class="line">NAME                              READY   STATUS              RESTARTS   AGE</span><br><span class="line">node1-nfs-test-547c4d7678-j6kwv   0/1     ContainerCreating   0          2m12s</span><br><span class="line">node1-nfs-test-547c4d7678-vwdqg   0/1     ContainerCreating   0          2m12s</span><br></pre></td></tr></table></figure><p>kubectl describe pod 的日志如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-master-01 opt]# kubectl describe pod node1-nfs-test-547c4d7678-j6kwv -n ops-test</span><br><span class="line">Name:           node1-nfs-test-547c4d7678-j6kwv</span><br><span class="line">Namespace:      ops-test</span><br><span class="line">Priority:       0</span><br><span class="line">Node:           node1/10.10.107.214</span><br><span class="line">Start Time:     Thu, 30 Apr 2020 17:00:33 +0800</span><br><span class="line">Labels:         pod-template-hash=547c4d7678</span><br><span class="line">                workload.user.cattle.io/workloadselector=deployment-ops-test-node1-nfs-test</span><br><span class="line">Annotations:    cattle.io/timestamp: 2020-04-30T09:01:05Z</span><br><span class="line">                workload.cattle.io/state: &#123;"bm9kZTE=":"c-rl5jz:machine-wbs6r"&#125;</span><br><span class="line">Status:         Pending</span><br><span class="line">IP:</span><br><span class="line">IPs:            &lt;none&gt;</span><br><span class="line">Controlled By:  ReplicaSet/node1-nfs-test-547c4d7678</span><br><span class="line">Containers:</span><br><span class="line">  node1-nfs-test:</span><br><span class="line">    Container ID:</span><br><span class="line">    Image:          alpine</span><br><span class="line">    Image ID:</span><br><span class="line">    Port:           &lt;none&gt;</span><br><span class="line">    Host Port:      &lt;none&gt;</span><br><span class="line">    State:          Waiting</span><br><span class="line">      Reason:       ContainerCreating</span><br><span class="line">    Ready:          False</span><br><span class="line">    Restart Count:  0</span><br><span class="line">    Environment:    &lt;none&gt;</span><br><span class="line">    Mounts:</span><br><span class="line">      /tmp from vol1 (rw)</span><br><span class="line">      /var/run/secrets/kubernetes.io/serviceaccount from default-token-f6wjj (ro)</span><br><span class="line">Conditions:</span><br><span class="line">  Type              Status</span><br><span class="line">  Initialized       True</span><br><span class="line">  Ready             False</span><br><span class="line">  ContainersReady   False</span><br><span class="line">  PodScheduled      True</span><br><span class="line">Volumes:</span><br><span class="line">  vol1:</span><br><span class="line">    Type:       PersistentVolumeClaim (a reference to a PersistentVolumeClaim in the same namespace)</span><br><span class="line">    ClaimName:  nfs-211</span><br><span class="line">    ReadOnly:   false</span><br><span class="line">  default-token-f6wjj:</span><br><span class="line">    Type:        Secret (a volume populated by a Secret)</span><br><span class="line">    SecretName:  default-token-f6wjj</span><br><span class="line">    Optional:    false</span><br><span class="line">QoS Class:       BestEffort</span><br><span class="line">Node-Selectors:  &lt;none&gt;</span><br><span class="line">Tolerations:     node.kubernetes.io/not-ready:NoExecute for 300s</span><br><span class="line">                 node.kubernetes.io/unreachable:NoExecute for 300s</span><br><span class="line">Events:</span><br><span class="line">  Type     Reason       Age    From            Message</span><br><span class="line">  ----  ------  ---- ----     -------</span><br><span class="line">  Warning  FailedMount  8m49s  kubelet, node1  MountVolume.SetUp failed for volume "nfs211" : mount failed: exit status 32</span><br><span class="line">Mounting command: systemd-run</span><br><span class="line">Mounting arguments: --description=Kubernetes transient mount for /var/lib/kubelet/pods/cddc94e7-8033-4150-bed5-d141e3b71e49/volumes/kubernetes.io~nfs/nfs211 --scope -- mount -t nfs 10.20.172.211:/nfs /var/lib/kubelet/pods/cddc94e7-8033-4150-bed5-d141e3b71e49/volumes/kubernetes.io~nfs/nfs211</span><br><span class="line">Output: Running scope as unit run-38284.scope.</span><br><span class="line">mount: wrong fs type, bad option, bad superblock on 10.20.172.211:/nfs,</span><br><span class="line">       missing codepage or helper program, or other error</span><br><span class="line">       (for several filesystems (e.g. nfs, cifs) you might</span><br><span class="line">       need a /sbin/mount.&lt;type&gt; helper program)</span><br><span class="line"></span><br><span class="line">       In some cases useful info is found in syslog - try</span><br><span class="line">       dmesg | tail or so.</span><br><span class="line">  Warning  FailedMount  8m48s  kubelet, node1  MountVolume.SetUp failed for volume "nfs211" : mount failed: exit status 32</span><br></pre></td></tr></table></figure><p>在 一台没有安装 NFS 客户端的节点尝试挂载一下 NFS 存储，发现报错的日志和 kubelet 的日志相同🤔</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-master-03 ~]# mount -t nfs 10.20.172.211:/nfs /tmp</span><br><span class="line">mount: wrong fs type, bad option, bad superblock on 10.20.172.211:/nfs,</span><br><span class="line">       missing codepage or helper program, or other error</span><br><span class="line">       (for several filesystems (e.g. nfs, cifs) you might</span><br><span class="line">       need a /sbin/mount.&lt;type&gt; helper program)</span><br><span class="line"></span><br><span class="line">       In some cases useful info is found in syslog - try</span><br><span class="line">       dmesg | tail or so.</span><br></pre></td></tr></table></figure><h2 id="解决问题"><a href="#解决问题" class="headerlink" title="解决问题"></a>解决问题</h2><p>看到 kubelet 报错的日志和我们在宿主机上使用 mount 名挂载 NFS 存储时的错误一样就可以断定为是宿主机的问题。搜了一下报错日志，在 <a href="https://askubuntu.com/questions/525243/why-do-i-get-wrong-fs-type-bad-option-bad-superblock-error" target="_blank" rel="noopener">Why do I get “wrong fs type, bad option, bad superblock” error?</a> 得到提示说需要安装一下 NFS 客户端 (nfs-common、nfs-utils) 😂。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">╭─root@node1 ~</span><br><span class="line">╰─# yum install nfs-utils</span><br><span class="line">………………</span><br><span class="line">Install  1 Package (+15 Dependent packages)</span><br><span class="line"></span><br><span class="line">Total download size: 1.5 M</span><br><span class="line">Installed size: 4.3 M</span><br><span class="line">Is this ok [y/d/N]:</span><br></pre></td></tr></table></figure><p>yum 一把梭后发现 <code>nfs-utils</code> 还真没有安装😂。</p><p>安装完时候使用 kubectl 删除掉之前的 Pod，Deploment 控制器会自动帮我们将 Pod 数量调和到指定的数量。可以发现 Pod 所在宿主机安装 NFS 客户端之后 kubelet 就能正常为 Pod 挂载 volume 了 而且 Pod 也正常运行了。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-master-01 ~]# kubectl delete pod node1-nfs-test-547c4d7678-j6kwv node1-nfs-test-547c4d7678-vwdqg -n ops-test</span><br><span class="line">pod "node1-nfs-test-547c4d7678-j6kwv" deleted</span><br><span class="line">pod "node1-nfs-test-547c4d7678-vwdqg" deleted</span><br><span class="line">[root@k8s-master-01 ~]# kubectl get pod -n ops-test</span><br><span class="line">NAME                              READY   STATUS    RESTARTS   AGE</span><br><span class="line">node1-nfs-test-7589fb4787-cknz4   1/1     Running   0          18s</span><br><span class="line">node1-nfs-test-7589fb4787-l9bt2   1/1     Running   0          22s</span><br></pre></td></tr></table></figure><p>进入容器内查看一下容器内挂载点的信息：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-master-01 ~]# kubectl exec -it node1-nfs-test-7589fb4787-cknz4 -n ops-test sh</span><br><span class="line">/ # df -h</span><br><span class="line">Filesystem                Size      Used Available Use% Mounted on</span><br><span class="line">overlay                  28.9G      4.1G     23.3G  15% /</span><br><span class="line">10.20.172.211:/nfs       28.9G     14.5G     12.9G  53% /tmp</span><br><span class="line">tmpfs                     1.8G         0      1.8G   0% /sys/firmware</span><br><span class="line">/ # mount</span><br><span class="line">rootfs on / type rootfs (rw)</span><br><span class="line">10.20.172.211:/nfs on /tmp type nfs (rw,relatime,vers=3,rsize=524288,wsize=524288,namlen=255,hard,proto=tcp,timeo=600,retrans=2,sec=sys,mountaddr=10.20.172.211,mountvers=3,mountport=20048,mountproto=udp,local_lock=none,addr=10.20.172.211)</span><br><span class="line"></span><br><span class="line">10.20.172.211:/nfs on /mnt/nfs type nfs (rw,relatime,vers=3,rsize=524288,wsize=524288,namlen=255,hard,proto=tcp,timeo=600,retrans=2,sec=sys,mountaddr=10.20.172.211,mountvers=3,mountport=20048,mountproto=udp,local_lock=none,addr=10.20.172.211)</span><br></pre></td></tr></table></figure><p>至此问题已经解决了，接下来就到了正文：开始分析一下  kubelet 为 Pod 挂载 volume 的流程和原理😂</p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><h3 id="容器存储"><a href="#容器存储" class="headerlink" title="容器存储"></a>容器存储</h3><p>在分析 Pod 的 volume 之前需要先了解一下 docker 容器的存储。当我们使用 <code>docker inspect</code> &lt;容器 ID&gt; 命令来查看容器详细信息时，在容器元数据信息的 <code>GraphDriver</code> 字段下包含着一个 <code>Mounts</code> ，而 <code>Mounts</code> 字段里的正是容器挂载的存储，其中里面的 <code>Type</code> 字段里有 <code>bind</code> 和 <code>volume</code> ，其实还有一个 <code>tmpfs</code>。</p><p>另外其中的 <code>Data</code> 字段里的 <code>LowerDir</code> 正是容器的镜像层，关于容器镜像层的讲解建议阅读一下 <a href="https://arkingc.github.io/2018/01/15/2018-01-15-docker-storage-overlay2/" target="_blank" rel="noopener">Docker源码分析—存储驱动</a> ，这篇源码分析👍，在这里点到为止就不再细究了😂</p><blockquote><p>现在，我们已经知道了解了层的创建和删除过程。但是我们一直没有提到一个问题：<strong>我们在容器内看到的文件存在哪？</strong></p><p>我们已经知道层目录下有diff，merged和work 3个目录。diff存储的是该层的文件，work是执行一些特定操作时所要用到的目录，所以实际上，<strong>在容器内看到的文件，就存在于merged目录下</strong></p><p><strong>merged目录在容器未运行时，是一个空目录，当容器启动时会将该容器所有层的diff目录进行联合挂载，挂载到merged目录下，挂载时使用的文件系统就是内核OverlayFS文件系统</strong></p><blockquote><p>如果有看过我关于内核OverlayFS相关的博文，这里应该已经对Docker的overlay2存储驱动与内核OverlayFS的关系有了一个比较清晰的认识</p></blockquote><p><strong>当挂载完成后，容器处于一个子文件系统命名空间，只能看到merged目录下的文件，相当于chroot命令的效果</strong></p><p>所以，在停止一个容器时，实际上就是对merged目录执行一个卸载命令</p></blockquote><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">"GraphDriver": &#123;</span><br><span class="line">            "Data": &#123;</span><br><span class="line">                "LowerDir": "/var/lib/docker/overlay2/2a846f62b759d87bf8b2731960c4031585fb4ee14bbf313f58e0374c4fee9ce0-init/diff:/var/lib/docker/overlay2/29f9a1e9523d4ec323402a3c2da8a5e288cfe0e6f3168a57dd2388b63775c20a/diff:/var/lib/docker/overlay2/015afa447ae2fcfa592d257644312b286173b9a00d0f2017a4c6ede448a87d47/diff:/var/lib/docker/overlay2/2f71b56cd5550bf299ed33a04e385ef5578511e3a17d35162148f4b84bda4b26/diff",</span><br><span class="line">                "MergedDir": "/var/lib/docker/overlay2/2a846f62b759d87bf8b2731960c4031585fb4ee14bbf313f58e0374c4fee9ce0/merged",</span><br><span class="line">                "UpperDir": "/var/lib/docker/overlay2/2a846f62b759d87bf8b2731960c4031585fb4ee14bbf313f58e0374c4fee9ce0/diff",</span><br><span class="line">                "WorkDir": "/var/lib/docker/overlay2/2a846f62b759d87bf8b2731960c4031585fb4ee14bbf313f58e0374c4fee9ce0/work"</span><br><span class="line">            &#125;,</span><br><span class="line">            "Name": "overlay2"</span><br><span class="line">        &#125;,</span><br><span class="line">        "Mounts": [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">"Type"</span>: <span class="string">"bind"</span>,</span><br><span class="line">                <span class="attr">"Source"</span>: <span class="string">"/opt/wordpress-nginx-docker/webp-server/config.json"</span>,</span><br><span class="line">                <span class="attr">"Destination"</span>: <span class="string">"/etc/config.json"</span>,</span><br><span class="line">                <span class="attr">"Mode"</span>: <span class="string">"rw"</span>,</span><br><span class="line">                <span class="attr">"RW"</span>: <span class="literal">true</span>,</span><br><span class="line">                <span class="attr">"Propagation"</span>: <span class="string">"rprivate"</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">"Type"</span>: <span class="string">"bind"</span>,</span><br><span class="line">                <span class="attr">"Source"</span>: <span class="string">"/opt/wordpress-nginx-docker/wordpress"</span>,</span><br><span class="line">                <span class="attr">"Destination"</span>: <span class="string">"/var/www/html"</span>,</span><br><span class="line">                <span class="attr">"Mode"</span>: <span class="string">"rw"</span>,</span><br><span class="line">                <span class="attr">"RW"</span>: <span class="literal">true</span>,</span><br><span class="line">                <span class="attr">"Propagation"</span>: <span class="string">"rprivate"</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">"Type"</span>: <span class="string">"volume"</span>,</span><br><span class="line">                <span class="attr">"Name"</span>: <span class="string">"36d087638f2e9ba8472c441bcf906320cfd80419874291f56e039e4f7d1278e7"</span>,</span><br><span class="line">                <span class="attr">"Source"</span>: <span class="string">"/var/lib/docker/volumes/36d087638f2e9ba8472c441bcf906320cfd80419874291f56e039e4f7d1278e7/_data"</span>,</span><br><span class="line">                <span class="attr">"Destination"</span>: <span class="string">"/opt/exhaust"</span>,</span><br><span class="line">                <span class="attr">"Driver"</span>: <span class="string">"local"</span>,</span><br><span class="line">                <span class="attr">"Mode"</span>: <span class="string">""</span>,</span><br><span class="line">                <span class="attr">"RW"</span>: <span class="literal">true</span>,</span><br><span class="line">                <span class="attr">"Propagation"</span>: <span class="string">""</span></span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br></pre></td></tr></table></figure><p>根据 docker 的官方文档 <a href="https://docs.docker.com/storage/" target="_blank" rel="noopener">Manage data in Docker</a> ，docker 提供了 3 种方法将数据从 Docker 宿主机挂载（mount）到容器内，如下：</p><p><img src="img/types-of-mounts.png" alt="docker-data"></p><p><code>图片从 Docker 官方文档偷来的😂</code></p><blockquote><ul><li><strong>Volumes</strong> are stored in a part of the host filesystem which is <em>managed by Docker</em> (<code>/var/lib/docker/volumes/</code> on Linux). Non-Docker processes should not modify this part of the filesystem. Volumes are the best way to persist data in Docker.</li><li><strong>Bind mounts</strong> may be stored <em>anywhere</em> on the host system. They may even be important system files or directories. Non-Docker processes on the Docker host or a Docker container can modify them at any time.</li><li><strong><code>tmpfs</code> mounts</strong> are stored in the host system’s memory only, and are never written to the host system’s filesystem.</li></ul></blockquote><p>可以看到容器可以使用的存储有三种：</p><ul><li>Volumes：使用 Docker 来管理的存储，默认存放在 <code>/var/lib/docker/volumes/</code> 下，我们可以使用 <code>docker volume</code> 子命令来管理这些 volume ，可以创建、查看、列出、清空、删除等操作。非 docker 进程不应该去修改该目录下的文件，<strong>卷是 Docker 容器持久化数据的最好方式</strong>。</li></ul><blockquote><p><code>-v</code>或<code>--volume</code>：由3个域组成，<code>&#39;:&#39;</code>分隔</p><ul><li>第一个域：对于命名卷，为卷名；匿名卷，则忽略，此时会创建匿名卷</li><li>第二个域：容器中的挂载点</li><li>第三个域：可选参数，由<code>&#39;,&#39;</code>隔开，如<code>ro</code></li></ul></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">╭─root@sg-02 /home/ubuntu</span><br><span class="line">╰─# docker volume</span><br><span class="line">Usage:  docker volume COMMAND</span><br><span class="line">Manage volumes</span><br><span class="line">Commands:</span><br><span class="line">  create      Create a volume</span><br><span class="line">  inspect     Display detailed information on one or more volumes</span><br><span class="line">  ls          List volumes</span><br><span class="line">  prune       Remove all unused local volumes</span><br><span class="line">  rm          Remove one or more volumes</span><br><span class="line">Run 'docker volume COMMAND --help' for more information on a command.</span><br></pre></td></tr></table></figure><p>假如在写 <code>Dockerfile</code> 的时候，使用 <code>VOLUME</code> 指令指定容器内的路径。在我们启动容器的时候 docker 会帮我们创建一个持久化存储的 volume。也可在 <code>docker run</code> 或者 <code>docker-compose.yaml</code> 指定 <code>volume</code> 。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">╭─root@sg-02 /home/ubuntu</span><br><span class="line">╰─# docker volume ls</span><br><span class="line">DRIVER              VOLUME NAME</span><br><span class="line">local               docker-elk_elasticsearch</span><br><span class="line">local               opt</span><br><span class="line">╭─root@sg-02 /home/ubuntu</span><br><span class="line">╰─# docker volume inspect opt</span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">"CreatedAt"</span>: <span class="string">"2020-03-12T06:58:15Z"</span>,</span><br><span class="line">        <span class="attr">"Driver"</span>: <span class="string">"local"</span>,</span><br><span class="line">        <span class="attr">"Labels"</span>: <span class="literal">null</span>,</span><br><span class="line">        <span class="attr">"Mountpoint"</span>: <span class="string">"/var/lib/docker/volumes/opt/_data"</span>,</span><br><span class="line">        <span class="attr">"Name"</span>: <span class="string">"opt"</span>,</span><br><span class="line">        <span class="attr">"Options"</span>: <span class="literal">null</span>,</span><br><span class="line">        <span class="attr">"Scope"</span>: <span class="string">"local"</span></span><br><span class="line">    &#125;</span><br><span class="line">]</span><br><span class="line">╭─root@sg-02 /home/ubuntu</span><br><span class="line">╰─# docker inspect docker-elk_elasticsearch</span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">"CreatedAt"</span>: <span class="string">"2020-04-24T01:37:07Z"</span>,</span><br><span class="line">        <span class="attr">"Driver"</span>: <span class="string">"local"</span>,</span><br><span class="line">        <span class="attr">"Labels"</span>: &#123;</span><br><span class="line">            <span class="attr">"com.docker.compose.project"</span>: <span class="string">"docker-elk"</span>,</span><br><span class="line">            <span class="attr">"com.docker.compose.version"</span>: <span class="string">"1.25.4"</span>,</span><br><span class="line">            <span class="attr">"com.docker.compose.volume"</span>: <span class="string">"elasticsearch"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"Mountpoint"</span>: <span class="string">"/var/lib/docker/volumes/docker-elk_elasticsearch/_data"</span>,</span><br><span class="line">        <span class="attr">"Name"</span>: <span class="string">"docker-elk_elasticsearch"</span>,</span><br><span class="line">        <span class="attr">"Options"</span>: <span class="literal">null</span>,</span><br><span class="line">        <span class="attr">"Scope"</span>: <span class="string">"local"</span></span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><ul><li>Bind mounts：</li></ul><p>使用 <code>Bind mounts</code> 将宿主机的目录或者文件挂载进容器内，这个文件和目录可以是宿主机文件系统上的任意位置，可以不受 docker 所管理，比如 kubelet 的 volumes 目录：<code>/var/lib/kubelet/pods/&lt;Pod的ID&gt;/volumes/</code> 。 kubelet 在为 Pod 挂载存储的时候也正是通过 <code>Bind mounts</code> 的方式将 Pod 的 volumes 挂载到容器内。所以当我们使用 docker inspect 命令去查看 Pod 内容器的 <code>Mounts</code> 信息是，<code>Type</code> 类型多为 <code>bind</code> 或者 <code>tmpfs</code> ，很少会用到 <code>volumes</code> 。可以理解为 kubelet 的 volumes 目录就像 docker 的 volumes 那样，是由 kubelet 自己来管理的，其他用户或进程不应该去修改它。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">╭─root@k8s-node-3 ~</span><br><span class="line">╰─# docker inspect f1111ee6ac84</span><br><span class="line">"Mounts": [</span><br><span class="line">  &#123;</span><br><span class="line">      <span class="attr">"Type"</span>: <span class="string">"bind"</span>,</span><br><span class="line">      <span class="attr">"Source"</span>: <span class="string">"/var/lib/kubelet/pods/73fed6f3-4cbe-46a7-af7b-6fd912e6ebd4/volumes/kubernetes.io~nfs/nfs211"</span>,</span><br><span class="line">      <span class="attr">"Destination"</span>: <span class="string">"/var/www/html"</span>,</span><br><span class="line">      <span class="attr">"Mode"</span>: <span class="string">""</span>,</span><br><span class="line">      <span class="attr">"RW"</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">"Propagation"</span>: <span class="string">"rprivate"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">      <span class="attr">"Type"</span>: <span class="string">"bind"</span>,</span><br><span class="line">      <span class="attr">"Source"</span>: <span class="string">"/var/lib/kubelet/pods/73fed6f3-4cbe-46a7-af7b-6fd912e6ebd4/volumes/kubernetes.io~secret/default-token-wgfd9"</span>,</span><br><span class="line">      <span class="attr">"Destination"</span>: <span class="string">"/var/run/secrets/kubernetes.io/serviceaccount"</span>,</span><br><span class="line">      <span class="attr">"Mode"</span>: <span class="string">"ro,Z"</span>,</span><br><span class="line">      <span class="attr">"RW"</span>: <span class="literal">false</span>,</span><br><span class="line">      <span class="attr">"Propagation"</span>: <span class="string">"rprivate"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">      <span class="attr">"Type"</span>: <span class="string">"bind"</span>,</span><br><span class="line">      <span class="attr">"Source"</span>: <span class="string">"/var/lib/kubelet/pods/73fed6f3-4cbe-46a7-af7b-6fd912e6ebd4/etc-hosts"</span>,</span><br><span class="line">      <span class="attr">"Destination"</span>: <span class="string">"/etc/hosts"</span>,</span><br><span class="line">      <span class="attr">"Mode"</span>: <span class="string">"Z"</span>,</span><br><span class="line">      <span class="attr">"RW"</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">"Propagation"</span>: <span class="string">"rprivate"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">      <span class="attr">"Type"</span>: <span class="string">"bind"</span>,</span><br><span class="line">      <span class="attr">"Source"</span>: <span class="string">"/var/lib/kubelet/pods/73fed6f3-4cbe-46a7-af7b-6fd912e6ebd4/containers/nginx/f760f2be"</span>,</span><br><span class="line">      <span class="attr">"Destination"</span>: <span class="string">"/dev/termination-log"</span>,</span><br><span class="line">      <span class="attr">"Mode"</span>: <span class="string">"Z"</span>,</span><br><span class="line">      <span class="attr">"RW"</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">"Propagation"</span>: <span class="string">"rprivate"</span></span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>使用<code>Bind mounts</code>可能会有安全问题：容器中运行的进程可以修改宿主机的文件系统，包括创建，修改，删除重要的系统文件或目录。不过可以加参数挂载为只读。</p><blockquote><p><code>--mount</code>：由多个<code>&#39;,&#39;</code>隔开的键值对<key>=<value>组成：</p><ul><li>挂载类型：key为<code>type</code>，value为<code>bind</code>、<code>volume</code>或<code>tmpfs</code></li><li>挂载源：key为<code>source</code>或<code>src</code>，对于命名卷，value为卷名，对于匿名卷，则忽略</li><li>容器中的挂载点：key为<code>destination</code>、<code>dst</code>或<code>target</code>，value为容器中的路径</li><li>读写类型：value为<code>readonly</code>，没有key</li><li>读写类型：value为<code>readonly</code>，没有key</li><li>volume-opt选项，可以出现多次。比如<code>volume-driver=local,volume-opt=type=nfs,...</code></li></ul></blockquote><ul><li><p>tmps：</p><p>  用来存储一些不需要持久化的状态或敏感数据，比如 <code>kubernetes</code> 中的各种 <code>secret</code> 。比如当我们使用 <code>kubectl exec -it POD</code> ，进入到 Pod 容器内，然后使用 mount 命令查看容器内的挂载点信息就会有很多 tmpfs 类型的挂载点。其中的 <code>/run/secrets/kubernetes.io/serviceaccount/</code> 目录下就有着比较敏感的信息。</p>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">tmpfs on /run/secrets/kubernetes.io/serviceaccount type tmpfs (ro,relatime)</span><br><span class="line">/ # tree /run/secrets/kubernetes.io/serviceaccount/</span><br><span class="line">/run/secrets/kubernetes.io/serviceaccount/</span><br><span class="line">├── ca.crt -&gt; ..data/ca.crt</span><br><span class="line">├── namespace -&gt; ..data/namespace</span><br><span class="line">└── token -&gt; ..data/token</span><br></pre></td></tr></table></figure></li></ul><blockquote><ul><li><p><code>--tmpfs</code>：直接指定容器中的挂载点。不允许指定任何配置选项</p></li><li><p>–mount：由多个’,’隔开的键值对<key>=<value>组成：</p><p>  挂载类型：key为<code>type</code>，value为<code>bind</code>、<code>volume</code>或<code>tmpfs</code></p><p>  容器中的挂载点：key为<code>destination</code>、<code>dst</code>或<code>target</code>，value为容器中的路径</p><p>  <code>tmpfs-size</code>和<code>tmpfs-mode</code>选项</p></li></ul></blockquote><h3 id="kubelet-挂载存储"><a href="#kubelet-挂载存储" class="headerlink" title="kubelet 挂载存储"></a>kubelet 挂载存储</h3><p>当对容器存储的类型有了大致了解之后，我们再来看一下 Pod 是如何进行 volume 挂载的。</p><p>当 Pod 被调度到一个 Node 节点上后，Node 节点上的 kubelet 组件就会为这个 Pod 创建它的 Volume 目录，默认情况下 kubelet 为 Volume 创建的目录在 kubelet 的工作目录（默认在 <code>/var/lib/kubelet</code> ），在 kubelet 启动的时候可以根据 <code>–root-dir</code> 参数来指定工作目录，不过一般没啥特殊要求还是使用默认的就好😂。Pod 的 volume 目录就在该目录下，路径格式如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/var/lib/kubelet/pods/&lt;Pod的ID&gt;/volumes/kubernetes.io~&lt;Volume类型&gt;/&lt;Volume名字&gt;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 比如:</span></span><br><span class="line">/var/lib/kubelet/pods/c4b1998b-f5c1-440a-b9bc-7fbf87f3c267/volumes/kubernetes.io~nfs/nfs211</span><br></pre></td></tr></table></figure><p>在 Node 节点上可以使用 mount 命令来查看 kubelet 为 Pod 挂载的挂载点信息。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">10.10.107.216:/nfs on /var/lib/kubelet/pods/6750b756-d8e4-448a-93f9-8906f9c44788/volumes/kubernetes.io~nfs/nfs-test type nfs (rw,relatime,vers=3,rsize=1048576,wsize=1048576,namlen=255,hard,proto=tcp,timeo=600,retrans=2,sec=sys,mountaddr=10.10.107.216,mountvers=3,mountport=56389,mountproto=udp,local_lock=none,addr=10.10.107.216)</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">╭─root@k8s-node-3 ~</span><br><span class="line">╰─# mount | grep kubelet</span><br><span class="line">tmpfs on /var/lib/kubelet/pods/45c55c5e-ce96-47fd-94b3-60a334e5a44d/volumes/kubernetes.io~secret/kube-proxy-token-h4dfb type tmpfs (rw,relatime,seclabel)</span><br><span class="line">tmpfs on /var/lib/kubelet/pods/3fb63baa-27ec-4d76-8028-39a0a8f91749/volumes/kubernetes.io~secret/calico-node-token-4hks6 type tmpfs (rw,relatime,seclabel)</span><br><span class="line">tmpfs on /var/lib/kubelet/pods/05c75313-f932-4913-b09f-d7bccdfb6e62/volumes/kubernetes.io~secret/nginx-ingress-token-5569x type tmpfs (rw,relatime,seclabel)</span><br><span class="line">10.20.172.211:/nfs on /var/lib/kubelet/pods/c4b1998b-f5c1-440a-b9bc-7fbf87f3c267/volumes/kubernetes.io~nfs/nfs211 type nfs (rw,relatime,vers=3,rsize=524288,wsize=524288,namlen=255,hard,proto=tcp,timeo=600,retrans=2,sec=sys,mountaddr=10.20.172.211,mountvers=3,mountport=20048,mountproto=udp,local_lock=none,addr=10.20.172.211)</span><br><span class="line">tmpfs on /var/lib/kubelet/pods/73fed6f3-4cbe-46a7-af7b-6fd912e6ebd4/volumes/kubernetes.io~secret/default-token-wgfd9 type tmpfs (rw,relatime,seclabel)</span><br></pre></td></tr></table></figure><p>其中 kubernetes 目前支持的 Volume 的类型，可以使用 <code>kubectl explain pod.spec.volumes</code>  来查看。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">╭─root@k8s-master-01 ~</span><br><span class="line">╰─# kubectl explain pod.spec.volumes | grep Object | cut -d "&lt;" -f1</span><br><span class="line">RESOURCE: volumes</span><br><span class="line">awsElasticBlockStore</span><br><span class="line">azureDisk</span><br><span class="line">azureFile</span><br><span class="line">cephfs</span><br><span class="line">cinder</span><br><span class="line">configMap</span><br><span class="line">csi</span><br><span class="line">downwardAPI</span><br><span class="line">emptyDir</span><br><span class="line">fc</span><br><span class="line">flexVolume</span><br><span class="line">flocker</span><br><span class="line">gcePersistentDisk</span><br><span class="line">gitRepo</span><br><span class="line">glusterfs</span><br><span class="line">hostPath</span><br><span class="line">iscsi</span><br><span class="line">nfs</span><br><span class="line">persistentVolumeClaim</span><br><span class="line">photonPersistentDisk</span><br><span class="line">portworxVolume</span><br><span class="line">projected</span><br><span class="line">quobyte</span><br><span class="line">rbd</span><br><span class="line">scaleIO</span><br><span class="line">secret</span><br><span class="line">storageos</span><br><span class="line">vsphereVolume</span><br></pre></td></tr></table></figure><h3 id="管-systemd-什么事儿？"><a href="#管-systemd-什么事儿？" class="headerlink" title="管 systemd 什么事儿？"></a>管 systemd 什么事儿？</h3><p>我们来回顾一下当初的错误日志：</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Events:</span><br><span class="line">  Type     Reason       Age    From            Message</span><br><span class="line">  ----  ------  ---- ----     -------</span><br><span class="line">  Warning  FailedMount  <span class="number">8</span>m49s  kubelet, node1  MountVolume<span class="variable">.SetUp</span> failed <span class="keyword">for</span> volume <span class="string">"nfs211"</span> : mount failed: exit status <span class="number">32</span></span><br><span class="line">Mounting command: systemd-run</span><br><span class="line">Mounting arguments: --description=Kubernetes transient mount <span class="keyword">for</span> /<span class="keyword">var</span>/lib/kubelet/pods/cddc94e7-<span class="number">8033</span>-<span class="number">4150</span>-bed5-d141e3b71e49/volumes/kubernetes<span class="variable">.io</span>~nfs/nfs211 --scope -- mount -t nfs <span class="number">10</span><span class="variable">.20</span><span class="variable">.172</span><span class="variable">.211</span>:/nfs /<span class="keyword">var</span>/lib/kubelet/pods/cddc94e7-<span class="number">8033</span>-<span class="number">4150</span>-bed5-d141e3b71e49/volumes/kubernetes<span class="variable">.io</span>~nfs/nfs211</span><br><span class="line">Output: Running scope as unit run-<span class="number">38284</span><span class="variable">.scope</span>.</span><br><span class="line">mount: wrong fs <span class="keyword">type</span>, bad option, bad superblock on <span class="number">10</span><span class="variable">.20</span><span class="variable">.172</span><span class="variable">.211</span>:/nfs,</span><br><span class="line">       missing codepage <span class="keyword">or</span> helper <span class="keyword">program</span>, <span class="keyword">or</span> other error</span><br><span class="line">       (<span class="keyword">for</span> several filesystems (e<span class="variable">.g</span>. nfs, cifs) you might</span><br><span class="line">       need a /sbin/mount.&lt;<span class="keyword">type</span>&gt; helper <span class="keyword">program</span>)</span><br><span class="line"></span><br><span class="line">       In some cases useful info is found in syslog - try</span><br><span class="line">       dmesg | tail <span class="keyword">or</span> so.</span><br><span class="line">  Warning  FailedMount  <span class="number">8</span>m48s  kubelet, node1  MountVolume<span class="variable">.SetUp</span> failed <span class="keyword">for</span> volume <span class="string">"nfs211"</span> : mount failed: exit status <span class="number">32</span></span><br></pre></td></tr></table></figure><p>咦？当时我还寻思着 kubelet 挂载 volumes 和 systemd 什么关系？<code>systemd</code> 这个大妈怎么又来管这事儿了😂（之前我写过一篇<a href="https://blog.k8s.li/systemd.html">《Linux 的小伙伴 systemd 详解》</a> ，戏称 systemd 是 Linux 的小伙伴，看来这个说法是不妥的。systemd 简直就是 Linux 里的物业大妈好嘛🤣，上管 service 下管 dev 、 mount 设备等。屑，简直就是个物业大妈管这管那的。回到正题，于是顺着这条报错日志顺藤摸瓜找到了 <a href="https://github.com/kubernetes/kubernetes/pull/49640" target="_blank" rel="noopener">Run mount in its own systemd scope.</a> 这个 PR。</p><blockquote><p>Kubelet needs to run /bin/mount in its own cgroup.</p><ul><li>When kubelet runs as a systemd service, “systemctl restart kubelet” may kill all processes in the same cgroup and thus terminate fuse daemons that are needed for gluster and cephfs mounts.</li><li>When kubelet runs in a docker container, restart of the container kills all fuse daemons started in the container.</li></ul><p>Killing fuse daemons is bad, it basically unmounts volumes from running pods.</p><p>This patch runs mount via “systemd-run –scope /bin/mount …”, which makes sure that any fuse daemons are forked in its own systemd scope (= cgroup) and they will survive restart of kubelet’s systemd service or docker container.</p><p>This helps with <a href="https://github.com/kubernetes/kubernetes/issues/34965" target="_blank" rel="noopener">#34965</a></p><p>As a downside, each new fuse daemon will run in its own transient systemd service and systemctl output may be cluttered.</p></blockquote><p>正如提这个 PR 的大佬讲的，（之前）kubelet 需要在它自己的 <code>cgroup</code> 里运行宿主机上的 <code>/bin/mount</code> 来为 Pod 挂载 volumes ，而当 kubelet 进程重启或者挂掉的时候，这些在 kubelet 的  <code>cgroup</code> 里运行的进程也将会挂掉，比如（gluster，ceph）。然后大佬的这个 patch 通过 <code>systemd-run --scope /bin/mount</code> 来去启动一个临时的 systemd 单元来为 Pod 挂载 volumes，这样一来这些 <code>fuse daemons</code>  进程（gluster，ceph）就会 forked 到它自己的 systemd scope 里，这样即便 kubelet 重启或者挂掉也不会影响正在运行的容器使用 volumes。</p><p>这一点像 <a href="https://github.com/containerd/containerd" target="_blank" rel="noopener">containerd</a> 之于 dockerd ，即便 dockerd 重启也不会影响到容器的运行，因为，在运行时这一块，真正运行容器的是 containerd 下的各个 containerd-shim 子进程，可以使用 pstree 命令来看一下这种层级关系。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">├─containerd─┬─5*[containerd-shim─┬─pause]</span><br><span class="line">│            │                    └─9*[&#123;containerd-shim&#125;]]</span><br><span class="line">│            ├─containerd-shim─┬─pause</span><br><span class="line">│            │                 └─10*[&#123;containerd-shim&#125;]</span><br><span class="line">│            ├─containerd-shim─┬─etcd───15*[&#123;etcd&#125;]</span><br><span class="line">│            │                 └─9*[&#123;containerd-shim&#125;]</span><br><span class="line">│            ├─containerd-shim─┬─kube-controller───12*[&#123;kube-controller&#125;]</span><br><span class="line">│            │                 └─9*[&#123;containerd-shim&#125;]</span><br><span class="line">│            ├─containerd-shim─┬─kube-apiserver───14*[&#123;kube-apiserver&#125;]</span><br><span class="line">│            │                 └─9*[&#123;containerd-shim&#125;]</span><br><span class="line">│            ├─containerd-shim─┬─kube-scheduler───13*[&#123;kube-scheduler&#125;]</span><br><span class="line">│            │                 └─9*[&#123;containerd-shim&#125;]</span><br><span class="line">│            ├─containerd-shim─┬─kube-proxy───11*[&#123;kube-proxy&#125;]</span><br><span class="line">│            │                 └─9*[&#123;containerd-shim&#125;]</span><br><span class="line">│            ├─containerd-shim─┬─flanneld───15*[&#123;flanneld&#125;]</span><br><span class="line">│            │                 └─9*[&#123;containerd-shim&#125;]</span><br><span class="line">│            └─26*[&#123;containerd&#125;]</span><br></pre></td></tr></table></figure><p>接着顺藤摸瓜翻到这个 PR 对应的源码文件  <a href="https://github.com/kubernetes/kubernetes/blob/master/vendor/k8s.io/utils/mount/mount_linux.go#L115" target="_blank" rel="noopener">mount_linux.go</a>，关键内容如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// doMount runs the mount command. mounterPath is the path to mounter binary if containerized mounter is used.</span></span><br><span class="line"><span class="comment">// sensitiveOptions is an extention of options except they will not be logged (because they may contain sensitive material)</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(mounter *Mounter)</span> <span class="title">doMount</span><span class="params">(mounterPath <span class="keyword">string</span>, mountCmd <span class="keyword">string</span>, source <span class="keyword">string</span>, target <span class="keyword">string</span>, fstype <span class="keyword">string</span>, options []<span class="keyword">string</span>, sensitiveOptions []<span class="keyword">string</span>)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">mountArgs, mountArgsLogStr := MakeMountArgsSensitive(source, target, fstype, options, sensitiveOptions)</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(mounterPath) &gt; <span class="number">0</span> &#123;</span><br><span class="line">mountArgs = <span class="built_in">append</span>([]<span class="keyword">string</span>&#123;mountCmd&#125;, mountArgs...)</span><br><span class="line">mountArgsLogStr = mountCmd + <span class="string">" "</span> + mountArgsLogStr</span><br><span class="line">mountCmd = mounterPath</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> mounter.withSystemd &#123;</span><br><span class="line"><span class="comment">// Try to run mount via systemd-run --scope. This will escape the</span></span><br><span class="line"><span class="comment">// service where kubelet runs and any fuse daemons will be started in a</span></span><br><span class="line"><span class="comment">// specific scope. kubelet service than can be restarted without killing</span></span><br><span class="line"><span class="comment">// these fuse daemons.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Complete command line (when mounterPath is not used):</span></span><br><span class="line"><span class="comment">// systemd-run --description=... --scope -- mount -t &lt;type&gt; &lt;what&gt; &lt;where&gt;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Expected flow:</span></span><br><span class="line"><span class="comment">// * systemd-run creates a transient scope (=~ cgroup) and executes its</span></span><br><span class="line"><span class="comment">//   argument (/bin/mount) there.</span></span><br><span class="line"><span class="comment">// * mount does its job, forks a fuse daemon if necessary and finishes.</span></span><br><span class="line"><span class="comment">//   (systemd-run --scope finishes at this point, returning mount's exit</span></span><br><span class="line"><span class="comment">//   code and stdout/stderr - thats one of --scope benefits).</span></span><br><span class="line"><span class="comment">// * systemd keeps the fuse daemon running in the scope (i.e. in its own</span></span><br><span class="line"><span class="comment">//   cgroup) until the fuse daemon dies (another --scope benefit).</span></span><br><span class="line"><span class="comment">//   Kubelet service can be restarted and the fuse daemon survives.</span></span><br><span class="line"><span class="comment">// * When the fuse daemon dies (e.g. during unmount) systemd removes the</span></span><br><span class="line"><span class="comment">//   scope automatically.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// systemd-mount is not used because it's too new for older distros</span></span><br><span class="line"><span class="comment">// (CentOS 7, Debian Jessie).</span></span><br><span class="line">mountCmd, mountArgs, mountArgsLogStr = AddSystemdScopeSensitive(<span class="string">"systemd-run"</span>, target, mountCmd, mountArgs, mountArgsLogStr)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// No systemd-run on the host (or we failed to check it), assume kubelet</span></span><br><span class="line"><span class="comment">// does not run as a systemd service.</span></span><br><span class="line"><span class="comment">// No code here, mountCmd and mountArgs are already populated.</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Logging with sensitive mount options removed.</span></span><br><span class="line">klog.V(<span class="number">4</span>).Infof(<span class="string">"Mounting cmd (%s) with arguments (%s)"</span>, mountCmd, mountArgsLogStr)</span><br><span class="line">command := exec.Command(mountCmd, mountArgs...)</span><br><span class="line">output, err := command.CombinedOutput()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">klog.Errorf(<span class="string">"Mount failed: %v\nMounting command: %s\nMounting arguments: %s\nOutput: %s\n"</span>, err, mountCmd, mountArgsLogStr, <span class="keyword">string</span>(output))</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">"mount failed: %v\nMounting command: %s\nMounting arguments: %s\nOutput: %s"</span>,</span><br><span class="line">err, mountCmd, mountArgsLogStr, <span class="keyword">string</span>(output))</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>来看一下 <code>doMount</code> 这个函数的几个形参：</p><ul><li>mounterPath ：</li></ul><p>就是我们宿主机上的挂载命令比如 <code>/sbin/mount.nfs</code> 、<code>/sbin/mount.glusterfs</code> 等。</p><ul><li><p>mountCmd：挂载命令就是 <code>systemd-run</code></p></li><li><p>source：挂载存储的源路径，比如 NFS 里的 <code>10.10.107.211:/nfs</code></p></li><li><p>target</p></li></ul><p>就是我们的 Pod 的 volume ，在 <code>/var/lib/kubelet/pods/&lt;Pod的ID&gt;/volumes/kubernetes.io~&lt;Volume类型&gt;/&lt;Volume名字&gt;</code> ，着目录在容器启动的时候会 bind mount 到容器内的挂载点</p><ul><li><p>fstype：文件系统类型，NFS、ceph、GlusterFS</p></li><li><p>options []string：挂载的参数，比如 NFS 的</p></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(rw,relatime,vers=3,rsize=524288,wsize=524288,namlen=255,hard,proto=tcp,timeo=600,retrans=2,sec=sys,mountaddr=10.20.172.211,mountvers=3,mountport=20048,mountproto=udp,local_lock=none,addr=10.20.172.211)</span><br></pre></td></tr></table></figure><ul><li>sensitiveOptions []string，这个参数没去仔细看，就略过吧（</li></ul><p>至此 kubelet 为 Pod 挂载的原理和流程也一目了然，其实很简单的逻辑，大致可以氛围</p><ul><li>Attach 阶段：kubelet 使用 systemd-run 单独起一个临时的 systemd scope 来运行后端存储的客户端比如（ nfs 、gluster、ceph），将这些存储挂载到 <code>/var/lib/kubelet/pods/&lt;Pod的ID&gt;/volumes/kubernetes.io~&lt;Volume类型&gt;/&lt;Volume名字&gt;</code></li><li>Mount 阶段：容器启动的时候通过 bind mount 的方式将  <code>/var/lib/kubelet/pods/&lt;Pod的ID&gt;/volumes/kubernetes.io~&lt;Volume类型&gt;/&lt;Volume名字&gt;</code> 这个目录挂载到容器内。这一步相当于使用<code>docker run -v /var/lib/kubelet/pods/&lt;Pod的ID&gt;/volumes/kubernetes.io~&lt;Volume类型&gt;/&lt;Volume名字&gt;:/&lt;容器内的目标目录&gt; 我的镜像</code> 启动一个容器。</li></ul><p>关于更详细的 CSI 存储可以参考下面提到的文章</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>虽然是一篇很简单的分析，在这个过程中参考了很多的博客，没有这些大佬的分享就没有这篇文章：），这些大佬们的博客文章比我写的<code>不知道高到哪里去了</code>，所以如果你看了这篇文章还是没懂的话，不妨也看一下下面的这些文章就能豁然开朗了😂。</p><h3 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h3><ul><li><p><a href="https://github.com/kubernetes/kubernetes/blob/master/vendor/k8s.io/utils/mount/mount_linux.go#L115" target="_blank" rel="noopener">kubernetes/mount_linux.go at master · kubernetes/kubernetes</a></p></li><li><p><a href="https://github.com/kubernetes/kubernetes/pull/49640" target="_blank" rel="noopener">Run mount in its own systemd scope. by jsafrane · Pull Request #49640 · kubernetes/kubernetes</a></p></li></ul><h3 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h3><ul><li><p><a href="https://www.huweihuang.com/article/source-analysis/kubelet/create-pod-by-kubelet/#66-mount-volumes" target="_blank" rel="noopener">kubelet源码分析（四）之 Pod的创建 - 胡伟煌 | Blog</a></p></li><li><p><a href="http://ljchen.net/2018/10/28/kubelet%E6%BA%90%E7%A0%81%E6%9E%B6%E6%9E%84%E7%AE%80%E4%BB%8B/" target="_blank" rel="noopener">Kubelet源码架构简介 | ljchen’s Notes</a></p></li><li><p><a href="http://newgoo.org/2019/09/03/k8s/kubelet-%E6%BA%90%E7%A0%81/" target="_blank" rel="noopener">kubelet 源码分析 - Beantech | Newgoo | kubernates</a></p></li><li><p><a href="http://blog.xbblfz.site/2018/10/12/Kubelet%E5%90%AF%E5%8A%A8%E5%8F%8A%E5%AF%B9Docker%E5%AE%B9%E5%99%A8%E7%AE%A1%E7%90%86%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/" target="_blank" rel="noopener">“Kubelet启动源码分析” - 徐波的博客 | Xu Blog</a></p></li><li><p><a href="https://cizixs.com/2017/06/06/kubelet-source-code-analysis-part-1/" target="_blank" rel="noopener">kubelet 源码分析：启动流程 | Cizixs Write Here</a></p></li><li><p><a href="https://fankangbest.github.io/2017/12/17/kubelet%E5%88%86%E6%9E%90(%E4%B8%89)-volumeManager-v1-5-2/" target="_blank" rel="noopener">kubelet分析(三)-volumeManager-v1.5.2 | fankangbest</a></p></li><li><p><a href="https://wenfeng-gao.github.io/post/k8s-volume-manager-source-code-analysis/" target="_blank" rel="noopener">Kubernetes源码分析之VolumeManager - Je pense donc je suis</a></p></li><li><p><a href="https://www.huweihuang.com/kubernetes-notes/code-analysis/kubelet/startKubelet.html" target="_blank" rel="noopener">startKubelet · Kubernetes 学习笔记</a></p></li></ul><h3 id="官方文档"><a href="#官方文档" class="headerlink" title="官方文档"></a>官方文档</h3><ul><li><p><a href="https://docs.docker.com/storage/" target="_blank" rel="noopener">Manage data in Docker | Docker Documentation</a></p></li><li><p><a href="https://docs.docker.com/storage/bind-mounts/" target="_blank" rel="noopener">Use bind mounts | Docker Documentation</a></p></li><li><p><a href="https://docs.docker.com/storage/bind-mounts/" target="_blank" rel="noopener">Use bind mounts | Docker Documentation</a></p></li><li><p><a href="http://www.jinbuguo.com/man/mount.html" target="_blank" rel="noopener">mount 中文手册</a></p></li><li><p><a href="https://docs.docker.com/storage/storagedriver/overlayfs-driver/" target="_blank" rel="noopener">Use the OverlayFS storage driver</a></p></li></ul><h3 id="相关博客"><a href="#相关博客" class="headerlink" title="相关博客"></a>相关博客</h3><ul><li><p><a href="https://cizixs.com/2016/10/25/kubernetes-intro-kubelet/" target="_blank" rel="noopener">kubernetes 简介： kubelet 和 pod | Cizixs Write Here</a></p></li><li><p><a href="https://michaelyou.github.io/2017/09/17/Docker%E6%95%B0%E6%8D%AE%E7%AE%A1%E7%90%86-Volume%EF%BC%8C-bind-mount%E5%92%8Ctmpfs-mount/" target="_blank" rel="noopener">Docker数据管理-Volume， bind mount和tmpfs mount | Youmai の Blog</a></p></li><li><p><a href="https://www.qikqiak.com/k8strain/storage/csi/" target="_blank" rel="noopener">存储原理 - K8S训练营</a></p></li><li><p><a href="https://blog.fatedier.com/2020/04/17/pod-loopcrash-of-k8s-subpath/" target="_blank" rel="noopener">Kubernetes 挂载 subpath 的容器在 configmap 变更后重启时挂载失败</a></p></li><li><p><a href="https://www.infvie.com/ops-notes/kubernetes-storage.html" target="_blank" rel="noopener">理解kubernetes中的Storage | Infvie’s Blog</a></p></li><li><p><a href="https://arkingc.github.io/2018/12/11/2018-12-11-docker-storage-persist/" target="_blank" rel="noopener">Docker容器数据持久化</a></p></li><li><p><a href="https://arkingc.github.io/2018/01/19/2018-01-19-docker-imagestore/" target="_blank" rel="noopener">Docker源码分析—镜像存储</a></p></li><li><p><a href="https://arkingc.github.io/2018/01/15/2018-01-15-docker-storage-overlay2/" target="_blank" rel="noopener">Docker源码分析—存储驱动</a></p></li><li><p><a href="https://arkingc.github.io/2017/05/05/2017-05-05-docker-filesystem-overlay/" target="_blank" rel="noopener">Docker存储驱动—Overlay/Overlay2「译」</a></p></li><li><p><a href="https://blog.k8s.li/systemd.html">Linux 的小伙伴 systemd 详解</a></p></li></ul><h2 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h2><p>最后祝各位还在<code>搬砖</code>的工人们节日快乐！</p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;最近在 kubernetes 中使用 NFS
        
      
    
    </summary>
    
    
      <category term="技术" scheme="https://blog.k8s.li/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="kubernetes" scheme="https://blog.k8s.li/tags/kubernetes/"/>
    
      <category term="docker" scheme="https://blog.k8s.li/tags/docker/"/>
    
      <category term="容器" scheme="https://blog.k8s.li/tags/%E5%AE%B9%E5%99%A8/"/>
    
      <category term="存储" scheme="https://blog.k8s.li/tags/%E5%AD%98%E5%82%A8/"/>
    
      <category term="volumes" scheme="https://blog.k8s.li/tags/volumes/"/>
    
  </entry>
  
  <entry>
    <title>一次有趣的面试：WordPress 部署</title>
    <link href="https://blog.k8s.li/interview-wordpress-install.html"/>
    <id>https://blog.k8s.li/interview-wordpress-install.html</id>
    <published>2020-04-15T16:00:00.000Z</published>
    <updated>2020-04-27T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>今天收到一份面试题，内容看似很简单：</p><blockquote><ol><li><p>CentOS7，nginx 最新版，php 7.x，mysql 不做要求 + wordpress</p></li><li><p>以文件的方式创建并挂载2G的swap分区</p><p>请把学习记录以 URL，截图等方式保留。最终。我在手机上可以看到wordpress站点就好。时间1小时以内，方法方式不限</p></li></ol></blockquote><p>虽然看起来和简单，比如用 <code>docker-compose</code> 一键就能完成部署完成，不过为了把部署过程中遇到的一些问题详细地记录下来，以及参考的一些文档等，通过一篇正式的博客展现出来，这样效果会好一些。同时咱作为完美主义者，希望给再做一些额外的优化，比如 HTTPS ，以及不久前和咱给博客加的 Webp Server 😂。<a href="https://blog.k8s.li/oh-my-webpsh.html">让图片飞起来 oh-my-webp.sh ！</a> 咱来推销 <a href="https://github.com/webp-sh/webp_server_go" target="_blank" rel="noopener">Webp Server Go</a> 啦 （小声。</p><p>另外提一点的是，如果你深入理解 LNMP 技术栈的话，还是推荐使用传统的方式比如 yum 安装或源码编译安装，那样会能理解这些服务之间的工作流程，会对整个系统有深入的了解。而 <code>docker-compose</code> 简单粗暴的方式为我们屏蔽了这些细节，会让我们放弃去思考这些底层的细节，对于我们学习这门技术栈来讲，还是弊大于利。不过今天为了快速部署起来，还是选用 docker-compose 吧😂</p><h2 id="WordPress"><a href="#WordPress" class="headerlink" title="WordPress"></a>WordPress</h2><blockquote><p>Get WordPress Use the software that powers over 35% of the web.</p></blockquote><p>WordPress 想必大家都很熟悉啦，毕竟收是全球内容管理系统里的老大哥，常年占据在第一的位置（占有率 35%）。官网 <a href="https://wordpress.org" target="_blank" rel="noopener">wordpress.org</a></p><h2 id="任务2-以文件的方式创建并挂载2G的swap分区"><a href="#任务2-以文件的方式创建并挂载2G的swap分区" class="headerlink" title="任务2 以文件的方式创建并挂载2G的swap分区"></a>任务2 以文件的方式创建并挂载2G的swap分区</h2><p>这个任务与 WordPress 不太相关，所以就先完成这个。拿到机器后 ssh 登录到系统，先使用常用的命令看一下服务器的信息，另外在自己的域名上添加了 A  记录<code>wordpress.k8s.li</code> 到这台服务器  IP ，并开启 HTTPS ，防止被 DDOS 攻击，毕竟有 CloudFlare 的 Anycast CDN 给我们在前头扛一把😂还是不错滴。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">[root@interview ~]# uname -a</span><br><span class="line">Linux interview 3.10.0-1062.12.1.el7.x86_64 #1 SMP Tue Feb 4 23:02:59 UTC 2020 x86_64 x86_64 x86_64 GNU/Linux</span><br><span class="line">[root@interview ~]# cat /proc/cpuinfo</span><br><span class="line">processor       : 0</span><br><span class="line">vendor_id       : GenuineIntel</span><br><span class="line">cpu family      : 6</span><br><span class="line">model           : 45</span><br><span class="line">model name      : Intel(R) Xeon(R) CPU E5-2670 0 @ 2.60GHz</span><br><span class="line">stepping        : 7</span><br><span class="line">microcode       : 0x710</span><br><span class="line">cpu MHz         : 2594.123</span><br><span class="line">cache size      : 20480 KB</span><br><span class="line">physical id     : 0</span><br><span class="line">siblings        : 1</span><br><span class="line">core id         : 0</span><br><span class="line">cpu cores       : 1</span><br><span class="line">apicid          : 0</span><br><span class="line">initial apicid  : 0</span><br><span class="line">fpu             : yes</span><br><span class="line">fpu_exception   : yes</span><br><span class="line">cpuid level     : 13</span><br><span class="line">wp              : yes</span><br><span class="line">flags           : fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat clflush mmx fxsr sse sse2 syscall nx rdtscp lm constant_tsc rep_good nopl eagerfpu pni pclmulqdq ssse3 cx16 sse4_1 sse4_2 x2apic popcnt tsc_deadline_timer aes hypervisor lahf_lm</span><br><span class="line">bogomips        : 5187.68</span><br><span class="line">clflush size    : 64</span><br><span class="line">cache_alignment : 64</span><br><span class="line">address sizes   : 46 bits physical, 48 bits virtual</span><br><span class="line">power management:</span><br><span class="line"></span><br><span class="line">[root@interview ~]# free -h</span><br><span class="line">              total        used        free      shared  buff/cache   available</span><br><span class="line">Mem:           985M        150M        451M         12M        382M        680M</span><br><span class="line">Swap:            0B          0B          0B</span><br></pre></td></tr></table></figure><ul><li><code>unanme -a</code> 查看一下系统的内核版本 ，<code>3.10.0-1062</code> 的内核看样子是 CentOS7.7</li><li><code>cat /proc/cpuinfo</code> 查看一下 CPU 的信息，E5-2670 的 CPU ，属于 Intel 第六代 CPU 系列。</li><li><code>free</code> 查看一下内存的情况，1GB 的小内存😂</li></ul><blockquote><p>Q2 以文件的方式创建并挂载2G的swap分区</p></blockquote><p>这个问题比较简单，之前自己的 GCE 小鸡 512M 内存上也是使用文件的方式创建 2GB 的交换分区😂。所以对这个步骤早就熟记于心，并不需要搜索就能搞定😋。使用 dd 命令即可生成一个 2GB 大小的文件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@interview ~]# dd if&#x3D;&#x2F;dev&#x2F;zero of&#x3D;&#x2F;swapfile bs&#x3D;4M count&#x3D;500</span><br><span class="line">500+0 records in</span><br><span class="line">500+0 records out</span><br><span class="line">2097152000 bytes (2.1 GB) copied, 11.0648 s, 190 MB&#x2F;s</span><br></pre></td></tr></table></figure><p><code>2097152000 bytes (2.1 GB) copied, 11.0648 s, 190 MB/s</code> 怎么会是 2.1 GB 呢？，多出来 0.1GB ，强迫症受不了。想起来了，可能是 <code>bs=4M</code> 参数的问题。于是我在我的 debian 机器上测试了一下</p><p>顺带 man 一下 dd 看看 bs 参数是怎么定义的</p><blockquote><p>  bs=BYTES read and write up to BYTES bytes at a time (default: 512); overrides ibs and obs</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">╭─debian@debian ~</span><br><span class="line">╰─$ dd if=/dev/zero of=./test bs=4MB count=4</span><br><span class="line">4+0 records in</span><br><span class="line">4+0 records out</span><br><span class="line">16000000 bytes (16 MB, 15 MiB) copied, 0.0147078 s, 1.1 GB/s</span><br></pre></td></tr></table></figure><p>原因是文件大小单位不同，一个是 <code>MB</code> 另一个是 <code>MiB</code> ，在 Google 上搜索了一下 。看到上的一个回答 <a href="https://www.quora.com/What-is-the-difference-between-1-MiB-and-1-MB-and-why-should-we-care" target="_blank" rel="noopener">What is the difference between 1 MiB and 1 MB and why should we care?</a> 。也想起了前两天看到 <a href="https://draveness.me/" target="_blank" rel="noopener">面向信仰编程</a> 大佬的一个推文：</p><blockquote class="twitter-tweet"><p lang="zh" dir="ltr">最近才发现 MB 和 MiB 是不一样的：<br><br>+ MiB 是 1024 的倍数<br>+ MB 是 1000 的倍数<br><br>Git 下载时的单位是 MiB，但是 macOS 里显示的确实 MB，部分服务会把两者用混，比如 DigitalOcean 里的 S3 服务，下载文件的时候我还以为只下载了一部分😂 <a href="https://twitter.com/hashtag/%E5%86%B7%E7%9F%A5%E8%AF%86?src=hash&amp;ref_src=twsrc%5Etfw" target="_blank" rel="noopener">#冷知识</a> <a href="https://t.co/U1IoRlgjXJ" target="_blank" rel="noopener">pic.twitter.com/U1IoRlgjXJ</a></p>&mdash; Draveness (@draven0xff) <a href="https://twitter.com/draven0xff/status/1249290829161590786?ref_src=twsrc%5Etfw" target="_blank" rel="noopener">April 12, 2020</a></blockquote> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script><p>接下来使用 <code>mkswap</code> 命令将刚刚创建好的 <code>/swapfile</code> 文件格式化为交换分区所需要的格式，并修改一下文件权限为 600 ，即只能由 root 用户读，不然默认的 755 会被其他用户看到，而里面的内容是内存里的信息，所以安全起见还是修改一下权限。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[root@interview ~]# mkswap /swapfile</span><br><span class="line">Setting up swapspace version 1, size = 2047996 KiB</span><br><span class="line">no label, UUID=a4eab465-75d1-4830-b870-c222c7e2e87b</span><br><span class="line">[root@interview ~]#</span><br><span class="line">[root@interview ~]# chmod 600 /swapfile</span><br><span class="line">[root@interview ~]# swapon !$</span><br><span class="line">swapon /swapfile</span><br><span class="line">[root@interview ~]# free -h</span><br><span class="line">              total        used        free      shared  buff/cache   available</span><br><span class="line">Mem:           985M        212M        140M         12M        633M        612M</span><br><span class="line">Swap:          2.0G          0B        2.0G</span><br></pre></td></tr></table></figure><p>至此任务二完成了，接下来就是题目的核心安装 WordPress 啦</p><h2 id="install"><a href="#install" class="headerlink" title="install"></a>install</h2><p>刚开始打算使用常规的方法来部署 WordPress 的，使用 Google 搜索关键字 <code>CentOS install WordPress</code> ，排名第二的是 <code>DigitalOcean</code> 官方博客里的 <a href="https://www.digitalocean.com/community/tutorials/how-to-install-wordpress-on-centos-7" target="_blank" rel="noopener">How To Install WordPress on CentOS 7</a>。官方博客里提到：</p><blockquote><p>Additionally, you’ll need to have a LAMP (Linux, Apache, MySQL, and PHP) stack installed on your CentOS 7 server. If you don’t have these components already installed or configured, you can use this guide to learn how to install LAMP on CentOS 7.</p></blockquote><p>虽然 WordPress 官方没有给出详细的搭建步骤，但可以参考 DigitalOcean 官方的内容，毕竟公有云服务提供商的技术专家写的博客更可靠一些。由于要求的是 nginx 最新版本，yum 安装的 nginx 版本可能会旧一些。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@interview wordpress]# yum list nginx</span><br><span class="line">Loaded plugins: fastestmirror, langpacks</span><br><span class="line">Loading mirror speeds from cached hostfile</span><br><span class="line"> * base: centos-distro.1gservers.com</span><br><span class="line"> * epel: d2lzkl7pfhq30w.cloudfront.net</span><br><span class="line"> * extras: mirror.dal.nexril.net</span><br><span class="line"> * updates: mirror.dal10.us.leaseweb.net</span><br><span class="line">Available Packages</span><br><span class="line">nginx.x86_64       1:1.16.1-1.el7            epel</span><br></pre></td></tr></table></figure><p><code>yum list nginx</code> 里的信息显示 nginx 版本为 1.16.1 并不是 <a href="https://nginx.org/en/download.html" target="_blank" rel="noopener">官网</a> 上的最新版 <code>1.17.10</code> ，源码编译的时间可能会有点长，因为前天看到一个推文说他使用 GCP 的小鸡编译 nginx 大概花了 3 个小时😂。而我面试规定的时间是要求 1 个小时内解决。我去，想要最新版 nginx ，而且最省时间的办法看来只用 docker 的方式安装 nginx 了 ，使用 nginx 官方的镜像 nginx:latest 即为 nginx 最新的版本。Google 搜索 <code>docker hub nginx</code> 来到 docker 官方的  nginx 镜像仓库 <a href="https://hub.docker.com/_/nginx" target="_blank" rel="noopener">nginx</a> 。我哭了，虽然是 1.17 版本，但是 1.17.9 版本而不是 1.17.10 ，就差了一点点啊！掀桌儿（。将就着用吧，虽然差了那么一点点。</p><blockquote class="twitter-tweet"><p lang="zh" dir="ltr">小折腾了一把：在闲置的手机上跑了个Ruby on Rails网站，它还带有HTTPS证书且公网可以访问。望着屏幕上滚动的Nginx日志感觉还挺不可思议的。<br><br>系统是Android上跑的Debian。<br><br>另外用这几年前的手机编译Nginx居然只花了大概3小时，比GCP最低档的VPS还快。 <a href="https://t.co/5PGy96al5D" target="_blank" rel="noopener">pic.twitter.com/5PGy96al5D</a></p>&mdash; 丁宇 | DING Yu (@felixding) <a href="https://twitter.com/felixding/status/1249675123218497536?ref_src=twsrc%5Etfw" target="_blank" rel="noopener">April 13, 2020</a></blockquote> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script><p>事实证明我推断错了，第二天我在我的另一台机器上编译 nginx 花了不到 1 分钟，被大佬坑惨了啊😂。在 GCE 小鸡上编译 nginx 根本不可能需要 3 小时吧，3 分钟才对的吧。当初看到后就感觉编译 nginx 需要 3个小时就有点问题，但并没有亲自去验证。唉，还是自己不够细致啊，<strong>一知半解真是很危险的事儿！</strong></p><h3 id="install-docker"><a href="#install-docker" class="headerlink" title="install docker"></a>install docker</h3><p>安装 docker 的方式再熟悉不过了，使用一个 curl 命令就能搞定 <code>curl -fsSL https://get.docker.com | bash -s docker</code> 如果在国内环境的话，后面加上  <code>--mirror Aliyun</code>  参数就能使用阿里云的镜像站，这样会更快一些。即 <code>curl -fsSL https://get.docker.com | bash -s docker --mirror Aliyun</code> 。</p><p>不过我还是从第一次接触的角度来安装 docker ，Google 搜索 <code>centos install docker</code> 点进入第一个搜索结果即为官网 <a href="https://docs.docker.com/engine/install/centos/" target="_blank" rel="noopener">Install Docker Engine on CentOS</a> ，为了节省时间就没有按照官网的步骤来，而是使用官方的一键脚本来安装。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@interview ~]# curl -fsSL https://get.docker.com -o get-docker.sh</span><br><span class="line">[root@interview ~]# ls</span><br><span class="line">get-docker.sh</span><br><span class="line">[root@interview ~]# chmod +x get-docker.sh</span><br><span class="line">[root@interview ~]# ./get-docker.sh</span><br></pre></td></tr></table></figure><p>安装完成之后使用 <code>docker info</code> 来查看一下 docker 信息。需要注意的是：目前最新版本的 docker 默认优先采用 <strong>overlay2</strong> 的存储驱动，对于已支持该驱动的 Linux 发行版，不需要任何进行任何额外的配置。另外需要注意的是<code>devicemapper</code> 存储驱动已经在 docker 18.09 版本中被废弃，docker 官方推荐使用 <code>overlay2</code> 替代<code>devicemapper</code>，在我司生产环境曾经因为 <code>devicemapper</code> 遇到过存储挂不起的坑😑。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">[root@interview</span> <span class="string">~]#</span> <span class="string">docker</span> <span class="string">info</span></span><br><span class="line"><span class="attr">Client:</span></span><br><span class="line"> <span class="attr">Debug Mode:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">Server:</span></span><br><span class="line"> <span class="attr">Containers:</span> <span class="number">0</span></span><br><span class="line">  <span class="attr">Running:</span> <span class="number">0</span></span><br><span class="line">  <span class="attr">Paused:</span> <span class="number">0</span></span><br><span class="line">  <span class="attr">Stopped:</span> <span class="number">0</span></span><br><span class="line"> <span class="attr">Images:</span> <span class="number">0</span></span><br><span class="line"> <span class="attr">Server Version:</span> <span class="number">19.03</span><span class="number">.8</span></span><br><span class="line"> <span class="attr">Storage Driver:</span> <span class="string">overlay2</span></span><br><span class="line">  <span class="attr">Backing Filesystem:</span> <span class="string">&lt;unknown&gt;</span></span><br><span class="line">  <span class="attr">Supports d_type:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">Native Overlay Diff:</span> <span class="literal">true</span></span><br><span class="line"> <span class="attr">Logging Driver:</span> <span class="string">json-file</span></span><br><span class="line"> <span class="attr">Cgroup Driver:</span> <span class="string">cgroupfs</span></span><br><span class="line"> <span class="attr">Plugins:</span></span><br><span class="line">  <span class="attr">Volume:</span> <span class="string">local</span></span><br><span class="line">  <span class="attr">Network:</span> <span class="string">bridge</span> <span class="string">host</span> <span class="string">ipvlan</span> <span class="string">macvlan</span> <span class="literal">null</span> <span class="string">overlay</span></span><br><span class="line">  <span class="attr">Log:</span> <span class="string">awslogs</span> <span class="string">fluentd</span> <span class="string">gcplogs</span> <span class="string">gelf</span> <span class="string">journald</span> <span class="string">json-file</span> <span class="string">local</span> <span class="string">logentries</span> <span class="string">splunk</span> <span class="string">syslog</span></span><br><span class="line"> <span class="attr">Swarm:</span> <span class="string">inactive</span></span><br><span class="line"> <span class="attr">Runtimes:</span> <span class="string">runc</span></span><br><span class="line"> <span class="attr">Default Runtime:</span> <span class="string">runc</span></span><br><span class="line"> <span class="attr">Init Binary:</span> <span class="string">docker-init</span></span><br><span class="line"> <span class="attr">containerd version:</span> <span class="string">7ad184331fa3e55e52b890ea95e65ba581ae3429</span></span><br><span class="line"> <span class="attr">runc version:</span> <span class="string">dc9208a3303feef5b3839f4323d9beb36df0a9dd</span></span><br><span class="line"> <span class="attr">init version:</span> <span class="string">fec3683</span></span><br><span class="line"> <span class="attr">Security Options:</span></span><br><span class="line">  <span class="string">seccomp</span></span><br><span class="line">   <span class="attr">Profile:</span> <span class="string">default</span></span><br><span class="line"> <span class="attr">Kernel Version:</span> <span class="number">3.10</span><span class="number">.0</span><span class="number">-1062.12</span><span class="number">.1</span><span class="string">.el7.x86_64</span></span><br><span class="line"> <span class="attr">Operating System:</span> <span class="string">CentOS</span> <span class="string">Linux</span> <span class="number">7</span> <span class="string">(Core)</span></span><br><span class="line"> <span class="attr">OSType:</span> <span class="string">linux</span></span><br><span class="line"> <span class="attr">Architecture:</span> <span class="string">x86_64</span></span><br><span class="line"> <span class="attr">CPUs:</span> <span class="number">1</span></span><br><span class="line"> <span class="attr">Total Memory:</span> <span class="number">985.</span><span class="string">3MiB</span></span><br><span class="line"> <span class="attr">Name:</span> <span class="string">interview</span></span><br><span class="line"> <span class="attr">ID:</span> <span class="string">YSZO:TT5U:GDLH:3FYT:LFGP:NLOS:L4YI:5LFU:3EAV:KHP2:F746:I5P3</span></span><br><span class="line"> <span class="attr">Docker Root Dir:</span> <span class="string">/var/lib/docker</span></span><br><span class="line"> <span class="attr">Debug Mode:</span> <span class="literal">false</span></span><br><span class="line"> <span class="attr">Registry:</span> <span class="string">https://index.docker.io/v1/</span></span><br><span class="line"> <span class="attr">Labels:</span></span><br><span class="line"> <span class="attr">Experimental:</span> <span class="literal">false</span></span><br><span class="line"> <span class="attr">Insecure Registries:</span></span><br><span class="line">  <span class="number">127.0</span><span class="number">.0</span><span class="number">.0</span><span class="string">/8</span></span><br><span class="line"> <span class="attr">Live Restore Enabled:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><h3 id="install-docker-compose"><a href="#install-docker-compose" class="headerlink" title="install docker-compose"></a>install docker-compose</h3><p>安装完 docker 之后，接下来安装 docker-compose ，使用 Google 搜索 <code>centos install docker-compose</code> 点进入第一个搜索结果即为官网的 <a href="https://docs.docker.com/compose/install/" target="_blank" rel="noopener">Install Docker Compose</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@interview ~] sudo curl -L "https://github.com/docker/compose/releases/download/1.25.4/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose</span><br><span class="line">[root@interview ~]# docker-compose version</span><br><span class="line">bash: /usr/local/bin/docker-compose: Permission denied</span><br><span class="line">[root@interview ~]# chmod +x /usr/local/bin/docker-compose</span><br><span class="line">[root@interview ~]# docker-compose version</span><br><span class="line">docker-compose version 1.25.4, build 8d51620a</span><br><span class="line">docker-py version: 4.1.0</span><br><span class="line">CPython version: 3.7.5</span><br><span class="line">OpenSSL version: OpenSSL 1.1.0l  10 Sep 2019</span><br></pre></td></tr></table></figure><p>遇到了 <code>Permission denied</code> 问题，原来是忘记加权限了 <code>chmod +x /usr/local/bin/docker-compose</code> 一下即可。</p><h3 id="WordPress-1"><a href="#WordPress-1" class="headerlink" title="WordPress"></a>WordPress</h3><p>官方 <a href="https://docs.docker.com/compose/wordpress/" target="_blank" rel="noopener">Quickstart: Compose and WordPress</a> 的 <code>docker-compose.yaml</code> 中的 web 服务器是使用的 apache 而不是 nginx ，因此要使用第三方的 docker-compose.yaml，前段时间在折腾 Webp Server Go 的时候遇到过这种需求。于是在 GitHub 上搜索 <code>wordpress nginx docker-compose</code> 找到了合适的 repo 即 <a href="https://github.com/mjstealey/wordpress-nginx-docker" target="_blank" rel="noopener">wordpress-nginx-docker</a> 。看一下 docker-compose.yaml 文件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">'3.6'</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">wordpress:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">wordpress:$&#123;WORDPRESS_VERSION:-php7.3-fpm&#125;</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">wordpress</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./config/php.conf.ini:/usr/local/etc/php/conf.d/conf.ini</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./wordpress:/var/www/html</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">WORDPRESS_DB_NAME=$&#123;WORDPRESS_DB_NAME:-wordpress&#125;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">WORDPRESS_TABLE_PREFIX=$&#123;WORDPRESS_TABLE_PREFIX:-wp_&#125;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">WORDPRESS_DB_HOST=$&#123;WORDPRESS_DB_HOST:-mysql&#125;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">WORDPRESS_DB_USER=$&#123;WORDPRESS_DB_USER:-root&#125;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">WORDPRESS_DB_PASSWORD=$&#123;WORDPRESS_DB_PASSWORD:-password&#125;</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">mysql</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">mysql:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">mariadb:$&#123;MARIADB_VERSION:-latest&#125;</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">mysql</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./mysql:/var/lib/mysql</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">MYSQL_ROOT_PASSWORD=$&#123;MYSQL_ROOT_PASSWORD:-password&#125;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">MYSQL_USER=$&#123;MYSQL_USER:-root&#125;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">MYSQL_PASSWORD=$&#123;MYSQL_PASSWORD:-password&#125;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">MYSQL_DATABASE=$&#123;MYSQL_DATABASE:-wordpress&#125;</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">nginx:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">nginx:$&#123;NGINX_VERSION:-latest&#125;</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">nginx</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">'80:80'</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">'443:443'</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">$&#123;NGINX_CONF_DIR:-./nginx&#125;:/etc/nginx/conf.d</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">$&#123;NGINX_LOG_DIR:-./logs/nginx&#125;:/var/log/nginx</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">$&#123;WORDPRESS_DATA_DIR:-./wordpress&#125;:/var/www/html</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">$&#123;SSL_CERTS_DIR:-./certs&#125;:/etc/letsencrypt</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">$&#123;SSL_CERTS_DATA_DIR:-./certs-data&#125;:/data/letsencrypt</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">wordpress</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">adminer:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">adminer</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">links:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">mysql</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">8080</span><span class="string">:8080</span></span><br></pre></td></tr></table></figure><p>共有 4 个容器： wordpress、mysql、nginx、adminer，默认不需要修改既可以部署起来。adminer 是个 web 端管理 MySQL 数据库的，可以删掉不需要。</p><p>由于默认的系统不带 git ，所以需要安装一下 git <code>yum install git</code>，然后把 repo clone 下来。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/mjstealey/wordpress-nginx-docker</span><br><span class="line">cd wordpress-nginx-docker</span><br><span class="line">docker-compose up</span><br></pre></td></tr></table></figure><p>这样使用 <code>docker-compose up</code> 命令就能启动一个 WordPress 站点了。通过访问域名 <a href="https://wordpress.k8s.li/" target="_blank" rel="noopener"> wordpress.k8s.li</a> 即可访问刚刚创建好的网站了。</p><h3 id="Webp-Server"><a href="#Webp-Server" class="headerlink" title="Webp Server"></a>Webp Server</h3><p>为了优化一下博客图片静态资源的加载速度，可以为 WordPress 加上一个 Webp Server 服务，将原图片压缩为 webp 格式。需要修改一下 nginx 的配置文件，添加内容如下：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">location</span><span class="regexp"> ^~</span> /wp-content/uploads/ &#123;</span><br><span class="line">    <span class="attribute">proxy_pass</span> http://webp-server:3333;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 docker-compose.yaml 文件中加入 webp server 的容器</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">'3.6'</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">wordpress:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">wordpress:$&#123;WORDPRESS_VERSION:-php7.3-fpm&#125;</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">wordpress</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./config/php.conf.ini:/usr/local/etc/php/conf.d/conf.ini</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./wordpress:/var/www/html</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">WORDPRESS_DB_NAME=$&#123;WORDPRESS_DB_NAME:-wordpress&#125;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">WORDPRESS_TABLE_PREFIX=$&#123;WORDPRESS_TABLE_PREFIX:-wp_&#125;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">WORDPRESS_DB_HOST=$&#123;WORDPRESS_DB_HOST:-mysql&#125;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">WORDPRESS_DB_USER=$&#123;WORDPRESS_DB_USER:-root&#125;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">WORDPRESS_DB_PASSWORD=$&#123;WORDPRESS_DB_PASSWORD:-password&#125;</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">mysql</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">mysql:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">mariadb:$&#123;MARIADB_VERSION:-latest&#125;</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">mysql</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./mysql:/var/lib/mysql</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">MYSQL_ROOT_PASSWORD=$&#123;MYSQL_ROOT_PASSWORD:-password&#125;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">MYSQL_USER=$&#123;MYSQL_USER:-root&#125;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">MYSQL_PASSWORD=$&#123;MYSQL_PASSWORD:-password&#125;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">MYSQL_DATABASE=$&#123;MYSQL_DATABASE:-wordpress&#125;</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">nginx:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">nginx:$&#123;NGINX_VERSION:-latest&#125;</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">nginx</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">'80:80'</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">'443:443'</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">$&#123;NGINX_CONF_DIR:-./nginx&#125;:/etc/nginx/conf.d</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">$&#123;NGINX_LOG_DIR:-./logs/nginx&#125;:/var/log/nginx</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">$&#123;WORDPRESS_DATA_DIR:-./wordpress&#125;:/var/www/html</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">$&#123;SSL_CERTS_DIR:-./certs&#125;:/etc/letsencrypt</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">$&#123;SSL_CERTS_DATA_DIR:-./certs-data&#125;:/data/letsencrypt</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">wordpress</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">webp-server:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">webpsh/webps:latest</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">webp-server</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./webp-server/config.json:/etc/config.json</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./wordpress:/var/www/html</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">3333</span><span class="string">:3333</span></span><br></pre></td></tr></table></figure><p>修改好 docker-compose.yaml 文件之后，我们还需要为  webp-server 准备一个 config.json 文件，存放在 <code>./webp-server/config.json</code>  下，内容如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"HOST"</span>: <span class="string">"0.0.0.0"</span>,</span><br><span class="line">  <span class="attr">"PORT"</span>: <span class="string">"3333"</span>,</span><br><span class="line">  <span class="attr">"QUALITY"</span>: <span class="string">"80"</span>,</span><br><span class="line">  <span class="attr">"IMG_PATH"</span>: <span class="string">"/var/www/html"</span>,</span><br><span class="line">  <span class="attr">"EXHAUST_PATH"</span>: <span class="string">""</span>,</span><br><span class="line">  <span class="attr">"ALLOWED_TYPES"</span>: [<span class="string">"jpg"</span>,<span class="string">"png"</span>,<span class="string">"jpeg"</span>,<span class="string">"bmp"</span>,<span class="string">"gif"</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来我们使用 <code>docker-compose restart</code> 命令重启一下容器，之后再 WordPress 端上传一张图片测试一下。上传完成之后，拿到图片的 url ，然后使用 wget 命令测试一下，显示 <code>Length: 102288 (100K)  [image/webp]</code> 就说明我们的 webp server 已经成功运行啦😂。完整的 repo 在我的 GitHub 上 <a href="https://github.com/muzi502/Wwordpress" target="_blank" rel="noopener">Wwordpress</a> ，欢迎来食用呀😋</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">╭─root@sg-02 /opt/wordpress-nginx-docker ‹master›</span><br><span class="line">╰─# wget  http://dl.amd64.xyz/wp-content/uploads/2020/04/74898710_p21.jpg</span><br><span class="line">--2020-04-17 01:06:29--  http://dl.amd64.xyz/wp-content/uploads/2020/04/74898710_p21.jpg</span><br><span class="line">Resolving dl.amd64.xyz (dl.amd64.xyz)... 3.1.38.108</span><br><span class="line">Connecting to dl.amd64.xyz (dl.amd64.xyz)|3.1.38.108|:80... connected.</span><br><span class="line">HTTP request sent, awaiting response... 200 OK</span><br><span class="line">Length: 102288 (100K) [image/webp]</span><br><span class="line">Saving to: ‘74898710_p21.jpg’</span><br><span class="line"></span><br><span class="line">74898710_p21.jpg             100%[=======&gt;]  99.89K  --.-KB/s    in 0.001s</span><br><span class="line"></span><br><span class="line">2020-04-17 01:06:29 (130 MB/s) - ‘74898710_p21.jpg’ saved [102288/102288]</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><p><a href="https://wordpress.org/" target="_blank" rel="noopener">wordpress.org</a></p></li><li><p><a href="https://hub.docker.com/_/wordpress/" target="_blank" rel="noopener">dockerhub WordPress</a></p></li><li><p><a href="https://www.nginx.com/" target="_blank" rel="noopener">nginx.com</a></p></li><li><p><a href="https://github.com/mjstealey/wordpress-nginx-docker" target="_blank" rel="noopener">wordpress-nginx-docker</a></p></li><li><p><a href="https://github.com/muzi502/Wwordpress" target="_blank" rel="noopener">Wwordpress</a></p></li><li><p><a href="https://www.digitalocean.com/community/tutorials/how-to-install-wordpress-on-centos-7" target="_blank" rel="noopener">How To Install WordPress on CentOS 7</a></p></li><li><p><a href="https://www.digitalocean.com/community/tutorials/how-to-install-linux-apache-mysql-php-lamp-stack-on-centos-7" target="_blank" rel="noopener">How To Install Linux, Apache, MySQL, PHP (LAMP) stack On CentOS 7</a></p></li><li><p><a href="https://docs.docker.com/compose/wordpress/" target="_blank" rel="noopener">Quickstart: Compose and WordPress</a></p></li><li><p><a href="https://www.digitalocean.com/community/tutorials/how-to-install-wordpress-with-docker-compose" target="_blank" rel="noopener">How To Install WordPress With Docker Compose</a></p></li><li><p><a href="https://docs.docker.com/engine/install/centos/" target="_blank" rel="noopener">Install Docker Engine on CentOS</a></p></li><li><p><a href="https://docs.docker.com/compose/install/" target="_blank" rel="noopener">Install Docker Compose</a></p></li><li><p><a href="https://www.howtoforge.com/tutorial/how-to-build-nginx-from-source-on-ubuntu-1804-lts/" target="_blank" rel="noopener">How to Build NGINX from source on Ubuntu 18.04 LTS</a></p></li><li><p><a href="https://blog.k8s.li/oh-my-webpsh.html">让图片飞起来 oh-my-webp.sh ！</a></p></li></ul><h2 id="end"><a href="#end" class="headerlink" title="end"></a>end</h2><p>至此部署一个 WordPress 的流程就结束啦，为了追求速度就放弃了对一些细节的深究，得不偿失啊。</p><p>有些内容看似简单，但想把这个过程中遇到的问题以及想法落笔成字，形成一篇博客，还是需要语言组织能力，看来自己这方面还是有些欠缺。</p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;今天收到一份面试题，内容看似很简单：&lt;/p&gt;
&lt;block
        
      
    
    </summary>
    
    
      <category term="技术" scheme="https://blog.k8s.li/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="nginx" scheme="https://blog.k8s.li/tags/nginx/"/>
    
      <category term="WordPress" scheme="https://blog.k8s.li/tags/WordPress/"/>
    
      <category term="MySQL" scheme="https://blog.k8s.li/tags/MySQL/"/>
    
      <category term="PHP" scheme="https://blog.k8s.li/tags/PHP/"/>
    
      <category term="Webp" scheme="https://blog.k8s.li/tags/Webp/"/>
    
  </entry>
  
  <entry>
    <title>使用 kubeadm 快速部署体验 K8s</title>
    <link href="https://blog.k8s.li/kubeadm-deploy-k8s-v1.17.4.html"/>
    <id>https://blog.k8s.li/kubeadm-deploy-k8s-v1.17.4.html</id>
    <published>2020-04-14T16:00:00.000Z</published>
    <updated>2020-04-14T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="炒冷饭"><a href="#炒冷饭" class="headerlink" title="炒冷饭"></a>炒冷饭</h2><p>大概是从去年 5 月开始才接触  kubernetes ，时至今日已经快一年，当初写的一篇博客 <a href="https://blog.k8s.li/install-k8s-ubuntu18-04.html">ubuntu 1804 使用 kubeadm 部署 kubernetes</a> 翻出来重新修改一下，记录一下使用 kubeadm 部署 kubernetes v1.17.4 版的流程。适用于国内网络环境下。</p><h3 id="kubeadm"><a href="#kubeadm" class="headerlink" title="kubeadm"></a>kubeadm</h3><p>Kubernetes 从 1.4 版本开始后就引入了 kubeadm 用于简化集群搭建的过程，在 Kubernetes 1.13 版本中，kubeadm 工具进入 GA 阶段，而当前的 kubernetes 最新版 stable 为 1.18.1 ，kubeadm 已经经历过多个版本的迭代，可用于生产环境 Kubernetes 集群搭建。对于刚刚接触 kubernetes  的初学者来讲，kubeadm 也是一个快速部署体验 kubernetes 的不二之选。</p><h2 id="kubernetes-架构"><a href="#kubernetes-架构" class="headerlink" title="kubernetes 架构"></a>kubernetes 架构</h2><p><img src="img/components-of-kubernetes.png" alt="Components of Kubernetes"></p><p>架构图来自 kubernetes 官方文档 <a href="https://kubernetes.io/zh/docs/concepts/overview/components/" target="_blank" rel="noopener">Kubernetes 组件</a></p><h3 id="控制平面"><a href="#控制平面" class="headerlink" title="控制平面"></a>控制平面</h3><p>控制平面的组件对集群做出全局决策(比如调度)，以及检测和响应集群事件主要的组件由</p><ul><li>kube-apiserver：主节点上负责提供 Kubernetes API 服务的组件；它是 Kubernetes 控制面的前端。</li><li>etcd：集群中唯一一个有状态的服务，用来存储集群中的所有资源信息数据。</li><li>kube-scheduler：负责调度 Pod 资源到某个 Node 节点上。</li><li>kube-controller-manager：控制器管理器。</li><li>kubelet：如果使用 kubeadm 部署的话需要在 master 节点安装 kubelet</li></ul><h3 id="工作平面"><a href="#工作平面" class="headerlink" title="工作平面"></a>工作平面</h3><ul><li>kubelet：通过监听 kube-apiserver ，接收一组通过各类机制提供给它的 PodSpecs，确保这些 PodSpecs 中描述的容器处于运行状态且健康。</li><li>kube-proxy：实现 Kubernetes <a href="https://kubernetes.io/docs/concepts/services-networking/service/" target="_blank" rel="noopener">Service</a> 概念的一部分，通过 iptables 规则将 service 负载均衡到各个 Pod。</li><li>CRI容器运行时：根据统计目前 docker 依旧是排名第一的容器运行时</li></ul><h3 id="kubeadm-init-流程"><a href="#kubeadm-init-流程" class="headerlink" title="kubeadm init 流程"></a>kubeadm init 流程</h3><p>在使用 kubeadm 部署时，除了 kubelet 组件需要使用二进制部署外，其他的组件都是用 <a href="">static Pod</a> 的方式运行在相应的节点。</p><h2 id="节点初始化"><a href="#节点初始化" class="headerlink" title="节点初始化"></a>节点初始化</h2><p>系统建议选择 ubuntu 1804 或者 CentOS 7.7，因为 docker 容器虚拟化以及 kubernetes 这些新技术都是很依赖一些内核特性，比如 overlay2、cgroupv2 等，这些特性在较低版本的内核上并不是很稳定，建议 4.14 或者 4.19 以上的 LTS  内核，及长期稳定支持版内核，在 <a href="https://www.kernel.org/category/releases.html" target="_blank" rel="noopener">kernel.org</a> 上有内核支持支持情况。</p><h3 id="设置主机名并添加-hosts"><a href="#设置主机名并添加-hosts" class="headerlink" title="设置主机名并添加  hosts"></a>设置主机名并添加  hosts</h3><p>每台机器上都要设置相应的主机名并添加 hosts</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">hostnamectl set-hostname k8s-maste-01</span><br><span class="line"></span><br><span class="line">cat &gt;&gt; /etc/hosts &lt;&lt;EOF</span><br><span class="line">10.20.172.211 k8s-master-01</span><br><span class="line">10.20.172.212 k8s-node-01</span><br><span class="line">10.20.172.213 k8s-node-02</span><br><span class="line">10.20.172.214 k8s-node-03</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><h3 id="关闭-swap-和-SELinux"><a href="#关闭-swap-和-SELinux" class="headerlink" title="关闭 swap 和 SELinux"></a>关闭 swap 和 SELinux</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 临时关闭swap和SELinux</span></span><br><span class="line">swapoff -a</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> ubuntu 默认没有安装 SELinux 因为无需关闭</span></span><br><span class="line">setenforce 0</span><br><span class="line">sed -i 's/^SELINUX=enforcing$/SELINUX= disabled/' /etc/selinux/config</span><br></pre></td></tr></table></figure><h3 id="设置内核参数"><a href="#设置内核参数" class="headerlink" title="设置内核参数"></a>设置内核参数</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cat &gt; /etc/sysctl.d/99-kubernetes-cri.conf &lt;&lt;EOF</span><br><span class="line">net.bridge.bridge-nf-call-iptables  = 1</span><br><span class="line">enet.ipv4.ip_forward                = 1</span><br><span class="line">net.bridge.bridge-nf-call-ip6tables = 1</span><br><span class="line">EOF</span><br><span class="line">sysctl --system</span><br></pre></td></tr></table></figure><h3 id="配置镜像源和安装"><a href="#配置镜像源和安装" class="headerlink" title="配置镜像源和安装"></a>配置镜像源和安装</h3><p>如果对 docker-ce 版本没有特殊要求，使用以下命令可安装 docker-ce 最新的 stable 版本。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -fsSL https://get.docker.com | bash -s docker --mirror Aliyun</span><br></pre></td></tr></table></figure><h4 id="CentOS7"><a href="#CentOS7" class="headerlink" title="CentOS7"></a>CentOS7</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">yum install -y yum-utils</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 如果 docker 版本使用 18.09 + 且存储驱动使用 overlay2</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 就不用 device-mapper-persistent-data 和 lvm2</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 添加aliyun软件包yum源 docker</span></span><br><span class="line">yum-config-manager --add-repo https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 添加aliyun软件包yum源 kubelet kubeadm kubectl</span></span><br><span class="line"><span class="meta">cat&gt;</span><span class="bash">&gt;/etc/yum.repos.d/kubrenetes.repo&lt;&lt;EOF</span></span><br><span class="line">[kubernetes]</span><br><span class="line">name=Kubernetes Repo</span><br><span class="line">baseurl=https://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64/</span><br><span class="line">gpgcheck=0</span><br><span class="line">gpgkey=https://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg</span><br><span class="line">EOF</span><br><span class="line">yum makecache</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 列出可以安装的 docker-ce 版本，安装指定的 docker 版本</span></span><br><span class="line">yum list docker-ce --showduplicates|sort -r</span><br><span class="line">yum install -y docker-ce-19.03.3-3.el7</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="comment"># 列出可以安装的 kubernetes 版本，安装指定的 kubeadm kubelet kubectl</span></span></span><br><span class="line">yum list kubeadm --showduplicates|sort -r</span><br><span class="line">yum install kubelet-1.17.4-0 kubeadm-1.17.4-0 kubectl-1.17.4-0 --disableexcludes=kubernetes</span><br></pre></td></tr></table></figure><h4 id="Ubuntu-1804"><a href="#Ubuntu-1804" class="headerlink" title="Ubuntu 1804"></a>Ubuntu 1804</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">apt update</span><br><span class="line">apt-get install -y apt-transport-https ca-certificates curl software-properties-common</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 添加阿里云 docker-ce 镜像源</span></span><br><span class="line">curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -</span><br><span class="line">add-apt-repository "deb [arch=amd64] http://mirrors.aliyun.com/docker-ce/linux/ubuntu $(lsb_release -cs) stable"</span><br><span class="line"><span class="meta">#</span><span class="bash"> 添加阿里云 kubernetes 镜像源</span></span><br><span class="line">curl https://mirrors.aliyun.com/kubernetes/apt/doc/apt-key.gpg | apt-key add -</span><br><span class="line">cat &lt;&lt;EOF &gt;/etc/apt/sources.list.d/kubernetes.list</span><br><span class="line">deb https://mirrors.aliyun.com/kubernetes/apt/ kubernetes-xenial main</span><br><span class="line">EOF</span><br><span class="line">apt-get update</span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装指定版本的 docker-ce</span></span><br><span class="line">apt list -a docker-ce</span><br><span class="line">apt install docker-ce=5:19.03.8~3-0~ubuntu-bionic</span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装指定版本的 kubernetes</span></span><br><span class="line">apt install kubeadm=1.17.4-00 kubelet=1.17.4-00 kubectl=1.17.4-00</span><br></pre></td></tr></table></figure><h4 id="华为云坑"><a href="#华为云坑" class="headerlink" title="华为云坑"></a>华为云坑</h4><p>需要注意的是，如果你使用的华为云 kubernetes 镜像源，目前 （2020-04-15） 华为云上的 kubernetes 版本最高支持到 1.14.2，而 1.14 版本 kubernetes 已经不在维护了，所以推荐换个镜像源安装 v.1.16.8 或者 v1.17.4 这两个版本，v1.18.1 也不建议建议安装使用。关于版本的选择可以参考 <a href="https://blog.k8s.li/How-to-choose-the-right-version-of-kubernetes.html">生产环境如何保守地选择 kubernetes 版本</a> 。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">╭─root@k8s-master-01 ~</span><br><span class="line">╰─# yum list kubeadm --showduplicates|sort -r</span><br><span class="line">kubeadm.x86_64                       1.6.11-0                         kubernetes</span><br><span class="line">kubeadm.x86_64                       1.6.1-0                          kubernetes</span><br><span class="line">kubeadm.x86_64                       1.6.10-0                         kubernetes</span><br><span class="line">kubeadm.x86_64                       1.6.0-0                          kubernetes</span><br><span class="line">kubeadm.x86_64                       1.14.2-0                         kubernetes</span><br><span class="line">kubeadm.x86_64                       1.14.1-0                         kubernetes</span><br><span class="line">kubeadm.x86_64                       1.14.0-0                         kubernetes</span><br><span class="line">kubeadm.x86_64                       1.13.6-0                         kubernetes</span><br><span class="line">kubeadm.x86_64                       1.13.5-0                         kubernetes</span><br></pre></td></tr></table></figure><h3 id="设置-docker-的daemon-json"><a href="#设置-docker-的daemon-json" class="headerlink" title="设置 docker 的daemon.json"></a>设置 docker 的daemon.json</h3><p>安装完成之后先设置以下 docker 的启动参数 <code>/etc/docker/daemon.json</code></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">cat &gt; /etc/docker/daemon.json &lt;&lt;EOF</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"exec-opts"</span>: [<span class="string">"native.cgroupdriver=systemd"</span>],</span><br><span class="line">  <span class="attr">"registry-mirrors"</span>: [<span class="string">"https://xlx9erfu.mirror.aliyuncs.com"</span>],</span><br><span class="line">  <span class="attr">"log-driver"</span>: <span class="string">"json-file"</span>,</span><br><span class="line">  <span class="attr">"log-opts"</span>: &#123;</span><br><span class="line">    <span class="attr">"max-size"</span>: <span class="string">"100m"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"storage-driver"</span>: <span class="string">"overlay2"</span></span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><h3 id="设置开机自启并启动"><a href="#设置开机自启并启动" class="headerlink" title="设置开机自启并启动"></a>设置开机自启并启动</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">systemctl enable docker kubelet</span><br><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl start docker kubelet</span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">╭─root@k8s-master-01</span> <span class="string">~</span></span><br><span class="line"><span class="string">╰─#</span> <span class="string">docker</span> <span class="string">info</span></span><br><span class="line"><span class="attr">Client:</span></span><br><span class="line"> <span class="attr">Debug Mode:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">Server:</span></span><br><span class="line"> <span class="attr">Containers:</span> <span class="number">0</span></span><br><span class="line">  <span class="attr">Running:</span> <span class="number">0</span></span><br><span class="line">  <span class="attr">Paused:</span> <span class="number">0</span></span><br><span class="line">  <span class="attr">Stopped:</span> <span class="number">0</span></span><br><span class="line"> <span class="attr">Images:</span> <span class="number">0</span></span><br><span class="line"> <span class="attr">Server Version:</span> <span class="number">19.03</span><span class="number">.3</span></span><br><span class="line"> <span class="attr">Storage Driver:</span> <span class="string">overlay2</span></span><br><span class="line">  <span class="attr">Backing Filesystem:</span> <span class="string">extfs</span></span><br><span class="line">  <span class="attr">Supports d_type:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">Native Overlay Diff:</span> <span class="literal">true</span></span><br><span class="line"> <span class="attr">Logging Driver:</span> <span class="string">json-file</span></span><br><span class="line"> <span class="attr">Cgroup Driver:</span> <span class="string">cgroupfs</span></span><br><span class="line"> <span class="attr">Plugins:</span></span><br><span class="line">  <span class="attr">Volume:</span> <span class="string">local</span></span><br><span class="line">  <span class="attr">Network:</span> <span class="string">bridge</span> <span class="string">host</span> <span class="string">ipvlan</span> <span class="string">macvlan</span> <span class="literal">null</span> <span class="string">overlay</span></span><br><span class="line">  <span class="attr">Log:</span> <span class="string">awslogs</span> <span class="string">fluentd</span> <span class="string">gcplogs</span> <span class="string">gelf</span> <span class="string">journald</span> <span class="string">json-file</span> <span class="string">local</span> <span class="string">logentries</span> <span class="string">splunk</span> <span class="string">syslog</span></span><br><span class="line"> <span class="attr">Swarm:</span> <span class="string">inactive</span></span><br><span class="line"> <span class="attr">Runtimes:</span> <span class="string">runc</span></span><br><span class="line"> <span class="attr">Default Runtime:</span> <span class="string">runc</span></span><br><span class="line"> <span class="attr">Init Binary:</span> <span class="string">docker-init</span></span><br><span class="line"> <span class="attr">containerd version:</span> <span class="string">894b81a4b802e4eb2a91d1ce216b8817763c29fb</span></span><br><span class="line"> <span class="attr">runc version:</span> <span class="string">425e105d5a03fabd737a126ad93d62a9eeede87f</span></span><br><span class="line"> <span class="attr">init version:</span> <span class="string">fec3683</span></span><br><span class="line"> <span class="attr">Security Options:</span></span><br><span class="line">  <span class="string">seccomp</span></span><br><span class="line">   <span class="attr">Profile:</span> <span class="string">default</span></span><br><span class="line"> <span class="attr">Kernel Version:</span> <span class="number">3.10</span><span class="number">.0</span><span class="number">-957.</span><span class="string">el7.x86_64</span></span><br><span class="line"> <span class="attr">Operating System:</span> <span class="string">CentOS</span> <span class="string">Linux</span> <span class="number">7</span> <span class="string">(Core)</span></span><br><span class="line"> <span class="attr">OSType:</span> <span class="string">linux</span></span><br><span class="line"> <span class="attr">Architecture:</span> <span class="string">x86_64</span></span><br><span class="line"> <span class="attr">CPUs:</span> <span class="number">4</span></span><br><span class="line"> <span class="attr">Total Memory:</span> <span class="number">3.</span><span class="string">683GiB</span></span><br><span class="line"> <span class="attr">Name:</span> <span class="string">k8s-master-01</span></span><br><span class="line"> <span class="attr">ID:</span> <span class="string">UXD4:IK6C:P3EO:TXRP:GQZD:STGH:GXZH:LO2C:HFBN:LV2B:LEVE:UWT2</span></span><br><span class="line"> <span class="attr">Docker Root Dir:</span> <span class="string">/var/lib/docker</span></span><br><span class="line"> <span class="attr">Debug Mode:</span> <span class="literal">false</span></span><br><span class="line"> <span class="attr">Registry:</span> <span class="string">https://index.docker.io/v1/</span></span><br><span class="line"> <span class="attr">Labels:</span></span><br><span class="line"> <span class="attr">Experimental:</span> <span class="literal">false</span></span><br><span class="line"> <span class="attr">Insecure Registries:</span></span><br><span class="line">  <span class="number">127.0</span><span class="number">.0</span><span class="number">.0</span><span class="string">/8</span></span><br><span class="line"> <span class="attr">Live Restore Enabled:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><p>目前最新版本的 docker 默认优先采用 <strong>overlay2</strong>  的存储驱动，对于已支持该驱动的 Linux 发行版，不需要任何进行任何额外的配置。另外需要注意的是<code>devicemapper</code> 存储驱动已经在 docker 18.09 版本中被废弃，docker 官方推荐使用 <code>overlay2</code> 替代<code>devicemapper</code>。可使用 lsmod 命令查看当前系统内核是否支持 overlay2 。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">╭─root@k8s-master-01 /opt/1.17.4</span><br><span class="line">╰─# lsmod |grep overlay</span><br><span class="line">overlay                71964  16</span><br></pre></td></tr></table></figure><h2 id="部署-master-节点"><a href="#部署-master-节点" class="headerlink" title="部署 master 节点"></a>部署 master 节点</h2><h3 id="准备镜像"><a href="#准备镜像" class="headerlink" title="准备镜像"></a>准备镜像</h3><p>对于 kubernetes 1.17.4 版本的 kubeadm 需要使用到以下 docker 镜像如下，对于墙国网络环境下，你需要找台可以自由访问互联网的服务器，在上面把它 pull 下来，然后 save 成 tar 包传回本地再 docker load 进镜像😂。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">k8s.gcr.io/kube-apiserver:v1.17.4</span><br><span class="line">k8s.gcr.io/kube-controller-manager:v1.17.4</span><br><span class="line">k8s.gcr.io/kube-scheduler:v1.17.4</span><br><span class="line">k8s.gcr.io/kube-proxy:v1.17.4</span><br><span class="line">k8s.gcr.io/pause:3.1</span><br><span class="line">k8s.gcr.io/etcd:3.4.3-0</span><br><span class="line">k8s.gcr.io/coredns:1.6.5</span><br></pre></td></tr></table></figure><p>需要注意的是，当使用 kubeadm pull 相关镜像时，kubeadm 的版本最好和 –kubernetes-version=${version} 版本一致，不一致的话有些版本的镜像是 pull 不下来的。对应版本的 kubenetes 要使用对应版本的镜像才可以。可以使用下面的脚本在可以自由访问互联网的服务器上将 pull 指定版本的镜像。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="keyword">for</span>: use kubeadm pull kubernetes images</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> date: 2019-08-15</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> author: muzi502</span></span><br><span class="line"></span><br><span class="line">set -xue</span><br><span class="line">apt-get update &amp;&amp; apt-get install -y apt-transport-https curl</span><br><span class="line">curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key add -</span><br><span class="line">cat &lt;&lt;EOF &gt;/etc/apt/sources.list.d/kubernetes.list</span><br><span class="line">deb https://apt.kubernetes.io/ kubernetes-xenial main</span><br><span class="line">EOF</span><br><span class="line">apt-get update</span><br><span class="line"></span><br><span class="line">for version in 1.17.4</span><br><span class="line">do</span><br><span class="line">    apt install kubeadm=$&#123;version&#125;-00</span><br><span class="line">    mkdir -p $&#123;version&#125;/bin</span><br><span class="line">    docker rmi $(docker images -q)</span><br><span class="line">    kubeadm config images pull --kubernetes-version=$&#123;version&#125;</span><br><span class="line">    docker save -o v$&#123;version&#125;.tar $(docker images | grep -v TAG | cut -d ' ' -f1)</span><br><span class="line">    gzip v$&#123;version&#125;.tar v$&#123;version&#125;.tar.gz</span><br><span class="line">done</span><br></pre></td></tr></table></figure><p>导入之后的镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">╭─root@k8s-master-01 /opt/1.17.4</span><br><span class="line">╰─# docker load &lt; v1.17.4.tar.gz</span><br><span class="line">fc4976bd934b: Loading layer [=============&gt;]  53.88MB/53.88MB</span><br><span class="line">f6953727aaba: Loading layer [=============&gt;]   42.1MB/42.1MB</span><br><span class="line">Loaded image: k8s.gcr.io/kube-scheduler:v1.17.4</span><br><span class="line">225df95e717c: Loading layer [=============&gt;]  336.4kB/336.4kB</span><br><span class="line">7c9b0f448297: Loading layer [=============&gt;]  41.37MB/41.37MB</span><br><span class="line">Loaded image: k8s.gcr.io/coredns:1.6.5</span><br><span class="line">fe9a8b4f1dcc: Loading layer [=============&gt;]  43.87MB/43.87MB</span><br><span class="line">ce04b89b7def: Loading layer [=============&gt;]  224.9MB/224.9MB</span><br><span class="line">1b2bc745b46f: Loading layer [=============&gt;]  21.22MB/21.22MB</span><br><span class="line">Loaded image: k8s.gcr.io/etcd:3.4.3-0</span><br><span class="line">e17133b79956: Loading layer [=============&gt;]  744.4kB/744.4kB</span><br><span class="line">Loaded image: k8s.gcr.io/pause:3.1</span><br><span class="line">682fbb19de80: Loading layer [=============&gt;]  21.06MB/21.06MB</span><br><span class="line">2dc2f2423ad1: Loading layer [=============&gt;]  5.168MB/5.168MB</span><br><span class="line">ad9fb2411669: Loading layer [=============&gt;]  4.608kB/4.608kB</span><br><span class="line">597151d24476: Loading layer [=============&gt;]  8.192kB/8.192kB</span><br><span class="line">0d8d54147a3a: Loading layer [=============&gt;]  8.704kB/8.704kB</span><br><span class="line">960d0ce862e2: Loading layer [=============&gt;]  37.81MB/37.81MB</span><br><span class="line">Loaded image: k8s.gcr.io/kube-proxy:v1.17.4</span><br><span class="line">9daac3fed755: Loading layer [=============&gt;]  118.7MB/118.7MB</span><br><span class="line">Loaded image: k8s.gcr.io/kube-apiserver:v1.17.4</span><br><span class="line">99df54617e88: Loading layer [=============&gt;]  108.6MB/108.6MB</span><br><span class="line">Loaded image: k8s.gcr.io/kube-controller-manager:v1.17.4</span><br><span class="line">╭─root@k8s-master-01 /opt/1.17.4</span><br><span class="line">╰─# docker images</span><br><span class="line">REPOSITORY                           TAG                 CREATED             SIZE</span><br><span class="line">k8s.gcr.io/kube-proxy                v1.17.4             4 weeks ago         116MB</span><br><span class="line">k8s.gcr.io/kube-controller-manager   v1.17.4             4 weeks ago         161MB</span><br><span class="line">k8s.gcr.io/kube-apiserver            v1.17.4             4 weeks ago         171MB</span><br><span class="line">k8s.gcr.io/kube-scheduler            v1.17.4             4 weeks ago         94.4MB</span><br><span class="line">k8s.gcr.io/coredns                   1.6.5               5 months ago        41.6MB</span><br><span class="line">k8s.gcr.io/etcd                      3.4.3-0             5 months ago        288MB</span><br><span class="line">k8s.gcr.io/pause                     3.1                 2 years ago         742kB</span><br></pre></td></tr></table></figure><h3 id="初始化-master-节点"><a href="#初始化-master-节点" class="headerlink" title="初始化 master 节点"></a>初始化 master 节点</h3><p>使用 kubeadm init 命令初始化 master 节点，关于 kubeadm 的参数可以参考官方文档 <a href="https://kubernetes.io/zh/docs/reference/setup-tools/kubeadm/kubeadm-init/" target="_blank" rel="noopener">kubeadm init</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubeadm init --pod-network-cidr=10.244.0.0/16 --apiserver-advertise-address=10.20.172.211 --kubernetes-version=1.17.4</span><br></pre></td></tr></table></figure><ul><li>–pod-network-cidr= 指定 Pod 网段的 IP 地址块</li><li>–apiserver-advertise-address= 指定 api-server 监听的地址</li><li>–kubernetes-version= 指定 kubernetes 的版本，最好和 kubeadm 版本保持一致</li></ul><p>正常完成之后的日志输出如下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">╭─root@k8s-master-01 /opt/1.17.4</span><br><span class="line">╰─# kubeadm init --pod-network-cidr=10.244.0.0/16 --apiserver-advertise-address=10.20.172.211 --kubernetes-version=1.17.4</span><br><span class="line"></span><br><span class="line">Your Kubernetes control-plane has initialized successfully!</span><br><span class="line"></span><br><span class="line">To start using your cluster, you need to run the following as a regular user:</span><br><span class="line"></span><br><span class="line">  mkdir -p $HOME/.kube</span><br><span class="line">  sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config</span><br><span class="line">  sudo chown $(id -u):$(id -g) $HOME/.kube/config</span><br><span class="line"></span><br><span class="line">You should now deploy a pod network to the cluster.</span><br><span class="line">Run "kubectl apply -f [podnetwork].yaml" with one of the options listed at:</span><br><span class="line">  https://kubernetes.io/docs/concepts/cluster-administration/addons/</span><br><span class="line"></span><br><span class="line">Then you can join any number of worker nodes by running the following on each as root:</span><br><span class="line"></span><br><span class="line">kubeadm join 10.20.172.211:6443 --token hi66lb.r13y2hottst2ks6f \</span><br><span class="line">    --discovery-token-ca-cert-hash sha256:9b96a436f2897a8371fccb3af4d8f2fff348fcb42763e005e9175a4e925c51d1</span><br></pre></td></tr></table></figure><p>刚刚安装完之后 coreDNS 的 Pod 会一直出于 pending 状态，而且 Master 的 STATUS 状态也是 <code>NotReady</code> 。遇到这种问题<code>不要慌,问题不大.jpg</code> 这是因为集群中还没有安装好 CNI 网络插件，等下部署好 flannel 就可以。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">╭─root@k8s-master-01 /opt/1.17.4</span><br><span class="line">╰─# kubectl get node</span><br><span class="line">NAME            STATUS     ROLES    AGE     VERSION</span><br><span class="line">k8s-master-01   NotReady   master   9m19s   v1.17.4</span><br><span class="line">╭─root@k8s-master-01 /opt/1.17.4</span><br><span class="line">╰─# kubectl get pod --all-namespaces</span><br><span class="line">NAMESPACE     NAME                                    READY   STATUS    RESTARTS   AGE</span><br><span class="line">kube-system   coredns-6955765f44-t4b6k                0/1     Pending   0          49s</span><br><span class="line">kube-system   coredns-6955765f44-vm5tm                0/1     Pending   0          49s</span><br><span class="line">kube-system   etcd-k8s-master-01                      1/1     Running   0          62s</span><br><span class="line">kube-system   kube-apiserver-k8s-master-01            1/1     Running   0          62s</span><br><span class="line">kube-system   kube-controller-manager-k8s-master-01   1/1     Running   0          62s</span><br><span class="line">kube-system   kube-proxy-rmgwl                        1/1     Running   0          49s</span><br><span class="line">kube-system   kube-scheduler-k8s-master-01            1/1     Running   0          62s</span><br></pre></td></tr></table></figure><h2 id="加入-node-节点"><a href="#加入-node-节点" class="headerlink" title="加入 node 节点"></a>加入 node 节点</h2><p>在另一台 Node 节点上重复节点初始化的内容，并将将所需的镜像导入到 node 节点。之后使用 kubeadm joine 命令将 Node 节点加入到集群中即可。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">╭─root@k8s-node-01 /opt/1.17.4</span><br><span class="line">╰─# kubeadm join 10.20.172.211:6443 --token hi66lb.r13y2hottst2ks6f \</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">     --discovery-token-ca-cert-hash sha256:9b96a436f2897a8371fccb3af4d8f2fff348fcb42763e005e9175a4e925c51d1</span></span><br><span class="line">W0415 00:52:08.127829    9901 join.go:346] [preflight] WARNING: JoinControlPane.controlPlane settings will be ignored when control-plane flag is not set.</span><br><span class="line">[preflight] Running pre-flight checks</span><br><span class="line">        [WARNING Hostname]: hostname "k8s-node-01" could not be reached</span><br><span class="line">        [WARNING Hostname]: hostname "k8s-node-01": lookup k8s-node-01 on 192.168.10.254:53: no such host</span><br><span class="line">        [WARNING Service-Kubelet]: kubelet service is not enabled, please run 'systemctl enable kubelet.service'</span><br><span class="line">[preflight] Reading configuration from the cluster...</span><br><span class="line">[preflight] FYI: You can look at this config file with 'kubectl -n kube-system get cm kubeadm-config -oyaml'</span><br><span class="line">[kubelet-start] Downloading configuration for the kubelet from the "kubelet-config-1.17" ConfigMap in the kube-system namespace</span><br><span class="line">[kubelet-start] Writing kubelet configuration to file "/var/lib/kubelet/config.yaml"</span><br><span class="line">[kubelet-start] Writing kubelet environment file with flags to file "/var/lib/kubelet/kubeadm-flags.env"</span><br><span class="line">[kubelet-start] Starting the kubelet</span><br><span class="line">[kubelet-start] Waiting for the kubelet to perform the TLS Bootstrap...</span><br><span class="line"></span><br><span class="line">This node has joined the cluster:</span><br><span class="line">* Certificate signing request was sent to apiserver and a response was received.</span><br><span class="line">* The Kubelet was informed of the new secure connection details.</span><br><span class="line"></span><br><span class="line">Run 'kubectl get nodes' on the control-plane to see this node join the cluster.</span><br></pre></td></tr></table></figure><p>如果不出意外的话会提示 <code>This node has joined the cluster:</code> ，然后在 master 节点看一下节点是否加入</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">╭─root@k8s-master-01 /opt/1.17.4</span><br><span class="line">╰─# kubectl get node</span><br><span class="line">NAME            STATUS     ROLES    AGE   VERSION</span><br><span class="line">k8s-master-01   NotReady   master   31m   v1.17.4</span><br><span class="line">k8s-node-01     NotReady   &lt;none&gt;   58s   v1.17.4</span><br></pre></td></tr></table></figure><p>如果状态还是 <code>NotReady</code> 不要慌，问题不大）。接下来安装 CNI 网络插件即可</p><h2 id="部署网络插件"><a href="#部署网络插件" class="headerlink" title="部署网络插件"></a>部署网络插件</h2><p>在这我们使用 flannel 作为 Kubernetes 网络解决方案，在 kubeadm init 的时候指定的 –pod-network-cidr= 指定 Pod 网段的 IP 地址块，即为 flannel 默认的 IP 段，如果没有修改的话就直接在 master 节点上使用 kubectl apply -f 命令部署即可。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">╭─root@k8s-master-01 /opt/1.17.4</span><br><span class="line">╰─# kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml</span><br></pre></td></tr></table></figure><p>由于墙国网络原因，访问 <code>raw.githubusercontent.com</code> 这个域名会比较慢，在这里可以使用 jsdelivr 来进行加速。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">╭─root@k8s-master-01 /opt/1.17.4</span><br><span class="line">╰─# kubectl apply -f https://cdn.jsdelivr.net/gh/coreos/flannel/Documentation/kube-flannel.yml</span><br><span class="line">podsecuritypolicy.policy/psp.flannel.unprivileged created</span><br><span class="line">clusterrole.rbac.authorization.k8s.io/flannel created</span><br><span class="line">clusterrolebinding.rbac.authorization.k8s.io/flannel created</span><br><span class="line">serviceaccount/flannel created</span><br><span class="line">configmap/kube-flannel-cfg created</span><br><span class="line">daemonset.apps/kube-flannel-ds-amd64 created</span><br><span class="line">daemonset.apps/kube-flannel-ds-arm64 created</span><br><span class="line">daemonset.apps/kube-flannel-ds-arm created</span><br><span class="line">daemonset.apps/kube-flannel-ds-ppc64le created</span><br><span class="line">daemonset.apps/kube-flannel-ds-s390x created</span><br></pre></td></tr></table></figure><p>flannel 的 docker 镜像是在 <code>quay.io/coreos/flannel</code> 一般情况下没问题能顺利 pull 下来。然后使用 <code>kubectl get pod -n kube-system</code> 命令查看 pod 的状态是不是都在 running 状态。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">╭─root@k8s-master-01 /opt/1.17.4</span><br><span class="line">╰─# kubectl get pod -n kube-system</span><br><span class="line">NAME                                    READY   STATUS    RESTARTS   AGE</span><br><span class="line">coredns-6955765f44-g5fwl                1/1     Running   0          23h</span><br><span class="line">coredns-6955765f44-g7cls                1/1     Running   0          23h</span><br><span class="line">etcd-k8s-master-01                      1/1     Running   0          24h</span><br><span class="line">kube-apiserver-k8s-master-01            1/1     Running   0          24h</span><br><span class="line">kube-controller-manager-k8s-master-01   1/1     Running   0          24h</span><br><span class="line">kube-flannel-ds-amd64-94hfr             1/1     Running   0          23h</span><br><span class="line">kube-flannel-ds-amd64-vpdfd             1/1     Running   0          23h</span><br><span class="line">kube-proxy-rmgwl                        1/1     Running   0          24h</span><br><span class="line">kube-proxy-xqcsq                        1/1     Running   0          24h</span><br><span class="line">kube-scheduler-k8s-master-01            1/1     Running   0          24h</span><br><span class="line"></span><br><span class="line">╭─root@k8s-master-01 /opt/1.17.4</span><br><span class="line">╰─# kubectl get node</span><br><span class="line">NAME            STATUS   ROLES    AGE   VERSION</span><br><span class="line">k8s-master-01   Ready    master   29h   v1.17.4</span><br><span class="line">k8s-node-01     Ready    &lt;none&gt;   28h   v1.17.4</span><br></pre></td></tr></table></figure><p>由此，一个简陋的 kubernetes 集群已经部署完了😂，文章有点水了~~。对于想要入门和学习 kubernetes 的同学来说 kubeadm 是个好工具。后续会更新一些 kubernetes 内容。</p><h2 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h2><p>最后提一下，文中提到的对于下载 github 上文件，可以通过以下规则进行替换，就可以使用 jsdelivr 来 fuck 一下 GFW ，无痛下载 GitHub 上的文件。这还是从 <a href="https://chanshiyu.com/#/post/94" target="_blank" rel="noopener">JsDelivr 全站托管</a> 学来的骚操作😂。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">GitHub rul:</span> <span class="string">https://github.com/ohmyzsh/ohmyzsh/blob/master/tools/install.sh</span></span><br><span class="line"><span class="attr">jsDelivr url:</span> <span class="string">https://cdn.jsdelivr.net/gh/ohmyzsh/ohmyzsh/tools/install.sh</span></span><br></pre></td></tr></table></figure><p>规则就是将 <code>github.com</code> 替换为 <code>cdn.jsdelivr.net/gh</code> ，然后去掉 <code>/blob/master</code>，接上 repo 里文件的绝对路径即可。也可以将以下脚本保存为一个可执行脚本文件 /usr/bin/rawg，当使用 rawg <a href="https://github.com/ohmyzsh/ohmyzsh/blob/master/tools/install.sh" target="_blank" rel="noopener">https://github.com/ohmyzsh/ohmyzsh/blob/master/tools/install.sh</a> 就可以直接将 url 进行替换，快速地下载文件。怎么样，很爽吧😂，对于某些 Linux 机器上没有代理的情况下该方法有效。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> data: 2020-03-31</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> author: muzi502</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="keyword">for</span>: Fuck GFW and download some raw file form github without proxy using jsDelivr CDN</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> usage: save the .she to your <span class="built_in">local</span> such as /usr/bin/rawg, and chmod +x /usr/bin/rawg</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> use rawg https://github.com/ohmyzsh/ohmyzsh/blob/master/tools/install.sh to download</span></span><br><span class="line"></span><br><span class="line">set -xue</span><br><span class="line"><span class="meta">#</span><span class="bash"> GitHub rul: https://github.com/ohmyzsh/ohmyzsh/blob/master/tools/install.sh</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> jsDelivr url: https://cdn.jsdelivr.net/gh/ohmyzsh/ohmyzsh/tools/install.sh</span></span><br><span class="line"></span><br><span class="line">wget $(echo $1 | sed 's/raw.githubusercontent.com/cdn.jsdelivr.net\/gh/' \</span><br><span class="line">               | sed 's/github.com/cdn.jsdelivr.net\/gh/' \</span><br><span class="line">               | sed 's/\/master//' | sed 's/\/blob//' )</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> curl $(<span class="built_in">echo</span> <span class="variable">$1</span> | sed <span class="string">'s/raw.githubusercontent.com/cdn.jsdelivr.net\/gh/'</span> \</span></span><br><span class="line"><span class="meta">#</span><span class="bash">                | sed <span class="string">'s/github.com/cdn.jsdelivr.net\/gh/'</span> \</span></span><br><span class="line"><span class="meta">#</span><span class="bash">                | sed <span class="string">'s/\/master//'</span> | sed <span class="string">'s/\/blob//'</span> )</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;h2 id=&quot;炒冷饭&quot;&gt;&lt;a href=&quot;#炒冷饭&quot;
        
      
    
    </summary>
    
    
      <category term="技术" scheme="https://blog.k8s.li/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="kubernetes" scheme="https://blog.k8s.li/tags/kubernetes/"/>
    
      <category term="kubeadm" scheme="https://blog.k8s.li/tags/kubeadm/"/>
    
      <category term="从零开始学习 K8s" scheme="https://blog.k8s.li/tags/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%AD%A6%E4%B9%A0-K8s/"/>
    
  </entry>
  
  <entry>
    <title>基于 Gitlab-ci + Harobr 的 CI 流水线</title>
    <link href="https://blog.k8s.li/gitlab-ci-harbor.html"/>
    <id>https://blog.k8s.li/gitlab-ci-harbor.html</id>
    <published>2020-04-11T16:00:00.000Z</published>
    <updated>2020-04-11T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>对于 CI/CD（持续集成与持续交付）的基本概念网络上已经有很多大佬在普及啦，咱才疏学浅怕误人子弟所以就剽窃一下别人的解释啦😂。下面就剽窃一下红帽子家的 <a href="https://www.redhat.com/zh/topics/devops/what-is-ci-cd" target="_blank" rel="noopener">CI/CD是什么？如何理解持续集成、持续交付和持续部署</a> 官方文档：</p><p><strong>CI 持续集成</strong></p><p><img src="https://cdn.jsdelivr.net/gh/muzi502/blog/source/img/409-images-for-snap-blog-postedit_image1.png" alt="Continuous integration puts the integration phase earlier in the development cycle"></p><p>图片剽窃自  <a href="https://www.mindtheproduct.com/what-the-hell-are-ci-cd-and-devops-a-cheatsheet-for-the-rest-of-us/" target="_blank" rel="noopener">The Product Managers’ Guide to Continuous Delivery and DevOps</a></p><blockquote><p>CI/CD 中的“CI”始终指持续集成，它属于开发人员的自动化流程。成功的 CI 意味着应用代码的新更改会定期构建、测试并合并到共享存储库中。该解决方案可以解决在一次开发中有太多应用分支，从而导致相互冲突的问题。</p></blockquote><p><strong>CD 持续交付</strong></p><p><img src="https://cdn.jsdelivr.net/gh/muzi502/blog/source/img/409-images-for-snap-blog-postedit_image4-manual.png" alt="Continuous Delivery is a software development discipline "></p><p>图片剽窃自 <a href="https://www.mindtheproduct.com/what-the-hell-are-ci-cd-and-devops-a-cheatsheet-for-the-rest-of-us/" target="_blank" rel="noopener">The Product Managers’ Guide to Continuous Delivery and DevOps</a></p><blockquote><p>CI/CD 中的“CD”指的是持续交付和/或持续部署，这些相关概念有时会交叉使用。两者都事关管道后续阶段的自动化，但它们有时也会单独使用，用于说明自动化程度。</p><p>持续<em>交付</em>通常是指开发人员对应用的更改会自动进行错误测试并上传到存储库（如 <a href="https://redhatofficial.github.io/#!/main" target="_blank" rel="noopener">GitHub</a> 或容器注册表），然后由运维团队将其部署到实时生产环境中。这旨在解决开发和运维团队之间可见性及沟通较差的问题。因此，持续交付的目的就是确保尽可能减少部署新代码时所需的工作量。</p></blockquote><p><strong>持续部署</strong></p><p><img src="https://cdn.jsdelivr.net/gh/muzi502/blog/source/img/409-images-for-snap-blog-postedit_image4-manual-1585574252795.png" alt="Continuous Delivery is a software development discipline "></p><p>图片剽窃自  <a href="https://www.mindtheproduct.com/what-the-hell-are-ci-cd-and-devops-a-cheatsheet-for-the-rest-of-us/" target="_blank" rel="noopener">The Product Managers’ Guide to Continuous Delivery and DevOps</a></p><blockquote><p>持续<em>部署</em>（另一种“CD”）指的是自动将开发人员的更改从存储库发布到生产环境，以供客户使用。它主要为了解决因手动流程降低应用交付速度，从而使运维团队超负荷的问题。持续部署以持续交付的优势为根基，实现了管道后续阶段的自动化。</p></blockquote><p>总之而言  CI/CD 是一整套软件开发的流水线，开发人员提交完更新的代码之后，根据流水线的触发情况来执行自定义的流水线任务，比如代码质量检测、构建 docker 镜像为交付产品、自动化部署到测试环境或生产环境等等。这些需要一系列相关的软件来构建这套 CI/CD 的系统，本文就通过 Gitlab + gitlab-ci + Harbor 构建一个简陋的 CI/CD 流水线。</p><p>另外推荐读一下这篇 <a href="https://www.mindtheproduct.com/what-the-hell-are-ci-cd-and-devops-a-cheatsheet-for-the-rest-of-us/" target="_blank" rel="noopener">The Product Managers’ Guide to Continuous Delivery and DevOps </a></p><h2 id="Gitlab"><a href="#Gitlab" class="headerlink" title="Gitlab"></a>Gitlab</h2><p>目前 Gitlab 官方给出的安装方式有很多种，普遍采用 Omnibus 包、Docker 安装。也可以用官方的 helm Chart 部署在 Kubernenets 集群中，然后使用网络存储，比如 Gluster、NFS、Ceph、vSAN 等进行 PG 数据库和代码仓库持久化存储。</p><p><strong>官方建议采用 Omnibus 方式安装：</strong></p><blockquote><p>我们强烈建议使用 Omnibus 包安装 GitLab ，因为它安装起来更快、更容易升级版本，而且包含了其他安装方式所没有的可靠性功能。</p></blockquote><h3 id="Omnibus-包安装方式比较"><a href="#Omnibus-包安装方式比较" class="headerlink" title="Omnibus 包安装方式比较"></a>Omnibus 包安装方式比较</h3><p>摘自官方文档</p><ul><li>✅ - Installed by default</li><li>⚙ - Requires additional configuration, or GitLab Managed Apps</li><li>⤓ - Manual installation required</li><li>❌ - Not supported or no instructions available</li><li>N/A - Not applicable</li></ul><table><thead><tr><th align="left">Component</th><th align="left">Description</th><th align="center"><a href="https://docs.gitlab.com/omnibus/" target="_blank" rel="noopener">Omnibus GitLab</a></th><th align="center"><a href="https://docs.gitlab.com/charts/" target="_blank" rel="noopener">GitLab chart</a></th><th align="center"><a href="https://gitlab.com/" target="_blank" rel="noopener">GitLab.com</a></th></tr></thead><tbody><tr><td align="left"><a href="https://docs.gitlab.com/ee/development/architecture.html#nginx" target="_blank" rel="noopener">NGINX</a></td><td align="left">Routes requests to appropriate components, terminates SSL</td><td align="center"><a href="https://docs.gitlab.com/omnibus/settings/" target="_blank" rel="noopener">✅</a></td><td align="center"><a href="https://docs.gitlab.com/charts/charts/nginx/" target="_blank" rel="noopener">✅</a></td><td align="center"><a href="https://about.gitlab.com/handbook/engineering/infrastructure/production/architecture/#service-architecture" target="_blank" rel="noopener">✅</a></td></tr><tr><td align="left"><a href="https://docs.gitlab.com/ee/development/architecture.html#unicorn" target="_blank" rel="noopener">Unicorn (GitLab Rails)</a></td><td align="left">Handles requests for the web interface and API</td><td align="center"><a href="https://docs.gitlab.com/omnibus/settings/unicorn.html" target="_blank" rel="noopener">✅</a></td><td align="center"><a href="https://docs.gitlab.com/charts/charts/gitlab/unicorn/" target="_blank" rel="noopener">✅</a></td><td align="center"><a href="https://docs.gitlab.com/ee/user/gitlab_com/index.html#unicorn" target="_blank" rel="noopener">✅</a></td></tr><tr><td align="left"><a href="https://docs.gitlab.com/ee/development/architecture.html#sidekiq" target="_blank" rel="noopener">Sidekiq</a></td><td align="left">Background jobs processor</td><td align="center"><a href="https://gitlab.com/gitlab-org/omnibus-gitlab/blob/master/files/gitlab-config-template/gitlab.rb.template" target="_blank" rel="noopener">✅</a></td><td align="center"><a href="https://docs.gitlab.com/charts/charts/gitlab/sidekiq/" target="_blank" rel="noopener">✅</a></td><td align="center"><a href="https://docs.gitlab.com/ee/user/gitlab_com/index.html#sidekiq" target="_blank" rel="noopener">✅</a></td></tr><tr><td align="left"><a href="https://docs.gitlab.com/ee/development/architecture.html#gitaly" target="_blank" rel="noopener">Gitaly</a></td><td align="left">Git RPC service for handling all Git calls made by GitLab</td><td align="center"><a href="https://docs.gitlab.com/ee/administration/gitaly/index.html" target="_blank" rel="noopener">✅</a></td><td align="center"><a href="https://docs.gitlab.com/charts/charts/gitlab/gitaly/" target="_blank" rel="noopener">✅</a></td><td align="center"><a href="https://about.gitlab.com/handbook/engineering/infrastructure/production/architecture/#service-architecture" target="_blank" rel="noopener">✅</a></td></tr><tr><td align="left"><a href="https://docs.gitlab.com/ee/development/architecture.html#praefect" target="_blank" rel="noopener">Praefect</a></td><td align="left">A transparent proxy between any Git client and Gitaly storage nodes.</td><td align="center"><a href="https://docs.gitlab.com/ee/administration/gitaly/index.html" target="_blank" rel="noopener">✅</a></td><td align="center"><a href="https://docs.gitlab.com/charts/charts/gitlab/gitaly/" target="_blank" rel="noopener">❌</a></td><td align="center"><a href="https://about.gitlab.com/handbook/engineering/infrastructure/production/architecture/#service-architecture" target="_blank" rel="noopener">✅</a></td></tr><tr><td align="left"><a href="https://docs.gitlab.com/ee/development/architecture.html#gitlab-workhorse" target="_blank" rel="noopener">GitLab Workhorse</a></td><td align="left">Smart reverse proxy, handles large HTTP requests</td><td align="center"><a href="https://gitlab.com/gitlab-org/omnibus-gitlab/blob/master/files/gitlab-config-template/gitlab.rb.template" target="_blank" rel="noopener">✅</a></td><td align="center"><a href="https://docs.gitlab.com/charts/charts/gitlab/unicorn/" target="_blank" rel="noopener">✅</a></td><td align="center"><a href="https://about.gitlab.com/handbook/engineering/infrastructure/production/architecture/#service-architecture" target="_blank" rel="noopener">✅</a></td></tr><tr><td align="left"><a href="https://docs.gitlab.com/ee/development/architecture.html#gitlab-shell" target="_blank" rel="noopener">GitLab Shell</a></td><td align="left">Handles <code>git</code> over SSH sessions</td><td align="center"><a href="https://gitlab.com/gitlab-org/omnibus-gitlab/blob/master/files/gitlab-config-template/gitlab.rb.template" target="_blank" rel="noopener">✅</a></td><td align="center"><a href="https://docs.gitlab.com/charts/charts/gitlab/gitlab-shell/" target="_blank" rel="noopener">✅</a></td><td align="center"><a href="https://about.gitlab.com/handbook/engineering/infrastructure/production/architecture/#service-architecture" target="_blank" rel="noopener">✅</a></td></tr><tr><td align="left"><a href="https://docs.gitlab.com/ee/development/architecture.html#gitlab-pages" target="_blank" rel="noopener">GitLab Pages</a></td><td align="left">Hosts static websites</td><td align="center"><a href="https://docs.gitlab.com/ee/administration/pages/index.html" target="_blank" rel="noopener">⚙</a></td><td align="center"><a href="https://gitlab.com/gitlab-org/charts/gitlab/issues/37" target="_blank" rel="noopener">❌</a></td><td align="center"><a href="https://docs.gitlab.com/ee/user/gitlab_com/index.html#gitlab-pages" target="_blank" rel="noopener">✅</a></td></tr><tr><td align="left"><a href="https://docs.gitlab.com/ee/development/architecture.html#registry" target="_blank" rel="noopener">Registry</a></td><td align="left">Container registry, allows pushing and pulling of images</td><td align="center"><a href="https://docs.gitlab.com/ee/administration/packages/container_registry.html#container-registry-domain-configuration" target="_blank" rel="noopener">⚙</a></td><td align="center"><a href="https://docs.gitlab.com/charts/charts/registry/" target="_blank" rel="noopener">✅</a></td><td align="center"><a href="https://docs.gitlab.com/ee/user/packages/container_registry/index.html#build-and-push-images-using-gitlab-cicd" target="_blank" rel="noopener">✅</a></td></tr><tr><td align="left"><a href="https://docs.gitlab.com/ee/development/architecture.html#redis" target="_blank" rel="noopener">Redis</a></td><td align="left">Caching service</td><td align="center"><a href="https://docs.gitlab.com/omnibus/settings/redis.html" target="_blank" rel="noopener">✅</a></td><td align="center"><a href="https://docs.gitlab.com/omnibus/settings/redis.html" target="_blank" rel="noopener">✅</a></td><td align="center"><a href="https://about.gitlab.com/handbook/engineering/infrastructure/production/architecture/#service-architecture" target="_blank" rel="noopener">✅</a></td></tr><tr><td align="left"><a href="https://docs.gitlab.com/ee/development/architecture.html#postgresql" target="_blank" rel="noopener">PostgreSQL</a></td><td align="left">Database</td><td align="center"><a href="https://docs.gitlab.com/omnibus/settings/database.html" target="_blank" rel="noopener">✅</a></td><td align="center"><a href="https://github.com/helm/charts/tree/master/stable/postgresql" target="_blank" rel="noopener">✅</a></td><td align="center"><a href="https://docs.gitlab.com/ee/user/gitlab_com/index.html#postgresql" target="_blank" rel="noopener">✅</a></td></tr><tr><td align="left"><a href="https://docs.gitlab.com/ee/development/architecture.html#pgbouncer" target="_blank" rel="noopener">PgBouncer</a></td><td align="left">Database connection pooling, failover</td><td align="center"><a href="https://docs.gitlab.com/ee/administration/high_availability/pgbouncer.html" target="_blank" rel="noopener">⚙</a></td><td align="center"><a href="https://docs.gitlab.com/charts/installation/deployment.html#postgresql" target="_blank" rel="noopener">❌</a></td><td align="center"><a href="https://about.gitlab.com/handbook/engineering/infrastructure/production/architecture/#database-architecture" target="_blank" rel="noopener">✅</a></td></tr><tr><td align="left"><a href="https://docs.gitlab.com/ee/development/architecture.html#consul" target="_blank" rel="noopener">Consul</a></td><td align="left">Database node discovery, failover</td><td align="center"><a href="https://docs.gitlab.com/ee/administration/high_availability/consul.html" target="_blank" rel="noopener">⚙</a></td><td align="center"><a href="https://docs.gitlab.com/charts/installation/deployment.html#postgresql" target="_blank" rel="noopener">❌</a></td><td align="center"><a href="https://docs.gitlab.com/ee/user/gitlab_com/index.html#consul" target="_blank" rel="noopener">✅</a></td></tr><tr><td align="left"><a href="https://docs.gitlab.com/ee/development/architecture.html#prometheus" target="_blank" rel="noopener">GitLab self-monitoring: Prometheus</a></td><td align="left">Time-series database, metrics collection, and query service</td><td align="center"><a href="https://docs.gitlab.com/ee/administration/monitoring/prometheus/index.html" target="_blank" rel="noopener">✅</a></td><td align="center"><a href="https://github.com/helm/charts/tree/master/stable/prometheus" target="_blank" rel="noopener">✅</a></td><td align="center"><a href="https://docs.gitlab.com/ee/user/gitlab_com/index.html#prometheus" target="_blank" rel="noopener">✅</a></td></tr><tr><td align="left"><a href="https://docs.gitlab.com/ee/development/architecture.html#alertmanager" target="_blank" rel="noopener">GitLab self-monitoring: Alertmanager</a></td><td align="left">Deduplicates, groups, and routes alerts from Prometheus</td><td align="center"><a href="https://gitlab.com/gitlab-org/omnibus-gitlab/blob/master/files/gitlab-config-template/gitlab.rb.template" target="_blank" rel="noopener">⚙</a></td><td align="center"><a href="https://github.com/helm/charts/tree/master/stable/prometheus" target="_blank" rel="noopener">✅</a></td><td align="center"><a href="https://about.gitlab.com/handbook/engineering/monitoring/" target="_blank" rel="noopener">✅</a></td></tr><tr><td align="left"><a href="https://docs.gitlab.com/ee/development/architecture.html#grafana" target="_blank" rel="noopener">GitLab self-monitoring: Grafana</a></td><td align="left">Metrics dashboard</td><td align="center"><a href="https://docs.gitlab.com/ee/administration/monitoring/performance/grafana_configuration.html" target="_blank" rel="noopener">✅</a></td><td align="center"><a href="https://github.com/helm/charts/tree/master/stable/grafana" target="_blank" rel="noopener">⤓</a></td><td align="center"><a href="https://dashboards.gitlab.com/d/RZmbBr7mk/gitlab-triage?refresh=30s" target="_blank" rel="noopener">✅</a></td></tr><tr><td align="left"><a href="https://docs.gitlab.com/ee/development/architecture.html#sentry" target="_blank" rel="noopener">GitLab self-monitoring: Sentry</a></td><td align="left">Track errors generated by the GitLab instance</td><td align="center"><a href="https://docs.gitlab.com/omnibus/settings/configuration.html#error-reporting-and-logging-with-sentry" target="_blank" rel="noopener">⤓</a></td><td align="center"><a href="https://gitlab.com/gitlab-org/charts/gitlab/issues/1319" target="_blank" rel="noopener">❌</a></td><td align="center"><a href="https://about.gitlab.com/handbook/support/workflows/500_errors.html#searching-sentry" target="_blank" rel="noopener">✅</a></td></tr><tr><td align="left"><a href="https://docs.gitlab.com/ee/development/architecture.html#jaeger" target="_blank" rel="noopener">GitLab self-monitoring: Jaeger</a></td><td align="left">View traces generated by the GitLab instance</td><td align="center"><a href="https://gitlab.com/gitlab-org/omnibus-gitlab/issues/4104" target="_blank" rel="noopener">❌</a></td><td align="center"><a href="https://gitlab.com/gitlab-org/charts/gitlab/issues/1320" target="_blank" rel="noopener">❌</a></td><td align="center"><a href="https://gitlab.com/gitlab-org/omnibus-gitlab/issues/4104" target="_blank" rel="noopener">❌</a></td></tr><tr><td align="left"><a href="https://docs.gitlab.com/ee/development/architecture.html#redis-exporter" target="_blank" rel="noopener">Redis Exporter</a></td><td align="left">Prometheus endpoint with Redis metrics</td><td align="center"><a href="https://docs.gitlab.com/ee/administration/monitoring/prometheus/redis_exporter.html" target="_blank" rel="noopener">✅</a></td><td align="center"><a href="https://docs.gitlab.com/charts/charts/redis/" target="_blank" rel="noopener">✅</a></td><td align="center"><a href="https://about.gitlab.com/handbook/engineering/monitoring/" target="_blank" rel="noopener">✅</a></td></tr><tr><td align="left"><a href="https://docs.gitlab.com/ee/development/architecture.html#postgresql-exporter" target="_blank" rel="noopener">PostgreSQL Exporter</a></td><td align="left">Prometheus endpoint with PostgreSQL metrics</td><td align="center"><a href="https://docs.gitlab.com/ee/administration/monitoring/prometheus/postgres_exporter.html" target="_blank" rel="noopener">✅</a></td><td align="center"><a href="https://github.com/helm/charts/tree/master/stable/postgresql" target="_blank" rel="noopener">✅</a></td><td align="center"><a href="https://about.gitlab.com/handbook/engineering/monitoring/" target="_blank" rel="noopener">✅</a></td></tr><tr><td align="left"><a href="https://docs.gitlab.com/ee/development/architecture.html#pgbouncer-exporter" target="_blank" rel="noopener">PgBouncer Exporter</a></td><td align="left">Prometheus endpoint with PgBouncer metrics</td><td align="center"><a href="https://docs.gitlab.com/ee/administration/monitoring/prometheus/pgbouncer_exporter.html" target="_blank" rel="noopener">⚙</a></td><td align="center"><a href="https://docs.gitlab.com/charts/installation/deployment.html#postgresql" target="_blank" rel="noopener">❌</a></td><td align="center"><a href="https://about.gitlab.com/handbook/engineering/monitoring/" target="_blank" rel="noopener">✅</a></td></tr><tr><td align="left"><a href="https://docs.gitlab.com/ee/development/architecture.html#gitlab-exporter" target="_blank" rel="noopener">GitLab Exporter</a></td><td align="left">Generates a variety of GitLab metrics</td><td align="center"><a href="https://docs.gitlab.com/ee/administration/monitoring/prometheus/gitlab_exporter.html" target="_blank" rel="noopener">✅</a></td><td align="center"><a href="https://docs.gitlab.com/charts/charts/gitlab/gitlab-exporter/index.html" target="_blank" rel="noopener">✅</a></td><td align="center"><a href="https://about.gitlab.com/handbook/engineering/monitoring/" target="_blank" rel="noopener">✅</a></td></tr><tr><td align="left"><a href="https://docs.gitlab.com/ee/development/architecture.html#node-exporter" target="_blank" rel="noopener">Node Exporter</a></td><td align="left">Prometheus endpoint with system metrics</td><td align="center"><a href="https://docs.gitlab.com/ee/administration/monitoring/prometheus/node_exporter.html" target="_blank" rel="noopener">✅</a></td><td align="center"><a href="https://gitlab.com/gitlab-org/charts/gitlab/issues/1332" target="_blank" rel="noopener">N/A</a></td><td align="center"><a href="https://about.gitlab.com/handbook/engineering/monitoring/" target="_blank" rel="noopener">✅</a></td></tr><tr><td align="left"><a href="https://docs.gitlab.com/ee/development/architecture.html#mattermost" target="_blank" rel="noopener">Mattermost</a></td><td align="left">Open-source Slack alternative</td><td align="center"><a href="https://docs.gitlab.com/omnibus/gitlab-mattermost/" target="_blank" rel="noopener">⚙</a></td><td align="center"><a href="https://docs.mattermost.com/install/install-mmte-helm-gitlab-helm.html" target="_blank" rel="noopener">⤓</a></td><td align="center"><a href="https://docs.gitlab.com/ee/user/project/integrations/mattermost.html" target="_blank" rel="noopener">⤓</a></td></tr><tr><td align="left"><a href="https://docs.gitlab.com/ee/development/architecture.html#minio" target="_blank" rel="noopener">MinIO</a></td><td align="left">Object storage service</td><td align="center"><a href="https://min.io/download" target="_blank" rel="noopener">⤓</a></td><td align="center"><a href="https://docs.gitlab.com/charts/charts/minio/" target="_blank" rel="noopener">✅</a></td><td align="center"><a href="https://about.gitlab.com/handbook/engineering/infrastructure/production/architecture/#storage-architecture" target="_blank" rel="noopener">✅</a></td></tr><tr><td align="left"><a href="https://docs.gitlab.com/ee/development/architecture.html#gitlab-runner" target="_blank" rel="noopener">Runner</a></td><td align="left">Executes GitLab CI/CD jobs</td><td align="center"><a href="https://docs.gitlab.com/runner/" target="_blank" rel="noopener">⤓</a></td><td align="center"><a href="https://docs.gitlab.com/runner/install/kubernetes.html" target="_blank" rel="noopener">✅</a></td><td align="center"><a href="https://docs.gitlab.com/ee/user/gitlab_com/index.html#shared-runners" target="_blank" rel="noopener">✅</a></td></tr><tr><td align="left"><a href="https://docs.gitlab.com/ee/development/architecture.html#database-migrations" target="_blank" rel="noopener">Database Migrations</a></td><td align="left">Database migrations</td><td align="center"><a href="https://docs.gitlab.com/omnibus/settings/database.html#disabling-automatic-database-migration" target="_blank" rel="noopener">✅</a></td><td align="center"><a href="https://docs.gitlab.com/charts/charts/gitlab/migrations/" target="_blank" rel="noopener">✅</a></td><td align="center">✅</td></tr><tr><td align="left"><a href="https://docs.gitlab.com/ee/development/architecture.html#certificate-management" target="_blank" rel="noopener">Certificate Management</a></td><td align="left">TLS Settings, Let’s Encrypt</td><td align="center"><a href="https://docs.gitlab.com/omnibus/settings/ssl.html" target="_blank" rel="noopener">✅</a></td><td align="center"><a href="https://docs.gitlab.com/charts/installation/tls.html" target="_blank" rel="noopener">✅</a></td><td align="center"><a href="https://about.gitlab.com/handbook/engineering/infrastructure/production/architecture/#secrets-management" target="_blank" rel="noopener">✅</a></td></tr><tr><td align="left"><a href="https://docs.gitlab.com/ee/development/architecture.html#gitlab-geo" target="_blank" rel="noopener">GitLab Geo Node</a></td><td align="left">Geographically distributed GitLab nodes</td><td align="center"><a href="https://docs.gitlab.com/ee/administration/geo/replication/index.html#setup-instructions" target="_blank" rel="noopener">⚙</a></td><td align="center"><a href="https://gitlab.com/gitlab-org/charts/gitlab/issues/8" target="_blank" rel="noopener">❌</a></td><td align="center">✅</td></tr><tr><td align="left"><a href="https://docs.gitlab.com/ee/development/architecture.html#ldap-authentication" target="_blank" rel="noopener">LDAP Authentication</a></td><td align="left">Authenticate users against centralized LDAP directory</td><td align="center"><a href="https://docs.gitlab.com/ee/administration/auth/ldap.html" target="_blank" rel="noopener">⤓</a></td><td align="center"><a href="https://docs.gitlab.com/charts/charts/globals.html#ldap" target="_blank" rel="noopener">⤓</a></td><td align="center"><a href="https://about.gitlab.com/pricing/#gitlab-com" target="_blank" rel="noopener">❌</a></td></tr><tr><td align="left"><a href="https://docs.gitlab.com/ee/development/architecture.html#outbound-email" target="_blank" rel="noopener">Outbound email (SMTP)</a></td><td align="left">Send email messages to users</td><td align="center"><a href="https://docs.gitlab.com/omnibus/settings/smtp.html" target="_blank" rel="noopener">⤓</a></td><td align="center"><a href="https://docs.gitlab.com/charts/installation/command-line-options.html#outgoing-email-configuration" target="_blank" rel="noopener">⤓</a></td><td align="center"><a href="https://docs.gitlab.com/ee/user/gitlab_com/index.html#mail-configuration" target="_blank" rel="noopener">✅</a></td></tr><tr><td align="left"><a href="https://docs.gitlab.com/ee/development/architecture.html#inbound-email" target="_blank" rel="noopener">Inbound email (SMTP)</a></td><td align="left">Receive messages to update issues</td><td align="center"><a href="https://docs.gitlab.com/ee/administration/incoming_email.html" target="_blank" rel="noopener">⤓</a></td><td align="center"><a href="https://docs.gitlab.com/charts/installation/command-line-options.html#incoming-email-configuration" target="_blank" rel="noopener">⤓</a></td><td align="center"><a href="https://docs.gitlab.com/ee/user/gitlab_com/index.html#mail-configuration" target="_blank" rel="noopener">✅</a></td></tr><tr><td align="left"><a href="https://docs.gitlab.com/ee/development/architecture.html#elasticsearch" target="_blank" rel="noopener">Elasticsearch</a></td><td align="left">Improved search within GitLab</td><td align="center"><a href="https://docs.gitlab.com/ee/integration/elasticsearch.html" target="_blank" rel="noopener">⤓</a></td><td align="center"><a href="https://docs.gitlab.com/ee/integration/elasticsearch.html" target="_blank" rel="noopener">⤓</a></td><td align="center"><a href="https://gitlab.com/groups/gitlab-org/-/epics/153" target="_blank" rel="noopener">❌</a></td></tr><tr><td align="left"><a href="https://docs.gitlab.com/ee/development/architecture.html#sentry" target="_blank" rel="noopener">Sentry integration</a></td><td align="left">Error tracking for deployed apps</td><td align="center"><a href="https://docs.gitlab.com/ee/user/project/operations/error_tracking.html" target="_blank" rel="noopener">⤓</a></td><td align="center"><a href="https://docs.gitlab.com/ee/user/project/operations/error_tracking.html" target="_blank" rel="noopener">⤓</a></td><td align="center"><a href="https://docs.gitlab.com/ee/user/project/operations/error_tracking.html" target="_blank" rel="noopener">⤓</a></td></tr><tr><td align="left"><a href="https://docs.gitlab.com/ee/development/architecture.html#jaeger" target="_blank" rel="noopener">Jaeger integration</a></td><td align="left">Distributed tracing for deployed apps</td><td align="center"><a href="https://docs.gitlab.com/ee/user/project/operations/tracing.html" target="_blank" rel="noopener">⤓</a></td><td align="center"><a href="https://docs.gitlab.com/ee/user/project/operations/tracing.html" target="_blank" rel="noopener">⤓</a></td><td align="center"><a href="https://docs.gitlab.com/ee/user/project/operations/tracing.html" target="_blank" rel="noopener">⤓</a></td></tr><tr><td align="left"><a href="https://docs.gitlab.com/ee/development/architecture.html#gitlab-managed-apps" target="_blank" rel="noopener">GitLab Managed Apps</a></td><td align="left">Deploy <a href="https://helm.sh/docs/" target="_blank" rel="noopener">Helm</a>, <a href="https://kubernetes.io/docs/concepts/services-networking/ingress/" target="_blank" rel="noopener">Ingress</a>, <a href="https://docs.cert-manager.io/en/latest/" target="_blank" rel="noopener">Cert-Manager</a>, <a href="https://prometheus.io/docs/introduction/overview/" target="_blank" rel="noopener">Prometheus</a>, a <a href="https://docs.gitlab.com/runner/" target="_blank" rel="noopener">Runner</a>, <a href="https://jupyter.org/" target="_blank" rel="noopener">JupyterHub</a>, <a href="https://cloud.google.com/knative/" target="_blank" rel="noopener">Knative</a> to a cluster</td><td align="center"><a href="https://docs.gitlab.com/ee/user/project/clusters/index.html#installing-applications" target="_blank" rel="noopener">⤓</a></td><td align="center"><a href="https://docs.gitlab.com/ee/user/project/clusters/index.html#installing-applications" target="_blank" rel="noopener">⤓</a></td><td align="center"><a href="https://docs.gitlab.com/ee/user/project/clusters/index.html#installing-applications" target="_blank" rel="noopener">⤓</a></td></tr></tbody></table><h2 id="安装-Gitlab"><a href="#安装-Gitlab" class="headerlink" title="安装 Gitlab"></a>安装 Gitlab</h2><p>咱遵从官方的建议，使用 Omnibus 包的方式来部署 Gitlab 实例。</p><h3 id="Ubuntu-1804"><a href="#Ubuntu-1804" class="headerlink" title="Ubuntu 1804"></a>Ubuntu 1804</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install openssh-server</span><br><span class="line">curl https://packages.gitlab.com/gpg.key 2&gt; /dev/null | sudo apt-key add - &amp;&gt;/dev/null</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加清华大学的镜像站源 bionic是 Ubuntu18.04 xenial是16.04，根据自己的 Ubuntu 发行版本修改一下下</span></span><br><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/gitlab-ce/ubuntu bionic main</span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install gitlab-ce</span><br><span class="line"></span><br><span class="line"><span class="comment"># 也可以考虑使用 wget 的方式把 deb 包下载下来</span></span><br><span class="line">wget https://mirrors.tuna.tsinghua.edu.cn/gitlab-ce/ubuntu/pool/bionic/main/g/gitlab-ce/gitlab-ce_12.3.5-ce.0_amd64.deb</span><br><span class="line"></span><br><span class="line">opkg -i gitlab-ce/gitlab-ce_12.3.5-ce.0_amd64.deb</span><br></pre></td></tr></table></figure><h3 id="CentOS7"><a href="#CentOS7" class="headerlink" title="CentOS7"></a>CentOS7</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装依赖</span></span><br><span class="line">sudo yum install -y curl policycoreutils-python openssh-server</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置防火墙</span></span><br><span class="line">sudo firewall-cmd --permanent --add-service=http</span><br><span class="line">sudo systemctl reload firewalld</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用清华大学镜像站的源，下载速度会快些。</span></span><br><span class="line">sudo cat &gt; /etc/yum.repos.d/gitlab-ce.repo &lt;&lt;EOF</span><br><span class="line">[gitlab-ce]</span><br><span class="line">name=Gitlab CE Repository</span><br><span class="line">baseurl=https://mirrors.tuna.tsinghua.edu.cn/gitlab-ce/yum/el7/</span><br><span class="line">gpgcheck=0</span><br><span class="line">enabled=1</span><br><span class="line">Ece</span><br><span class="line"></span><br><span class="line">sudo yum makecache</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看可用的版本neng'b</span></span><br><span class="line">yum list gitlab-ce --showduplicates</span><br><span class="line"><span class="comment"># 然后安装最新的版本</span></span><br><span class="line">yum install -y gitlab-ce</span><br><span class="line"><span class="comment"># 安装指定版本 12.3.5</span></span><br><span class="line">yum install gitlab-ce-12.3.5-ce.0.el7.x86_64.rpm</span><br><span class="line"></span><br><span class="line"><span class="comment"># 也可以使用 wget 的方式把 rpm 包下载下来安装</span></span><br><span class="line">wget https://mirrors.tuna.tsinghua.edu.cn/gitlab-ce/yum/el7/gitlab-ce-12.8.2-ce.0.el7.x86_64.rpm</span><br><span class="line">yum install gitlab-ce-12.8.2-ce.0.el7.x86_64.rpm</span><br></pre></td></tr></table></figure><p>安装成功之后会出现 Gitlab 的 Logo</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">       *.                  *.</span><br><span class="line">      ***                 ***</span><br><span class="line">     *****               *****</span><br><span class="line">    .******             *******</span><br><span class="line">    ********            ********</span><br><span class="line">   ,,,,,,,,,***********,,,,,,,,,</span><br><span class="line">  ,,,,,,,,,,,*********,,,,,,,,,,,</span><br><span class="line">  .,,,,,,,,,,,*******,,,,,,,,,,,,</span><br><span class="line">      ,,,,,,,,,*****,,,,,,,,,.</span><br><span class="line">         ,,,,,,,****,,,,,,</span><br><span class="line">            .,,,***,,,,</span><br><span class="line">                ,*,.</span><br><span class="line"></span><br><span class="line">     _______ __  __          __</span><br><span class="line">    / ____(_) /_/ /   ____ _/ /_</span><br><span class="line">   / / __/ / __/ /   / __ `/ __ \</span><br><span class="line">  / /_/ / / /_/ /___/ /_/ / /_/ /</span><br><span class="line">  \____/_/\__/_____/\__,_/_.___/</span><br><span class="line"></span><br><span class="line">Thank you for installing GitLab!</span><br><span class="line">GitLab was unable to detect a valid hostname for your instance.</span><br><span class="line">Please configure a URL for your GitLab instance by setting `external_url`</span><br><span class="line">configuration in /etc/gitlab/gitlab.rb file.</span><br><span class="line">Then, you can start your GitLab instance by running the following command:</span><br><span class="line">  sudo gitlab-ctl reconfigure</span><br></pre></td></tr></table></figure><h3 id="2-打补丁，补充汉化的补丁"><a href="#2-打补丁，补充汉化的补丁" class="headerlink" title="2.打补丁，补充汉化的补丁"></a>2.打补丁，补充汉化的补丁</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://gitlab.com/xhang/gitlab.git</span><br><span class="line"><span class="built_in">cd</span> gitlab</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取当前安装的版本</span></span><br><span class="line">gitlab_version=$(cat /opt/gitlab/embedded/service/gitlab-rails/VERSION)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成对应版本补丁文件</span></span><br><span class="line">git diff v<span class="variable">$&#123;gitlab_version&#125;</span> v<span class="variable">$&#123;gitlab_version&#125;</span>-zh &gt; ../<span class="variable">$&#123;gitlab_version&#125;</span>-zh.diff</span><br><span class="line"></span><br><span class="line">gitlab-ctl stop</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打补丁的时候会提示一些补丁文件不存在，一定要跳过这些文件，不然后面reconfig的时候会报错的。</span></span><br><span class="line">patch -d /opt/gitlab/embedded/service/gitlab-rails -p1 &lt; <span class="variable">$&#123;gitlab_version&#125;</span>-zh.diff</span><br></pre></td></tr></table></figure><h3 id="3-修改默认配置"><a href="#3-修改默认配置" class="headerlink" title="3. 修改默认配置"></a>3. 修改默认配置</h3><p>修改 gitlab 的配置文件 <code>/etc/gitlab/gitlab.rb</code></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 修改为你自己的域名或者 IP，是单引号，而且前面的 http 不要改</span></span><br><span class="line">external_url  'http://gitlab.domain'</span><br><span class="line"></span><br><span class="line"><span class="comment"># 邮件配置，没有邮件服务器可以关闭邮件服务功能</span></span><br><span class="line">gitlab_rails['smtp_enable'] = false</span><br><span class="line">gitlab_rails['smtp_address'] = ""</span><br><span class="line">gitlab_rails['smtp_port'] =  587</span><br><span class="line">gitlab_rails['smtp_user_name'] = ""</span><br><span class="line">gitlab_rails['smtp_password'] = ""</span><br><span class="line">gitlab_rails['smtp_authentication'] = ""</span><br><span class="line">gitlab_rails['smtp_enable_starttls_auto'] =</span><br><span class="line">gitlab_rails['smtp_tls'] =</span><br><span class="line">gitlab_rails['gitlab_email_from'] = ''</span><br></pre></td></tr></table></figure><h3 id="4-初始化设置"><a href="#4-初始化设置" class="headerlink" title="4. 初始化设置"></a>4. 初始化设置</h3><p>修改完成配置之后使用 <code>gitlab-ctl reconfigure</code> 重新更新一下 gitlab 服务的配置，更新完成配置之后使用<br><code>gitlab-ctl restart</code> 来重新启动 gitlab 。如果 reconfigure 失败，则需要 <code>systemctl enable gitlab- runsvdir &amp;&amp; systemctl restart gitlab- runsvdir</code> 重启一下  <code>gitlab-runsvdir</code> 服务。</p><p>打开浏览器进行初始化账户设定密码，这个密码为 root 管理员账户的密码。设置完密码之后会自动跳转到登录页面。username 为 <code>root</code> 密码为刚刚设置的密码。</p><h2 id="安装-gitlab-runner"><a href="#安装-gitlab-runner" class="headerlink" title="安装 gitlab-runner"></a>安装 gitlab-runner</h2><h3 id="Debian-Ubuntu"><a href="#Debian-Ubuntu" class="headerlink" title="Debian/Ubuntu"></a>Debian/Ubuntu</h3><p>首先信任 GitLab 的 GPG 公钥:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl https://packages.gitlab.com/gpg.key 2&gt; /dev/null | sudo apt-key add - &amp;&gt;/dev/null</span><br></pre></td></tr></table></figure><p>再选择你的 Debian/Ubuntu 版本，文本框中内容写进 <code>/etc/apt/sources.list.d/gitlab-runner.list</code></p><h4 id="Debian"><a href="#Debian" class="headerlink" title="Debian"></a>Debian</h4><p>根据自己的发行版代号修改一下 <code>stretch</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">deb http://mirrors.tuna.tsinghua.edu.cn/gitlab-runner/debian stretch main</span><br></pre></td></tr></table></figure><h4 id="Ubuntu"><a href="#Ubuntu" class="headerlink" title="Ubuntu"></a>Ubuntu</h4><p>根据自己的发行版代号修改一下 <code>bionic</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/gitlab-runner/ubuntu bionic main</span><br></pre></td></tr></table></figure><p>配置好 deb 源之后再执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt uodate</span><br><span class="line">apt install gitlab-runner -y</span><br></pre></td></tr></table></figure><h3 id="CentOS7-1"><a href="#CentOS7-1" class="headerlink" title="CentOS7"></a>CentOS7</h3><p>新建 <code>/etc/yum.repos.d/gitlab-runner.repo</code>，内容为</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[gitlab-runner]</span><br><span class="line">name=gitlab-runner</span><br><span class="line">baseurl=https://mirrors.tuna.tsinghua.edu.cn/gitlab-runner/yum/el7</span><br><span class="line">repo_gpgcheck=0</span><br><span class="line">gpgcheck=0</span><br><span class="line">enabled=1</span><br><span class="line">gpgkey=https://packages.gitlab.com/gpg.key</span><br></pre></td></tr></table></figure><p>再执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo yum makecache</span><br><span class="line">sudo yum install gitlab-runner -y</span><br><span class="line"><span class="comment"># 安装指定版本 其中 12.3.5 即为指定的版本号</span></span><br><span class="line">yum install gitlab-runner-12.3.5-1.x86_64 -y</span><br></pre></td></tr></table></figure><h3 id="注册-gitlab-runner"><a href="#注册-gitlab-runner" class="headerlink" title="注册 gitlab-runner"></a>注册 gitlab-runner</h3><p>使用 root 用户从 web 端登录到 gitlab 管理中心。在 <code>概览</code> –&gt; <code>Runner</code> 。在右上角会有以下，稍后会用到。</p><ul><li>在 Runner 设置时指定以下 URL</li><li>在安装过程中使用以下注册令牌：</li></ul><p>安装好 gitlab-runner 之后如果直接向 gitlab 注册则会提示失败，提示 <code>ERROR: Registering runner... failed   runner=qRGh2M86 status=500 Internal Server Error</code> 。这是因为 Gitlab 默认禁止了私有网段 IP 里的 API 请求，需要手动开启才行。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">╭─root@gitlab ~</span><br><span class="line">╰─<span class="comment"># gitlab-runner register</span></span><br><span class="line">Runtime platform   arch=amd64 os=linux pid=6818 revision=1b659122 version=12.8.0</span><br><span class="line">Running <span class="keyword">in</span> system-mode.</span><br><span class="line">Please enter the gitlab-ci coordinator URL (e.g. https://gitlab.com/):</span><br><span class="line">http://10.10.107.216/</span><br><span class="line">Please enter the gitlab-ci token <span class="keyword">for</span> this runner:</span><br><span class="line">qRGh2M86iTasjBn1dU8L</span><br><span class="line">Please enter the gitlab-ci description <span class="keyword">for</span> this runner:</span><br><span class="line">[gitlab]: runner-centos</span><br><span class="line">Please enter the gitlab-ci tags <span class="keyword">for</span> this runner (comma separated):</span><br><span class="line">centos</span><br><span class="line">ERROR: Registering runner... failed   runner=qRGh2M86 status=500 Internal Server Error</span><br><span class="line">PANIC: Failed to register this runner. Perhaps you are having network problems</span><br></pre></td></tr></table></figure><h3 id="修改-gitlab-默认网络设置"><a href="#修改-gitlab-默认网络设置" class="headerlink" title="修改 gitlab 默认网络设置"></a>修改 gitlab 默认网络设置</h3><p>使用 root 用户从 web 端登录到 gitlab 管理中心 http://${ip}/admin 。管理中心 –&gt; 设置 –&gt; 网络 –&gt; 外发请求 –&gt; 允许来自钩子和服务的对本地网络的请求。以下选项全部允许，才能通过外部请求的方式注册 gitlab-runner。</p><ul><li>Allow requests to the local network from web hooks and services</li><li>Allow requests to the local network from system hooks</li></ul><p><strong>为了安全起见</strong>，也可以在 Whitelist to allow requests to the local network from hooks and services 下方的那个框框里添加上白名单，允许授权的 IP 。修改好之后不要忘记点击底部那个绿色按钮 <code>保存修改</code> 。</p><h4 id="500-错误"><a href="#500-错误" class="headerlink" title="500 错误"></a>500 错误</h4><p>如果点击 <code>保存修改</code> 之后就跳转到 Gitlab 500 错误的页面。尝试在管理中心修改其他设置保存时，也会出现 500 的情况。在安装 gitlab 的机器上查看一下日志。运行 <code>gitlab-ctl tail</code> 查看实时的日志。此时等到日志输出减慢的时候我们多按几下回车，然后就立即去点击<code>保存修改</code>  按钮，这样就能捕捉到此刻的错误日志。</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">==&gt; /<span class="keyword">var</span>/log/gitlab/gitlab-rails/production<span class="variable">.log</span> &lt;==</span><br><span class="line">Started PATCH <span class="string">"/admin/application_settings/network"</span> <span class="keyword">for</span> <span class="number">10</span><span class="variable">.0</span><span class="variable">.30</span><span class="variable">.2</span> at <span class="number">2020</span>-<span class="number">03</span>-<span class="number">10</span> <span class="number">11</span>:<span class="number">08</span>:<span class="number">20</span> +<span class="number">0000</span></span><br><span class="line">Processing by Admin::ApplicationSettingsController#network as HTML</span><br><span class="line">  Parameters: &#123;<span class="string">"utf8"</span>=&gt;<span class="string">"✓"</span>, <span class="string">"authenticity_token"</span>=&gt;<span class="string">"[FILTERED]"</span>, <span class="string">"application_setting"</span>=&gt;&#123;<span class="string">"allow_local_requests_from_web_hooks_and_services"</span>=&gt;<span class="string">"[FILTERED]"</span>, <span class="string">"allow_local_requests_from_system_hooks"</span>=&gt;<span class="string">"[FILTERED]"</span>, <span class="string">"outbound_local_requests_whitelist_raw"</span>=&gt;<span class="string">""</span>, <span class="string">"dns_rebinding_protection_enabled"</span>=&gt;<span class="string">"1"</span>&#125;&#125;</span><br><span class="line">Completed <span class="number">500</span> Internal Server Error in <span class="number">40</span>ms (ActiveRecord: <span class="number">14</span><span class="variable">.5ms</span> | Elasticsearch: <span class="number">0</span><span class="variable">.0ms</span>)</span><br><span class="line">OpenSSL::Cipher::CipherError ():</span><br><span class="line">lib/gitlab/crypto_helper<span class="variable">.rb</span>:<span class="number">27</span>:in <span class="meta">`aes256_gcm_decrypt'</span></span><br></pre></td></tr></table></figure><p>其中错误的输出是在 <code>OpenSSL::Cipher::CipherError ():</code></p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Processing by Admin::ApplicationSettingsController#network as HTML</span><br><span class="line">  Parameters: &#123;<span class="string">"utf8"</span>=&gt;<span class="string">"✓"</span>, <span class="string">"authenticity_token"</span>=&gt;<span class="string">"[FILTERED]"</span>, <span class="string">"application_setting"</span>=&gt;&#123;<span class="string">"allow_local_requests_from_web_hooks_and_services"</span>=&gt;<span class="string">"[FILTERED]"</span>, <span class="string">"allow_local_requests_from_system_hooks"</span>=&gt;<span class="string">"[FILTERED]"</span>, <span class="string">"outbound_local_requests_whitelist_raw"</span>=&gt;<span class="string">""</span>, <span class="string">"dns_rebinding_protection_enabled"</span>=&gt;<span class="string">"1"</span>&#125;&#125;</span><br><span class="line">Completed <span class="number">500</span> Internal Server Error in <span class="number">40</span>ms (ActiveRecord: <span class="number">14</span><span class="variable">.5ms</span> | Elasticsearch: <span class="number">0</span><span class="variable">.0ms</span>)</span><br><span class="line">OpenSSL::Cipher::CipherError ():</span><br></pre></td></tr></table></figure><blockquote><p>搜索了一下，发现网上说是由于迁移导入项目后，没有导入原来的加密信息<code>/etc/gitlab/gitlab-secrets.json</code>， 但是原来的加密信息文件我已经找不到了，后面发现可以直接重置就行了</p><p>参考 <a href="https://hihozhou.com/blog/2019/08/01/gitlab-500.html" target="_blank" rel="noopener">自搭gitlab报500错误</a></p></blockquote><p>命令行输入<code>gitlab-rails console</code>，然后输入</p><p><code>ApplicationSetting.current.reset_runners_registration_token!</code>即可，这样在保存修改的时候就不会再报 500 的问题了。应该是重新安装 Gitlab 之后的加密信息不对所致。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">╭─root@gitlab ~</span><br><span class="line">╰─<span class="comment"># gitlab-rails console</span></span><br><span class="line">--------------------------------------------------------------------------------</span><br><span class="line"> GitLab:       12.3.5 (2417d5becc7)</span><br><span class="line"> GitLab Shell: 10.0.0</span><br><span class="line"> PostgreSQL:   10.9</span><br><span class="line">--------------------------------------------------------------------------------</span><br><span class="line">Loading production environment (Rails 5.2.3)</span><br><span class="line">irb(main):001:0&gt; ApplicationSetting.current.reset_runners_registration_token!</span><br><span class="line">=&gt; <span class="literal">true</span></span><br><span class="line">irb(main):002:0&gt; <span class="built_in">exit</span></span><br></pre></td></tr></table></figure><h3 id="在项目中注册-Runner"><a href="#在项目中注册-Runner" class="headerlink" title="在项目中注册 Runner"></a>在项目中注册 Runner</h3><p>以上已经安装好并修改默认的网络设置允许 runner 所在的 IP 向 gitlab 发起外部请求。运行 <code>gitlab-runner register</code> 根据相应的提示输入 <code>URL</code> 和 <code>token</code> 即可。最后根据机器的类型选择好 runner 的类型，这个也是跑 CI 任务时的环境，到时候可以在项目的设置中选择启动相应的 runner 。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">╭─root@runner ~</span><br><span class="line">╰─<span class="comment"># gitlab-runner register</span></span><br><span class="line">Runtime platform   arch=amd64 os=linux pid=7501 revision=1b659122 version=12.8.0</span><br><span class="line">Running <span class="keyword">in</span> system-mode.</span><br><span class="line">Please enter the gitlab-ci coordinator URL (e.g. https://gitlab.com/):</span><br><span class="line">http://10.10.107.216/</span><br><span class="line">Please enter the gitlab-ci token <span class="keyword">for</span> this runner:</span><br><span class="line">4hjjA7meRGuxEm3LyMjq</span><br><span class="line">Please enter the gitlab-ci description <span class="keyword">for</span> this runner:</span><br><span class="line">[runner]:</span><br><span class="line">Please enter the gitlab-ci tags <span class="keyword">for</span> this runner (comma separated):</span><br><span class="line">centos</span><br><span class="line">Registering runner... succeeded                     runner=4hjjA7me</span><br><span class="line">Please enter the executor: shell, ssh, virtualbox, docker-ssh+machine, kubernetes, docker, docker-ssh, parallels, docker+machine, custom:</span><br><span class="line">[shell]: shell</span><br><span class="line">Runner registered successfully. Feel free to start it, but <span class="keyword">if</span> it<span class="string">'s running already the config should be automatically reloaded!</span></span><br></pre></td></tr></table></figure><ul><li>提示成功之后然后在 <code>管理中心</code>–&gt; <code>概览</code> –&gt; <code>Runner</code> 可以查看到相应的 Runner 了。也可以手动编辑 <code>/etc/gitlab-runner/config.toml</code> 来注册相应类型的  Runner</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">concurrent</span> = <span class="number">1</span></span><br><span class="line"><span class="attr">check_interval</span> = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="section">[session_server]</span></span><br><span class="line">  session_timeout = 1800</span><br><span class="line"></span><br><span class="line"><span class="section">[[runners]]</span></span><br><span class="line">  name = "runner"</span><br><span class="line">  url = "http://10.10.107.216/"</span><br><span class="line">  token = "ZTSAQ3q6x_upW9toyKTY"</span><br><span class="line">  executor = "shell"</span><br><span class="line">  <span class="section">[runners.custom_build_dir]</span></span><br><span class="line">  <span class="section">[runners.cache]</span></span><br><span class="line">    <span class="section">[runners.cache.s3]</span></span><br><span class="line">    <span class="section">[runners.cache.gcs]</span></span><br><span class="line"></span><br><span class="line"><span class="section">[[runners]]</span></span><br><span class="line">  name = "docker-runner"</span><br><span class="line">  url = "http://10.10.107.216/"</span><br><span class="line">  token = "Cf1cy6yx4Y-bGjVnRf8m"</span><br><span class="line">  executor = "docker"</span><br><span class="line">  <span class="section">[runners.custom_build_dir]</span></span><br><span class="line">  <span class="section">[runners.cache]</span></span><br><span class="line">    <span class="section">[runners.cache.s3]</span></span><br><span class="line">    <span class="section">[runners.cache.gcs]</span></span><br><span class="line">  <span class="section">[runners.docker]</span></span><br><span class="line">  <span class="comment"># 在这里需要添加上 harbor 的地址，才能允许 pull 私有 registry 的镜像</span></span><br><span class="line">    allowed_images = ["10.10.107.217/*:*"]</span><br><span class="line">    tls_verify = false</span><br><span class="line">    image = "golang:latest"</span><br><span class="line">    privileged = true</span><br><span class="line">    disable_entrypoint_overwrite = false</span><br><span class="line">    oom_kill_disable = false</span><br><span class="line">    disable_cache = false</span><br><span class="line">    volumes = ["/cache"]</span><br><span class="line">    shm_size = 0</span><br></pre></td></tr></table></figure><h2 id="部署-Harbor"><a href="#部署-Harbor" class="headerlink" title="部署 Harbor"></a>部署 Harbor</h2><ul><li>在 harbor 项目的 release 页面下载离线安装包 <a href="https://github.com/goharbor/harbor/releases/download/v1.9.4/harbor-offline-installer-v1.9.4.tgz" target="_blank" rel="noopener">harbor-offline-installer-v1.9.4.tgz</a> 到部署的机器上。部署之前需要安装好 <code>docker</code> 和 <code>docker-compose</code> 。之后再修改 <code>harbor.yml</code> 配置文件中的以下内容：</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># hostname 需要修改为相应的域名或者 IP</span></span><br><span class="line"><span class="attr">hostname:</span> <span class="number">10.10</span><span class="number">.107</span><span class="number">.217</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># http related config</span></span><br><span class="line"><span class="attr">http:</span></span><br><span class="line">  <span class="comment"># port for http, default is 80. If https enabled, this port will redirect to https port</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 首次登录时设定的 admin 账户密码</span></span><br><span class="line"><span class="attr">harbor_admin_password:</span> <span class="string">Harbor12345</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 数据存储的目录</span></span><br><span class="line"><span class="attr">data_volume:</span> <span class="string">/data</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># clair CVE 漏洞数据库更新，这里建议设置为 1h</span></span><br><span class="line"><span class="comment"># 由于 clair 数据库在国内网络访问问题，需要设置 http 代理</span></span><br><span class="line"><span class="attr">clair:</span></span><br><span class="line">  <span class="comment"># The interval of clair updaters, the unit is hour, set to 0 to disable the updaters.</span></span><br><span class="line">  <span class="attr">updaters_interval:</span> <span class="number">1</span></span><br><span class="line"><span class="attr">proxy:</span></span><br><span class="line">  <span class="attr">http_proxy:</span> <span class="number">10.20</span><span class="number">.172</span><span class="number">.106</span><span class="string">:2080</span></span><br><span class="line">  <span class="attr">https_proxy:</span></span><br><span class="line">  <span class="attr">no_proxy:</span></span><br><span class="line">  <span class="attr">components:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">clair</span></span><br></pre></td></tr></table></figure><ul><li>修改完配置文件之后再运行 <code>./install.sh --with-clair --with-chartmuseum</code> 将 clair 集成到 harbor 中。</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">╭─root@harbor /opt/harbor</span><br><span class="line">╰─# ./install.sh --with-clair --with-chartmuseum</span><br><span class="line">[Step 0]: checking installation environment ...</span><br><span class="line">[Step 1]: loading Harbor images ...</span><br><span class="line">[Step 2]: preparing environment ...</span><br><span class="line">[Step 3]: starting Harbor ...</span><br><span class="line">Creating network "harbor_harbor" with the default driver</span><br><span class="line">Creating network "harbor_harbor-clair" with the default driver</span><br><span class="line">Creating network "harbor_harbor-chartmuseum" with the default driver</span><br><span class="line">Creating harbor-log ... done</span><br><span class="line">Creating harbor-db     ... done</span><br><span class="line">Creating registryctl   ... done</span><br><span class="line">Creating harbor-portal ... done</span><br><span class="line">Creating chartmuseum   ... done</span><br><span class="line">Creating registry      ... done</span><br><span class="line">Creating redis         ... done</span><br><span class="line">Creating clair         ... done</span><br><span class="line">Creating harbor-core   ... done</span><br><span class="line">Creating harbor-jobservice ... done</span><br><span class="line">Creating nginx             ... done</span><br><span class="line"></span><br><span class="line">✔ ----Harbor has been installed and started successfully.----</span><br><span class="line"></span><br><span class="line">Now you should be able to visit the admin portal at http://10.20.172.236.</span><br><span class="line">For more details, please visit https://github.com/goharbor/harbor .</span><br></pre></td></tr></table></figure><ul><li>使用 <code>docker-compose ps</code> 检查 harbor 相关容器是否正常。</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">╭─root@harbor /opt/harbor</span><br><span class="line">╰─# docker-compose ps</span><br><span class="line">      Name                     Command                  State                 Ports</span><br><span class="line">---------------------------------------------------------------------------------------------</span><br><span class="line">chartmuseum         /docker-entrypoint.sh            Up (healthy)   9999/tcp</span><br><span class="line">clair               /docker-entrypoint.sh            Up (healthy)   6060/tcp, 6061/tcp</span><br><span class="line">harbor-core         /harbor/harbor_core              Up (healthy)</span><br><span class="line">harbor-db           /docker-entrypoint.sh            Up (healthy)   5432/tcp</span><br><span class="line">harbor-jobservice   /harbor/harbor_jobservice  ...   Up (healthy)</span><br><span class="line">harbor-log          /bin/sh -c /usr/local/bin/ ...   Up (healthy)   127.0.0.1:1514-&gt;10514/tcp</span><br><span class="line">harbor-portal       nginx -g daemon off;             Up (healthy)   8080/tcp</span><br><span class="line">nginx               nginx -g daemon off;             Up (healthy)   0.0.0.0:80-&gt;8080/tcp</span><br><span class="line">redis               redis-server /etc/redis.conf     Up (healthy)   6379/tcp</span><br><span class="line">registry            /entrypoint.sh /etc/regist ...   Up (healthy)   5000/tcp</span><br><span class="line">registryctl         /harbor/start.sh                 Up (healthy)</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/muzi502/blog/source/img/image-20200326163733610.png" alt="image-20200326163733610"></p><h3 id="设置-insecure-registry"><a href="#设置-insecure-registry" class="headerlink" title="设置 insecure registry"></a>设置 insecure registry</h3><ul><li>在 runner 服务器上设置一下 <code>/etc/docker/daemon.json</code> 将私有 registry 的 IP 地址填入到 <code>insecure-registries</code> 数组中。这样才可以推送和拉取镜像</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"insecure-registries"</span> : [<span class="string">"10.10.107.217"</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>使用 <code>docker login</code> 测试是否能登录成功：</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">╭─root@docker-230 /opt</span><br><span class="line">╰─# docker login 10.10.107.217</span><br><span class="line">Username: admin</span><br><span class="line">Password:</span><br><span class="line">WARNING! Your password will be stored unencrypted in /root/.docker/config.json.</span><br><span class="line">Configure a credential helper to remove this warning. See</span><br><span class="line">https://docs.docker.com/engine/reference/commandline/login/#credentials-store</span><br><span class="line">Login Succeeded</span><br></pre></td></tr></table></figure><ul><li>登录到 harbor 新建一个项目仓库，并按照 <code>docker tag SOURCE_IMAGE[:TAG] 10.20.172.236/ciest/IMAGE[:TAG]</code> 格式给本地 docker 镜像打上 tag 并测试推送到 harbor 是否成功。</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">╭─root@docker-230 /opt</span><br><span class="line">╰─# docker tag openjdk:8-jdk-alpine 10.10.107.217/ops/openjdk:8-jdk-alpine</span><br><span class="line">╭─root@docker-230 /opt</span><br><span class="line">╰─# docker push !$</span><br><span class="line">╭─root@docker-230 /opt</span><br><span class="line">╰─# docker push 10.10.107.217/ops/openjdk:8-jdk-alpine</span><br><span class="line">The push refers to repository [10.10.107.217/ops/openjdk]</span><br><span class="line">ceaf9e1ebef5: Mounted from ops/ci-test</span><br><span class="line">9b9b7f3d56a0: Mounted from ops/ci-test</span><br><span class="line">f1b5933fe4b5: Mounted from ops/ci-test</span><br><span class="line">8-jdk-alpine: digest: sha256:44b3cea369c947527e266275cee85c71a81f20fc5076f6ebb5a13f19015dce71 size: 947</span><br></pre></td></tr></table></figure><ul><li>在 harbor 项目的页面查看是否推送成功</li></ul><p><img src="https://cdn.jsdelivr.net/gh/muzi502/blog/source/img/image-20200326170403918.png" alt="image-20200326170403918"></p><h2 id="测试-CI-CD-项目"><a href="#测试-CI-CD-项目" class="headerlink" title="测试 CI/CD 项目"></a>测试 CI/CD 项目</h2><ul><li>在 Gitlab 中使用 Spring 模板新建一个项目，并添加 <code>.gitlab-ci.yaml</code> 配置文件。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/muzi502/blog/source/img/image-20200326170523433.png" alt="image-20200326170523433"></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">stages:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">build</span></span><br><span class="line"><span class="attr">build-master:</span></span><br><span class="line">  <span class="comment"># Official docker image.</span></span><br><span class="line">  <span class="attr">image:</span> <span class="string">docker:latest</span></span><br><span class="line">  <span class="attr">tags:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">maven-runner</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">build</span></span><br><span class="line">  <span class="attr">services:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">docker:dind</span></span><br><span class="line">  <span class="attr">before_script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">docker</span> <span class="string">login</span> <span class="string">-u</span> <span class="string">"$CI_REGISTRY_USER"</span> <span class="string">-p</span> <span class="string">"$CI_REGISTRY_PASSWORD"</span> <span class="string">$CI_REGISTRY</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">docker</span> <span class="string">info</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">docker</span> <span class="string">build</span> <span class="string">--pull</span> <span class="string">-t</span> <span class="string">"$CI_REGISTRY_IMAGE"</span> <span class="string">.</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">docker</span> <span class="string">push</span> <span class="string">"$CI_REGISTRY_IMAGE"</span></span><br><span class="line">  <span class="attr">allow_failure:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="attr">build:</span></span><br><span class="line">  <span class="comment"># Official docker image.</span></span><br><span class="line">  <span class="attr">image:</span> <span class="string">docker:latest</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">build</span></span><br><span class="line">  <span class="attr">services:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">docker:dind</span></span><br><span class="line">  <span class="attr">before_script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">docker</span> <span class="string">login</span> <span class="string">-u</span> <span class="string">"$CI_REGISTRY_USER"</span> <span class="string">-p</span> <span class="string">"$CI_REGISTRY_PASSWORD"</span> <span class="string">$CI_REGISTRY</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">docker</span> <span class="string">build</span> <span class="string">--pull</span> <span class="string">-t</span> <span class="string">"$CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG"</span> <span class="string">.</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">docker</span> <span class="string">push</span> <span class="string">"$CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG"</span></span><br><span class="line">  <span class="attr">except:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">master</span></span><br></pre></td></tr></table></figure><h3 id="gitlab-ci-yaml"><a href="#gitlab-ci-yaml" class="headerlink" title=".gitlab-ci.yaml"></a>.gitlab-ci.yaml</h3><p><code>.gitlab-ci.yaml</code> 文件的配置高度依赖于项目本身，以及 CI/CD 流水线的需求。其配置文件主要由以下部分组成：</p><h4 id="Pipeline"><a href="#Pipeline" class="headerlink" title="Pipeline"></a>Pipeline</h4><p>一次 Pipeline 其实相当于一次构建任务，里面可以包含很多个流程，如安装依赖、运行测试、编译、部署测试服务器、部署生产服务器等流程。任何提交或者 Merge Request 的合并都可以触发 Pipeline 构建，如下图所示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">+------------------+           +----------------+</span><br><span class="line">|                  |  trigger  |                |</span><br><span class="line">|   Commit &#x2F; MR    +----------&gt;+    Pipeline    |</span><br><span class="line">|                  |           |                |</span><br><span class="line">+------------------+           +----------------+</span><br></pre></td></tr></table></figure><h4 id="Stages"><a href="#Stages" class="headerlink" title="Stages"></a>Stages</h4><p>Stages 表示一个构建阶段，也就是上面提到的一个流程。我们可以在一次 Pipeline 中定义多个 Stages，这些 Stages 会有以下特点：</p><ul><li>所有 Stages 会按照顺序运行，即当一个 Stage 完成后，下一个 Stage 才会开始</li><li>只有当所有 Stages 完成后，该构建任务 (Pipeline) 才会成功</li><li>如果任何一个 Stage 失败，那么后面的 Stages 不会执行，该构建任务 (Pipeline) 失败</li></ul><p>Stages 和 Pipeline 的关系如下所示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">+--------------------------------------------------------+</span><br><span class="line">|                                                        |</span><br><span class="line">|  Pipeline                                              |</span><br><span class="line">|                                                        |</span><br><span class="line">|  +-----------+     +------------+      +------------+  |</span><br><span class="line">|  |  Stage 1  |----&gt;|   Stage 2  |-----&gt;|   Stage 3  |  |</span><br><span class="line">|  +-----------+     +------------+      +------------+  |</span><br><span class="line">|                                                        |</span><br><span class="line">+--------------------------------------------------------+</span><br></pre></td></tr></table></figure><h4 id="Jobs"><a href="#Jobs" class="headerlink" title="Jobs"></a>Jobs</h4><p>Jobs 表示构建工作，表示某个 Stage 里面执行的工作。我们可以在 Stages 里面定义多个 Jobs，这些 Jobs 会有以下特点：</p><ul><li>相同 Stage 中的 Jobs 会并行执行</li><li>相同 Stage 中的 Jobs 都执行成功时，该 Stage 才会成功</li><li>如果任何一个 Job 失败，那么该 Stage 失败，即该构建任务 (Pipeline) 失败</li></ul><p>Jobs 和 Stage 的关系如下所示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">+------------------------------------------+</span><br><span class="line">|                                          |</span><br><span class="line">|  Stage 1                                 |</span><br><span class="line">|                                          |</span><br><span class="line">|  +---------+  +---------+  +---------+   |</span><br><span class="line">|  |  Job 1  |  |  Job 2  |  |  Job 3  |   |</span><br><span class="line">|  +---------+  +---------+  +---------+   |</span><br><span class="line">|                                          |</span><br><span class="line">+------------------------------------------+</span><br></pre></td></tr></table></figure><p>下面是一个<code>.gitlab-ci.yaml</code>  样例：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">stages:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">analytics</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">test</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">build</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">package</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">deploy</span></span><br><span class="line"></span><br><span class="line"><span class="attr">build:</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">analytics</span></span><br><span class="line">  <span class="attr">only:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">master</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">tags</span></span><br><span class="line">  <span class="attr">tags:</span></span><br><span class="line">    <span class="bullet">-</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">echo</span> <span class="string">"=============== 开始代码质量检测 ==============="</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">echo</span> <span class="string">"=============== 结束代码质量检测 ==============="</span></span><br><span class="line"></span><br><span class="line"><span class="attr">build:</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">build</span></span><br><span class="line">  <span class="attr">only:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">master</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">tags</span></span><br><span class="line">  <span class="attr">tags:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">runner-tag</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">echo</span> <span class="string">"=============== 开始编译任务 ==============="</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">echo</span> <span class="string">"=============== 结束编译任务 ==============="</span></span><br><span class="line"></span><br><span class="line"><span class="attr">package:</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">package</span></span><br><span class="line">  <span class="attr">tags:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">runner-tag</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">echo</span> <span class="string">"=============== 开始打包任务  ==============="</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">echo</span> <span class="string">"=============== 结束打包任务  ==============="</span></span><br><span class="line"></span><br><span class="line"><span class="attr">build:</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">test</span></span><br><span class="line">  <span class="attr">only:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">master</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">tags</span></span><br><span class="line">  <span class="attr">tags:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">runner-tag</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">echo</span> <span class="string">"=============== 开始测试任务 ==============="</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">echo</span> <span class="string">"=============== 结束测试任务 ==============="</span></span><br><span class="line"></span><br><span class="line"><span class="attr">deploy_test:</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">deploy</span></span><br><span class="line">  <span class="attr">tags:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">runner-tag</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">echo</span> <span class="string">"=============== 自动部署到测试服务器  ==============="</span></span><br><span class="line">  <span class="attr">environment:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">test</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">https://staging.example.com</span></span><br><span class="line"></span><br><span class="line"><span class="attr">deploy_test_manual:</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">deploy</span></span><br><span class="line">  <span class="attr">tags:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">runner-tag</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">echo</span> <span class="string">"=============== 手动部署到测试服务器  ==============="</span></span><br><span class="line">  <span class="attr">environment:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">test</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">https://staging.example.com</span></span><br><span class="line">  <span class="attr">when:</span> <span class="string">manual</span></span><br><span class="line"></span><br><span class="line"><span class="attr">deploy_production_manual:</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">deploy</span></span><br><span class="line">  <span class="attr">tags:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">runner-tag</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">echo</span> <span class="string">"=============== 手动部署到生产服务器  ==============="</span></span><br><span class="line">  <span class="attr">environment:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">production</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">https://staging.example.com</span></span><br><span class="line">  <span class="attr">when:</span> <span class="string">manual</span></span><br></pre></td></tr></table></figure><ul><li>修改好 <code>.gitlab-ci.yaml</code> 之后，将 CI/CD 过程中使用到的一些敏感信息，使用变量的方式填入在 项目 <code>设置</code> —&gt; <code>CI/CD</code> —&gt; <code>变量</code> 里。比如 Harbor 仓库的用户名密码、ssh 密钥信息、数据库配置信息等机密信息。</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">CI_REGISTRY: # Harbor 镜像仓库的地址</span><br><span class="line">CI_REGISTRY_USER: # Harbor 用户名</span><br><span class="line">CI_REGISTRY_PASSWORD: # Harbor 密码</span><br><span class="line">CI_REGISTRY_IMAGE: # 构建镜像的名称</span><br><span class="line">SSH_PASSWORD: # 部署测试服务器 ssh 密码</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/muzi502/blog/source/img/image-20200327102511419.png" alt="image-20200327102511419"></p><ul><li>设置好相关变量之后在，在项目页面的 <code>CI/CD</code> —–&gt; <code>流水线</code> 页面点击 <code>运行流水线</code>手动触发流水线任务进行测试。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/muzi502/blog/source/img/image-20200325163138089.png" alt="image-20200325163138089"></p><ul><li>如果流水线任务构建成功的话，会显示 <code>已通过</code> 的表示</li></ul><p><img src="https://cdn.jsdelivr.net/gh/muzi502/blog/source/img/image-20200325163254316.png" alt="image-20200325163254316"></p><ul><li>登录到 Harbor <a href="http://10.10.107.217" target="_blank" rel="noopener">http://10.10.107.217</a> 查看镜像是否构建成功</li></ul><p><img src="https://cdn.jsdelivr.net/gh/muzi502/blog/source/img/image-20200325163400519.png" alt="image-20200325163400519"></p><h2 id="参考-推荐"><a href="#参考-推荐" class="headerlink" title="参考/推荐"></a>参考/推荐</h2><ul><li><p><a href="https://docs.gitlab.com/runner/" target="_blank" rel="noopener">GitLab Runner Docs</a></p></li><li><p><a href="https://docs.gitlab.com/ee/README.html" target="_blank" rel="noopener">GitLab Docs</a></p></li><li><p><a href="https://nicksors.cc/2019/07/12/kubernetes系列之《构建企业级CICD平台-一-》.html" target="_blank" rel="noopener">kubernetes系列之《构建企业级CICD平台(一)》</a></p></li><li><p><a href="https://notes.mengxin.science/2018/09/02/gitlab-ci-cd-question-and-answer/" target="_blank" rel="noopener">GitLab的CI/CD使用问题汇总</a></p></li><li><p><a href="https://moelove.info/2018/08/05/%E5%9F%BA%E4%BA%8E-GitLab-%E7%9A%84-CI-%E5%AE%9E%E8%B7%B5/" target="_blank" rel="noopener">基于 GitLab 的 CI 实践</a></p></li><li><p><a href="https://blog.fleeto.us/courses/gitlab-notes/" target="_blank" rel="noopener">gitlab-notes</a></p></li><li><p><a href="https://xiaogenban1993.github.io/18.5/xiaomi_gitlabrunner.html" target="_blank" rel="noopener">gitlab runner部署细节优化</a></p></li><li><p><a href="https://tech.meituan.com/2018/08/02/erp-cd-jenkins-pipeline.html" target="_blank" rel="noopener">Jenkins的Pipeline脚本在美团餐饮SaaS中的实践</a></p></li><li><p><a href="https://laogen.site/gitlab-ci/example-docker-ssh-deploy/" target="_blank" rel="noopener">GitLab CI 示例：Docker 镜像打包发布 &amp; SSH 部署</a></p></li><li><p><a href="https://theviper.xyz/gitlab-ci-cd-optimize.html" target="_blank" rel="noopener">gitlab CI/CD优化</a></p></li><li><p><a href="http://zacksleo.top/2017/04/22/GitLab-CI%E4%BD%BF%E7%94%A8Docker%E8%BF%9B%E8%A1%8C%E6%8C%81%E7%BB%AD%E9%83%A8%E7%BD%B2/" target="_blank" rel="noopener">GitLab-CI使用Docker进行持续部署</a></p></li><li><p><a href="https://furur.xyz/2019/11/03/docker-gitlab-ci-deploy-springboot-project/" target="_blank" rel="noopener">Docker Gitlab CI 部署 Spring Boot 项目</a></p></li><li><p><a href="https://wsgzao.github.io/post/gitlab/" target="_blank" rel="noopener">RHEL7/CentOS7 在线和离线安装 GitLab 配置使用实践</a></p></li><li><p><a href="https://wayjam.me/post/how-gitlab-shell-works-with-ssh.md" target="_blank" rel="noopener">GitLab Shell如何通过SSH工作</a></p></li><li><p><a href="https://websoft9.gitbook.io/gitlab-image-guide/" target="_blank" rel="noopener">GitLab镜像手册</a></p></li><li><p><a href="https://xuanwo.io/2016/04/13/gitlab-install-intro/" target="_blank" rel="noopener">Gitlab部署和汉化以及简单运维</a></p></li></ul><h2 id="社群问答-QA-CI-CD-相关"><a href="#社群问答-QA-CI-CD-相关" class="headerlink" title="社群问答 QA | CI/CD 相关"></a>社群问答 QA | CI/CD 相关</h2><p>以下内容是整理摘自 <a href="https://blog.k8s.li/K8s-QA.html">《(2000+) kubernetes 社群分享 QA 汇总》</a>，中有关 CI/CD 相关的问答，从 2000 多个 QA 里使用关键字搜索 Gitlab、CI/CD、Jenkins 等，然后将一些相关的问题进行汇总。方便问题自查和从中吸取经验。</p><h3 id="2019-04-03：容器环境下的持续集成最佳实践"><a href="#2019-04-03：容器环境下的持续集成最佳实践" class="headerlink" title="2019-04-03：容器环境下的持续集成最佳实践"></a>2019-04-03：容器环境下的持续集成最佳实践</h3><blockquote><p>Q：Kubernetes 上主流的 CI/CD 方案是啥？</p></blockquote><p>A：其实这无关Kubernetes，从市场占有率来看，前三名分别是 Jenkins、JetBrains TeamCity、CircleCI。<a href="https://www.datanyze.com/market-share/ci" target="_blank" rel="noopener">来源：</a></p><blockquote><p>Q：GitLab 自带的 CI 与Jenkins 和 GitLab 结合的 CI，该如何选择？想知道更深层次的理解。</p></blockquote><p>A：还是要结合自己团队的实际情况做选择。从成熟度来说，肯定是 Jenkins用户最多，成熟度最高，缺点是侧重 Java，配置相对繁琐。GitLab 自带的 CI相对简单，可以用 yaml，和 GitLab 结合的最好，但功能肯定没有 Jenkins全面。如果是小团队新项目，GitLab CI 又已经可以满足需求的话，并不需要上Jenkins，如果是较大的团队，又是偏 Java 的，个人更偏向 Jenkins。</p><blockquote><p>Q：Jenkins 如果不想运行在 Kubernetes 里面，该怎么和 Kubernetes 集成？</p></blockquote><p>A：从 CI 的流程来说，CI 应用是不是跑在 Kubernetes 的并不重要，CI只要能访问代码库，有权限在生产环境发布，是不是跑在容器里从效果来说其实没有区别，只是用Kubernetes 部署 Jenkins的话，运维的一致性比较好，运维团队不用额外花时间维护一套物理机的部署方案。</p><blockquote><p>Q：Kubernetes的回滚方案是回滚代码，重做镜像，还是先切流量，后做修改？</p></blockquote><p>A：代码一定是打包到镜像里的，镜像的版本就是代码的版本，所以一定是切镜像。至于回滚操作本身，Kubernetes已经内置了很多滚动发布（Rollingupdate）的策略，无论是发新版本还是回滚版本，都可以做到用户无感知。</p><blockquote><p>Q：镜像大到几 G 的话如何更新部署，有什么好的实践呢，以及如何回滚？</p></blockquote><p>A：几个要点：&gt; Q：Drone 开放 API 服务吗？这样方便其他系统集成。</p><p>A：可以调整一下思路，直接把需要的功能做成镜像在 Drone 里调用就好了。</p><blockquote><p>Q：如果有 Drone 的 Server怎么做高可用？</p></blockquote><p>A：Drone serve r用 Kubernetes部署的话本身只起到了一个任务调度的作用，很难会遇到性能瓶颈。真的有性能问题可以尝试水平扩展Drone server，共享同一数据库。</p><h3 id="基于-GitLab-的-CI-实践"><a href="#基于-GitLab-的-CI-实践" class="headerlink" title="基于 GitLab 的 CI 实践"></a><a href="https://moelove.info/2018/08/05/基于-GitLab-的-CI-实践/" target="_blank" rel="noopener">基于 GitLab 的 CI 实践</a></h3><blockquote><p>Q：您提到把各种依赖都以 Service 的提供，请问是以哪种方式呢？ 比如Python的依赖，怎么做成Service呢？</p></blockquote><p>A：Service 化的依赖，主要是指类似 DB / MySQL/ Reids 之类的。 或者是 dind 其实它提供的是 2375 端口的TCP服务。 Python 的依赖，我推荐的做法是， 构建一个换了源的 Python 镜像。 安装依赖的时候，耗时会少很多。 或者说， 可以在定义 Pipeline 的时候， 将虚拟环境的 venv 文件夹作为 cache ，之后的安装也会检查这个，避免不必要的安装。</p><blockquote><p>Q：请问，你们为什么不用Jenkins Pipeline，而使用GitLab CI？</p></blockquote><p>A：主要原因是我提到的那几个方面。 集成较好， 界面美观优雅， 使用简单（所有有仓库写权限的人 都可以使用， 只要创建 .gitlab-ci.yml 并且配置了 Runner 即可使用） 。换个角度，我们来看下使用Jenkins 的问题， Jenkins 对于项目的配置其实和 GitLab 的代码是分离的， 两部分的， 用户（或者说我们的开发者）在使用的时候， 需要有两个平台， 并且，大多数时候， Jenkins 的权限是不放开的。 对用户来讲， 那相当于是个黑盒。 那可能的问题是什么呢？ 遇到构建失败了， 但是只有运维知道发生了什么，但是研发无能为力，因为没有权限。 使用GItLab的好处，这个时候就更加突出了， 配置就在代码仓库里面，并且使用 YAML 的配置，很简单。 有啥问题，直接查，直接改。</p><blockquote><p>Q：关于 Runner 的清理的问题，在长时间使用后，Runner 机器上回产生很多的 Cache 容器，如何清理呢。能够在任务中自动清除吗？</p></blockquote><p>A：这个就相对简单了，首先， 如果你的 Cache 容器确认没用了， 每个 Cache 容器其实都有名字的， 直接按 Cache 的名字过略， 批量删掉。 如果你不确定它是否有用，那你直接删掉也是不影响的， 因为 Docker Excutor 的执行机制是创建完 Service 容器后， 创建 Cache 容器。 要是删掉了，它只是会再创建一次。 如果你想在任务中清除， 目前还没做相关的实践，待我实践后，看看有没有很优雅的方式。</p><blockquote><p>Q：请问下Maven的settings.xml怎么处理？本地Maven仓库呢？</p></blockquote><p>A：我们构建了私有的 Maven 镜像， 私有镜像中是默认使用了我们的私有源。 对于项目中用户无需关注 settings.xml 中是否配置repo。</p><blockquote><p>Q：在GitLab的CD方案中，在部署的时候，需要在变量中配置跳板机的私钥，如果这个项目是对公司整部门开发，那么如何保护这个私钥呢？</p></blockquote><p>A：可以使用 secret variable 将私钥写入其中， （但是项目的管理员，具备查看该 variable 的权限）开发一个 web server （其实只要暴露 IP 端口之类的就可以） 在 CI 执行的过程中去请求， server 对来源做判断 （比如 执行CI 的时候，会有一些特定的变量，以此来判断，是否真的是 CI 在请求）然后返回私钥。</p><blockquote><p>Q：GitLab CI适合什么类型的项目呢？国内目前还比较小众吧？</p></blockquote><p>A：国内目前还较为小众（相比 Jenkins 来说）其实只要需要 CI 的项目，它都适合。</p><h2 id="2015-09-23：基于Docker和Java的持续集成实践"><a href="#2015-09-23：基于Docker和Java的持续集成实践" class="headerlink" title="2015-09-23：基于Docker和Java的持续集成实践"></a>2015-09-23：基于Docker和Java的持续集成实践</h2><blockquote><p>Q：CI过程中test需要连接数据库的代码时，您在写测试案例方面有哪些经验分享？</p></blockquote><p>A：单元测试不能依赖外部资源，用mock，或者用h2等内存数据库替代。集成测试的时候是从接口层直接调用测试的，测试用例对数据库无感知。</p><blockquote><p>Q：请问部署到生产环境是自动触发还是需要手动审批？SQL执行或回滚是否自动化？</p></blockquote><p>A：当前是需要手动触发。SQL更新当前没做到自动化，这块正在改进，因为部署私有环境需要。SQL不支持回滚，代码做兼容。Docker镜像回滚没有自动化。</p><blockquote><p>Q： 问一下你们的Redis内存版是用的什么？</p></blockquote><p>A：我们用的内存版的redis是 <a href="https://github.com/spullara/redis-protocol" target="_blank" rel="noopener">spullara/redis-protocol</a>中的server实现。不过这个实现部分功能没支持，比如lua脚本，我们自己做了改进。</p><blockquote><p>Q：介绍下workflow带来的好处。</p></blockquote><p>A：workflow的好处我那篇文章中有说明，如果没有workflow，所有的步骤都在同一个配置的不同step实现，如果后面的失败，要重新从头开始。workflow可以中途开始，并且每一步骤完成都会触发通知。</p><blockquote><p>Q：h2并不完全兼容MySQL脚本，你们如何处理的？</p></blockquote><p>A：我们通过一些hack的办法，会探测下数据库是什么类型的，替换掉一些不兼容的SQL，进行容错。</p><blockquote><p>Q：请问你们在构建的时候，你说有些需要半个小时左右，那么构建过程的进度监控和健康监控你们怎么做的呢，如果有build失败了怎么处理呢？</p></blockquote><p>A：CI的每一步都有进度的，并且我们的团队通讯工具可以和CI集成，如果失败会发消息到群里通知大家。</p><blockquote><p>Q：cleanup脚本做哪些？</p></blockquote><p>A：主要是清理旧的Docker镜像，以及清理自动化测试产生的垃圾数据。</p><blockquote><p>Q：请问你们文件存储怎么解决的呢，使用自己的网络文件系统还是云服务？</p></blockquote><p>A：文件系统支持多种storage配置，可以是本地目录（便于测试），也可以使云服务（比如s3）。</p><blockquote><p>Q：刚才说你们能通过一键部署，但是中间无法监控，测试环境可以这么玩，那生产环境你们是怎么做的呢？还有你们后续的改造方向是自己开发？还是采用集成第三方软件？</p></blockquote><p>A：生产环境shell当前只能是多加错误判断。这块我们在改进，比如通过ansible等工具，以及使用Kubernetes内置的rolling-update。自动化部署这块还没有好的开源工具。</p><blockquote><p>Q：你们的测试用了很多代替方案、如h2代MySQL，要保证测试效果，除了你们用的hack方法之外，是不是从写代码的时候就开始做了方便测试的设计？</p></blockquote><p>A：对。这也是我文章中分享的观点之一。测试用例的编写人员要有业务代码的修改权限，最好是同一个人。要做自动化测试，业务代码必须要给测试留各种钩子以及后门。</p><blockquote><p>Q：请问你们的集群应用编排怎么做的？</p></blockquote><p>A：上面说了，还没用到编排。一直等编排工具的成熟。正在测试k8s。</p><blockquote><p>Q：你们做这个项目选型是出于什么考虑的，介绍里有提到使用一些脚本来管理容器解决开发和测试各种问题，感觉这种管理容器方式过于简单会带来管理问题，为何不用第三方开源项目来做二次开发，如：Kubernetes；另一个问题是，下一步有没有考虑如何让你的Docker和云服务平台结合，要解决运营成本问题（Docker最大吸引力在这里），而不只是解决开发测试问题？</p></blockquote><p>A：因为我们最早用的时候k8s 1.0 还没有，变化太大，创业团队没精力跟进，脚本是粗暴简单的办法。一直在等待各种基于Docker的云解决方案呀，肯定考虑结合。</p><blockquote><p>Q：对于Docker storage分区用完问题，我想问一下，你们是使用Docker官方提供的Registry仓库吗，如何解决仓库单点问题，这机器要是故障了怎么办？</p></blockquote><p>A：Registry用的是官方的，后端存储是挂载到s3上的。没有s3,推荐使用京东田琪团队开源的<a href="https://github.com/jcloudpub/speedy" target="_blank" rel="noopener">Speedy</a>，实现了分布式存储。</p><blockquote><p>Q：除了介绍的Java相关的CI方案，对于C/C++开发语言有没有推荐的CI方案？</p></blockquote><p>A：Teamcity/Jenkins等CI工具支持任何语言的。其实任何语言的CI都差不多，单元测试，集成测试。关键还在于依赖环境的准备以及集成测试用例的管理。</p><blockquote><p>Q：我看到你们为了方便测试和调试会有独立的集合Docker环境，这种环境和上线环境其实是有差别的，这样测试的结果能够代表线上环境吗？这种问题怎么看待？</p></blockquote><p>A：所以我们有多个流程。清理数据的测试环境，以及不清理环境的沙箱环境。但这也不能避免一部分线上环境的数据导致的bug。另外就是配合灰度上线机制。当前我们的灰度是通过代码中的开关实现的，使用这种方案的也很多，比如facebook的Gatekeeper。</p><blockquote><p>Q：请问Grouk有涉及前端（Node.js方面的）并结合Docker的CI/CD经历吗，可以分享下吗？</p></blockquote><p>A：这我们也在尝试。当前js的测试主要还是基于<a href="https://github.com/ariya/phantomjs" target="_blank" rel="noopener">ariya/phantomjs</a>，纯粹的js库比较方便测试，但如果牵扯到界面，就比较复杂些了。</p><h2 id="2015-12-22：基于Docker和Git的持续集成工作流"><a href="#2015-12-22：基于Docker和Git的持续集成工作流" class="headerlink" title="2015-12-22：基于Docker和Git的持续集成工作流"></a>2015-12-22：基于Docker和Git的持续集成工作流</h2><blockquote><p>Q：开发每提交一个bugfix，都会触发jinkens去构建镜像，那么多的开发者，岂不是要构建很多镜像？</p></blockquote><p>A：没有错，我们是每次都触发构建 image，由于image是分层的，底层已经存在的父对象，是不用存储，只存储变化的部分所以再用的磁盘空间很低，在系统开始初，我做过统计，1000个 image 也不到 9G，这其中还有很多基础镜像。</p><blockquote><p>Q：想问一个集群相关的，像Docker部署这部是直接调用Docker部署容器，还是通过Ansible或其他工具？</p></blockquote><p>A：有了 Kubernetes 管理集群后，发布的工作就比较简单了，用不上 Ansible。但是 Ansible 还是有它的用处的，比如清理集群中过时的 image，和已经退出的 Container等。</p><blockquote><p>Q：你好，以前也做过类似的服务”第三步：Jenkins 会把相应的 image部署到服务器集群中，开发者就可以通过 iss001.kingdee这个域名访问刚刚对应分支的服务了”，单独一个分支解决了对应的bug，但实际生产中非常容易修改一个bug引起其他的bug，你们是怎么去把控整体的稳定性？如何提高这种单个bug分支单个测试环境的意义？</p></blockquote><p>A：这个 pull-request 的工作方式是应对功能开发的，如像长期开发某个 new feature，你刚刚说的一个 bug 产生另外一个bug，我们的做法是有回归测试，我们有一个 smoke 分支，持续不断的对其做功能回归测试，只有通过的才能 cherry pick 到release 上。</p><blockquote><p>Q：测试环境依赖的redis/MQ之类的外部服务如何做的隔离?每次测试单独拉起来一套外部依赖的服务吗？</p></blockquote><p>A：我们通过多个手段来实现共享数据：master、smoke、release 分支测试都有自己独立的中间件，要是不用访问共享的数据，可以部署如 MQ image，代码层面的，如 MQ key 的名称加上机器的 IP。</p><blockquote><p>Q：有没有用到Mesos？是否容易遇到问题？这方面的文档好像并不多。</p></blockquote><p>A：Mesos 是个二级调度，适用于像存在多套集群的情况，来均衡资源，如：部署了 Hadoop 和 storm ，一般会使用 storm 来处理实时的请求，Hadoop 做离线工作。晚上和白天就存在一种可能就是 Hadoop 闲置，但是 storm 可能很忙，这时 Mesos 这样的二级调度就可以平衡资源，节约成本，我们暂时没有这样的需求。至于文档方面我也没有深入研究，建议看官方文档。</p><blockquote><p>Q：请问你们在构建的时候，你说有些需要半个小时左右，那么构建过程的进度监控和健康监控你们怎么做的呢，如果有build失败了怎么处理呢？</p></blockquote><p>A：CI的每一步都有进度的，并且我们的团队通讯工具可以和CI集成，如果失败会发消息到群里通知大家。</p><h2 id="QA-Gitlab"><a href="#QA-Gitlab" class="headerlink" title="QA Gitlab"></a>QA Gitlab</h2><blockquote><p>Q9：gitlab接收一个push event触发构建，这个是监控所有的分支吗，分支模型是怎么样的</p></blockquote><p>A：不是的，按需。我们内部分支模型大概有四种，dev——&gt;test——&gt;release——&gt;master。master以外的为了效率都会做自动触发</p><blockquote><p>Q11：为什么不直接用gitlab-runner 而接jenkins</p></blockquote><p>A：gitlab-runner 需要每个仓库都配置构建信息，当需要统一修改构建的时候很麻烦</p><blockquote><p>Q：持续集成系统具体的细节可以透露下吗？基于gitlab ci，jekins？或者小公司可以直接用Spinnaker 这些吗？</p></blockquote><p>A：ci cd的话因为我们有自己现有的发布平台，背后的原理实际上还是调用jenkins去处理</p><blockquote><p>Q：和gitlab ci相比有什么优势</p></blockquote><p>A： 和 gitlab ci 相比的优势可以参考下 jenkins 与 jenkins x的对比。在用户角度来说，以应用为视角使用起来会更加方便，也方便利用社区资源。从架构和可维护性来说，Jenkins X 的架构会相对更加先进（与诞生年代有直接关系)。</p><blockquote><p>Q： 目前我们使用的gitlab-ci-runner 部署于k8s之外实现ci/cd。发现gitlab-ci在实际使用中，经常会遇到卡死报错。请问下，相比jenkins 做ci/cd 是会有什么优势，之前并没有使用过jenkins.</p></blockquote><p>A：gitlab-ci生产环境中，我们也没有使用，我们调研的结果是1、有侵入性 2、pipeline功能较弱，但是有一个好处是遇到错误好像还可以继续执行。jenkins遇到错误会中断流程。</p><blockquote><p>Q：请问Jenkinswebhook那些构建参数如何传入GitLab触发？</p></blockquote><p>A：webhook的触发和界面参数会有一些区别，我们在脚本里面做了处理。</p><blockquote><p>Q：离线部署，是不是通过打出镜像压缩包，然后带着镜像包到现场部署的容器云平台上，上传部署的方式？</p></blockquote><p>A：是在家里打出镜像压缩包，然后到现场解压出来，根据镜像类型进行处理，比如一些基础镜像，会直接上传到节点，业务的镜像会在部署完成后上传到Harbor，然后节点从Harbor去拉取。</p><blockquote><p>Q：GitLab 自带的 CI 与Jenkins 和 GitLab 结合的 CI，该如何选择？想知道更深层次的理解。</p></blockquote><p>A：还是要结合自己团队的实际情况做选择。从成熟度来说，肯定是 Jenkins用户最多，成熟度最高，缺点是侧重 Java，配置相对繁琐。GitLab 自带的 CI相对简单，可以用 yaml，和 GitLab 结合的最好，但功能肯定没有 Jenkins全面。如果是小团队新项目，GitLab CI 又已经可以满足需求的话，并不需要上Jenkins，如果是较大的团队，又是偏 Java 的，个人更偏向 Jenkins。</p><blockquote><p>Q：有了Gerrit，为什么还要GitLab，Gerrit也可以托管代码啊？</p></blockquote><p>A：这个是有历史背景的，我们是先选择使用GitLab做代码托管，后期才加入Gerrit做code review。Gerrit在代码review方面比GitLab的merge request要方便许多，更适合企业内部使用。关于这个，我的想法是，要么将GitLab迁移到Gerrit，要么不用Gerrit，可以使用GitLab的merge request来进行review，那GitLab其实是可以不要的。</p><blockquote><p>Q：公司环境较复杂：包含Java项目、PHP项目，Java项目目前大多是SpringBoot框架，PHP是ThinkPHP框架，项目架构并不复杂，有少许Java项目需要用Redis到Memcached、缓存机制。最大问题的是多，项目应该如何较好的依托Kubernetes顺利架构，将项目可持续集成？</p></blockquote><p>A：我们的Redis这一类中间件还放在VM上，目前尚未打算搬移到Kubernetes上，Kubernetes+Docker天然是跨平台的，PHP也可以支持，并且对容器集群（既应用集群）管理非常出色，包含部分自动化运维，并不会因多种开发语言而增加负担，持续集成是另外一块，目前各大CI工具厂商也都支持Kubernetes，比较友好，我们采用的是GitLab-CI。</p><blockquote><p>Q：SonarQube的权限控制及性能当面？</p></blockquote><p>A：权限控制使用SonarQube提供的API，将项目跟GitLab中相应项目权限匹配起来，GitLab中可以查看这个项目代码，那么SonarQube中就能看到这个项目结果和Code。</p><blockquote><p>Q: 你们是直接将SonarQube、GitLab/Jenkins的权限控制到一起了？怎样做的统一？</p></blockquote><p>A：使用LDAP认证。</p><blockquote><p>Q：Git Checkout的时候，你们的Git SCM没有考虑隐私安全的事情吗，比如代码权限受限？</p></blockquote><p>A：Jenkins使用了一个最小权限用户去GitLab上拉代码。安全方面，Jenkins所有节点都是可控的。</p><blockquote><p>Q：Jenkins的持续集成是怎么实现的？比如不同的源码仓库的提交触发，如GitHub、GitLab版本号怎么控制的？</p></blockquote><p>A：Jenkins的CI流程触发可以有很多种，代码提交触发，定时触发，手动触发。版本号的控制也可以有很多方案，比如使用job的编号，使用Git的commit号，使用时间戳等等。</p><blockquote><p>Q：请问，我们是java项目，在业务代码打成war包后，war包很大的情况下，在发布流程中，如何完成pod中的容器的代码更新，是采用挂载代码后重启容器方式，还是采用每次重新构建代码镜像，直接更新容器，或者有什么更好的建议吗</p></blockquote><p>A：配置分离（上配置中心)，参数通过启动鉴权下载配置文件启动，这样子环境的更新只需要基于通过一个包即可。</p><blockquote><p>Q：一个Job生成所有的Docker镜像，如果构建遇到问题，怎么去追踪这些记录？</p></blockquote><p>A：在项目前期接入时，生成镜像的流程都作了宣传和推广。标准化的流程，会减少产生问题的机率。如果在构建中遇到问题，Prism4k的界面中，会直接有链接到本次建的次序号。点击链接，可直接定位到Console输出。</p><blockquote><p>Q：Job和dind如何配合去实现打包镜像的呢？</p></blockquote><p>A：首先是dind技术，通过挂载宿主机的docker client和dockersock，可以实现在容器内调用宿主机的Docker来做一些事情，这里我们主要就用于build。Kubernetes的Job则是用于执行这个构建worker的方式，利用Kubernetes的Job来调度构建任务，充分利用测试集群的空闲资源。</p><blockquote><p>Q：请问下Maven的settings.xml怎么处理？本地Maven仓库呢？</p></blockquote><p>A：我们构建了私有的 Maven 镜像， 私有镜像中是默认使用了我们的私有源。 对于项目中用户无需关注 settings.xml 中是否配置repo。</p><blockquote><p>Q：生成新的镜像怎么自动打新的tag？</p></blockquote><p>A：我们镜像Tag使用本次构建选定的Git版本，如分支名称或者Tag。</p><blockquote><p>Q： 如何动态生成Dockerfile，如何在Docker镜像里配置JVM参数？</p></blockquote><p>A：Dockerfile文件：我们是使用sh脚本生成的，将内容 &gt;&gt; Dockerfile中；JVM参数是在应用中配置的，发送构建消息时，作为消息内容送过去。</p><blockquote><p>Q：Docker 的正确的使用姿势，在本地环境已经构建了企业私有 Registry Harbor，那么我要构建基于业务的应用时，是先从 Linux 系列的像 Ubuntu 或 CentOS 的 Base 的 Docker 镜像开始，然后通过 Dockerfile 定制业务需求，来使用吗？</p></blockquote><p>A：我们基础镜像统一采用 CentOS 6.8，不同的业务有不同的 Dockerfile 模板，生成镜像的过程业务对 Dockerfile 是透明的。</p><blockquote><p>Q：使用Pipeline先构建编译环境镜像，再编译，是否会导致整个流程需要很长时间？是否有优化方案？</p></blockquote><p>A：编译镜像由于不会经常变动，因此这个镜像的构建通常使用cache就能直接完成，另外我们也把编译环境镜像打包这个步骤抽出来单独作为job执行了，这样在实际编译流程中就无需再进行编译环境构建。</p><blockquote><p>Q：Docker存储考虑过Overlay当时吗？据说这种构建镜像比较快。</p></blockquote><p>A：考虑过，当时也做过各个方面的测试，这种增量式的构建，肯定最快，但是我们需要有专人从源码级别对其进行维护，成本对于我们还是有点高，我们后期打算采用环境和代码分离的方式，即环境部署一次，代码多次部署来提升效率。</p><blockquote><p>Q：您提到不过分强调测试自动化，尽量不改变测试流程，那么对于自动构建和单元测试的自动化有没有考虑呢？毕竟这些是比较消耗人力的部分。</p></blockquote><p>A：自动构建我认为比较现实，单元测试有考虑。不过我们测试案例过于复杂，目前看短期实现不太现实。而且性能也是个问题，如果下一步要做我们会更多考虑一些特定场景。比如产品发布后的回归测试，这个有可能，但不会是普遍应用。</p><blockquote><p>Q：自动化构建过程中，对应用的测试是怎么实现的？</p></blockquote><p>A：单元测试可以在编译的时候完成，功能测试需要启动部署。</p><blockquote><p>Q：通过镜像的构建脚本是怎么生成镜像的？在基础镜像上执行相关脚本么？一些端口存储卷环境变量这些镜像中的信息是怎么解决的？</p></blockquote><p>A：我们对Dockerfile进行了封装，业务和开发人员不需要关心Dockerfile语法，直接写一个镜像构建脚本，最后根据一定的规则由Harbor生成Dockerfile，之后调用docker build去生成镜像。在这个过程中， 镜像的名称，版本都已经根据规则生成</p><blockquote><p>Q：在构建时候，这些环境可以提前安装好？</p></blockquote><p>A：应用里都有自己的版本概念，每个应用版本里有：镜像版本，环境变量、 export、Volmue等信息，所以在回退或者升级时候，最终的表现形式就是杀掉旧容器，根据版本的参数创建新容器。</p><blockquote><p>Q：请问构建一次平均要多长时间？</p></blockquote><p>A：现在Java、Dubbo、Python、go的多， 一般2分钟，而且有的镜像用户开启了自动构建后，在他们没意识的过程中，都已经构建完成。 到时候升级时候，选择对应的镜像版本即可。</p><blockquote><p>Q：App的每一次提交都是一个version吗，是不是每次构建完测试完成，就可以发布了？</p></blockquote><p>A：App 没有提交的概念，您说的应该是镜像，我们设计的是一个镜像对应一个Git仓库以及分支。当有push或者tag操作后，会自动触发构建，构建的行为是根据用户写的镜像构建shell脚本来决定的。 一般我们建议业务部门做出的镜像跟测试环境和生成环境没关系。 镜像就是镜像，只有应用有测试环境和生产环境。</p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;对于
        
      
    
    </summary>
    
    
      <category term="技术" scheme="https://blog.k8s.li/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="gitlab" scheme="https://blog.k8s.li/tags/gitlab/"/>
    
      <category term="CI/CD" scheme="https://blog.k8s.li/tags/CI-CD/"/>
    
      <category term="harbor" scheme="https://blog.k8s.li/tags/harbor/"/>
    
  </entry>
  
  <entry>
    <title>和蝉时雨的有趣笔谈</title>
    <link href="https://blog.k8s.li/with-chanshiyu-qa.html"/>
    <id>https://blog.k8s.li/with-chanshiyu-qa.html</id>
    <published>2020-04-04T16:00:00.000Z</published>
    <updated>2020-04-09T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="由来"><a href="#由来" class="headerlink" title="由来"></a>由来</h2><p>起初是咱看到 <a href="https://blog.yoitsu.moe" target="_blank" rel="noopener">萌狼</a> 写的 <a href="https://blog.yoitsu.moe/life/question_exchange_fiveyellowmice.html" target="_blank" rel="noopener">和 FiveYellowMice 交换问题！</a> 博客后就想着找几个友链里的友人来次类似的笔谈，但也是很纠结怕被拒绝唉，所以再三斟酌了一下就找到了咱博客里留言次数最多的友人 <a href="https://chanshiyu.com/#/" target="_blank" rel="noopener">蝉时雨</a> 来进行此次笔谈😂。</p><h2 id="QA"><a href="#QA" class="headerlink" title="QA"></a>QA</h2><h3 id="Q1：木子の独白？一句话介绍自己"><a href="#Q1：木子の独白？一句话介绍自己" class="headerlink" title="Q1：木子の独白？一句话介绍自己~"></a>Q1：木子の独白？一句话介绍自己~</h3><p>想了半天觉着这个问题估计是 10 个问题里最难的😂，挑几个 bio 来概括一下咱的组成吧😋：</p><p><strong>地球人、素食者、水果迷、电子前哨基金会成员、搬砖社畜、运维攻城狮。</strong></p><ul><li><p>地球人：因为这次武汉肺炎病毒疫情的影响，全世界都在遭受这场瘟疫的折磨，而我现实世界里周围的人却在幸灾乐祸地庆祝欧美国家感染人数越多越好。每听到身边的人对其他国家感人人数增多而幸灾乐祸地嘲笑，哎呀！咱气得跺脚啊！(掀桌儿。在极权专制国家，统治者为了维护其权力的合法性而进行意识形态控制住人民的思想，通过制造仇恨来塑造一个远在天边的敌人而让人民忘记身边的痛苦。咱就想：咱不做<code>赵</code>国人，做个地球人多好呀；如果人类能够抛弃国家和民族这种意识形态上的身份，都把人类当作这个孤独星球上的同胞，友好相处多好呀。</p></li><li><p>素食者：有时咱在想我们在大自然中索取了太多，同时又不断地破坏大自然的生态平衡。我们有义务为大自然去做出相应的补偿。我自己身体力行的做法就是做一个素食者，尽自己最大努力尊重和保护动物。我不是动物权利的倡导者，我这样做只是出于对大自然，对生命尊严的思考。汉密尔顿法则模型认为 rB &gt; C 是利他行为发生的原因，而这是动物的天性。其中 r 是施利者与受害者之间的关系，关系越好就越高、B 是受利者所能获得的利益、C是施利者所需付出的代价。所以两者关系越紧密，那么利他行为越容易发生。正是因为 r 很大这个原因，人类很少会把灵长类动物当作食物，也越来越少地把亲密的动物比如猫狗当作食物。而从 C 角度也就是人类的代价来看，人类拯救其他动物的利他行为，也和人类发展的程度有关，发展程度越高可以做到的事情也就越多，也就可以考虑更多的事情，而素食这样的事情并不需要付出极高的代价，这样的事情为什么不做呢?</p></li><li><p>水果迷：因为咱素食后就失去了很多美味食物，所以唯有水果才能满足咱的胃口啦，咱不挑食，基本上所有的水果咱都喜欢吃😋。葡萄🍇和草莓🍓可能更喜欢一点😂</p></li><li><p>电子前哨基金会成员：其实每个月给 EFF 捐赠就可以啦😂。自从咱大学毕业当了社畜开始搬砖之后，自己能赚一点小钱了，所以就每月给 EFF 电子前哨基金会捐赠 5$ 。因为 EFF 是一个具有领导地位的非盈利组织，致力于在数字世界捍卫公民自由。自由软件基金会和电子前线基金会一直是自由互联网世界里对抗 BIG BROTHER 的最前线，这种对抗不仅仅是在技术领域，法律领域也是如此。EFF 过去的 30 多年中，通过影响诉讼，政策分析，基层行动以及技术研发，捍卫用户隐私，言论自由以及创新。该基金会的试图通过努力保障，在技术进步的前提下，人们的自由和权力也受到相应的保护。虽然个人的捐赠对于总体来讲微乎其微，<strong>但无论整体结果如何，忠于原则的行为，都有其本身的道德价值，这一点非常重要。</strong> 咱坚信的道德价值就是：<strong>无论墙有多高，都不能放弃对自由互联网的追求</strong>，而捐赠支持像电子前哨基金会、维基媒体基金会、自由软件基金会、互联网档案馆等这些捍卫互联网自由的非营利性组织，正是在传播自由互联网的精神。</p></li></ul><h3 id="Q2：对时雨的初印象？"><a href="#Q2：对时雨的初印象？" class="headerlink" title="Q2：对时雨的初印象？"></a>Q2：对时雨的初印象？</h3><ul><li>可爱温柔 <strong>(<em>≧︶≦))(￣▽￣</em> )ゞ</strong>：</li></ul><p>咱第一次访问时雨的博客是汝在咱那篇<a href="https://blog.k8s.li/Kindle-Oasis2-vs-Paperwhite3.html">《Kindle Oasis 和 Kindle Paperwhite3 使用体验》</a> 客留言之后，咱才注意到时雨，因为之前很少会有人在咱博客多次留言。于是咱好奇地点开了时雨的博客，第一眼就惊呆了<strong>w(ﾟДﾟ)w</strong>。这也是咱见过的最有心的博客，被时雨的才能深深折服（商业胡吹😂。然后咱就翻遍了时雨的博客和 dispus 上的评论，想要认识一下时雨。不仅仅是博客的设计和主题，连文字都会带着可爱的<code>声音</code>。比如 <code>～</code> 和 <code>‗。‗</code> 等标点符号，仿佛就像文章的指纹，读起来就像有了声音一样神奇。咱好像也受汝的影响耶，慢慢地地喜欢加一些标点符号😂。</p><ul><li>诗意少年：</li></ul><blockquote><p>夏日众蝉鸣叫此起彼伏好似落雨，蝉儿们似要将仅存的的生命燃烧奏出最后的音符，绚烂与壮美中氤氲着沉寂与无常，是日本夏天最具代表性的季节物语之一。</p></blockquote><ul><li><p>善良热心：将自己写的博客主题开源分享出来，而且热心帮助他人怎么去食用 😋</p></li><li><p>心思细腻：通过汝的文章和流言可以猜测出，现实中比较内向不善表达，但心里活动丰富，想交流的话也很多的样子耶。</p></li></ul><p>以上就是咱对时雨的初印象啦😊</p><h3 id="Q3：喜欢什么类型的音乐？推荐一首单曲循环的歌？"><a href="#Q3：喜欢什么类型的音乐？推荐一首单曲循环的歌？" class="headerlink" title="Q3：喜欢什么类型的音乐？推荐一首单曲循环的歌？"></a>Q3：喜欢什么类型的音乐？推荐一首单曲循环的歌？</h3><ul><li><p>一些动画的 OP/ED/特典/BGM ，比如： 四月は君の嘘、 リズと青い鳥、 NARUTO -ナルト-、「日常」の合唱曲</p></li><li><p>单曲循环的：当然是咱最喜欢的「四月は君の嘘」オープニングテーマ『光るなら』啦😋</p></li></ul><h3 id="Q4：喜欢什么类型的书籍？对纸质书和电子书两种阅读方式的看法？"><a href="#Q4：喜欢什么类型的书籍？对纸质书和电子书两种阅读方式的看法？" class="headerlink" title="Q4：喜欢什么类型的书籍？对纸质书和电子书两种阅读方式的看法？"></a>Q4：喜欢什么类型的书籍？对纸质书和电子书两种阅读方式的看法？</h3><p>虽然各方面的书都有所涉猎，但更偏向于自然科学之类的书籍。因为这些书共同点就是满足自己的好奇心和求知欲，使自己更加清楚万事万物背后的自然真理，从而对大自然以及生命怀有崇高的敬意，这样才能明白人类的渺小和无知。</p><p>比如咱想知道木星上的那块能吞下地球的大红斑；咱想知道地球的内核时固态的还是液态的？地磁场如何形成，为什么地磁场会倒转？地球的生命起源以及几十亿年的生命进化历程；咱们人类的祖先智人从东非大裂谷走出后历经万年的迁移进化之旅？咱想知道细胞中的细胞器是如何进化而来的，以及它们之间如何分工合作的；DNA 如何控制基因表达以创造出与众不同的万物生灵。还有咱想知道古希腊城邦雅典文明；想知道金字塔如何建造以及古埃及法老追求永生赋予的意义是什么？想知道 NASA 探索太空的艰辛历程？想知道飞出星际空间的旅行者 1 号现在还好吗？</p><p><img src="img/image-20200404190616475.png" alt="image-20200404190616475"></p><p>总之虽然咱都已经是二十有五的人成年人了，但咱的心智还是和中小学生一样，长不大的好奇宝宝，想知道的事情还有很多很多。这一点咱和 <a href="https://twitter.com/Philo2018" target="_blank" rel="noopener">Philo</a> 有点像 😂，汝可以看看她写的 <a href="http://lulalap.com/2020/01/02/collection-of-interesting-ideas-2019/" target="_blank" rel="noopener">Philo的脑洞合集（2019）</a> 。而读这类书籍正是满足咱好奇心，汲取知识的海洋，这也是咱读书的原因。想起了法国博物学家 <a href="https://zh.wikipedia.org/wiki/%E5%B8%83%E4%B8%B0" target="_blank" rel="noopener">布丰</a> 在《自然史》书中的诗句：</p><blockquote><p>世界万物运转无止息，万物都在的世间洪流中相遇，在广袤无尽的空间中，以及物换星移的接轨瞬间，万物混成冥河，不拘任何形体，不拘任何被赋予的形象。因此，万事万物或相近，或远离，或合一，或分离或相容，或相斥，或生，或灭，恒久不变的，只有交互作用的力。恣意横行，却灵巧而不自伐，为宇宙燃起生命气息，让生命舞台上，无时无刻上演着新的戏码，写下生生不息，永无止境的诗篇。</p></blockquote><p>通过阅读这类书籍去和先贤哲人们交流，怀揣着懵懂的好奇心去感悟大自然的神奇和奥秘。</p><p>关于纸质书：咱喜欢的读书方式还是倾向于纸质书，因为书这种东西不仅仅是用来看上面的文字，也是用来调整自己感觉得工具。当手指触碰书页时的感觉和哗啦啦翻书的瞬间给神经的刺激是电子书无法替代的。而且咱读书的时候喜欢拿一支笔在书中有趣的地方乱涂乱画😂，写下自己的感悟和思考。喜欢把一些精美的片段摘抄在纸质摘抄本上，读书的思考笔记写在日记本上。大学的时候写了很多的摘抄本和日记，现在翻来看看有时觉着当初好幼稚😂。这个习惯自从毕业之后就废弃了，因为慢慢地习惯上在 kindle 上读书，摘抄和笔记也都是标注和打字的方式，仿佛失去了当初在大学时读书的那种纯真，有点遗憾，有时又想捡起这个习惯。</p><p>大学的时候咱读的基本上全是纸质书，整天泡图书馆里摸鱼😂。四年间买了不少书，毕业前捐赠给图书馆很大一部分，送给学弟学妹们一些，到最后还剩两麻袋的书不舍得仍就邮寄回家了。当时寄快递的时候费了很大的功夫，要送到三十公里外的物流园区，可把咱累坏了😑。从毕业之后就很少再买纸质书了，搬家的时候太不方便了，不想再体验第二次了😂，所以后来就慢慢习惯用 kindle 看书了。</p><p>kindle 电子书也是快要大四的时候才买的。再到去年的时候又换了 kindle oasis，带有物理翻页键，有了一种读纸质书时翻页的感觉，直到现在一直是咱每天必须要用到的睡前读物 + 催眠神器😂</p><p>电子书和纸质书只是文字的承载方式变了，只要我们专心认真地去读会就会缩小两种阅读方式之间的差距，我相信即便读电子书也是能和纸质书那样有同样的效果和体验。状态不好时，有时候会读不下去，这时候就要思考是什么干扰了读书，有些书即使在状态不好时也能顺利的看下去，这时候就想想为什么会这样。</p><p>电子书咱还是喜欢 kindle 这种简单的读书工具，没有杂七杂八的花架子。而手机上的 app 其实并不适合读书，比如微信读书等软件，他们除了读书功能以外还夹带社交功能，广告流量商业化也很令人作呕。我仅仅是纯粹地读个书而已，而这些软件却在社交和攀比虚荣。</p><p>而且咱用 kindle 读书，遇到喜欢的书一口气读一两个小时不中断可以轻轻松松地做到，而手机上和阅读无关的信息流太多，极容易被泛滥的信息所束缚住而用实际阅读，我相信很多人都无法做到坚持三十分钟不中断。这也是咱克制每天使用手机时长不超过一个小时的原因，咱使用 kindle 的时间是手机了两倍😂。有时候接受的信息太多也是一种束缚，使自己无法集中精力在重要的阅读上。</p><h3 id="Q5：对当今时代独立博客的发展与展望？"><a href="#Q5：对当今时代独立博客的发展与展望？" class="headerlink" title="Q5：对当今时代独立博客的发展与展望？"></a>Q5：对当今时代独立博客的发展与展望？</h3><p>木子为什么要写个人独立博客呐，我想当今国内局域网大规模删帖封号、信息封锁、愚民洗脑、公权造谣式辟谣的事情已经给出很明确的答案。</p><p>虽说各国都会有审查制度的存在，但天朝这种审查制度，是以人性改造为目的思想钳制，是作为欺骗手段的谎言宣传；是极权统治者将人民驯服为国家机器奴隶的工具。武汉肺炎病毒疫情已经过去一百多天，再看看现在的国内媒体舆论。早已经没了当初对谎报延误疫情的追究问责；早已经没了对李文亮医生被训诫背后言论自由和新闻自由的诉求；早已经没有了对红十字会的渎职的追责。现在主流的声音而是对美帝国主义的幸灾乐祸；对官僚体制无能腐败的掩饰；对权贵们不知羞耻的歌功赞德。更可怕的是，这台极权统治的机器现在在试图篡改这段记忆，去抹去他当初瞒报疫情的罪责，将病毒的源头转嫁到国外。而在这一切的背后，都是互联网这个工具在帮助极权统治者为虎作伥，只存在对他有利的声音而达到集体洗脑控制。也恰恰验证了“当媒体都姓党”时，“人民就被抛弃”了的现实。没有了媒体代表人民利益去公告事实的真相，剩下的就是人民的生命被病毒和体制的重病共同伤害的结果。</p><p>我不认为互联网封锁、流量垄断、言论审查是互联网该有的样子，互联网的创造和普及是我心目中人类有史以来最伟大的公益事业。维基百科和互联网档案馆以及知识共享社区他们借助互联网为全世界每一个人提供平等获取知识的权利，这些知识是我们全人类智慧文明的结晶，而在有些国家却在封锁维基百科，为什么要封杀维基百科，因为维基百科上客观存在的历史事实让统治者担惊受怕。我无法现象成长在 GFW 下的后辈们他们认为的互联网是什么样子？是像百度那样不羞耻地作恶，删帖封号是对的，言论审查是正当的？</p><p>好像有点跑题了😂对于（中文）独立博客的发展和未来，我是挺悲观的。因为墙越来越高了，而会翻墙的中学生或大学生又是极少数，剩下的都是些小粉红们，在 GFW 下成长起来的一代还明白自由互联网的精神吗？随着 GFW 的不断升级、GitHub 一次次遭受屏蔽、RSSHUB 也被封杀、国内的域名备案又进一步加强。这会逼退那些想要拥有独立博客的人开倒车回墙内，也许大多数想写博客的人都会放弃独立博客，转而投报微信公众号、知乎专栏、简书掘金、CSDN 博客园这类博客平台。毕竟他们垄断着国内信息获取的流量。在这些平台上甘愿自我审查和自我阉割，在自我心中树立一道墙。而最可怕的后果就是这类平台<strong>让能写文章的人好像成为了这个平台的一个写作的奴隶，而不是让他们的文章中的内容和观点可以有长时间的影响力。换言之，在社交网络上，如果你要有影响力，你就要使劲写，需要更多的粉丝和订阅者。我个人认为这是违反了信息传播规律的。</strong></p><p>对于独立博客，咱比较喜欢 <a href="https://coolshell.cn/haoel" target="_blank" rel="noopener">陈皓</a> 前辈写过的一篇文章 <a href="https://coolshell.cn/articles/17391.html" target="_blank" rel="noopener">《我为什么不在微信公众号写文章》</a></p><blockquote class="twitter-tweet"><p lang="zh" dir="ltr">同事开了微信公众号，发我二维🐎让我去关注一波。我直接一篇 <a href="https://twitter.com/haoel?ref_src=twsrc%5Etfw" target="_blank" rel="noopener">@haoel</a> 的《为什么我不在微信公众号上写文章》回绝了过去 😂，千辛万苦翻出来了干嘛还要开倒车回墙内🤔。<a href="https://t.co/NEyO9RucrV" target="_blank" rel="noopener">https://t.co/NEyO9RucrV</a></p>&mdash; HTTP 502 (@muzi_ii) <a href="https://twitter.com/muzi_ii/status/1238335413799890944?ref_src=twsrc%5Etfw" target="_blank" rel="noopener">March 13, 2020</a></blockquote> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script><p>我希望互联网能够持续公开透明可检索，所有人都可以在网络世界里自由和独立地表达自我。而言论审查、互联网封锁、流量垄断等等这不是万维网之父 <a href="https://zh.wikipedia.org/zh-cn/%E8%92%82%E5%A7%86%C2%B7%E4%BC%AF%E7%BA%B3%E6%96%AF-%E6%9D%8E" target="_blank" rel="noopener">蒂姆·伯纳斯-李</a> 前辈当初所创造的网络世界，也不是互联网之子 <a href="https://coolshell.cn/articles/11928.html" target="_blank" rel="noopener">亚伦·斯沃茨</a> 用生命去捍卫的赛博空间。</p><p>假若有人看到咱的博客，或许能改变他们，让他们也能加入到咱们中来。这也是咱写这个博客现在的动力吧。其实咱并不是很喜欢写技术相关的内容，就如鲁迅先生所言：学医救不了中国人一样😂。咱觉着咱写技术文章也救不了身边被真理部愚民洗脑的粉红们。所以咱觉着在读书和写博客的同时，咱更应该肩负起知识份子最应有的责任：<strong>传播常识让人摆脱无知，启人思考让人走出愚昧，揭露真相让人远离谎言。</strong></p><p>咱的博客就是咱的“另一半”，永远会守护着他。不过咱也在引导一些新人加入到独立博客中来，比如去年暑假的时候认识的一个小学弟，咱就教他一些搭建博客、买服务器、注册域名的方法，引导他也来写博客🤣。所以咱的博客写好了，也是对后辈们的一种指引，去指引他们在自由的互联网勇于传播自己的思想。</p><p>总之独立博客的前途还要我们共同努力，独立博客是咱们自己的小世界，就像时雨自己写的博客一样。精心打理呵护，像一件艺术品一样去雕琢它，这也是独立博客迷人之处，也正是像时雨这样开源分享的精神，会吸引更多的人加入到独立博客中来。独立博客上的文章只要域名和服务器还在，就会被搜索引擎检索到，不管多久它都会被需要它的人发掘到。</p><p><img src="img/image-20200404190715388.png" alt="image-20200404190715388"></p><p><img src="img/image-20200404190726626.png" alt="image-20200404190726626"></p><p>最后还想说的是，阿房宫的楼宇宫阁早已荡然无存，但杜牧的阿房宫赋却能流芳百世。书写能记载着我们的思想，并跨越时间和空前传播它们，但愿千百年后的互联网还能检索到咱曾经留下的闲言碎语。独立博客就像一艘小船，在自由的互联网航行，而我们彼此之间的连接，构筑成了一个独立的世界，这个世界里没有删帖封号，没有言论审查、没有互联网封锁，有的是不同的声音；有的是思想碰撞的火花；有的是自由的精神和独立的思想！</p><h3 id="Q6：木子最想获得的一份能力？"><a href="#Q6：木子最想获得的一份能力？" class="headerlink" title="Q6：木子最想获得的一份能力？"></a>Q6：木子最想获得的一份能力？</h3><p>目前来讲现实中最需要的是搬砖能力，比如：精通 K8s 、精通 Golang 编程 、精通 Linux😂 ，然后也能像时雨的 <a href="https://github.com/chanshiyucx/aurora" target="_blank" rel="noopener">Aurora</a> 那样，有个可以拿的出手的开源项目分享给大家。因为搬砖技术太菜了，面试了好几家公司都不要咱（大哭。咱不放弃，咱耶在努力学习ing，争取早一天离开这里，成功拿到心满意足的 offer ！</p><h3 id="Q7：对于-ACGN-的看法？"><a href="#Q7：对于-ACGN-的看法？" class="headerlink" title="Q7：对于 ACGN 的看法？"></a>Q7：对于 ACGN 的看法？</h3><p><code>此生无悔入东方，来世愿生幻想乡😂</code></p><p>首先想到的一个词时 <strong>纯粹</strong> ，ACGN 里面的作品和人物很少有三次元明星歌星那样的光环效应，一部作品口碑和一个人物角色塑造，都是全凭实力，没有杂七杂八的花架子。</p><p>中学时代曾追过火影忍者，直到高中毕业后的不久火影完结。这部动漫为高三枯燥的苦逼学习生活增添了一抹色彩，每周的周四晚自习后，咱就带头在班里公开放映，隔壁班里也会来很多人，凑在一起十来个人。恐怕当时也是全校唯一一个敢如此胆大妄为的班级了😂。那时，火影确实是咱每周的快乐调剂，没有它的高三是多么地无味。</p><p>再到后来上大学后，终于有了充足的时间来追番。这才真正意义上开始了解 ACGN ，大一大二的时候开始入宅，每天下课后都躲到宿舍追番，死肥宅一个😂。再到现在也会看一些漫画和轻小说，每季度追 1~2 部动画。毕竟每周有点盼头也是咱生活的乐趣呀。</p><p>至于游戏，咱不太会玩儿，手残党😂，虽然也想从中收获快乐，但是就是觉着游戏和咱还是不太般配。去年的时候玩过一点 <code>崩坏 3rd</code> 后来就弃坑了，因为从中找不到快乐！不如像看书和看漫画去思考这部作品表达信念那样有趣，总之游戏是好玩的一点，但却不像其他文化作品一样能够启发人们去思考一些事情。</p><p>总之 ACNG 也是我们成长中的老师，它们会伴随着我走完这一生，无论多久都不会忘记这份初心。</p><h3 id="Q8：对寄托于内心幻想世界的生活态度的看法？"><a href="#Q8：对寄托于内心幻想世界的生活态度的看法？" class="headerlink" title="Q8：对寄托于内心幻想世界的生活态度的看法？"></a>Q8：对寄托于内心幻想世界的生活态度的看法？</h3><p>内心幻想世界?莫非说的是咱😂(大雾。幻想、想想、思考，这三者占据了咱一天中除了工作时间以外的绝大多数的时间，只是比例不同而已。只要不影响正常的工作和学习，都可以呀，反正咱喜欢这样的生活态度，总比那些一天到晚只顾的捞钱，娱乐至死地刷短视频的生活态度要好呀。</p><p>咱中学时有过一段时间活在纯粹幻想的世界中(中二病，绝对的黑历史，从来没和他人提过😂。那时咱看了很多很多的玄幻/穿越/修真小说，加起来至少要 1000 万字吧(惊！主要是因为讨厌学习不想上学，上课时就幻想者和小说中的主人公一样在异世界修真打怪升级，幻想着女主角就是班里喜欢的那个女生😂。总之我感觉那段时间是活在白日梦中，为了逃避枯燥的学习而活在幻想的世界中。后来直到高中时也会在课上听不下去的时候幻想些别的。上大学之后就很少再幻想了，因为现实世界充实起来很少有时间幻想这些事儿了。</p><p>现在呢？有时也会幻想着以后的生活，幻想着将来如何整理自己的小窝和书房；幻想着和想见的人面对面讨论木星上的那块大红斑？幻想着像苹果之父 <a href="https://zh.wikipedia.org/wiki/%E6%96%AF%E8%92%82%E5%A4%AB%C2%B7%E6%B2%83%E5%85%B9%E5%B0%BC%E4%BA%9A%E5%85%8B" target="_blank" rel="noopener">沃兹</a> 的父亲那样教未来的儿子有关电子电阻的知识（因为看了 <a href="https://m.douban.com/book/subject/21966356/" target="_blank" rel="noopener">《沃兹传:与苹果一起疯狂》</a> ,父与子结对编程多好玩呀(大雾 。幻想着送未来的儿子去上学…… 幻想着很多未来的生活。不同于中学中二病时期的那样，现在的幻想多少给了点自己活下去的动力和希望吧，也许有些事情永远不会实现，但保持对未来的期待和幻想才让当下的生活才有意义呀。</p><p>思考和想象则赋予咱更多现实意义，书籍就如咱思考的源泉，而想象则是思想碰撞💥后的涟漪，就如 <a href="https://zh.wikipedia.org/zh-cn/%E5%AE%87%E5%AE%99%E6%97%B6%E7%A9%BA%E4%B9%8B%E6%97%85" target="_blank" rel="noopener">《宇宙时空之旅》</a> 里的想象之舟，带着咱从天文学知识到生命起源、气候变化、科学精神都一一探讨，足以改变人生观，让人在抬头仰望星空时，少一点迷信和无知，多一份好奇与关爱。</p><p><img src="img/image-20200404190442465.png" alt="image-20200404190442465"></p><p>但前提是不要影响到现实中的工作和学习哦，毕竟现实世界也很重要呀。自己的小世界要靠在现实世界里的付出才能维持住的，当完成现实世界里的任务就躲到自己的小世界里天马行空遨游星际。这才是我们作为人原本的生活态度呀，毛茹饮血的古人们晚上仰望星空时不正也在幻想我们正在幻想的宇宙嘛~</p><p>睡觉吧，梦里啥都有（偷笑</p><h3 id="Q9：木子如何在一个人的自由生活如何获得快乐调剂？"><a href="#Q9：木子如何在一个人的自由生活如何获得快乐调剂？" class="headerlink" title="Q9：木子如何在一个人的自由生活如何获得快乐调剂？"></a>Q9：木子如何在一个人的自由生活如何获得快乐调剂？</h3><p>主要是通过学习新知识和瞎折腾来满足好奇心和求知欲，在此过程中收获的知识是最美味的快乐调剂。</p><p>比如之前咱在去年的时候折腾过 <a href="https://blog.k8s.li/esp8266-pc-switch.html">《使用 ESP8266 NodeMCU 打造 WiFi 开关》</a>，当时咱对嵌入式开发一点都不熟悉，对逻辑电路也不太懂。自己就从零开始学习各种概念和原理，看了一些科普视频，那期咱终于理解了场效应管、放大器、三极晶体管、触发器、晶体管等原理，才体会到由 0 和 1 控制的电子世界的神奇！</p><blockquote class="twitter-tweet"><p lang="zh" dir="ltr">今天花了一整天，从零开始学习了 Arduino 编程，制作好了一个 WiFi 控制的继电器开关，这样在公司也能通过一个 curl 命令控制家里的主机开关啦！<br>由 0和1 控制的世界真神奇！ <a href="https://t.co/ubt8ncbK1z" target="_blank" rel="noopener">pic.twitter.com/ubt8ncbK1z</a></p>&mdash; HTTP 502 (@muzi_ii) <a href="https://twitter.com/muzi_ii/status/1175408986557779968?ref_src=twsrc%5Etfw" target="_blank" rel="noopener">September 21, 2019</a></blockquote> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script><blockquote><p>『我一直觉得，费马、欧拉、哥德巴赫等人与现代人相比，他们具有格外旺盛的好奇心和丰富的想象力，并且充满了生机与活力。随着社会发展的日益成熟，好奇心和想象力不可避免地不断降低，但并不代表现代社会不再需要好奇心和想象力。』</p></blockquote><blockquote class="twitter-tweet"><p lang="zh" dir="ltr">作为一个垃圾佬，当然要自己 xjb 捣鼓啦，折腾起来很有成就感😂<br>期间学到不少东西，GPIO 引脚定义、三极管的原理、继电器、ESP8266 电路图、通过命令行控制 USB 电源、Arduino IDE 、设备树、光耦隔离、AT 指令 、TCP/IP 、串口通信、波特率等<br>折腾的意义也就在于此吧，去探究电子世界如何运行的。</p>&mdash; HTTP 502 (@muzi_ii) <a href="https://twitter.com/muzi_ii/status/1175445308681015298?ref_src=twsrc%5Etfw" target="_blank" rel="noopener">September 21, 2019</a></blockquote> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script><p>咱刚毕业那会，自己一个人生活了一段时间，也是不知道怎么给自己找乐趣儿，整天也是很抑郁的。不过后来看了 <a href="https://twitter.com/Philo2018" target="_blank" rel="noopener">Philo</a> 分享的 <a href="https://twitter.com/Philo2018/status/1160151987654025218" target="_blank" rel="noopener">开一个 thread 分享 #如何变快乐</a> tweet 之后咱也试着改变自己的生活态度。也开始给自己找快乐，以前追不到自己喜欢的女生会闷闷不乐，但慢慢地转变了过来。自己想要快乐还是要自己制造，不能依赖于他人，没有必须要得到的东西，也没有不能无法失去的东西。只有自己不会抛弃自己，所以一个人的快乐要学会从自己身上发掘。好奇心促使着咱去发掘新鲜事物，去探索未知世界。</p><p>以上就是咱自己一个人<code>玩泥巴</code>时候的快乐调剂：<strong>好奇心和求知欲！</strong></p><h3 id="Q10：木子の心愿单？最想收到的一份礼物？"><a href="#Q10：木子の心愿单？最想收到的一份礼物？" class="headerlink" title="Q10：木子の心愿单？最想收到的一份礼物？"></a>Q10：木子の心愿单？最想收到的一份礼物？</h3><ul><li><p>未来能拥有属于自己的小窝和书房😁</p></li><li><p>《数学女孩4：随机算法》</p></li><li><p>《法律立法与自由》</p></li><li><p>《末日三问》</p><p><code>做一生的朋友券</code> 出自动画 <a href="https://bgm.tv/subject/9912" target="_blank" rel="noopener">日常 nichijou</a> 25 话😄</p></li></ul><p><img src="img/nichijo.png" alt="img"></p><h2 id="end"><a href="#end" class="headerlink" title="end"></a>end</h2><p>去掉了一些敏感信息，内容少有修改~~</p><blockquote><p>  每一个平凡的日常都是连续发生中的奇迹</p><p>  像这样种种微小的事情加起来，才形成了『当下』的我们啊</p></blockquote><p>汝想和咱以笔谈的方式交换问题，欢迎啦😂，咱会认真回复的）其实下一个人咱已经想好啦😂</p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;h2 id=&quot;由来&quot;&gt;&lt;a href=&quot;#由来&quot;
        
      
    
    </summary>
    
    
      <category term="生活" scheme="https://blog.k8s.li/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="life" scheme="https://blog.k8s.li/tags/life/"/>
    
      <category term="笔谈" scheme="https://blog.k8s.li/tags/%E7%AC%94%E8%B0%88/"/>
    
  </entry>
  
</feed>
