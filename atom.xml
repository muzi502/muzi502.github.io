<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>木子</title>
  <icon>https://blog.k8s.li/icon.png</icon>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://blog.k8s.li/"/>
  <updated>2020-05-21T13:20:06.274Z</updated>
  <id>https://blog.k8s.li/</id>
  
  <author>
    <name>木子</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>无砖可搬的日子|换厂记</title>
    <link href="https://blog.k8s.li/Brick-removal-note.html"/>
    <id>https://blog.k8s.li/Brick-removal-note.html</id>
    <published>2020-05-16T16:00:00.000Z</published>
    <updated>2020-05-21T13:20:06.274Z</updated>
    
    <content type="html"><![CDATA[<h2 id="咕咕咕"><a href="#咕咕咕" class="headerlink" title="咕咕咕"></a>咕咕咕</h2><p>本来打算写一篇《搬砖日记与思考》的，而且想写的内容都已经保存在了我的 telegram 里，但是后来考虑到我的博客将会公布给同事们，为了不必要的影响还是将一些冲塔的内容保存在自己的日记里，等以后再公布吧，或许是十年二十年之后吧。下面的内容就是我从前公司离职后这段时间的一些经历吧(●ˇ∀ˇ●)，因为是离职了，这段时间暂时性地成为了无业游民，也就无砖可搬了😂，所以题名就叫《无砖可搬的日子|换厂记》吧🤣</p><h2 id="面试小结"><a href="#面试小结" class="headerlink" title="面试小结"></a>面试小结</h2><table><thead><tr><th align="center">公司</th><th align="center">城市</th><th align="center">方式</th><th align="center">面试</th><th align="center">offer</th></tr></thead><tbody><tr><td align="center">XX</td><td align="center">深圳</td><td align="center">Email</td><td align="center">❌</td><td align="center">❌</td></tr><tr><td align="center">XX</td><td align="center">上海</td><td align="center">Email</td><td align="center">⭕</td><td align="center">❌</td></tr><tr><td align="center">XX</td><td align="center">上海</td><td align="center">Email</td><td align="center">❌</td><td align="center">❌</td></tr><tr><td align="center">XX科技</td><td align="center">杭州</td><td align="center">BOSS</td><td align="center">✅✅</td><td align="center">✅</td></tr><tr><td align="center">XX科技</td><td align="center">深圳</td><td align="center">Email</td><td align="center">✅</td><td align="center">✅</td></tr><tr><td align="center">XX科技</td><td align="center">深圳</td><td align="center">BOSS</td><td align="center">❌</td><td align="center">❌</td></tr><tr><td align="center">XX科技</td><td align="center">上海</td><td align="center">BOSS</td><td align="center">✅❌</td><td align="center">❌</td></tr><tr><td align="center">腾讯云</td><td align="center">深圳</td><td align="center">BOSS</td><td align="center">✅✅❌</td><td align="center">❌</td></tr><tr><td align="center">XX</td><td align="center">杭州</td><td align="center">BOSS</td><td align="center">✅❌</td><td align="center">❌</td></tr><tr><td align="center">XX</td><td align="center">深圳</td><td align="center">BOSS</td><td align="center">✅✅</td><td align="center">✅</td></tr><tr><td align="center">XX</td><td align="center">深圳</td><td align="center">Email</td><td align="center">✅✅</td><td align="center">✅</td></tr></tbody></table><h2 id="9-号"><a href="#9-号" class="headerlink" title="9 号"></a>9 号</h2><p>早上去了办公室上班，收拾了一下电脑，把自己的固态硬盘拆下来，又重新安装了 Windows 方便交接给同事。之后再找领导和公司董事签字，见到公司的董事，心里还是战战兢兢的。不过出乎意料，过程很顺利，公司董事也很贴切临走前简单地祝福了几句。签字完成之后还要回公司本部办理财务结算以及劳务合同终止协议。乘着地铁来到公司，测量体温登记就上楼找到人事。和人事部门经理简单聊了一下，主要是问了些薪资待遇、为什么要去一线城市的原因等等，这些问题在我面试的过程中也被经常问到过，也就如实地回答了。</p><p>说实话，前公司无论时待遇还是同事关系上，都很好，而且在我离职财务结算的时候，我本来需要缴纳一笔 5000 元左右的款项，但是公司领导层考虑到我还刚刚毕业一年，为我的前程着想暂时不予扣除。对我来说这笔钱简直是个大救星，因为在五一之后身上的余额不到 1 万元，若是没有公司的这笔款项豁免，或许现在的我只能睡几百块钱的青旅，将就着住几个月才能缓解下来，这一点的确对于我来说是极大的帮助。</p><p>和国内某些大厂相比，东家对待离职员工的态度真是高下立判啊😂。看来自己还是很幸运去年毕业的时候遇到这么好的公司，虽然已经离开了那里，但是很感谢他们在这段时间给予的帮助。</p><p><img src="img/image-20200516131617183.png" alt="image-20200516131617183"></p><p>还有一点，在四月份提出离职申请的时候，心里十分愧疚，因为在去年入职的时候刚答应了领导要在这里呆下去的。而且领导对我们新人也是十分关照有加：去年的时候去外地出差，那几天一直是领导请客吃饭；上个月公司组织去体检，我上午体检完回来后中午喜提 38 度发热大礼包😂。然后去医院做号新冠病毒检验，期间领导一直在打电话，前前后后一共打了二十个电话，一直关注着我身体情况怎么样，有没有好转，晚上睡觉前又打电话问退烧没有。生病的那几天，没有和家人说，真正担心到我的也只有领导以及我的另一个同事。那点时间才觉着，现实世界才是我们切切实实能感触到的，在自己最难过的时候，能主动帮自己的人是值得珍惜终生的朋友。</p><p>办完离职手续，拿到《终止劳动合同通知书》，有点像大学的录取通知书😂，唯有拿着它才能去下一家公司入职报到。还有一份之前签订的保密协议，因为从事的岗位涉及机密信息，有一点限制，比如离境或出国之前需要报备，这一点比较麻烦。不过还好啦，依照目前的疫情情况，估计一年之内不会离境或出国了。</p><p>晚上的时候在住的小区附近吃完了最后一顿晚饭，那种感觉真是……此生可恋😭</p><blockquote class="twitter-tweet"><p lang="zh" dir="ltr">晚上吃的这道菜叫 “火爆茄子”，的确够火爆的😡，吃完之后我火冒三丈想砸桌子，肚子里仿佛有千只草泥马奔腾着而过……菊花要遭受 DDoS 攻击了😭 <a href="https://t.co/V4whuhJFwQ" target="_blank" rel="noopener">pic.twitter.com/V4whuhJFwQ</a></p>&mdash; 木子 (@muzi_ii) <a href="https://twitter.com/muzi_ii/status/1259090385491488770?ref_src=twsrc%5Etfw" target="_blank" rel="noopener">May 9, 2020</a></blockquote> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script><p>晚上的时候进行了最后一场面试，面试的过程还算顺利，虽然还不知道结果，但是为了保底的选择，还是动身前往深圳。因为深圳的这家公司要求的入职时间就在近几天，到那里还要租房体检等一堆杂事儿要做，这需要几天的准备时间。</p><h2 id="10-号"><a href="#10-号" class="headerlink" title="10 号"></a>10 号</h2><p>第二天早上还是按照往常的时间起床，收拾好行李，临走之前环顾了一下生活了一年的小窝，多少有点不舍离开这座生活了五年的城市。回想起大一时从千里之外的家乡来到这里求学读书，在这里四五年的生活，渐渐地习惯了这座城市。大学和前女友恋爱的那段时间也曾计划或将来要在这里安身立命，成家立业，有一个幸福美满的家庭。我想这也是大多数人的正常生活和归宿吧。不幸的是后来还是和前女友分手了，自那以后也再也不想恋爱了，因为自己还是喜欢一个人的生活，而且喜欢/爱上他人是种不自由的生活，要考虑对方的感受，有时为了维系亲密关系不得不违背自己的原则，这样的生活真的热爱不起来，还是一个人玩泥巴爽呀😋。</p><p>去年毕业之后就找到这里住的，上下铺的青旅，四人间每人 300元，对于刚毕业的我来说这里无疑是最好的归宿，因为当时实习的工资每天也就 120 元，自己在公司附近单独住一间房子的话，每个月住房费用至少要 1300+ ，而住青旅的话每个月能节省 1000 元。其次选在住在这里是因为距离公司只有 5 分钟的步行路程，中午的时候还能回来午休睡一会，简直舒服极了，相比于一块入职的同事每天要 2 个多小时的上下班路程好很多。本来当时打算住到转正之后再搬出去住的，不过等到转正之后，发现渐渐地习惯上了，接着住下去也没问题，于是就一直住到我离开这里，将近一年的时间。</p><p>而下一座城市（深圳）也是找到上下铺的青旅，实在是住不起公司附近的房子，对于均价 3000+ 而且押一付三的房子来说，接近 1 万的租房费用就好花费我所有的积蓄了，没办法只能再去住上下铺的青旅来维持生计了，一个字，穷啊（（（</p><blockquote class="twitter-tweet"><p lang="zh" dir="ltr">溜了溜了，离开了居住了一年的小窝和生活了五年的城市）<br><br>只是再也找不到每月三百块钱的房子了（ <a href="https://t.co/HIIoYTo95P" target="_blank" rel="noopener">pic.twitter.com/HIIoYTo95P</a></p>&mdash; 木子 (@muzi_ii) <a href="https://twitter.com/muzi_ii/status/1259296422228197376?ref_src=twsrc%5Etfw" target="_blank" rel="noopener">May 10, 2020</a></blockquote> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script><p>到了时间点就动身前往机场，路程五十分钟左右，在车上拿起 kindle 接着看徐贲的《人以什么理由来记忆》。因为在二月份的时候剩余价值里的一期节目中提到过《布达佩斯往事：冷战时期一个东欧家庭的秘密档案》这本书，而这本书的序言正是徐贲老师写的，之前我也读过他的论文 <a href="https://matters.news/@philosophia1979/徐贲-中国的-新极权主义-及其末世景象-野兽荐读-bafyreiegbg5tti3ljc7newaah5wp36ncf7fvb2oaovd6p7elc4xqfhbcd4" target="_blank" rel="noopener">《中国的“新极权主义”及其末世景象》</a>) ，随意对他关注的内容也有所了解。总感觉这本书更像是阿伦特、加缪、萨特、哈维尔等人对于极权主义著作及思想的解析。就像在剩余价值里提到的，我们读这些历史的时候，而当下就仿佛置身于历史之中一样。书中记录苏联和纳粹德国极权统治改造人性的言论审查、秘密警察、集中营、无言论自由和新闻自由、党媒愚民洗脑等，这些描述极权统治的历史，再看一看当下，我们不正置身于其中吗？</p><p>来到机场在机场过安检检查行李的时候，一块祖传的永磁铁被扣下了，（这块磁铁是我高中时从家里破旧的音响上拆下来的，一直拿来磁吸一些螺丝用，垃圾佬常用的工具）。这才知道飞机上是不能携带磁铁的≡(▔﹏▔)≡，没办法，只能丢下了。</p><p>顺利过了安检，等待一段时间开始登机，座位在飞机靠窗的位置，中途的风景还不错。看到窗外的云朵，想起了《地球的演变故事》里有关大气层的科普：</p><blockquote><p>地球周围的大气层在垂直方向上可以分为对流层、平流层、中间层、热层和外层。其中对流层是最低的一层，和人类的关系最为密切。而大中型飞机除起飞和降落外，多是在平流层中飞行。这主要是因为：平流层中大气垂直运动很少，以平流运动为主，飞机在其中受力比较稳定；水汽和尘埃含量少，能见度很高；对地面的噪声污染相对较小；飞鸟飞行的高度一般达不到平流层，可以避免机鸟相撞的事故。平流层的这些特点，决定了飞机适宜在这层大气中飞行。平流层的海拔高度与纬度有很大关系。低纬度地区平均在16～18千米以上，中纬度地区平均在10～12千米以上；高纬度地区平均在8～9千米以上。</p><p>我国民航规定，中型以上的民航飞机都在高空飞行，此处的高空是指海拔7000～12000米的空间。飞行高度层高度8400米（含）以下，每300米为一个飞行高度层；飞行高度层高度8400米（不含）以上，每600米为一个飞行高度层。飞机在相对、交叉、超越飞行时，必须保持不得小于规定高度层米数的垂直间隔，以确保飞行安全和交通顺畅。 此外，小型飞机活动区域一般在3000米以下。</p></blockquote><p><img src="img/20200510_045930999_iOS.jpg" alt="image-20200516201412794"></p><p>下了飞机之后乘坐地铁到公司附近的地铁站，和房东约定好了来接我。出站之后房东带领着去她家，到了之后感觉落差十分巨大w(ﾟДﾟ)w。在不到 5 平米的房间里塞下一张 0.8m*2m的床，另外半边是不到一米的过道。这也是迫不得已的选择吧，因为附近的房子基本上都是押一付三，而且价格普遍在 3000+ ，再稍微远一点能找到 1500+ 左右的房子，不过对于押一付三来说我依旧无法承担的起。打算先暂时在这里将就一段时间，等存款足够了就搬出去单独住一间。这里的价格也不便宜，每月房租 800，押金 850，不需要交水电暖费用。和我以前住的 300 块钱的青旅环境还是差太远了😂。</p><p><img src="img/photo_2020-05-10_19-35-42.jpg" alt="img"></p><p>晚上在附近吃了三菜一汤的快餐，晚上睡觉的时候十分酸痛，我的行李还没有到，只能用床单简单地盖在身上。在这里睡了几晚，此生可恋，以后再也不想住青旅了。我觉着还是应该对自己好一点，拥有一个自己独立的小窝多么地重要。毕竟谁也不知道自己会不会发生意外突然离开这个世界，如果生前活得像我这样在是太惨了😂。感觉应该对自己更好一点，比如回家的时候买火车票的时候不能再像以前那样买二十几个小时的硬座，自己能赚钱了应该选择更省时舒适的出行方式，应该多多改善一下自己的生活，不能再像以前穷学生一样过得惨兮兮😂</p><h2 id="11-号"><a href="#11-号" class="headerlink" title="11 号"></a>11 号</h2><p>早起八点多去医院体检，去医院有点害怕。因为上个月公司组织去医院体检，从医院回来之后我就突然发烧了，血清检测是因为细菌感染。对于我这种长期（六年）素食的人来说，如果不注重营养均衡，免疫力会下降的，现在我就属于那种免疫力低下的人群，稍有不慎就会生病😐。不过为了坚持自己的原则，这点牺牲还是可以承受的(●ˇ∀ˇ●)。</p><p>没想到医院体检的人数那么多，需要预约到后天才有空位，最终还是预约到了后天。预约完体检的时间之后就回到住的地方，天气实在是太热了，刚来还是不太习惯，加上又是狭窄的空间，给人一种很烦躁的感觉。联系了一下另一家公司的 HR ，(也就是现在最终入职的公司)，给的回复是三天之内给出面试结果。内心也十分焦急地等待着，自己感觉只有三成的把握拿到 offer。如果拿到的话就要考虑离开这座城市，又要从头开始，找房子，寄行李，买机票等等。</p><p>躺床上休息会儿，床板子太硬了，还是坐起来拿着 kindle 看了会书，一会的时间就把《七堂极简物理课》看完了，这本书……写的真的不太好，对于具备只是一些简单的感念普及而已，倒不如去看看《星空的琴弦》或者《万物简史》。</p><p>下午的时候顺丰快递师傅打电话让我去取件，邮寄过来的行李已经到了。70 公斤的行李从小区门口搬运到 18 楼，还好快递师傅借给了我手推车方便了些。把行李拆开又重新分拣了一下</p><p>晚上的时候终于收到了面试通过的消息，简单谈了一下薪资。比现在的这家公司薪资要低 1k，虽然低了一点但还是能接受。于是就计划一下明天的事情，早早地睡觉了。</p><h2 id="12-号"><a href="#12-号" class="headerlink" title="12 号"></a>12 号</h2><p>早起去医院取消了体检退款很快就到账了。回来之后就收拾行李，把一些没用的破玩意都扔了，机箱取出来自己带在身上。为了减轻重量，上次邮寄回来 70KG 花了 318￥😭。这次最终减轻到 50KG ，邮寄费用 210￥，还算能接受的范围。真的<strong>是买书一时爽，搬家火葬场！</strong>几十斤中的书籍搬家真的是个累赘😭。收拾完毕后联系昨天给我派送快递的师傅邮寄快递，由于地点房子还没有找好，地址就填写了公司对面的小区，希望在那个小区里找到合适的房子吧。</p><p>上午十一点多的时候收到了公司的正式 offer ，约定好 18 号入职。随后联系将要（13号）入职的 A 公司 HR ，向她道歉并如实地说明了不能入职的原因。多少有点愧疚，因为第二天就要入职了，在前一天再通知人家说不去了，换做谁都很气愤吧。</p><p>下午的时候，收拾好行了就去机场附近的酒店，由于是早上的飞机，时间紧迫只好住在酒店附近了，还好酒店提供免费接送的服务，在前台登记一下出发时间，第二天司机师傅会开车送到机场。</p><p>晚上的时候约朋友吃饭，一个高中同学，关系还可以。这位朋友有点奇葩，大一的时候是在大连海事大学上的航海专业，大一上完之后的暑假又退学回家复读一年，最终考上了一所 211 大学并学的计算机专业，现在在 BAT 做后端开发，薪资比我高很多，而且还拿到了 shoppe 的 offer ，有点同辈压力🍐，感觉自己太菜了😥。交谈的过程中本以为他还是以往那样岁月静好，不过印象大反转。原来是他家也遭受到社会主义铁拳的重锤😂，和我一样的感受。然后谈了几位高中同学的现状，他还嘲讽另几位岁月静好的同班同学没有遭受社会铁拳的毒打🤣。哈哈啥，我倒是觉着岁月静好没有什么不对的，我希望祝福他们能这样安安稳稳地生活下去吧，但愿他们不要想我这样遭受社会主义铁拳的重锤。《心理测量者》小说里曾提到过这样一段对话：</p><blockquote><p>“安全，完美的社会只是个幻想罢了。我们生活的社会如今还是‘危险社会’”</p><p>“什么意思……？”</p><p>“很久以前……德国还算个国家的时候，有个社会学家，乌尔希里·贝克（经常说的话。指社会依赖‘便利但危险’的东西，政府让我们背负起风险……但风险被巧妙地分散，分配以至于谁也没觉察到，不对，不是没觉察到，而是即使觉察了也当没看见，或许每个人都在睁一只闭一只眼，危险固然存在，但如果不反过来当作其不存在的话就无法保持理智。 “这座城市的市民，会想到这么多么，就连我也算在内。“</p></blockquote><p>我们共同背负着政府强加给我们的危险，而这种危险来自于权力的集中化。这种危险巧妙地分散到每个人身上，以至于谁也察觉不到它的存在，即便是察觉到，也只能睁一只眼闭一只眼。如果不把它当作不存在的话，就无法在这个社会生存下去。</p><p>和朋友已快到海边逛了一会儿，大晚上的海边的风景确实没有什么值得欣赏的，之后就回到酒店休息了。</p><h2 id="13-号"><a href="#13-号" class="headerlink" title="13 号"></a>13 号</h2><p>凌晨乘飞机出发，还好酒店的师傅免费开车送到机场，在办理行李托运的时候，行李超重了 5KG，就把我的台式机机箱取了出来抱在怀里随身携带者吧，也不知道能不能过案件，毕竟是接近 5KG 的重货。过安检的时候没想到大摇大摆地抱着机箱就过了安检，有点出乎意料。顺利登机后坐在了靠窗的位置，休息两个小时之后就到达了目的城市。</p><p>下飞机后坐机场巴士到酒店，也是在公司附近。歇息一会儿后开始洗衣服，错把酒店洗衣房里的漂白粉当作洗衣粉用了，一股脑地放了一大勺再洗衣机里，洗完之后我那件黑色的 USTC LUG 定制版 T 恤被加上了一层红褐色的滤镜，我欲哭我累😭，太难受了，本打算下周入职的那天要穿的😭。一件好好地 T 恤就这样被摧残了，难受死了😑。</p><p>下午休息了一会去看房，联系的蛋壳公寓，看了两户房子，还算满意，并且可以押一付一，总价格不到 3000 元，还能接受。不过到最后蛋壳公寓的老哥才给我谈分期付款的事儿。之前我从未住过这种连锁公寓，没想到需要和微众银行签订一年的分期协议，这一点很坑，虽然价格诱人但我本人对这种分期的方式及其反感于是还是放弃了在蛋壳公寓上租房。房子和带我看房的老哥都很满意，只是不想使用分期付款的这种方式。之后再支乎上看到了 <a href="https://zhuanlan.zhihu.com/p/139490531" target="_blank" rel="noopener">但有“蛋壳”方面的租房找你，应届生请务必看完这篇文章</a>，还好我没有踩坑，庆幸庆幸。之后又联系了自如的房子，自如押一付一的房子价格贵了一大截，房租每月要 2100，押金 2000 有点接受不了就没有再考虑。贫穷使我住不起房（（</p><p>终于在闲鱼上联系到一个老哥，说是转租的房子，而且不需要押金，每月付房租就可以，这点很诱人啊。于是就迫不及待地看房，最终见面之后，很痛快的完成了交易，终于解决了最头疼得一件事儿。</p><h2 id="14-号"><a href="#14-号" class="headerlink" title="14 号"></a>14 号</h2><p>上午酒店退房，搬到新住的地方，收拾一下房间，拿以前的毛巾用手拖完了地板，做了一会家务。下午的时候顺丰快递寄行李，行李送到小区门口，50公斤的行李，从小区门口到楼下大概 200 米的距离，扛起来真的是有点远啊😭，因为是自从上大学之后就没再搬砖干农活的原因，体力大不如从前，扛着 100 斤的行李，200 米的距离换了十几次的肩停下来歇息几分钟，远远低于业界 100KG/5KM 不换肩的标准，实在是愧对于自己的肌肉啊🙃，惭愧惭愧（以前我十五岁辍学再工地上搬砖那年，自己一个人扛一百多斤中的机器在工地上行云流水穿梭于各个沟道之间，（偷笑，人老了啊，失去了年轻时的热血.jpg</p><p>晚上买些生活用品，小土豆告诉我在<code>还不晚</code>上买合适，价格便宜而且种类齐全。贫穷如我只能靠抠和薅来满足生活了，听小土豆的建议在马云家逛了一个多小时买好了以后要用到的生活物品。接着看了一会徐贲的书就睡着了，自己由于太忙的原因阅读的时间远不如从前了＞︿＜</p><h2 id="15-号"><a href="#15-号" class="headerlink" title="15 号"></a>15 号</h2><p>早上起来之后出门骑车单车往公司附近逛一圈，熟悉一下上班时的路线，看看需要花费多长时间。回来之后就接着去银行办理银行卡用作工资卡。接着完成之后又去了照相馆拍 1 寸的照片，办理社保卡的时候会用到。中午的时候在银行附近的兰州拉面餐馆里吃了碗鸡蛋拉面，味道还是正宗的兰州拉面。老板和厨师看样子也是回族人。看了一下菜单，番茄炒饭、酸辣白菜、酸辣土豆丝、鸡蛋拉面等。哈哈哈，这就是以后常来吃饭的地方了😂。</p><h2 id="16-号"><a href="#16-号" class="headerlink" title="16 号"></a>16 号</h2><p>早上八点的时候和闲鱼上的老哥约好去某地面基交易山地车，因为距离比较远所以就乘坐公交到了约定好的地方。见面之后简单寒暄了一下，先试骑了一段距离，刹车和变速都还可以，就很痛快地买下来这辆车。从此也是有车一族了（偷笑。有了一辆车真是方便啊，之前下楼后步行到小区门口需要 5 分钟，现在骑车只需 1 分钟就够了，比以往快了很多。之所以买一辆二手的山地车是因为早上上班时小区门口的共享单车都被上班族骑走了，为了节省时间还是整辆自己的单车吧，而且共享单车骑起来真费劲，速度太慢了。换做 24 速的山地车速度提升一倍，时间也能缩短一半，以往 15 分钟的骑行路程现在骑快一点的话只需要 10 分钟。那还是按照往常那样 8 点半出发，9 点之前赶到公司是没有问题的。而且自己最喜欢的运动也是骑行，高中的是基本上都是骑车去上学，高考完的时候曾自己一个人骑车去北京。来回 1000公里的距离，想想当初也是闲着蛋疼。曾在大一的时候计划或要去骑行川藏线，四年之后看来这个小目标要打水漂了。或者等到国庆的时候准备骑行去玩儿，骑行去海边玩儿，嗯，就这样定下来了，如果读者又想去的话可以联系咱一块去😂</p><p>下午修空调，感觉被宰了，我估计着应该就是一根跳线没有接好或者接对导致空调主机无法开启。要是换作我家的空调，这种小问题自己就能解决，毕竟家里的电磁炉洗衣机空调电视机电风扇等等家电自己都拆过修过😂。因为房东家的空调是中央空调价格昂贵自己还是不敢轻易尝试，所以还是让房东来请维修工人处理吧。下午的时候房东请来的维修工人倒腾一会儿硬是给我说主板坏了(* ￣︿￣)。于是好戏上场，我就和维修工人杠上了。我问他主板哪里坏了？他说电容坏了，需要更换主板。我内心一万匹草泥马奔腾而过，一个电容坏了就要换整个主板？？？？我当场掏出我祖传的电烙铁要给他演示一下怎么换电容，飞线换电容植球等等这点本领咱还是有滴，电容坏了换电容不得了？当我傻子来忽悠嘛。巴拉巴拉和他扯了半天，最终……还是收了 640￥。虽然这笔钱是房东来付的，但是还是很不心甘情愿，就这样被别人宰一刀，无论宰到谁身上都不好受。</p><p><strong>主板坏了</strong> 这招对于家电或者电子维修昂行业的神器呀，空调小毛病给你整个主板坏了的接口从你身上薅一把羊毛。类似的事情在修理笔记本电脑或者电视机等等都是常见的事情。</p><p>下午的时候散热硅脂和 CPU 延长线到了，拿了快递之后就开始组装台式机。在拆主板的时候，简直震惊死我，没想到我的主板 CPU 4PIN 延长线已经老化短路烧毁了，我使用了一年竟然浑然不知。之前在给 <a href="https://github.com/webp-sh/webp_server_go" target="_blank" rel="noopener">Webp Server Go</a> 做 benchmark 的时候，CPU 一旦满载就直接黑屏，各种排查都没有找到原因。直到今天我才明白，原来是 CPU 供电线的问题……，我内心一万匹草泥马。无良商家坑惨我了，去年的时候装机没有注意到这根线的质量这么差，还好现在拆机的时候发现了，不然那一天这根线抽搐了突然就 BOOM 可不好了😡。</p><p><img src="img/20200514_070432138_iOS.jpg" alt="image-20200517101303617"></p><p>组装后的台式机效果图，把路由器放在了机箱上面。主路由器还是原来的 <a href="https://www.netgear.com/support/product/R6300v2.aspx" target="_blank" rel="noopener">R6300V2</a> ，是去年的时候花了 170￥ 在闲鱼上捡垃圾搞来的。旁边白色的就是 N1 盒子，当软路由来用(<a href="https://blog.k8s.li/N1-openwrt.html">N1 盒子刷入 OpenWrt 并部署 K3s</a>)。R6300V2 的性能还是太弱，尤其是对于 AES-256 或者  GCM-256 这种加密算法还是力不从心，N1 盒子小钢炮当旁路网关再适合不过了。另外从 R6300V2 的 USB 接口给 ESP8266 开发板供电，用来远程开关机(<a href="https://blog.k8s.li/esp8266-pc-switch.html">使用 ESP8266 NodeMCU 打造 WiFi 开关</a>)。</p><p><img src="img/20200517_022447573_iOS.jpg" alt="img"></p><h2 id="17-号"><a href="#17-号" class="headerlink" title="17 号"></a>17 号</h2><p>今天又是一个平凡的日常，无非就是拿了些快递，在网上买的生活用品也到齐了，也渐渐地习惯了这里的生活，慢慢地融入到这里。买了一箱手抓饼和一些蔬菜，准备早上自己做饭吃，素食者的福音呀，一张饼裹上几片菜叶子，再加上一个煎蛋，抹上番茄酱和沙拉酱，朴素一餐😋</p><p>明天就要入职开始搬砖了，像新生开学一样，充满着期待又有一点害怕，希望明天顺利吧。感觉就像是大一新生开学一样，离开熟悉已久家来到这个陌生的城市，拿着<del>录取通知书</del>《录用通知书》和《离职证明》到新公司入职，认识新的朋友，开始一段新的旅程。</p><p>回想起这几天的经历，我从未想过会来到这里，也从未想过会离开生活已久的城市。若是说这一切的起点，就翻了翻去年写的<a href="https://blog.k8s.li/thinking-2019.html">《毕业后的一点思考》</a></p><blockquote><p>我依稀记得高中毕业时最后一堂课上，我们的班主任给我们班同学讲过一句话<strong>你所读过的书和你接触的人，决定了你以后能走什么样的路</strong>，我一直铭记至今，并把它当作大学四年的唯一信条，很庆幸，正是这则信条伴随着我完成了思想的改造和重塑。现在我手机上还保留着当时班主任讲话时的录音，或许这是我值得保存众生的财富。</p></blockquote><p>也正是因为这篇文章的影响，让我认识到了一些新的小伙伴：<a href="https://nova.moe/" target="_blank" rel="noopener">nova</a> 和 <a href="https://dmesg.app/" target="_blank" rel="noopener">小土豆</a> 。认识到他们之后有点同辈压力🍐，他俩都在很牛逼的公司上班，自己却在一个二线小城市过着安逸的生活，这也迫使我想要走出心里舒适圈，去上海或深圳闯一闯，而且和小土豆也约定好了一起去同一个城市。最后还是要感谢一下小土豆，在我刚开始投简历面试的那几天给予很多精神上的帮助😘。那段时间确实各种压力、挫败感、自我怀疑否定、抑郁等负面情绪特别严重，有时面试下来连呼吸都感受到压力胸闷。没有这两位朋友的帮助，或许刚想要破壳而出的我因为害怕就放弃了，现在可能还是原地不动。放弃安安稳稳的生活走出心里舒适圈，确实那种压力感不太好受，伤心难过的时候就找个朋友来倾诉一下，不要一个人憋着(o゜▽゜)o☆。</p><p>Bless, Bless!</p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;h2 id=&quot;咕咕咕&quot;&gt;&lt;a href=&quot;#咕咕咕&quot;
        
      
    
    </summary>
    
    
      <category term="生活" scheme="https://blog.k8s.li/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
  </entry>
  
  <entry>
    <title>kubelet 挂载 volume 原理分析</title>
    <link href="https://blog.k8s.li/kubelet-mount-volumes-analysis.html"/>
    <id>https://blog.k8s.li/kubelet-mount-volumes-analysis.html</id>
    <published>2020-04-30T16:00:00.000Z</published>
    <updated>2020-04-30T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近在 kubernetes 中使用 NFS 存储的时候遇到了一个小问题，也找到了解决办法，不过还是想深入地了解一下 kubelet 挂载存储的原理和过程，于是就水了这篇博客 😂。虽然平时也知道 PV 、PVC 、存储类等怎么使用，但背后的过程和原理却没有深究过，有点一知半解的感觉。唉，太菜了 😑 （<code>流下了没有技术的眼泪.jpg</code></p><h2 id="疑惑"><a href="#疑惑" class="headerlink" title="疑惑"></a>疑惑</h2><blockquote><p>当使用 NFS 存储的 Pod 调度到没有安装 NFS client (nfs-utils 、nfs-common) Node 节点上的时候，会提示 NFS volume 挂载失败，Node 宿主机安装上 NFS client 后就可以正常挂载了，我想是不是 kubelet 在启动容器之前是不是调用 system-run 去挂载 NFS ，如果 Node 宿主机没有安装 NFS client 就无法挂载。</p><p>翻了一下源码 <a href="https://github.com/kubernetes/kubernetes/blob/master/vendor/k8s.io/utils/mount/mount_linux.go#L115" target="_blank" rel="noopener">mount_linux.go</a> 和 <a href="https://github.com/kubernetes/kubernetes/pull/49640" target="_blank" rel="noopener">49640</a> 这个 PR。里面提到的是 kubelet 挂载存储卷的时候使用 system-run 挂载，这样一来，即便 kubelet 挂掉或者重启的时候也不会影响到容器使用 kubelet 挂载的存储卷。</p></blockquote><p>请教了一下两个大佬 <a href="https://zdyxry.github.io/" target="_blank" rel="noopener">Yiran</a> 和 <a href="http://gaocegege.com/Blog/about/" target="_blank" rel="noopener">高策</a>，他们也不太熟悉😂，不过也找到了解决思路。在使用 GlusterFS 的时候，Node 节点也需要安装 GlusterFS 的客户端，不然 kubelet 也是无法挂载 Pod 的 volume。由此可以确认的是： kubelet 在为 Pod 挂载 volume 的时候，根据 volume 的类型（NFS、GlusterFS、Ceph 等），Pod 所在的 Node 节点宿主机也需要安装好对应的客户端程序。</p><h2 id="问题复现"><a href="#问题复现" class="headerlink" title="问题复现"></a>问题复现</h2><p>集群信息：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-master-01 opt]# kubectl get node</span><br><span class="line">NAME            STATUS   ROLES    AGE    VERSION</span><br><span class="line">k8s-master-01   Ready    master   8d     v1.17.4</span><br><span class="line">k8s-master-02   Ready    master   8d     v1.17.4</span><br><span class="line">k8s-master-03   Ready    master   8d     v1.17.4</span><br><span class="line">k8s-node-02     Ready    &lt;none&gt; 8d     v1.17.4</span><br><span class="line">k8s-node-3      Ready    &lt;none&gt; 3d3h   v1.17.4</span><br><span class="line">node1           Ready    &lt;none&gt; 108s   v1.17.4</span><br></pre></td></tr></table></figure><p>为了方便复现问题还是在 Rancher 上创建了 PV 和 PVC，以及包含两个 Pod 的一个 <code>Deploment</code>，在创建 Deploment 的时候，指定将 Pod 调度到新加入的节点上，即这个节点上并没有安装 NFS 客户端。</p><p><strong>PV 信息如下：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-master-01 opt]# kubectl describe pv nfs211</span><br><span class="line">Name:            nfs211</span><br><span class="line">Labels:          cattle.io/creator=norman</span><br><span class="line">Annotations:     field.cattle.io/creatorId: user-gwgpp</span><br><span class="line">                 pv.kubernetes.io/bound-by-controller: yes</span><br><span class="line">Finalizers:      [kubernetes.io/pv-protection]</span><br><span class="line">StorageClass:    nfs216</span><br><span class="line">Status:          Bound</span><br><span class="line">Claim:           ops-test/nfs-211</span><br><span class="line">Reclaim Policy:  Retain</span><br><span class="line">Access Modes:    RWX</span><br><span class="line">VolumeMode:      Filesystem</span><br><span class="line">Capacity:        10Gi</span><br><span class="line">Node Affinity:   &lt;none&gt;</span><br><span class="line">Message:</span><br><span class="line">Source:</span><br><span class="line">    Type:      NFS (an NFS mount that lasts the lifetime of a pod)</span><br><span class="line">    Server:    10.20.172.211</span><br><span class="line">    Path:      /nfs</span><br><span class="line">    ReadOnly:  false</span><br><span class="line">Events:        &lt;none&gt;</span><br></pre></td></tr></table></figure><p><strong>PVC 信息如下</strong></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"accessModes"</span>: [</span><br><span class="line">        <span class="string">"ReadWriteMany"</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">"annotations"</span>: &#123;</span><br><span class="line">        <span class="attr">"pv.kubernetes.io/bind-completed"</span>: <span class="string">"yes"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"baseType"</span>: <span class="string">"persistentVolumeClaim"</span>,</span><br><span class="line">    <span class="attr">"created"</span>: <span class="string">"2020-04-30T08:59:15Z"</span>,</span><br><span class="line">    <span class="attr">"createdTS"</span>: <span class="number">1588237155000</span>,</span><br><span class="line">    <span class="attr">"creatorId"</span>: <span class="string">"user-gwgpp"</span>,</span><br><span class="line">    <span class="attr">"id"</span>: <span class="string">"ops-test:nfs-211"</span>,</span><br><span class="line">    <span class="attr">"labels"</span>: &#123;</span><br><span class="line">        <span class="attr">"cattle.io/creator"</span>: <span class="string">"norman"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"links"</span>: &#123;</span><br><span class="line">        <span class="attr">"remove"</span>: <span class="string">"…/v3/project/c-rl5jz:p-knsxt/persistentVolumeClaims/ops-test:nfs-211"</span>,</span><br><span class="line">        <span class="attr">"self"</span>: <span class="string">"…/v3/project/c-rl5jz:p-knsxt/persistentVolumeClaims/ops-test:nfs-211"</span>,</span><br><span class="line">        <span class="attr">"update"</span>: <span class="string">"…/v3/project/c-rl5jz:p-knsxt/persistentVolumeClaims/ops-test:nfs-211"</span>,</span><br><span class="line">        <span class="attr">"yaml"</span>: <span class="string">"…/v3/project/c-rl5jz:p-knsxt/persistentVolumeClaims/ops-test:nfs-211/yaml"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"name"</span>: <span class="string">"nfs-211"</span>,</span><br><span class="line">    <span class="attr">"namespaceId"</span>: <span class="string">"ops-test"</span>,</span><br><span class="line">    <span class="attr">"projectId"</span>: <span class="string">"c-rl5jz:p-knsxt"</span>,</span><br><span class="line">    <span class="attr">"resources"</span>: &#123;</span><br><span class="line">        <span class="attr">"requests"</span>: &#123;</span><br><span class="line">            <span class="attr">"storage"</span>: <span class="string">"10Gi"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"type"</span>: <span class="string">"/v3/project/schemas/resourceRequirements"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"state"</span>: <span class="string">"bound"</span>,</span><br><span class="line">    <span class="attr">"status"</span>: &#123;</span><br><span class="line">        <span class="attr">"accessModes"</span>: [</span><br><span class="line">            <span class="string">"ReadWriteMany"</span></span><br><span class="line">        ],</span><br><span class="line">        <span class="attr">"capacity"</span>: &#123;</span><br><span class="line">            <span class="attr">"storage"</span>: <span class="string">"10Gi"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"phase"</span>: <span class="string">"Bound"</span>,</span><br><span class="line">        <span class="attr">"type"</span>: <span class="string">"/v3/project/schemas/persistentVolumeClaimStatus"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"storageClassId"</span>: <span class="string">"nfs216"</span>,</span><br><span class="line">    <span class="attr">"transitioning"</span>: <span class="string">"no"</span>,</span><br><span class="line">    <span class="attr">"transitioningMessage"</span>: <span class="string">""</span>,</span><br><span class="line">    <span class="attr">"type"</span>: <span class="string">"persistentVolumeClaim"</span>,</span><br><span class="line">    <span class="attr">"uuid"</span>: <span class="string">"660dc8d1-7911-4d30-b575-b54990de8667"</span>,</span><br><span class="line">    <span class="attr">"volumeId"</span>: <span class="string">"nfs211"</span>,</span><br><span class="line">    <span class="attr">"volumeMode"</span>: <span class="string">"Filesystem"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>Deploment 信息如下：</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">apps/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Deployment</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">annotations:</span></span><br><span class="line">    <span class="attr">deployment.kubernetes.io/revision:</span> <span class="string">"1"</span></span><br><span class="line">    <span class="attr">field.cattle.io/creatorId:</span> <span class="string">user-gwgpp</span></span><br><span class="line">  <span class="attr">creationTimestamp:</span> <span class="string">"2020-04-30T09:00:19Z"</span></span><br><span class="line">  <span class="attr">generation:</span> <span class="number">1</span></span><br><span class="line">  <span class="attr">labels:</span></span><br><span class="line">    <span class="attr">cattle.io/creator:</span> <span class="string">norman</span></span><br><span class="line">    <span class="attr">workload.user.cattle.io/workloadselector:</span> <span class="string">deployment-ops-test-node1-nfs-test</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">node1-nfs-test</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">ops-test</span></span><br><span class="line">  <span class="attr">resourceVersion:</span> <span class="string">"1940561"</span></span><br><span class="line">  <span class="attr">selfLink:</span> <span class="string">/apis/apps/v1/namespaces/ops-test/deployments/node1-nfs-test</span></span><br><span class="line">  <span class="attr">uid:</span> <span class="string">5d14a158-1eef-4a94-8433-15ad002ee55c</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">progressDeadlineSeconds:</span> <span class="number">600</span></span><br><span class="line">  <span class="attr">replicas:</span> <span class="number">2</span></span><br><span class="line">  <span class="attr">revisionHistoryLimit:</span> <span class="number">10</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">matchLabels:</span></span><br><span class="line">      <span class="attr">workload.user.cattle.io/workloadselector:</span> <span class="string">deployment-ops-test-node1-nfs-test</span></span><br><span class="line">  <span class="attr">strategy:</span></span><br><span class="line">    <span class="attr">rollingUpdate:</span></span><br><span class="line">      <span class="attr">maxSurge:</span> <span class="number">1</span></span><br><span class="line">      <span class="attr">maxUnavailable:</span> <span class="number">0</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">RollingUpdate</span></span><br><span class="line">  <span class="attr">template:</span></span><br><span class="line">    <span class="attr">metadata:</span></span><br><span class="line">      <span class="attr">annotations:</span></span><br><span class="line">        <span class="attr">cattle.io/timestamp:</span> <span class="string">"2020-04-30T09:01:05Z"</span></span><br><span class="line">        <span class="attr">workload.cattle.io/state:</span> <span class="string">'&#123;"bm9kZTE=":"c-rl5jz:machine-wbs6r"&#125;'</span></span><br><span class="line">      <span class="attr">creationTimestamp:</span> <span class="literal">null</span></span><br><span class="line">      <span class="attr">labels:</span></span><br><span class="line">        <span class="attr">workload.user.cattle.io/workloadselector:</span> <span class="string">deployment-ops-test-node1-nfs-test</span></span><br><span class="line">    <span class="attr">spec:</span></span><br><span class="line">      <span class="attr">containers:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">image:</span> <span class="string">alpine</span></span><br><span class="line">        <span class="attr">imagePullPolicy:</span> <span class="string">Always</span></span><br><span class="line">        <span class="attr">name:</span> <span class="string">node1-nfs-test</span></span><br><span class="line">        <span class="attr">resources:</span> <span class="string">&#123;&#125;</span></span><br><span class="line">        <span class="attr">securityContext:</span></span><br><span class="line">          <span class="attr">allowPrivilegeEscalation:</span> <span class="literal">false</span></span><br><span class="line">          <span class="attr">capabilities:</span> <span class="string">&#123;&#125;</span></span><br><span class="line">          <span class="attr">privileged:</span> <span class="literal">false</span></span><br><span class="line">          <span class="attr">readOnlyRootFilesystem:</span> <span class="literal">false</span></span><br><span class="line">          <span class="attr">runAsNonRoot:</span> <span class="literal">false</span></span><br><span class="line">        <span class="attr">stdin:</span> <span class="literal">true</span></span><br><span class="line">        <span class="attr">terminationMessagePath:</span> <span class="string">/dev/termination-log</span></span><br><span class="line">        <span class="attr">terminationMessagePolicy:</span> <span class="string">File</span></span><br><span class="line">        <span class="attr">tty:</span> <span class="literal">true</span></span><br><span class="line">        <span class="attr">volumeMounts:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="attr">mountPath:</span> <span class="string">/tmp</span></span><br><span class="line">          <span class="attr">name:</span> <span class="string">vol1</span></span><br><span class="line">      <span class="attr">dnsPolicy:</span> <span class="string">ClusterFirst</span></span><br><span class="line">      <span class="attr">nodeName:</span> <span class="string">node1</span></span><br><span class="line">      <span class="attr">restartPolicy:</span> <span class="string">Always</span></span><br><span class="line">      <span class="attr">schedulerName:</span> <span class="string">default-scheduler</span></span><br><span class="line">      <span class="attr">securityContext:</span> <span class="string">&#123;&#125;</span></span><br><span class="line">      <span class="attr">terminationGracePeriodSeconds:</span> <span class="number">30</span></span><br><span class="line">      <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">vol1</span></span><br><span class="line">        <span class="attr">persistentVolumeClaim:</span></span><br><span class="line">          <span class="attr">claimName:</span> <span class="string">nfs-211</span></span><br></pre></td></tr></table></figure><p>创建完 Deploment 之后，使用 kubectl get pod 命令查看 Pod 创建的进度，发现一直卡在 <code>ContainerCreating</code> 状态</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-master-01 opt]# kubectl get pod -n ops-test</span><br><span class="line">NAME                              READY   STATUS              RESTARTS   AGE</span><br><span class="line">node1-nfs-test-547c4d7678-j6kwv   0/1     ContainerCreating   0          2m12s</span><br><span class="line">node1-nfs-test-547c4d7678-vwdqg   0/1     ContainerCreating   0          2m12s</span><br></pre></td></tr></table></figure><p>kubectl describe pod 的日志如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-master-01 opt]# kubectl describe pod node1-nfs-test-547c4d7678-j6kwv -n ops-test</span><br><span class="line">Name:           node1-nfs-test-547c4d7678-j6kwv</span><br><span class="line">Namespace:      ops-test</span><br><span class="line">Priority:       0</span><br><span class="line">Node:           node1/10.10.107.214</span><br><span class="line">Start Time:     Thu, 30 Apr 2020 17:00:33 +0800</span><br><span class="line">Labels:         pod-template-hash=547c4d7678</span><br><span class="line">                workload.user.cattle.io/workloadselector=deployment-ops-test-node1-nfs-test</span><br><span class="line">Annotations:    cattle.io/timestamp: 2020-04-30T09:01:05Z</span><br><span class="line">                workload.cattle.io/state: &#123;"bm9kZTE=":"c-rl5jz:machine-wbs6r"&#125;</span><br><span class="line">Status:         Pending</span><br><span class="line">IP:</span><br><span class="line">IPs:            &lt;none&gt;</span><br><span class="line">Controlled By:  ReplicaSet/node1-nfs-test-547c4d7678</span><br><span class="line">Containers:</span><br><span class="line">  node1-nfs-test:</span><br><span class="line">    Container ID:</span><br><span class="line">    Image:          alpine</span><br><span class="line">    Image ID:</span><br><span class="line">    Port:           &lt;none&gt;</span><br><span class="line">    Host Port:      &lt;none&gt;</span><br><span class="line">    State:          Waiting</span><br><span class="line">      Reason:       ContainerCreating</span><br><span class="line">    Ready:          False</span><br><span class="line">    Restart Count:  0</span><br><span class="line">    Environment:    &lt;none&gt;</span><br><span class="line">    Mounts:</span><br><span class="line">      /tmp from vol1 (rw)</span><br><span class="line">      /var/run/secrets/kubernetes.io/serviceaccount from default-token-f6wjj (ro)</span><br><span class="line">Conditions:</span><br><span class="line">  Type              Status</span><br><span class="line">  Initialized       True</span><br><span class="line">  Ready             False</span><br><span class="line">  ContainersReady   False</span><br><span class="line">  PodScheduled      True</span><br><span class="line">Volumes:</span><br><span class="line">  vol1:</span><br><span class="line">    Type:       PersistentVolumeClaim (a reference to a PersistentVolumeClaim in the same namespace)</span><br><span class="line">    ClaimName:  nfs-211</span><br><span class="line">    ReadOnly:   false</span><br><span class="line">  default-token-f6wjj:</span><br><span class="line">    Type:        Secret (a volume populated by a Secret)</span><br><span class="line">    SecretName:  default-token-f6wjj</span><br><span class="line">    Optional:    false</span><br><span class="line">QoS Class:       BestEffort</span><br><span class="line">Node-Selectors:  &lt;none&gt;</span><br><span class="line">Tolerations:     node.kubernetes.io/not-ready:NoExecute for 300s</span><br><span class="line">                 node.kubernetes.io/unreachable:NoExecute for 300s</span><br><span class="line">Events:</span><br><span class="line">  Type     Reason       Age    From            Message</span><br><span class="line">  ----  ------  ---- ----     -------</span><br><span class="line">  Warning  FailedMount  8m49s  kubelet, node1  MountVolume.SetUp failed for volume "nfs211" : mount failed: exit status 32</span><br><span class="line">Mounting command: systemd-run</span><br><span class="line">Mounting arguments: --description=Kubernetes transient mount for /var/lib/kubelet/pods/cddc94e7-8033-4150-bed5-d141e3b71e49/volumes/kubernetes.io~nfs/nfs211 --scope -- mount -t nfs 10.20.172.211:/nfs /var/lib/kubelet/pods/cddc94e7-8033-4150-bed5-d141e3b71e49/volumes/kubernetes.io~nfs/nfs211</span><br><span class="line">Output: Running scope as unit run-38284.scope.</span><br><span class="line">mount: wrong fs type, bad option, bad superblock on 10.20.172.211:/nfs,</span><br><span class="line">       missing codepage or helper program, or other error</span><br><span class="line">       (for several filesystems (e.g. nfs, cifs) you might</span><br><span class="line">       need a /sbin/mount.&lt;type&gt; helper program)</span><br><span class="line"></span><br><span class="line">       In some cases useful info is found in syslog - try</span><br><span class="line">       dmesg | tail or so.</span><br><span class="line">  Warning  FailedMount  8m48s  kubelet, node1  MountVolume.SetUp failed for volume "nfs211" : mount failed: exit status 32</span><br></pre></td></tr></table></figure><p>在 一台没有安装 NFS 客户端的节点尝试挂载一下 NFS 存储，发现报错的日志和 kubelet 的日志相同🤔</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-master-03 ~]# mount -t nfs 10.20.172.211:/nfs /tmp</span><br><span class="line">mount: wrong fs type, bad option, bad superblock on 10.20.172.211:/nfs,</span><br><span class="line">       missing codepage or helper program, or other error</span><br><span class="line">       (for several filesystems (e.g. nfs, cifs) you might</span><br><span class="line">       need a /sbin/mount.&lt;type&gt; helper program)</span><br><span class="line"></span><br><span class="line">       In some cases useful info is found in syslog - try</span><br><span class="line">       dmesg | tail or so.</span><br></pre></td></tr></table></figure><h2 id="解决问题"><a href="#解决问题" class="headerlink" title="解决问题"></a>解决问题</h2><p>看到 kubelet 报错的日志和我们在宿主机上使用 mount 名挂载 NFS 存储时的错误一样就可以断定为是宿主机的问题。搜了一下报错日志，在 <a href="https://askubuntu.com/questions/525243/why-do-i-get-wrong-fs-type-bad-option-bad-superblock-error" target="_blank" rel="noopener">Why do I get “wrong fs type, bad option, bad superblock” error?</a> 得到提示说需要安装一下 NFS 客户端 (nfs-common、nfs-utils) 😂。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">╭─root@node1 ~</span><br><span class="line">╰─# yum install nfs-utils</span><br><span class="line">………………</span><br><span class="line">Install  1 Package (+15 Dependent packages)</span><br><span class="line"></span><br><span class="line">Total download size: 1.5 M</span><br><span class="line">Installed size: 4.3 M</span><br><span class="line">Is this ok [y/d/N]:</span><br></pre></td></tr></table></figure><p>yum 一把梭后发现 <code>nfs-utils</code> 还真没有安装😂。</p><p>安装完时候使用 kubectl 删除掉之前的 Pod，Deploment 控制器会自动帮我们将 Pod 数量调和到指定的数量。可以发现 Pod 所在宿主机安装 NFS 客户端之后 kubelet 就能正常为 Pod 挂载 volume 了 而且 Pod 也正常运行了。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-master-01 ~]# kubectl delete pod node1-nfs-test-547c4d7678-j6kwv node1-nfs-test-547c4d7678-vwdqg -n ops-test</span><br><span class="line">pod "node1-nfs-test-547c4d7678-j6kwv" deleted</span><br><span class="line">pod "node1-nfs-test-547c4d7678-vwdqg" deleted</span><br><span class="line">[root@k8s-master-01 ~]# kubectl get pod -n ops-test</span><br><span class="line">NAME                              READY   STATUS    RESTARTS   AGE</span><br><span class="line">node1-nfs-test-7589fb4787-cknz4   1/1     Running   0          18s</span><br><span class="line">node1-nfs-test-7589fb4787-l9bt2   1/1     Running   0          22s</span><br></pre></td></tr></table></figure><p>进入容器内查看一下容器内挂载点的信息：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-master-01 ~]# kubectl exec -it node1-nfs-test-7589fb4787-cknz4 -n ops-test sh</span><br><span class="line">/ # df -h</span><br><span class="line">Filesystem                Size      Used Available Use% Mounted on</span><br><span class="line">overlay                  28.9G      4.1G     23.3G  15% /</span><br><span class="line">10.20.172.211:/nfs       28.9G     14.5G     12.9G  53% /tmp</span><br><span class="line">tmpfs                     1.8G         0      1.8G   0% /sys/firmware</span><br><span class="line">/ # mount</span><br><span class="line">rootfs on / type rootfs (rw)</span><br><span class="line">10.20.172.211:/nfs on /tmp type nfs (rw,relatime,vers=3,rsize=524288,wsize=524288,namlen=255,hard,proto=tcp,timeo=600,retrans=2,sec=sys,mountaddr=10.20.172.211,mountvers=3,mountport=20048,mountproto=udp,local_lock=none,addr=10.20.172.211)</span><br><span class="line"></span><br><span class="line">10.20.172.211:/nfs on /mnt/nfs type nfs (rw,relatime,vers=3,rsize=524288,wsize=524288,namlen=255,hard,proto=tcp,timeo=600,retrans=2,sec=sys,mountaddr=10.20.172.211,mountvers=3,mountport=20048,mountproto=udp,local_lock=none,addr=10.20.172.211)</span><br></pre></td></tr></table></figure><p>至此问题已经解决了，接下来就到了正文：开始分析一下  kubelet 为 Pod 挂载 volume 的流程和原理😂</p><h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><h3 id="容器存储"><a href="#容器存储" class="headerlink" title="容器存储"></a>容器存储</h3><p>在分析 Pod 的 volume 之前需要先了解一下 docker 容器的存储。当我们使用 <code>docker inspect</code> &lt;容器 ID&gt; 命令来查看容器详细信息时，在容器元数据信息的 <code>GraphDriver</code> 字段下包含着一个 <code>Mounts</code> ，而 <code>Mounts</code> 字段里的正是容器挂载的存储，其中里面的 <code>Type</code> 字段里有 <code>bind</code> 和 <code>volume</code> ，其实还有一个 <code>tmpfs</code>。</p><p>另外其中的 <code>Data</code> 字段里的 <code>LowerDir</code> 正是容器的镜像层，关于容器镜像层的讲解建议阅读一下 <a href="https://arkingc.github.io/2018/01/15/2018-01-15-docker-storage-overlay2/" target="_blank" rel="noopener">Docker源码分析—存储驱动</a> ，这篇源码分析👍，在这里点到为止就不再细究了😂</p><blockquote><p>现在，我们已经知道了解了层的创建和删除过程。但是我们一直没有提到一个问题：<strong>我们在容器内看到的文件存在哪？</strong></p><p>我们已经知道层目录下有diff，merged和work 3个目录。diff存储的是该层的文件，work是执行一些特定操作时所要用到的目录，所以实际上，<strong>在容器内看到的文件，就存在于merged目录下</strong></p><p><strong>merged目录在容器未运行时，是一个空目录，当容器启动时会将该容器所有层的diff目录进行联合挂载，挂载到merged目录下，挂载时使用的文件系统就是内核OverlayFS文件系统</strong></p><blockquote><p>如果有看过我关于内核OverlayFS相关的博文，这里应该已经对Docker的overlay2存储驱动与内核OverlayFS的关系有了一个比较清晰的认识</p></blockquote><p><strong>当挂载完成后，容器处于一个子文件系统命名空间，只能看到merged目录下的文件，相当于chroot命令的效果</strong></p><p>所以，在停止一个容器时，实际上就是对merged目录执行一个卸载命令</p></blockquote><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">"GraphDriver": &#123;</span><br><span class="line">            "Data": &#123;</span><br><span class="line">                "LowerDir": "/var/lib/docker/overlay2/2a846f62b759d87bf8b2731960c4031585fb4ee14bbf313f58e0374c4fee9ce0-init/diff:/var/lib/docker/overlay2/29f9a1e9523d4ec323402a3c2da8a5e288cfe0e6f3168a57dd2388b63775c20a/diff:/var/lib/docker/overlay2/015afa447ae2fcfa592d257644312b286173b9a00d0f2017a4c6ede448a87d47/diff:/var/lib/docker/overlay2/2f71b56cd5550bf299ed33a04e385ef5578511e3a17d35162148f4b84bda4b26/diff",</span><br><span class="line">                "MergedDir": "/var/lib/docker/overlay2/2a846f62b759d87bf8b2731960c4031585fb4ee14bbf313f58e0374c4fee9ce0/merged",</span><br><span class="line">                "UpperDir": "/var/lib/docker/overlay2/2a846f62b759d87bf8b2731960c4031585fb4ee14bbf313f58e0374c4fee9ce0/diff",</span><br><span class="line">                "WorkDir": "/var/lib/docker/overlay2/2a846f62b759d87bf8b2731960c4031585fb4ee14bbf313f58e0374c4fee9ce0/work"</span><br><span class="line">            &#125;,</span><br><span class="line">            "Name": "overlay2"</span><br><span class="line">        &#125;,</span><br><span class="line">        "Mounts": [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">"Type"</span>: <span class="string">"bind"</span>,</span><br><span class="line">                <span class="attr">"Source"</span>: <span class="string">"/opt/wordpress-nginx-docker/webp-server/config.json"</span>,</span><br><span class="line">                <span class="attr">"Destination"</span>: <span class="string">"/etc/config.json"</span>,</span><br><span class="line">                <span class="attr">"Mode"</span>: <span class="string">"rw"</span>,</span><br><span class="line">                <span class="attr">"RW"</span>: <span class="literal">true</span>,</span><br><span class="line">                <span class="attr">"Propagation"</span>: <span class="string">"rprivate"</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">"Type"</span>: <span class="string">"bind"</span>,</span><br><span class="line">                <span class="attr">"Source"</span>: <span class="string">"/opt/wordpress-nginx-docker/wordpress"</span>,</span><br><span class="line">                <span class="attr">"Destination"</span>: <span class="string">"/var/www/html"</span>,</span><br><span class="line">                <span class="attr">"Mode"</span>: <span class="string">"rw"</span>,</span><br><span class="line">                <span class="attr">"RW"</span>: <span class="literal">true</span>,</span><br><span class="line">                <span class="attr">"Propagation"</span>: <span class="string">"rprivate"</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">"Type"</span>: <span class="string">"volume"</span>,</span><br><span class="line">                <span class="attr">"Name"</span>: <span class="string">"36d087638f2e9ba8472c441bcf906320cfd80419874291f56e039e4f7d1278e7"</span>,</span><br><span class="line">                <span class="attr">"Source"</span>: <span class="string">"/var/lib/docker/volumes/36d087638f2e9ba8472c441bcf906320cfd80419874291f56e039e4f7d1278e7/_data"</span>,</span><br><span class="line">                <span class="attr">"Destination"</span>: <span class="string">"/opt/exhaust"</span>,</span><br><span class="line">                <span class="attr">"Driver"</span>: <span class="string">"local"</span>,</span><br><span class="line">                <span class="attr">"Mode"</span>: <span class="string">""</span>,</span><br><span class="line">                <span class="attr">"RW"</span>: <span class="literal">true</span>,</span><br><span class="line">                <span class="attr">"Propagation"</span>: <span class="string">""</span></span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br></pre></td></tr></table></figure><p>根据 docker 的官方文档 <a href="https://docs.docker.com/storage/" target="_blank" rel="noopener">Manage data in Docker</a> ，docker 提供了 3 种方法将数据从 Docker 宿主机挂载（mount）到容器内，如下：</p><p><img src="img/types-of-mounts.png" alt="docker-data"></p><p><code>图片从 Docker 官方文档偷来的😂</code></p><blockquote><ul><li><strong>Volumes</strong> are stored in a part of the host filesystem which is <em>managed by Docker</em> (<code>/var/lib/docker/volumes/</code> on Linux). Non-Docker processes should not modify this part of the filesystem. Volumes are the best way to persist data in Docker.</li><li><strong>Bind mounts</strong> may be stored <em>anywhere</em> on the host system. They may even be important system files or directories. Non-Docker processes on the Docker host or a Docker container can modify them at any time.</li><li><strong><code>tmpfs</code> mounts</strong> are stored in the host system’s memory only, and are never written to the host system’s filesystem.</li></ul></blockquote><p>可以看到容器可以使用的存储有三种：</p><ul><li>Volumes：使用 Docker 来管理的存储，默认存放在 <code>/var/lib/docker/volumes/</code> 下，我们可以使用 <code>docker volume</code> 子命令来管理这些 volume ，可以创建、查看、列出、清空、删除等操作。非 docker 进程不应该去修改该目录下的文件，<strong>卷是 Docker 容器持久化数据的最好方式</strong>。</li></ul><blockquote><p><code>-v</code>或<code>--volume</code>：由3个域组成，<code>&#39;:&#39;</code>分隔</p><ul><li>第一个域：对于命名卷，为卷名；匿名卷，则忽略，此时会创建匿名卷</li><li>第二个域：容器中的挂载点</li><li>第三个域：可选参数，由<code>&#39;,&#39;</code>隔开，如<code>ro</code></li></ul></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">╭─root@sg-02 /home/ubuntu</span><br><span class="line">╰─# docker volume</span><br><span class="line">Usage:  docker volume COMMAND</span><br><span class="line">Manage volumes</span><br><span class="line">Commands:</span><br><span class="line">  create      Create a volume</span><br><span class="line">  inspect     Display detailed information on one or more volumes</span><br><span class="line">  ls          List volumes</span><br><span class="line">  prune       Remove all unused local volumes</span><br><span class="line">  rm          Remove one or more volumes</span><br><span class="line">Run 'docker volume COMMAND --help' for more information on a command.</span><br></pre></td></tr></table></figure><p>假如在写 <code>Dockerfile</code> 的时候，使用 <code>VOLUME</code> 指令指定容器内的路径。在我们启动容器的时候 docker 会帮我们创建一个持久化存储的 volume。也可在 <code>docker run</code> 或者 <code>docker-compose.yaml</code> 指定 <code>volume</code> 。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">╭─root@sg-02 /home/ubuntu</span><br><span class="line">╰─# docker volume ls</span><br><span class="line">DRIVER              VOLUME NAME</span><br><span class="line">local               docker-elk_elasticsearch</span><br><span class="line">local               opt</span><br><span class="line">╭─root@sg-02 /home/ubuntu</span><br><span class="line">╰─# docker volume inspect opt</span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">"CreatedAt"</span>: <span class="string">"2020-03-12T06:58:15Z"</span>,</span><br><span class="line">        <span class="attr">"Driver"</span>: <span class="string">"local"</span>,</span><br><span class="line">        <span class="attr">"Labels"</span>: <span class="literal">null</span>,</span><br><span class="line">        <span class="attr">"Mountpoint"</span>: <span class="string">"/var/lib/docker/volumes/opt/_data"</span>,</span><br><span class="line">        <span class="attr">"Name"</span>: <span class="string">"opt"</span>,</span><br><span class="line">        <span class="attr">"Options"</span>: <span class="literal">null</span>,</span><br><span class="line">        <span class="attr">"Scope"</span>: <span class="string">"local"</span></span><br><span class="line">    &#125;</span><br><span class="line">]</span><br><span class="line">╭─root@sg-02 /home/ubuntu</span><br><span class="line">╰─# docker inspect docker-elk_elasticsearch</span><br><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">"CreatedAt"</span>: <span class="string">"2020-04-24T01:37:07Z"</span>,</span><br><span class="line">        <span class="attr">"Driver"</span>: <span class="string">"local"</span>,</span><br><span class="line">        <span class="attr">"Labels"</span>: &#123;</span><br><span class="line">            <span class="attr">"com.docker.compose.project"</span>: <span class="string">"docker-elk"</span>,</span><br><span class="line">            <span class="attr">"com.docker.compose.version"</span>: <span class="string">"1.25.4"</span>,</span><br><span class="line">            <span class="attr">"com.docker.compose.volume"</span>: <span class="string">"elasticsearch"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"Mountpoint"</span>: <span class="string">"/var/lib/docker/volumes/docker-elk_elasticsearch/_data"</span>,</span><br><span class="line">        <span class="attr">"Name"</span>: <span class="string">"docker-elk_elasticsearch"</span>,</span><br><span class="line">        <span class="attr">"Options"</span>: <span class="literal">null</span>,</span><br><span class="line">        <span class="attr">"Scope"</span>: <span class="string">"local"</span></span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><ul><li>Bind mounts：</li></ul><p>使用 <code>Bind mounts</code> 将宿主机的目录或者文件挂载进容器内，这个文件和目录可以是宿主机文件系统上的任意位置，可以不受 docker 所管理，比如 kubelet 的 volumes 目录：<code>/var/lib/kubelet/pods/&lt;Pod的ID&gt;/volumes/</code> 。 kubelet 在为 Pod 挂载存储的时候也正是通过 <code>Bind mounts</code> 的方式将 Pod 的 volumes 挂载到容器内。所以当我们使用 docker inspect 命令去查看 Pod 内容器的 <code>Mounts</code> 信息是，<code>Type</code> 类型多为 <code>bind</code> 或者 <code>tmpfs</code> ，很少会用到 <code>volumes</code> 。可以理解为 kubelet 的 volumes 目录就像 docker 的 volumes 那样，是由 kubelet 自己来管理的，其他用户或进程不应该去修改它。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">╭─root@k8s-node-3 ~</span><br><span class="line">╰─# docker inspect f1111ee6ac84</span><br><span class="line">"Mounts": [</span><br><span class="line">  &#123;</span><br><span class="line">      <span class="attr">"Type"</span>: <span class="string">"bind"</span>,</span><br><span class="line">      <span class="attr">"Source"</span>: <span class="string">"/var/lib/kubelet/pods/73fed6f3-4cbe-46a7-af7b-6fd912e6ebd4/volumes/kubernetes.io~nfs/nfs211"</span>,</span><br><span class="line">      <span class="attr">"Destination"</span>: <span class="string">"/var/www/html"</span>,</span><br><span class="line">      <span class="attr">"Mode"</span>: <span class="string">""</span>,</span><br><span class="line">      <span class="attr">"RW"</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">"Propagation"</span>: <span class="string">"rprivate"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">      <span class="attr">"Type"</span>: <span class="string">"bind"</span>,</span><br><span class="line">      <span class="attr">"Source"</span>: <span class="string">"/var/lib/kubelet/pods/73fed6f3-4cbe-46a7-af7b-6fd912e6ebd4/volumes/kubernetes.io~secret/default-token-wgfd9"</span>,</span><br><span class="line">      <span class="attr">"Destination"</span>: <span class="string">"/var/run/secrets/kubernetes.io/serviceaccount"</span>,</span><br><span class="line">      <span class="attr">"Mode"</span>: <span class="string">"ro,Z"</span>,</span><br><span class="line">      <span class="attr">"RW"</span>: <span class="literal">false</span>,</span><br><span class="line">      <span class="attr">"Propagation"</span>: <span class="string">"rprivate"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">      <span class="attr">"Type"</span>: <span class="string">"bind"</span>,</span><br><span class="line">      <span class="attr">"Source"</span>: <span class="string">"/var/lib/kubelet/pods/73fed6f3-4cbe-46a7-af7b-6fd912e6ebd4/etc-hosts"</span>,</span><br><span class="line">      <span class="attr">"Destination"</span>: <span class="string">"/etc/hosts"</span>,</span><br><span class="line">      <span class="attr">"Mode"</span>: <span class="string">"Z"</span>,</span><br><span class="line">      <span class="attr">"RW"</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">"Propagation"</span>: <span class="string">"rprivate"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">      <span class="attr">"Type"</span>: <span class="string">"bind"</span>,</span><br><span class="line">      <span class="attr">"Source"</span>: <span class="string">"/var/lib/kubelet/pods/73fed6f3-4cbe-46a7-af7b-6fd912e6ebd4/containers/nginx/f760f2be"</span>,</span><br><span class="line">      <span class="attr">"Destination"</span>: <span class="string">"/dev/termination-log"</span>,</span><br><span class="line">      <span class="attr">"Mode"</span>: <span class="string">"Z"</span>,</span><br><span class="line">      <span class="attr">"RW"</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">"Propagation"</span>: <span class="string">"rprivate"</span></span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>使用<code>Bind mounts</code>可能会有安全问题：容器中运行的进程可以修改宿主机的文件系统，包括创建，修改，删除重要的系统文件或目录。不过可以加参数挂载为只读。</p><blockquote><p><code>--mount</code>：由多个<code>&#39;,&#39;</code>隔开的键值对<key>=<value>组成：</p><ul><li>挂载类型：key为<code>type</code>，value为<code>bind</code>、<code>volume</code>或<code>tmpfs</code></li><li>挂载源：key为<code>source</code>或<code>src</code>，对于命名卷，value为卷名，对于匿名卷，则忽略</li><li>容器中的挂载点：key为<code>destination</code>、<code>dst</code>或<code>target</code>，value为容器中的路径</li><li>读写类型：value为<code>readonly</code>，没有key</li><li>读写类型：value为<code>readonly</code>，没有key</li><li>volume-opt选项，可以出现多次。比如<code>volume-driver=local,volume-opt=type=nfs,...</code></li></ul></blockquote><ul><li><p>tmps：</p><p>  用来存储一些不需要持久化的状态或敏感数据，比如 <code>kubernetes</code> 中的各种 <code>secret</code> 。比如当我们使用 <code>kubectl exec -it POD</code> ，进入到 Pod 容器内，然后使用 mount 命令查看容器内的挂载点信息就会有很多 tmpfs 类型的挂载点。其中的 <code>/run/secrets/kubernetes.io/serviceaccount/</code> 目录下就有着比较敏感的信息。</p>  <figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">tmpfs on /run/secrets/kubernetes.io/serviceaccount type tmpfs (ro,relatime)</span><br><span class="line">/ # tree /run/secrets/kubernetes.io/serviceaccount/</span><br><span class="line">/run/secrets/kubernetes.io/serviceaccount/</span><br><span class="line">├── ca.crt -&gt; ..data/ca.crt</span><br><span class="line">├── namespace -&gt; ..data/namespace</span><br><span class="line">└── token -&gt; ..data/token</span><br></pre></td></tr></table></figure></li></ul><blockquote><ul><li><p><code>--tmpfs</code>：直接指定容器中的挂载点。不允许指定任何配置选项</p></li><li><p>–mount：由多个’,’隔开的键值对<key>=<value>组成：</p><p>  挂载类型：key为<code>type</code>，value为<code>bind</code>、<code>volume</code>或<code>tmpfs</code></p><p>  容器中的挂载点：key为<code>destination</code>、<code>dst</code>或<code>target</code>，value为容器中的路径</p><p>  <code>tmpfs-size</code>和<code>tmpfs-mode</code>选项</p></li></ul></blockquote><h3 id="kubelet-挂载存储"><a href="#kubelet-挂载存储" class="headerlink" title="kubelet 挂载存储"></a>kubelet 挂载存储</h3><p>当对容器存储的类型有了大致了解之后，我们再来看一下 Pod 是如何进行 volume 挂载的。</p><p>当 Pod 被调度到一个 Node 节点上后，Node 节点上的 kubelet 组件就会为这个 Pod 创建它的 Volume 目录，默认情况下 kubelet 为 Volume 创建的目录在 kubelet 的工作目录（默认在 <code>/var/lib/kubelet</code> ），在 kubelet 启动的时候可以根据 <code>–root-dir</code> 参数来指定工作目录，不过一般没啥特殊要求还是使用默认的就好😂。Pod 的 volume 目录就在该目录下，路径格式如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">/var/lib/kubelet/pods/&lt;Pod的ID&gt;/volumes/kubernetes.io~&lt;Volume类型&gt;/&lt;Volume名字&gt;</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 比如:</span></span><br><span class="line">/var/lib/kubelet/pods/c4b1998b-f5c1-440a-b9bc-7fbf87f3c267/volumes/kubernetes.io~nfs/nfs211</span><br></pre></td></tr></table></figure><p>在 Node 节点上可以使用 mount 命令来查看 kubelet 为 Pod 挂载的挂载点信息。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">10.10.107.216:/nfs on /var/lib/kubelet/pods/6750b756-d8e4-448a-93f9-8906f9c44788/volumes/kubernetes.io~nfs/nfs-test type nfs (rw,relatime,vers=3,rsize=1048576,wsize=1048576,namlen=255,hard,proto=tcp,timeo=600,retrans=2,sec=sys,mountaddr=10.10.107.216,mountvers=3,mountport=56389,mountproto=udp,local_lock=none,addr=10.10.107.216)</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">╭─root@k8s-node-3 ~</span><br><span class="line">╰─# mount | grep kubelet</span><br><span class="line">tmpfs on /var/lib/kubelet/pods/45c55c5e-ce96-47fd-94b3-60a334e5a44d/volumes/kubernetes.io~secret/kube-proxy-token-h4dfb type tmpfs (rw,relatime,seclabel)</span><br><span class="line">tmpfs on /var/lib/kubelet/pods/3fb63baa-27ec-4d76-8028-39a0a8f91749/volumes/kubernetes.io~secret/calico-node-token-4hks6 type tmpfs (rw,relatime,seclabel)</span><br><span class="line">tmpfs on /var/lib/kubelet/pods/05c75313-f932-4913-b09f-d7bccdfb6e62/volumes/kubernetes.io~secret/nginx-ingress-token-5569x type tmpfs (rw,relatime,seclabel)</span><br><span class="line">10.20.172.211:/nfs on /var/lib/kubelet/pods/c4b1998b-f5c1-440a-b9bc-7fbf87f3c267/volumes/kubernetes.io~nfs/nfs211 type nfs (rw,relatime,vers=3,rsize=524288,wsize=524288,namlen=255,hard,proto=tcp,timeo=600,retrans=2,sec=sys,mountaddr=10.20.172.211,mountvers=3,mountport=20048,mountproto=udp,local_lock=none,addr=10.20.172.211)</span><br><span class="line">tmpfs on /var/lib/kubelet/pods/73fed6f3-4cbe-46a7-af7b-6fd912e6ebd4/volumes/kubernetes.io~secret/default-token-wgfd9 type tmpfs (rw,relatime,seclabel)</span><br></pre></td></tr></table></figure><p>其中 kubernetes 目前支持的 Volume 的类型，可以使用 <code>kubectl explain pod.spec.volumes</code>  来查看。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">╭─root@k8s-master-01 ~</span><br><span class="line">╰─# kubectl explain pod.spec.volumes | grep Object | cut -d "&lt;" -f1</span><br><span class="line">RESOURCE: volumes</span><br><span class="line">awsElasticBlockStore</span><br><span class="line">azureDisk</span><br><span class="line">azureFile</span><br><span class="line">cephfs</span><br><span class="line">cinder</span><br><span class="line">configMap</span><br><span class="line">csi</span><br><span class="line">downwardAPI</span><br><span class="line">emptyDir</span><br><span class="line">fc</span><br><span class="line">flexVolume</span><br><span class="line">flocker</span><br><span class="line">gcePersistentDisk</span><br><span class="line">gitRepo</span><br><span class="line">glusterfs</span><br><span class="line">hostPath</span><br><span class="line">iscsi</span><br><span class="line">nfs</span><br><span class="line">persistentVolumeClaim</span><br><span class="line">photonPersistentDisk</span><br><span class="line">portworxVolume</span><br><span class="line">projected</span><br><span class="line">quobyte</span><br><span class="line">rbd</span><br><span class="line">scaleIO</span><br><span class="line">secret</span><br><span class="line">storageos</span><br><span class="line">vsphereVolume</span><br></pre></td></tr></table></figure><h3 id="管-systemd-什么事儿？"><a href="#管-systemd-什么事儿？" class="headerlink" title="管 systemd 什么事儿？"></a>管 systemd 什么事儿？</h3><p>我们来回顾一下当初的错误日志：</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Events:</span><br><span class="line">  Type     Reason       Age    From            Message</span><br><span class="line">  ----  ------  ---- ----     -------</span><br><span class="line">  Warning  FailedMount  <span class="number">8</span>m49s  kubelet, node1  MountVolume<span class="variable">.SetUp</span> failed <span class="keyword">for</span> volume <span class="string">"nfs211"</span> : mount failed: exit status <span class="number">32</span></span><br><span class="line">Mounting command: systemd-run</span><br><span class="line">Mounting arguments: --description=Kubernetes transient mount <span class="keyword">for</span> /<span class="keyword">var</span>/lib/kubelet/pods/cddc94e7-<span class="number">8033</span>-<span class="number">4150</span>-bed5-d141e3b71e49/volumes/kubernetes<span class="variable">.io</span>~nfs/nfs211 --scope -- mount -t nfs <span class="number">10</span><span class="variable">.20</span><span class="variable">.172</span><span class="variable">.211</span>:/nfs /<span class="keyword">var</span>/lib/kubelet/pods/cddc94e7-<span class="number">8033</span>-<span class="number">4150</span>-bed5-d141e3b71e49/volumes/kubernetes<span class="variable">.io</span>~nfs/nfs211</span><br><span class="line">Output: Running scope as unit run-<span class="number">38284</span><span class="variable">.scope</span>.</span><br><span class="line">mount: wrong fs <span class="keyword">type</span>, bad option, bad superblock on <span class="number">10</span><span class="variable">.20</span><span class="variable">.172</span><span class="variable">.211</span>:/nfs,</span><br><span class="line">       missing codepage <span class="keyword">or</span> helper <span class="keyword">program</span>, <span class="keyword">or</span> other error</span><br><span class="line">       (<span class="keyword">for</span> several filesystems (e<span class="variable">.g</span>. nfs, cifs) you might</span><br><span class="line">       need a /sbin/mount.&lt;<span class="keyword">type</span>&gt; helper <span class="keyword">program</span>)</span><br><span class="line"></span><br><span class="line">       In some cases useful info is found in syslog - try</span><br><span class="line">       dmesg | tail <span class="keyword">or</span> so.</span><br><span class="line">  Warning  FailedMount  <span class="number">8</span>m48s  kubelet, node1  MountVolume<span class="variable">.SetUp</span> failed <span class="keyword">for</span> volume <span class="string">"nfs211"</span> : mount failed: exit status <span class="number">32</span></span><br></pre></td></tr></table></figure><p>咦？当时我还寻思着 kubelet 挂载 volumes 和 systemd 什么关系？<code>systemd</code> 这个大妈怎么又来管这事儿了😂（之前我写过一篇<a href="https://blog.k8s.li/systemd.html">《Linux 的小伙伴 systemd 详解》</a> ，戏称 systemd 是 Linux 的小伙伴，看来这个说法是不妥的。systemd 简直就是 Linux 里的物业大妈好嘛🤣，上管 service 下管 dev 、 mount 设备等。屑，简直就是个物业大妈管这管那的。回到正题，于是顺着这条报错日志顺藤摸瓜找到了 <a href="https://github.com/kubernetes/kubernetes/pull/49640" target="_blank" rel="noopener">Run mount in its own systemd scope.</a> 这个 PR。</p><blockquote><p>Kubelet needs to run /bin/mount in its own cgroup.</p><ul><li>When kubelet runs as a systemd service, “systemctl restart kubelet” may kill all processes in the same cgroup and thus terminate fuse daemons that are needed for gluster and cephfs mounts.</li><li>When kubelet runs in a docker container, restart of the container kills all fuse daemons started in the container.</li></ul><p>Killing fuse daemons is bad, it basically unmounts volumes from running pods.</p><p>This patch runs mount via “systemd-run –scope /bin/mount …”, which makes sure that any fuse daemons are forked in its own systemd scope (= cgroup) and they will survive restart of kubelet’s systemd service or docker container.</p><p>This helps with <a href="https://github.com/kubernetes/kubernetes/issues/34965" target="_blank" rel="noopener">#34965</a></p><p>As a downside, each new fuse daemon will run in its own transient systemd service and systemctl output may be cluttered.</p></blockquote><p>正如提这个 PR 的大佬讲的，（之前）kubelet 需要在它自己的 <code>cgroup</code> 里运行宿主机上的 <code>/bin/mount</code> 来为 Pod 挂载 volumes ，而当 kubelet 进程重启或者挂掉的时候，这些在 kubelet 的  <code>cgroup</code> 里运行的进程也将会挂掉，比如（gluster，ceph）。然后大佬的这个 patch 通过 <code>systemd-run --scope /bin/mount</code> 来去启动一个临时的 systemd 单元来为 Pod 挂载 volumes，这样一来这些 <code>fuse daemons</code>  进程（gluster，ceph）就会 forked 到它自己的 systemd scope 里，这样即便 kubelet 重启或者挂掉也不会影响正在运行的容器使用 volumes。</p><p>这一点像 <a href="https://github.com/containerd/containerd" target="_blank" rel="noopener">containerd</a> 之于 dockerd ，即便 dockerd 重启也不会影响到容器的运行，因为，在运行时这一块，真正运行容器的是 containerd 下的各个 containerd-shim 子进程，可以使用 pstree 命令来看一下这种层级关系。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">├─containerd─┬─5*[containerd-shim─┬─pause]</span><br><span class="line">│            │                    └─9*[&#123;containerd-shim&#125;]]</span><br><span class="line">│            ├─containerd-shim─┬─pause</span><br><span class="line">│            │                 └─10*[&#123;containerd-shim&#125;]</span><br><span class="line">│            ├─containerd-shim─┬─etcd───15*[&#123;etcd&#125;]</span><br><span class="line">│            │                 └─9*[&#123;containerd-shim&#125;]</span><br><span class="line">│            ├─containerd-shim─┬─kube-controller───12*[&#123;kube-controller&#125;]</span><br><span class="line">│            │                 └─9*[&#123;containerd-shim&#125;]</span><br><span class="line">│            ├─containerd-shim─┬─kube-apiserver───14*[&#123;kube-apiserver&#125;]</span><br><span class="line">│            │                 └─9*[&#123;containerd-shim&#125;]</span><br><span class="line">│            ├─containerd-shim─┬─kube-scheduler───13*[&#123;kube-scheduler&#125;]</span><br><span class="line">│            │                 └─9*[&#123;containerd-shim&#125;]</span><br><span class="line">│            ├─containerd-shim─┬─kube-proxy───11*[&#123;kube-proxy&#125;]</span><br><span class="line">│            │                 └─9*[&#123;containerd-shim&#125;]</span><br><span class="line">│            ├─containerd-shim─┬─flanneld───15*[&#123;flanneld&#125;]</span><br><span class="line">│            │                 └─9*[&#123;containerd-shim&#125;]</span><br><span class="line">│            └─26*[&#123;containerd&#125;]</span><br></pre></td></tr></table></figure><p>接着顺藤摸瓜翻到这个 PR 对应的源码文件  <a href="https://github.com/kubernetes/kubernetes/blob/master/vendor/k8s.io/utils/mount/mount_linux.go#L115" target="_blank" rel="noopener">mount_linux.go</a>，关键内容如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// doMount runs the mount command. mounterPath is the path to mounter binary if containerized mounter is used.</span></span><br><span class="line"><span class="comment">// sensitiveOptions is an extention of options except they will not be logged (because they may contain sensitive material)</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(mounter *Mounter)</span> <span class="title">doMount</span><span class="params">(mounterPath <span class="keyword">string</span>, mountCmd <span class="keyword">string</span>, source <span class="keyword">string</span>, target <span class="keyword">string</span>, fstype <span class="keyword">string</span>, options []<span class="keyword">string</span>, sensitiveOptions []<span class="keyword">string</span>)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">mountArgs, mountArgsLogStr := MakeMountArgsSensitive(source, target, fstype, options, sensitiveOptions)</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(mounterPath) &gt; <span class="number">0</span> &#123;</span><br><span class="line">mountArgs = <span class="built_in">append</span>([]<span class="keyword">string</span>&#123;mountCmd&#125;, mountArgs...)</span><br><span class="line">mountArgsLogStr = mountCmd + <span class="string">" "</span> + mountArgsLogStr</span><br><span class="line">mountCmd = mounterPath</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> mounter.withSystemd &#123;</span><br><span class="line"><span class="comment">// Try to run mount via systemd-run --scope. This will escape the</span></span><br><span class="line"><span class="comment">// service where kubelet runs and any fuse daemons will be started in a</span></span><br><span class="line"><span class="comment">// specific scope. kubelet service than can be restarted without killing</span></span><br><span class="line"><span class="comment">// these fuse daemons.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Complete command line (when mounterPath is not used):</span></span><br><span class="line"><span class="comment">// systemd-run --description=... --scope -- mount -t &lt;type&gt; &lt;what&gt; &lt;where&gt;</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// Expected flow:</span></span><br><span class="line"><span class="comment">// * systemd-run creates a transient scope (=~ cgroup) and executes its</span></span><br><span class="line"><span class="comment">//   argument (/bin/mount) there.</span></span><br><span class="line"><span class="comment">// * mount does its job, forks a fuse daemon if necessary and finishes.</span></span><br><span class="line"><span class="comment">//   (systemd-run --scope finishes at this point, returning mount's exit</span></span><br><span class="line"><span class="comment">//   code and stdout/stderr - thats one of --scope benefits).</span></span><br><span class="line"><span class="comment">// * systemd keeps the fuse daemon running in the scope (i.e. in its own</span></span><br><span class="line"><span class="comment">//   cgroup) until the fuse daemon dies (another --scope benefit).</span></span><br><span class="line"><span class="comment">//   Kubelet service can be restarted and the fuse daemon survives.</span></span><br><span class="line"><span class="comment">// * When the fuse daemon dies (e.g. during unmount) systemd removes the</span></span><br><span class="line"><span class="comment">//   scope automatically.</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">// systemd-mount is not used because it's too new for older distros</span></span><br><span class="line"><span class="comment">// (CentOS 7, Debian Jessie).</span></span><br><span class="line">mountCmd, mountArgs, mountArgsLogStr = AddSystemdScopeSensitive(<span class="string">"systemd-run"</span>, target, mountCmd, mountArgs, mountArgsLogStr)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// No systemd-run on the host (or we failed to check it), assume kubelet</span></span><br><span class="line"><span class="comment">// does not run as a systemd service.</span></span><br><span class="line"><span class="comment">// No code here, mountCmd and mountArgs are already populated.</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Logging with sensitive mount options removed.</span></span><br><span class="line">klog.V(<span class="number">4</span>).Infof(<span class="string">"Mounting cmd (%s) with arguments (%s)"</span>, mountCmd, mountArgsLogStr)</span><br><span class="line">command := exec.Command(mountCmd, mountArgs...)</span><br><span class="line">output, err := command.CombinedOutput()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">klog.Errorf(<span class="string">"Mount failed: %v\nMounting command: %s\nMounting arguments: %s\nOutput: %s\n"</span>, err, mountCmd, mountArgsLogStr, <span class="keyword">string</span>(output))</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">"mount failed: %v\nMounting command: %s\nMounting arguments: %s\nOutput: %s"</span>,</span><br><span class="line">err, mountCmd, mountArgsLogStr, <span class="keyword">string</span>(output))</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>来看一下 <code>doMount</code> 这个函数的几个形参：</p><ul><li>mounterPath ：</li></ul><p>就是我们宿主机上的挂载命令比如 <code>/sbin/mount.nfs</code> 、<code>/sbin/mount.glusterfs</code> 等。</p><ul><li><p>mountCmd：挂载命令就是 <code>systemd-run</code></p></li><li><p>source：挂载存储的源路径，比如 NFS 里的 <code>10.10.107.211:/nfs</code></p></li><li><p>target</p></li></ul><p>就是我们的 Pod 的 volume ，在 <code>/var/lib/kubelet/pods/&lt;Pod的ID&gt;/volumes/kubernetes.io~&lt;Volume类型&gt;/&lt;Volume名字&gt;</code> ，着目录在容器启动的时候会 bind mount 到容器内的挂载点</p><ul><li><p>fstype：文件系统类型，NFS、ceph、GlusterFS</p></li><li><p>options []string：挂载的参数，比如 NFS 的</p></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(rw,relatime,vers=3,rsize=524288,wsize=524288,namlen=255,hard,proto=tcp,timeo=600,retrans=2,sec=sys,mountaddr=10.20.172.211,mountvers=3,mountport=20048,mountproto=udp,local_lock=none,addr=10.20.172.211)</span><br></pre></td></tr></table></figure><ul><li>sensitiveOptions []string，这个参数没去仔细看，就略过吧（</li></ul><p>至此 kubelet 为 Pod 挂载的原理和流程也一目了然，其实很简单的逻辑，大致可以氛围</p><ul><li>Attach 阶段：kubelet 使用 systemd-run 单独起一个临时的 systemd scope 来运行后端存储的客户端比如（ nfs 、gluster、ceph），将这些存储挂载到 <code>/var/lib/kubelet/pods/&lt;Pod的ID&gt;/volumes/kubernetes.io~&lt;Volume类型&gt;/&lt;Volume名字&gt;</code></li><li>Mount 阶段：容器启动的时候通过 bind mount 的方式将  <code>/var/lib/kubelet/pods/&lt;Pod的ID&gt;/volumes/kubernetes.io~&lt;Volume类型&gt;/&lt;Volume名字&gt;</code> 这个目录挂载到容器内。这一步相当于使用<code>docker run -v /var/lib/kubelet/pods/&lt;Pod的ID&gt;/volumes/kubernetes.io~&lt;Volume类型&gt;/&lt;Volume名字&gt;:/&lt;容器内的目标目录&gt; 我的镜像</code> 启动一个容器。</li></ul><p>关于更详细的 CSI 存储可以参考下面提到的文章</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>虽然是一篇很简单的分析，在这个过程中参考了很多的博客，没有这些大佬的分享就没有这篇文章：），这些大佬们的博客文章比我写的<code>不知道高到哪里去了</code>，所以如果你看了这篇文章还是没懂的话，不妨也看一下下面的这些文章就能豁然开朗了😂。</p><h3 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h3><ul><li><p><a href="https://github.com/kubernetes/kubernetes/blob/master/vendor/k8s.io/utils/mount/mount_linux.go#L115" target="_blank" rel="noopener">kubernetes/mount_linux.go at master · kubernetes/kubernetes</a></p></li><li><p><a href="https://github.com/kubernetes/kubernetes/pull/49640" target="_blank" rel="noopener">Run mount in its own systemd scope. by jsafrane · Pull Request #49640 · kubernetes/kubernetes</a></p></li></ul><h3 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h3><ul><li><p><a href="https://www.huweihuang.com/article/source-analysis/kubelet/create-pod-by-kubelet/#66-mount-volumes" target="_blank" rel="noopener">kubelet源码分析（四）之 Pod的创建 - 胡伟煌 | Blog</a></p></li><li><p><a href="http://ljchen.net/2018/10/28/kubelet%E6%BA%90%E7%A0%81%E6%9E%B6%E6%9E%84%E7%AE%80%E4%BB%8B/" target="_blank" rel="noopener">Kubelet源码架构简介 | ljchen’s Notes</a></p></li><li><p><a href="http://newgoo.org/2019/09/03/k8s/kubelet-%E6%BA%90%E7%A0%81/" target="_blank" rel="noopener">kubelet 源码分析 - Beantech | Newgoo | kubernates</a></p></li><li><p><a href="http://blog.xbblfz.site/2018/10/12/Kubelet%E5%90%AF%E5%8A%A8%E5%8F%8A%E5%AF%B9Docker%E5%AE%B9%E5%99%A8%E7%AE%A1%E7%90%86%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90/" target="_blank" rel="noopener">“Kubelet启动源码分析” - 徐波的博客 | Xu Blog</a></p></li><li><p><a href="https://cizixs.com/2017/06/06/kubelet-source-code-analysis-part-1/" target="_blank" rel="noopener">kubelet 源码分析：启动流程 | Cizixs Write Here</a></p></li><li><p><a href="https://fankangbest.github.io/2017/12/17/kubelet%E5%88%86%E6%9E%90(%E4%B8%89)-volumeManager-v1-5-2/" target="_blank" rel="noopener">kubelet分析(三)-volumeManager-v1.5.2 | fankangbest</a></p></li><li><p><a href="https://wenfeng-gao.github.io/post/k8s-volume-manager-source-code-analysis/" target="_blank" rel="noopener">Kubernetes源码分析之VolumeManager - Je pense donc je suis</a></p></li><li><p><a href="https://www.huweihuang.com/kubernetes-notes/code-analysis/kubelet/startKubelet.html" target="_blank" rel="noopener">startKubelet · Kubernetes 学习笔记</a></p></li></ul><h3 id="官方文档"><a href="#官方文档" class="headerlink" title="官方文档"></a>官方文档</h3><ul><li><p><a href="https://docs.docker.com/storage/" target="_blank" rel="noopener">Manage data in Docker | Docker Documentation</a></p></li><li><p><a href="https://docs.docker.com/storage/bind-mounts/" target="_blank" rel="noopener">Use bind mounts | Docker Documentation</a></p></li><li><p><a href="https://docs.docker.com/storage/bind-mounts/" target="_blank" rel="noopener">Use bind mounts | Docker Documentation</a></p></li><li><p><a href="http://www.jinbuguo.com/man/mount.html" target="_blank" rel="noopener">mount 中文手册</a></p></li><li><p><a href="https://docs.docker.com/storage/storagedriver/overlayfs-driver/" target="_blank" rel="noopener">Use the OverlayFS storage driver</a></p></li></ul><h3 id="相关博客"><a href="#相关博客" class="headerlink" title="相关博客"></a>相关博客</h3><ul><li><p><a href="https://cizixs.com/2016/10/25/kubernetes-intro-kubelet/" target="_blank" rel="noopener">kubernetes 简介： kubelet 和 pod | Cizixs Write Here</a></p></li><li><p><a href="https://michaelyou.github.io/2017/09/17/Docker%E6%95%B0%E6%8D%AE%E7%AE%A1%E7%90%86-Volume%EF%BC%8C-bind-mount%E5%92%8Ctmpfs-mount/" target="_blank" rel="noopener">Docker数据管理-Volume， bind mount和tmpfs mount | Youmai の Blog</a></p></li><li><p><a href="https://www.qikqiak.com/k8strain/storage/csi/" target="_blank" rel="noopener">存储原理 - K8S训练营</a></p></li><li><p><a href="https://blog.fatedier.com/2020/04/17/pod-loopcrash-of-k8s-subpath/" target="_blank" rel="noopener">Kubernetes 挂载 subpath 的容器在 configmap 变更后重启时挂载失败</a></p></li><li><p><a href="https://www.infvie.com/ops-notes/kubernetes-storage.html" target="_blank" rel="noopener">理解kubernetes中的Storage | Infvie’s Blog</a></p></li><li><p><a href="https://arkingc.github.io/2018/12/11/2018-12-11-docker-storage-persist/" target="_blank" rel="noopener">Docker容器数据持久化</a></p></li><li><p><a href="https://arkingc.github.io/2018/01/19/2018-01-19-docker-imagestore/" target="_blank" rel="noopener">Docker源码分析—镜像存储</a></p></li><li><p><a href="https://arkingc.github.io/2018/01/15/2018-01-15-docker-storage-overlay2/" target="_blank" rel="noopener">Docker源码分析—存储驱动</a></p></li><li><p><a href="https://arkingc.github.io/2017/05/05/2017-05-05-docker-filesystem-overlay/" target="_blank" rel="noopener">Docker存储驱动—Overlay/Overlay2「译」</a></p></li><li><p><a href="https://blog.k8s.li/systemd.html">Linux 的小伙伴 systemd 详解</a></p></li></ul><h2 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h2><p>最后祝各位还在<code>搬砖</code>的工人们节日快乐！</p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;最近在 kubernetes 中使用 NFS
        
      
    
    </summary>
    
    
      <category term="技术" scheme="https://blog.k8s.li/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="kubernetes" scheme="https://blog.k8s.li/tags/kubernetes/"/>
    
      <category term="docker" scheme="https://blog.k8s.li/tags/docker/"/>
    
      <category term="容器" scheme="https://blog.k8s.li/tags/%E5%AE%B9%E5%99%A8/"/>
    
      <category term="存储" scheme="https://blog.k8s.li/tags/%E5%AD%98%E5%82%A8/"/>
    
      <category term="volumes" scheme="https://blog.k8s.li/tags/volumes/"/>
    
  </entry>
  
  <entry>
    <title>一次有趣的面试：WordPress 部署</title>
    <link href="https://blog.k8s.li/interview-wordpress-install.html"/>
    <id>https://blog.k8s.li/interview-wordpress-install.html</id>
    <published>2020-04-15T16:00:00.000Z</published>
    <updated>2020-04-27T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>今天收到一份面试题，内容看似很简单：</p><blockquote><ol><li><p>CentOS7，nginx 最新版，php 7.x，mysql 不做要求 + wordpress</p></li><li><p>以文件的方式创建并挂载2G的swap分区</p><p>请把学习记录以 URL，截图等方式保留。最终。我在手机上可以看到wordpress站点就好。时间1小时以内，方法方式不限</p></li></ol></blockquote><p>虽然看起来和简单，比如用 <code>docker-compose</code> 一键就能完成部署完成，不过为了把部署过程中遇到的一些问题详细地记录下来，以及参考的一些文档等，通过一篇正式的博客展现出来，这样效果会好一些。同时咱作为完美主义者，希望给再做一些额外的优化，比如 HTTPS ，以及不久前和咱给博客加的 Webp Server 😂。<a href="https://blog.k8s.li/oh-my-webpsh.html">让图片飞起来 oh-my-webp.sh ！</a> 咱来推销 <a href="https://github.com/webp-sh/webp_server_go" target="_blank" rel="noopener">Webp Server Go</a> 啦 （小声。</p><p>另外提一点的是，如果你深入理解 LNMP 技术栈的话，还是推荐使用传统的方式比如 yum 安装或源码编译安装，那样会能理解这些服务之间的工作流程，会对整个系统有深入的了解。而 <code>docker-compose</code> 简单粗暴的方式为我们屏蔽了这些细节，会让我们放弃去思考这些底层的细节，对于我们学习这门技术栈来讲，还是弊大于利。不过今天为了快速部署起来，还是选用 docker-compose 吧😂</p><h2 id="WordPress"><a href="#WordPress" class="headerlink" title="WordPress"></a>WordPress</h2><blockquote><p>Get WordPress Use the software that powers over 35% of the web.</p></blockquote><p>WordPress 想必大家都很熟悉啦，毕竟收是全球内容管理系统里的老大哥，常年占据在第一的位置（占有率 35%）。官网 <a href="https://wordpress.org" target="_blank" rel="noopener">wordpress.org</a></p><h2 id="任务2-以文件的方式创建并挂载2G的swap分区"><a href="#任务2-以文件的方式创建并挂载2G的swap分区" class="headerlink" title="任务2 以文件的方式创建并挂载2G的swap分区"></a>任务2 以文件的方式创建并挂载2G的swap分区</h2><p>这个任务与 WordPress 不太相关，所以就先完成这个。拿到机器后 ssh 登录到系统，先使用常用的命令看一下服务器的信息，另外在自己的域名上添加了 A  记录<code>wordpress.k8s.li</code> 到这台服务器  IP ，并开启 HTTPS ，防止被 DDOS 攻击，毕竟有 CloudFlare 的 Anycast CDN 给我们在前头扛一把😂还是不错滴。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">[root@interview ~]# uname -a</span><br><span class="line">Linux interview 3.10.0-1062.12.1.el7.x86_64 #1 SMP Tue Feb 4 23:02:59 UTC 2020 x86_64 x86_64 x86_64 GNU/Linux</span><br><span class="line">[root@interview ~]# cat /proc/cpuinfo</span><br><span class="line">processor       : 0</span><br><span class="line">vendor_id       : GenuineIntel</span><br><span class="line">cpu family      : 6</span><br><span class="line">model           : 45</span><br><span class="line">model name      : Intel(R) Xeon(R) CPU E5-2670 0 @ 2.60GHz</span><br><span class="line">stepping        : 7</span><br><span class="line">microcode       : 0x710</span><br><span class="line">cpu MHz         : 2594.123</span><br><span class="line">cache size      : 20480 KB</span><br><span class="line">physical id     : 0</span><br><span class="line">siblings        : 1</span><br><span class="line">core id         : 0</span><br><span class="line">cpu cores       : 1</span><br><span class="line">apicid          : 0</span><br><span class="line">initial apicid  : 0</span><br><span class="line">fpu             : yes</span><br><span class="line">fpu_exception   : yes</span><br><span class="line">cpuid level     : 13</span><br><span class="line">wp              : yes</span><br><span class="line">flags           : fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat clflush mmx fxsr sse sse2 syscall nx rdtscp lm constant_tsc rep_good nopl eagerfpu pni pclmulqdq ssse3 cx16 sse4_1 sse4_2 x2apic popcnt tsc_deadline_timer aes hypervisor lahf_lm</span><br><span class="line">bogomips        : 5187.68</span><br><span class="line">clflush size    : 64</span><br><span class="line">cache_alignment : 64</span><br><span class="line">address sizes   : 46 bits physical, 48 bits virtual</span><br><span class="line">power management:</span><br><span class="line"></span><br><span class="line">[root@interview ~]# free -h</span><br><span class="line">              total        used        free      shared  buff/cache   available</span><br><span class="line">Mem:           985M        150M        451M         12M        382M        680M</span><br><span class="line">Swap:            0B          0B          0B</span><br></pre></td></tr></table></figure><ul><li><code>unanme -a</code> 查看一下系统的内核版本 ，<code>3.10.0-1062</code> 的内核看样子是 CentOS7.7</li><li><code>cat /proc/cpuinfo</code> 查看一下 CPU 的信息，E5-2670 的 CPU ，属于 Intel 第六代 CPU 系列。</li><li><code>free</code> 查看一下内存的情况，1GB 的小内存😂</li></ul><blockquote><p>Q2 以文件的方式创建并挂载2G的swap分区</p></blockquote><p>这个问题比较简单，之前自己的 GCE 小鸡 512M 内存上也是使用文件的方式创建 2GB 的交换分区😂。所以对这个步骤早就熟记于心，并不需要搜索就能搞定😋。使用 dd 命令即可生成一个 2GB 大小的文件。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@interview ~]# dd if&#x3D;&#x2F;dev&#x2F;zero of&#x3D;&#x2F;swapfile bs&#x3D;4M count&#x3D;500</span><br><span class="line">500+0 records in</span><br><span class="line">500+0 records out</span><br><span class="line">2097152000 bytes (2.1 GB) copied, 11.0648 s, 190 MB&#x2F;s</span><br></pre></td></tr></table></figure><p><code>2097152000 bytes (2.1 GB) copied, 11.0648 s, 190 MB/s</code> 怎么会是 2.1 GB 呢？，多出来 0.1GB ，强迫症受不了。想起来了，可能是 <code>bs=4M</code> 参数的问题。于是我在我的 debian 机器上测试了一下</p><p>顺带 man 一下 dd 看看 bs 参数是怎么定义的</p><blockquote><p>  bs=BYTES read and write up to BYTES bytes at a time (default: 512); overrides ibs and obs</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">╭─debian@debian ~</span><br><span class="line">╰─$ dd if=/dev/zero of=./test bs=4MB count=4</span><br><span class="line">4+0 records in</span><br><span class="line">4+0 records out</span><br><span class="line">16000000 bytes (16 MB, 15 MiB) copied, 0.0147078 s, 1.1 GB/s</span><br></pre></td></tr></table></figure><p>原因是文件大小单位不同，一个是 <code>MB</code> 另一个是 <code>MiB</code> ，在 Google 上搜索了一下 。看到上的一个回答 <a href="https://www.quora.com/What-is-the-difference-between-1-MiB-and-1-MB-and-why-should-we-care" target="_blank" rel="noopener">What is the difference between 1 MiB and 1 MB and why should we care?</a> 。也想起了前两天看到 <a href="https://draveness.me/" target="_blank" rel="noopener">面向信仰编程</a> 大佬的一个推文：</p><blockquote class="twitter-tweet"><p lang="zh" dir="ltr">最近才发现 MB 和 MiB 是不一样的：<br><br>+ MiB 是 1024 的倍数<br>+ MB 是 1000 的倍数<br><br>Git 下载时的单位是 MiB，但是 macOS 里显示的确实 MB，部分服务会把两者用混，比如 DigitalOcean 里的 S3 服务，下载文件的时候我还以为只下载了一部分😂 <a href="https://twitter.com/hashtag/%E5%86%B7%E7%9F%A5%E8%AF%86?src=hash&amp;ref_src=twsrc%5Etfw" target="_blank" rel="noopener">#冷知识</a> <a href="https://t.co/U1IoRlgjXJ" target="_blank" rel="noopener">pic.twitter.com/U1IoRlgjXJ</a></p>&mdash; Draveness (@draven0xff) <a href="https://twitter.com/draven0xff/status/1249290829161590786?ref_src=twsrc%5Etfw" target="_blank" rel="noopener">April 12, 2020</a></blockquote> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script><p>接下来使用 <code>mkswap</code> 命令将刚刚创建好的 <code>/swapfile</code> 文件格式化为交换分区所需要的格式，并修改一下文件权限为 600 ，即只能由 root 用户读，不然默认的 755 会被其他用户看到，而里面的内容是内存里的信息，所以安全起见还是修改一下权限。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">[root@interview ~]# mkswap /swapfile</span><br><span class="line">Setting up swapspace version 1, size = 2047996 KiB</span><br><span class="line">no label, UUID=a4eab465-75d1-4830-b870-c222c7e2e87b</span><br><span class="line">[root@interview ~]#</span><br><span class="line">[root@interview ~]# chmod 600 /swapfile</span><br><span class="line">[root@interview ~]# swapon !$</span><br><span class="line">swapon /swapfile</span><br><span class="line">[root@interview ~]# free -h</span><br><span class="line">              total        used        free      shared  buff/cache   available</span><br><span class="line">Mem:           985M        212M        140M         12M        633M        612M</span><br><span class="line">Swap:          2.0G          0B        2.0G</span><br></pre></td></tr></table></figure><p>至此任务二完成了，接下来就是题目的核心安装 WordPress 啦</p><h2 id="install"><a href="#install" class="headerlink" title="install"></a>install</h2><p>刚开始打算使用常规的方法来部署 WordPress 的，使用 Google 搜索关键字 <code>CentOS install WordPress</code> ，排名第二的是 <code>DigitalOcean</code> 官方博客里的 <a href="https://www.digitalocean.com/community/tutorials/how-to-install-wordpress-on-centos-7" target="_blank" rel="noopener">How To Install WordPress on CentOS 7</a>。官方博客里提到：</p><blockquote><p>Additionally, you’ll need to have a LAMP (Linux, Apache, MySQL, and PHP) stack installed on your CentOS 7 server. If you don’t have these components already installed or configured, you can use this guide to learn how to install LAMP on CentOS 7.</p></blockquote><p>虽然 WordPress 官方没有给出详细的搭建步骤，但可以参考 DigitalOcean 官方的内容，毕竟公有云服务提供商的技术专家写的博客更可靠一些。由于要求的是 nginx 最新版本，yum 安装的 nginx 版本可能会旧一些。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@interview wordpress]# yum list nginx</span><br><span class="line">Loaded plugins: fastestmirror, langpacks</span><br><span class="line">Loading mirror speeds from cached hostfile</span><br><span class="line"> * base: centos-distro.1gservers.com</span><br><span class="line"> * epel: d2lzkl7pfhq30w.cloudfront.net</span><br><span class="line"> * extras: mirror.dal.nexril.net</span><br><span class="line"> * updates: mirror.dal10.us.leaseweb.net</span><br><span class="line">Available Packages</span><br><span class="line">nginx.x86_64       1:1.16.1-1.el7            epel</span><br></pre></td></tr></table></figure><p><code>yum list nginx</code> 里的信息显示 nginx 版本为 1.16.1 并不是 <a href="https://nginx.org/en/download.html" target="_blank" rel="noopener">官网</a> 上的最新版 <code>1.17.10</code> ，源码编译的时间可能会有点长，因为前天看到一个推文说他使用 GCP 的小鸡编译 nginx 大概花了 3 个小时😂。而我面试规定的时间是要求 1 个小时内解决。我去，想要最新版 nginx ，而且最省时间的办法看来只用 docker 的方式安装 nginx 了 ，使用 nginx 官方的镜像 nginx:latest 即为 nginx 最新的版本。Google 搜索 <code>docker hub nginx</code> 来到 docker 官方的  nginx 镜像仓库 <a href="https://hub.docker.com/_/nginx" target="_blank" rel="noopener">nginx</a> 。我哭了，虽然是 1.17 版本，但是 1.17.9 版本而不是 1.17.10 ，就差了一点点啊！掀桌儿（。将就着用吧，虽然差了那么一点点。</p><blockquote class="twitter-tweet"><p lang="zh" dir="ltr">小折腾了一把：在闲置的手机上跑了个Ruby on Rails网站，它还带有HTTPS证书且公网可以访问。望着屏幕上滚动的Nginx日志感觉还挺不可思议的。<br><br>系统是Android上跑的Debian。<br><br>另外用这几年前的手机编译Nginx居然只花了大概3小时，比GCP最低档的VPS还快。 <a href="https://t.co/5PGy96al5D" target="_blank" rel="noopener">pic.twitter.com/5PGy96al5D</a></p>&mdash; 丁宇 | DING Yu (@felixding) <a href="https://twitter.com/felixding/status/1249675123218497536?ref_src=twsrc%5Etfw" target="_blank" rel="noopener">April 13, 2020</a></blockquote> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script><p>事实证明我推断错了，第二天我在我的另一台机器上编译 nginx 花了不到 1 分钟，被大佬坑惨了啊😂。在 GCE 小鸡上编译 nginx 根本不可能需要 3 小时吧，3 分钟才对的吧。当初看到后就感觉编译 nginx 需要 3个小时就有点问题，但并没有亲自去验证。唉，还是自己不够细致啊，<strong>一知半解真是很危险的事儿！</strong></p><h3 id="install-docker"><a href="#install-docker" class="headerlink" title="install docker"></a>install docker</h3><p>安装 docker 的方式再熟悉不过了，使用一个 curl 命令就能搞定 <code>curl -fsSL https://get.docker.com | bash -s docker</code> 如果在国内环境的话，后面加上  <code>--mirror Aliyun</code>  参数就能使用阿里云的镜像站，这样会更快一些。即 <code>curl -fsSL https://get.docker.com | bash -s docker --mirror Aliyun</code> 。</p><p>不过我还是从第一次接触的角度来安装 docker ，Google 搜索 <code>centos install docker</code> 点进入第一个搜索结果即为官网 <a href="https://docs.docker.com/engine/install/centos/" target="_blank" rel="noopener">Install Docker Engine on CentOS</a> ，为了节省时间就没有按照官网的步骤来，而是使用官方的一键脚本来安装。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">[root@interview ~]# curl -fsSL https://get.docker.com -o get-docker.sh</span><br><span class="line">[root@interview ~]# ls</span><br><span class="line">get-docker.sh</span><br><span class="line">[root@interview ~]# chmod +x get-docker.sh</span><br><span class="line">[root@interview ~]# ./get-docker.sh</span><br></pre></td></tr></table></figure><p>安装完成之后使用 <code>docker info</code> 来查看一下 docker 信息。需要注意的是：目前最新版本的 docker 默认优先采用 <strong>overlay2</strong> 的存储驱动，对于已支持该驱动的 Linux 发行版，不需要任何进行任何额外的配置。另外需要注意的是<code>devicemapper</code> 存储驱动已经在 docker 18.09 版本中被废弃，docker 官方推荐使用 <code>overlay2</code> 替代<code>devicemapper</code>，在我司生产环境曾经因为 <code>devicemapper</code> 遇到过存储挂不起的坑😑。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">[root@interview</span> <span class="string">~]#</span> <span class="string">docker</span> <span class="string">info</span></span><br><span class="line"><span class="attr">Client:</span></span><br><span class="line"> <span class="attr">Debug Mode:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">Server:</span></span><br><span class="line"> <span class="attr">Containers:</span> <span class="number">0</span></span><br><span class="line">  <span class="attr">Running:</span> <span class="number">0</span></span><br><span class="line">  <span class="attr">Paused:</span> <span class="number">0</span></span><br><span class="line">  <span class="attr">Stopped:</span> <span class="number">0</span></span><br><span class="line"> <span class="attr">Images:</span> <span class="number">0</span></span><br><span class="line"> <span class="attr">Server Version:</span> <span class="number">19.03</span><span class="number">.8</span></span><br><span class="line"> <span class="attr">Storage Driver:</span> <span class="string">overlay2</span></span><br><span class="line">  <span class="attr">Backing Filesystem:</span> <span class="string">&lt;unknown&gt;</span></span><br><span class="line">  <span class="attr">Supports d_type:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">Native Overlay Diff:</span> <span class="literal">true</span></span><br><span class="line"> <span class="attr">Logging Driver:</span> <span class="string">json-file</span></span><br><span class="line"> <span class="attr">Cgroup Driver:</span> <span class="string">cgroupfs</span></span><br><span class="line"> <span class="attr">Plugins:</span></span><br><span class="line">  <span class="attr">Volume:</span> <span class="string">local</span></span><br><span class="line">  <span class="attr">Network:</span> <span class="string">bridge</span> <span class="string">host</span> <span class="string">ipvlan</span> <span class="string">macvlan</span> <span class="literal">null</span> <span class="string">overlay</span></span><br><span class="line">  <span class="attr">Log:</span> <span class="string">awslogs</span> <span class="string">fluentd</span> <span class="string">gcplogs</span> <span class="string">gelf</span> <span class="string">journald</span> <span class="string">json-file</span> <span class="string">local</span> <span class="string">logentries</span> <span class="string">splunk</span> <span class="string">syslog</span></span><br><span class="line"> <span class="attr">Swarm:</span> <span class="string">inactive</span></span><br><span class="line"> <span class="attr">Runtimes:</span> <span class="string">runc</span></span><br><span class="line"> <span class="attr">Default Runtime:</span> <span class="string">runc</span></span><br><span class="line"> <span class="attr">Init Binary:</span> <span class="string">docker-init</span></span><br><span class="line"> <span class="attr">containerd version:</span> <span class="string">7ad184331fa3e55e52b890ea95e65ba581ae3429</span></span><br><span class="line"> <span class="attr">runc version:</span> <span class="string">dc9208a3303feef5b3839f4323d9beb36df0a9dd</span></span><br><span class="line"> <span class="attr">init version:</span> <span class="string">fec3683</span></span><br><span class="line"> <span class="attr">Security Options:</span></span><br><span class="line">  <span class="string">seccomp</span></span><br><span class="line">   <span class="attr">Profile:</span> <span class="string">default</span></span><br><span class="line"> <span class="attr">Kernel Version:</span> <span class="number">3.10</span><span class="number">.0</span><span class="number">-1062.12</span><span class="number">.1</span><span class="string">.el7.x86_64</span></span><br><span class="line"> <span class="attr">Operating System:</span> <span class="string">CentOS</span> <span class="string">Linux</span> <span class="number">7</span> <span class="string">(Core)</span></span><br><span class="line"> <span class="attr">OSType:</span> <span class="string">linux</span></span><br><span class="line"> <span class="attr">Architecture:</span> <span class="string">x86_64</span></span><br><span class="line"> <span class="attr">CPUs:</span> <span class="number">1</span></span><br><span class="line"> <span class="attr">Total Memory:</span> <span class="number">985.</span><span class="string">3MiB</span></span><br><span class="line"> <span class="attr">Name:</span> <span class="string">interview</span></span><br><span class="line"> <span class="attr">ID:</span> <span class="string">YSZO:TT5U:GDLH:3FYT:LFGP:NLOS:L4YI:5LFU:3EAV:KHP2:F746:I5P3</span></span><br><span class="line"> <span class="attr">Docker Root Dir:</span> <span class="string">/var/lib/docker</span></span><br><span class="line"> <span class="attr">Debug Mode:</span> <span class="literal">false</span></span><br><span class="line"> <span class="attr">Registry:</span> <span class="string">https://index.docker.io/v1/</span></span><br><span class="line"> <span class="attr">Labels:</span></span><br><span class="line"> <span class="attr">Experimental:</span> <span class="literal">false</span></span><br><span class="line"> <span class="attr">Insecure Registries:</span></span><br><span class="line">  <span class="number">127.0</span><span class="number">.0</span><span class="number">.0</span><span class="string">/8</span></span><br><span class="line"> <span class="attr">Live Restore Enabled:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><h3 id="install-docker-compose"><a href="#install-docker-compose" class="headerlink" title="install docker-compose"></a>install docker-compose</h3><p>安装完 docker 之后，接下来安装 docker-compose ，使用 Google 搜索 <code>centos install docker-compose</code> 点进入第一个搜索结果即为官网的 <a href="https://docs.docker.com/compose/install/" target="_blank" rel="noopener">Install Docker Compose</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[root@interview ~] sudo curl -L "https://github.com/docker/compose/releases/download/1.25.4/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose</span><br><span class="line">[root@interview ~]# docker-compose version</span><br><span class="line">bash: /usr/local/bin/docker-compose: Permission denied</span><br><span class="line">[root@interview ~]# chmod +x /usr/local/bin/docker-compose</span><br><span class="line">[root@interview ~]# docker-compose version</span><br><span class="line">docker-compose version 1.25.4, build 8d51620a</span><br><span class="line">docker-py version: 4.1.0</span><br><span class="line">CPython version: 3.7.5</span><br><span class="line">OpenSSL version: OpenSSL 1.1.0l  10 Sep 2019</span><br></pre></td></tr></table></figure><p>遇到了 <code>Permission denied</code> 问题，原来是忘记加权限了 <code>chmod +x /usr/local/bin/docker-compose</code> 一下即可。</p><h3 id="WordPress-1"><a href="#WordPress-1" class="headerlink" title="WordPress"></a>WordPress</h3><p>官方 <a href="https://docs.docker.com/compose/wordpress/" target="_blank" rel="noopener">Quickstart: Compose and WordPress</a> 的 <code>docker-compose.yaml</code> 中的 web 服务器是使用的 apache 而不是 nginx ，因此要使用第三方的 docker-compose.yaml，前段时间在折腾 Webp Server Go 的时候遇到过这种需求。于是在 GitHub 上搜索 <code>wordpress nginx docker-compose</code> 找到了合适的 repo 即 <a href="https://github.com/mjstealey/wordpress-nginx-docker" target="_blank" rel="noopener">wordpress-nginx-docker</a> 。看一下 docker-compose.yaml 文件</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">'3.6'</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">wordpress:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">wordpress:$&#123;WORDPRESS_VERSION:-php7.3-fpm&#125;</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">wordpress</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./config/php.conf.ini:/usr/local/etc/php/conf.d/conf.ini</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./wordpress:/var/www/html</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">WORDPRESS_DB_NAME=$&#123;WORDPRESS_DB_NAME:-wordpress&#125;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">WORDPRESS_TABLE_PREFIX=$&#123;WORDPRESS_TABLE_PREFIX:-wp_&#125;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">WORDPRESS_DB_HOST=$&#123;WORDPRESS_DB_HOST:-mysql&#125;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">WORDPRESS_DB_USER=$&#123;WORDPRESS_DB_USER:-root&#125;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">WORDPRESS_DB_PASSWORD=$&#123;WORDPRESS_DB_PASSWORD:-password&#125;</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">mysql</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">mysql:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">mariadb:$&#123;MARIADB_VERSION:-latest&#125;</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">mysql</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./mysql:/var/lib/mysql</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">MYSQL_ROOT_PASSWORD=$&#123;MYSQL_ROOT_PASSWORD:-password&#125;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">MYSQL_USER=$&#123;MYSQL_USER:-root&#125;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">MYSQL_PASSWORD=$&#123;MYSQL_PASSWORD:-password&#125;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">MYSQL_DATABASE=$&#123;MYSQL_DATABASE:-wordpress&#125;</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">nginx:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">nginx:$&#123;NGINX_VERSION:-latest&#125;</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">nginx</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">'80:80'</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">'443:443'</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">$&#123;NGINX_CONF_DIR:-./nginx&#125;:/etc/nginx/conf.d</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">$&#123;NGINX_LOG_DIR:-./logs/nginx&#125;:/var/log/nginx</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">$&#123;WORDPRESS_DATA_DIR:-./wordpress&#125;:/var/www/html</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">$&#123;SSL_CERTS_DIR:-./certs&#125;:/etc/letsencrypt</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">$&#123;SSL_CERTS_DATA_DIR:-./certs-data&#125;:/data/letsencrypt</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">wordpress</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">adminer:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">adminer</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">links:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">mysql</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">8080</span><span class="string">:8080</span></span><br></pre></td></tr></table></figure><p>共有 4 个容器： wordpress、mysql、nginx、adminer，默认不需要修改既可以部署起来。adminer 是个 web 端管理 MySQL 数据库的，可以删掉不需要。</p><p>由于默认的系统不带 git ，所以需要安装一下 git <code>yum install git</code>，然后把 repo clone 下来。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/mjstealey/wordpress-nginx-docker</span><br><span class="line">cd wordpress-nginx-docker</span><br><span class="line">docker-compose up</span><br></pre></td></tr></table></figure><p>这样使用 <code>docker-compose up</code> 命令就能启动一个 WordPress 站点了。通过访问域名 <a href="https://wordpress.k8s.li/" target="_blank" rel="noopener"> wordpress.k8s.li</a> 即可访问刚刚创建好的网站了。</p><h3 id="Webp-Server"><a href="#Webp-Server" class="headerlink" title="Webp Server"></a>Webp Server</h3><p>为了优化一下博客图片静态资源的加载速度，可以为 WordPress 加上一个 Webp Server 服务，将原图片压缩为 webp 格式。需要修改一下 nginx 的配置文件，添加内容如下：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">location</span><span class="regexp"> ^~</span> /wp-content/uploads/ &#123;</span><br><span class="line">    <span class="attribute">proxy_pass</span> http://webp-server:3333;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 docker-compose.yaml 文件中加入 webp server 的容器</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">'3.6'</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">wordpress:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">wordpress:$&#123;WORDPRESS_VERSION:-php7.3-fpm&#125;</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">wordpress</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./config/php.conf.ini:/usr/local/etc/php/conf.d/conf.ini</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./wordpress:/var/www/html</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">WORDPRESS_DB_NAME=$&#123;WORDPRESS_DB_NAME:-wordpress&#125;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">WORDPRESS_TABLE_PREFIX=$&#123;WORDPRESS_TABLE_PREFIX:-wp_&#125;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">WORDPRESS_DB_HOST=$&#123;WORDPRESS_DB_HOST:-mysql&#125;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">WORDPRESS_DB_USER=$&#123;WORDPRESS_DB_USER:-root&#125;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">WORDPRESS_DB_PASSWORD=$&#123;WORDPRESS_DB_PASSWORD:-password&#125;</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">mysql</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">mysql:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">mariadb:$&#123;MARIADB_VERSION:-latest&#125;</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">mysql</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./mysql:/var/lib/mysql</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">MYSQL_ROOT_PASSWORD=$&#123;MYSQL_ROOT_PASSWORD:-password&#125;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">MYSQL_USER=$&#123;MYSQL_USER:-root&#125;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">MYSQL_PASSWORD=$&#123;MYSQL_PASSWORD:-password&#125;</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">MYSQL_DATABASE=$&#123;MYSQL_DATABASE:-wordpress&#125;</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">nginx:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">nginx:$&#123;NGINX_VERSION:-latest&#125;</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">nginx</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">'80:80'</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">'443:443'</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">$&#123;NGINX_CONF_DIR:-./nginx&#125;:/etc/nginx/conf.d</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">$&#123;NGINX_LOG_DIR:-./logs/nginx&#125;:/var/log/nginx</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">$&#123;WORDPRESS_DATA_DIR:-./wordpress&#125;:/var/www/html</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">$&#123;SSL_CERTS_DIR:-./certs&#125;:/etc/letsencrypt</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">$&#123;SSL_CERTS_DATA_DIR:-./certs-data&#125;:/data/letsencrypt</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">wordpress</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">webp-server:</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">webpsh/webps:latest</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">webp-server</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./webp-server/config.json:/etc/config.json</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./wordpress:/var/www/html</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">3333</span><span class="string">:3333</span></span><br></pre></td></tr></table></figure><p>修改好 docker-compose.yaml 文件之后，我们还需要为  webp-server 准备一个 config.json 文件，存放在 <code>./webp-server/config.json</code>  下，内容如下：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"HOST"</span>: <span class="string">"0.0.0.0"</span>,</span><br><span class="line">  <span class="attr">"PORT"</span>: <span class="string">"3333"</span>,</span><br><span class="line">  <span class="attr">"QUALITY"</span>: <span class="string">"80"</span>,</span><br><span class="line">  <span class="attr">"IMG_PATH"</span>: <span class="string">"/var/www/html"</span>,</span><br><span class="line">  <span class="attr">"EXHAUST_PATH"</span>: <span class="string">""</span>,</span><br><span class="line">  <span class="attr">"ALLOWED_TYPES"</span>: [<span class="string">"jpg"</span>,<span class="string">"png"</span>,<span class="string">"jpeg"</span>,<span class="string">"bmp"</span>,<span class="string">"gif"</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接下来我们使用 <code>docker-compose restart</code> 命令重启一下容器，之后再 WordPress 端上传一张图片测试一下。上传完成之后，拿到图片的 url ，然后使用 wget 命令测试一下，显示 <code>Length: 102288 (100K)  [image/webp]</code> 就说明我们的 webp server 已经成功运行啦😂。完整的 repo 在我的 GitHub 上 <a href="https://github.com/muzi502/Wwordpress" target="_blank" rel="noopener">Wwordpress</a> ，欢迎来食用呀😋</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">╭─root@sg-02 /opt/wordpress-nginx-docker ‹master›</span><br><span class="line">╰─# wget  http://dl.amd64.xyz/wp-content/uploads/2020/04/74898710_p21.jpg</span><br><span class="line">--2020-04-17 01:06:29--  http://dl.amd64.xyz/wp-content/uploads/2020/04/74898710_p21.jpg</span><br><span class="line">Resolving dl.amd64.xyz (dl.amd64.xyz)... 3.1.38.108</span><br><span class="line">Connecting to dl.amd64.xyz (dl.amd64.xyz)|3.1.38.108|:80... connected.</span><br><span class="line">HTTP request sent, awaiting response... 200 OK</span><br><span class="line">Length: 102288 (100K) [image/webp]</span><br><span class="line">Saving to: ‘74898710_p21.jpg’</span><br><span class="line"></span><br><span class="line">74898710_p21.jpg             100%[=======&gt;]  99.89K  --.-KB/s    in 0.001s</span><br><span class="line"></span><br><span class="line">2020-04-17 01:06:29 (130 MB/s) - ‘74898710_p21.jpg’ saved [102288/102288]</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><p><a href="https://wordpress.org/" target="_blank" rel="noopener">wordpress.org</a></p></li><li><p><a href="https://hub.docker.com/_/wordpress/" target="_blank" rel="noopener">dockerhub WordPress</a></p></li><li><p><a href="https://www.nginx.com/" target="_blank" rel="noopener">nginx.com</a></p></li><li><p><a href="https://github.com/mjstealey/wordpress-nginx-docker" target="_blank" rel="noopener">wordpress-nginx-docker</a></p></li><li><p><a href="https://github.com/muzi502/Wwordpress" target="_blank" rel="noopener">Wwordpress</a></p></li><li><p><a href="https://www.digitalocean.com/community/tutorials/how-to-install-wordpress-on-centos-7" target="_blank" rel="noopener">How To Install WordPress on CentOS 7</a></p></li><li><p><a href="https://www.digitalocean.com/community/tutorials/how-to-install-linux-apache-mysql-php-lamp-stack-on-centos-7" target="_blank" rel="noopener">How To Install Linux, Apache, MySQL, PHP (LAMP) stack On CentOS 7</a></p></li><li><p><a href="https://docs.docker.com/compose/wordpress/" target="_blank" rel="noopener">Quickstart: Compose and WordPress</a></p></li><li><p><a href="https://www.digitalocean.com/community/tutorials/how-to-install-wordpress-with-docker-compose" target="_blank" rel="noopener">How To Install WordPress With Docker Compose</a></p></li><li><p><a href="https://docs.docker.com/engine/install/centos/" target="_blank" rel="noopener">Install Docker Engine on CentOS</a></p></li><li><p><a href="https://docs.docker.com/compose/install/" target="_blank" rel="noopener">Install Docker Compose</a></p></li><li><p><a href="https://www.howtoforge.com/tutorial/how-to-build-nginx-from-source-on-ubuntu-1804-lts/" target="_blank" rel="noopener">How to Build NGINX from source on Ubuntu 18.04 LTS</a></p></li><li><p><a href="https://blog.k8s.li/oh-my-webpsh.html">让图片飞起来 oh-my-webp.sh ！</a></p></li></ul><h2 id="end"><a href="#end" class="headerlink" title="end"></a>end</h2><p>至此部署一个 WordPress 的流程就结束啦，为了追求速度就放弃了对一些细节的深究，得不偿失啊。</p><p>有些内容看似简单，但想把这个过程中遇到的问题以及想法落笔成字，形成一篇博客，还是需要语言组织能力，看来自己这方面还是有些欠缺。</p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;今天收到一份面试题，内容看似很简单：&lt;/p&gt;
&lt;block
        
      
    
    </summary>
    
    
      <category term="技术" scheme="https://blog.k8s.li/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="nginx" scheme="https://blog.k8s.li/tags/nginx/"/>
    
      <category term="WordPress" scheme="https://blog.k8s.li/tags/WordPress/"/>
    
      <category term="MySQL" scheme="https://blog.k8s.li/tags/MySQL/"/>
    
      <category term="PHP" scheme="https://blog.k8s.li/tags/PHP/"/>
    
      <category term="Webp" scheme="https://blog.k8s.li/tags/Webp/"/>
    
  </entry>
  
  <entry>
    <title>使用 kubeadm 快速部署体验 K8s</title>
    <link href="https://blog.k8s.li/kubeadm-deploy-k8s-v1.17.4.html"/>
    <id>https://blog.k8s.li/kubeadm-deploy-k8s-v1.17.4.html</id>
    <published>2020-04-14T16:00:00.000Z</published>
    <updated>2020-04-14T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="炒冷饭"><a href="#炒冷饭" class="headerlink" title="炒冷饭"></a>炒冷饭</h2><p>大概是从去年 5 月开始才接触  kubernetes ，时至今日已经快一年，当初写的一篇博客 <a href="https://blog.k8s.li/install-k8s-ubuntu18-04.html">ubuntu 1804 使用 kubeadm 部署 kubernetes</a> 翻出来重新修改一下，记录一下使用 kubeadm 部署 kubernetes v1.17.4 版的流程。适用于国内网络环境下。</p><h3 id="kubeadm"><a href="#kubeadm" class="headerlink" title="kubeadm"></a>kubeadm</h3><p>Kubernetes 从 1.4 版本开始后就引入了 kubeadm 用于简化集群搭建的过程，在 Kubernetes 1.13 版本中，kubeadm 工具进入 GA 阶段，而当前的 kubernetes 最新版 stable 为 1.18.1 ，kubeadm 已经经历过多个版本的迭代，可用于生产环境 Kubernetes 集群搭建。对于刚刚接触 kubernetes  的初学者来讲，kubeadm 也是一个快速部署体验 kubernetes 的不二之选。</p><h2 id="kubernetes-架构"><a href="#kubernetes-架构" class="headerlink" title="kubernetes 架构"></a>kubernetes 架构</h2><p><img src="img/components-of-kubernetes.png" alt="Components of Kubernetes"></p><p>架构图来自 kubernetes 官方文档 <a href="https://kubernetes.io/zh/docs/concepts/overview/components/" target="_blank" rel="noopener">Kubernetes 组件</a></p><h3 id="控制平面"><a href="#控制平面" class="headerlink" title="控制平面"></a>控制平面</h3><p>控制平面的组件对集群做出全局决策(比如调度)，以及检测和响应集群事件主要的组件由</p><ul><li>kube-apiserver：主节点上负责提供 Kubernetes API 服务的组件；它是 Kubernetes 控制面的前端。</li><li>etcd：集群中唯一一个有状态的服务，用来存储集群中的所有资源信息数据。</li><li>kube-scheduler：负责调度 Pod 资源到某个 Node 节点上。</li><li>kube-controller-manager：控制器管理器。</li><li>kubelet：如果使用 kubeadm 部署的话需要在 master 节点安装 kubelet</li></ul><h3 id="工作平面"><a href="#工作平面" class="headerlink" title="工作平面"></a>工作平面</h3><ul><li>kubelet：通过监听 kube-apiserver ，接收一组通过各类机制提供给它的 PodSpecs，确保这些 PodSpecs 中描述的容器处于运行状态且健康。</li><li>kube-proxy：实现 Kubernetes <a href="https://kubernetes.io/docs/concepts/services-networking/service/" target="_blank" rel="noopener">Service</a> 概念的一部分，通过 iptables 规则将 service 负载均衡到各个 Pod。</li><li>CRI容器运行时：根据统计目前 docker 依旧是排名第一的容器运行时</li></ul><h3 id="kubeadm-init-流程"><a href="#kubeadm-init-流程" class="headerlink" title="kubeadm init 流程"></a>kubeadm init 流程</h3><p>在使用 kubeadm 部署时，除了 kubelet 组件需要使用二进制部署外，其他的组件都是用 <a href="">static Pod</a> 的方式运行在相应的节点。</p><h2 id="节点初始化"><a href="#节点初始化" class="headerlink" title="节点初始化"></a>节点初始化</h2><p>系统建议选择 ubuntu 1804 或者 CentOS 7.7，因为 docker 容器虚拟化以及 kubernetes 这些新技术都是很依赖一些内核特性，比如 overlay2、cgroupv2 等，这些特性在较低版本的内核上并不是很稳定，建议 4.14 或者 4.19 以上的 LTS  内核，及长期稳定支持版内核，在 <a href="https://www.kernel.org/category/releases.html" target="_blank" rel="noopener">kernel.org</a> 上有内核支持支持情况。</p><h3 id="设置主机名并添加-hosts"><a href="#设置主机名并添加-hosts" class="headerlink" title="设置主机名并添加  hosts"></a>设置主机名并添加  hosts</h3><p>每台机器上都要设置相应的主机名并添加 hosts</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">hostnamectl set-hostname k8s-maste-01</span><br><span class="line"></span><br><span class="line">cat &gt;&gt; /etc/hosts &lt;&lt;EOF</span><br><span class="line">10.20.172.211 k8s-master-01</span><br><span class="line">10.20.172.212 k8s-node-01</span><br><span class="line">10.20.172.213 k8s-node-02</span><br><span class="line">10.20.172.214 k8s-node-03</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><h3 id="关闭-swap-和-SELinux"><a href="#关闭-swap-和-SELinux" class="headerlink" title="关闭 swap 和 SELinux"></a>关闭 swap 和 SELinux</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 临时关闭swap和SELinux</span></span><br><span class="line">swapoff -a</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> ubuntu 默认没有安装 SELinux 因为无需关闭</span></span><br><span class="line">setenforce 0</span><br><span class="line">sed -i 's/^SELINUX=enforcing$/SELINUX= disabled/' /etc/selinux/config</span><br></pre></td></tr></table></figure><h3 id="设置内核参数"><a href="#设置内核参数" class="headerlink" title="设置内核参数"></a>设置内核参数</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cat &gt; /etc/sysctl.d/99-kubernetes-cri.conf &lt;&lt;EOF</span><br><span class="line">net.bridge.bridge-nf-call-iptables  = 1</span><br><span class="line">enet.ipv4.ip_forward                = 1</span><br><span class="line">net.bridge.bridge-nf-call-ip6tables = 1</span><br><span class="line">EOF</span><br><span class="line">sysctl --system</span><br></pre></td></tr></table></figure><h3 id="配置镜像源和安装"><a href="#配置镜像源和安装" class="headerlink" title="配置镜像源和安装"></a>配置镜像源和安装</h3><p>如果对 docker-ce 版本没有特殊要求，使用以下命令可安装 docker-ce 最新的 stable 版本。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -fsSL https://get.docker.com | bash -s docker --mirror Aliyun</span><br></pre></td></tr></table></figure><h4 id="CentOS7"><a href="#CentOS7" class="headerlink" title="CentOS7"></a>CentOS7</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">yum install -y yum-utils</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 如果 docker 版本使用 18.09 + 且存储驱动使用 overlay2</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 就不用 device-mapper-persistent-data 和 lvm2</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 添加aliyun软件包yum源 docker</span></span><br><span class="line">yum-config-manager --add-repo https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 添加aliyun软件包yum源 kubelet kubeadm kubectl</span></span><br><span class="line"><span class="meta">cat&gt;</span><span class="bash">&gt;/etc/yum.repos.d/kubrenetes.repo&lt;&lt;EOF</span></span><br><span class="line">[kubernetes]</span><br><span class="line">name=Kubernetes Repo</span><br><span class="line">baseurl=https://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64/</span><br><span class="line">gpgcheck=0</span><br><span class="line">gpgkey=https://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg</span><br><span class="line">EOF</span><br><span class="line">yum makecache</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 列出可以安装的 docker-ce 版本，安装指定的 docker 版本</span></span><br><span class="line">yum list docker-ce --showduplicates|sort -r</span><br><span class="line">yum install -y docker-ce-19.03.3-3.el7</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="comment"># 列出可以安装的 kubernetes 版本，安装指定的 kubeadm kubelet kubectl</span></span></span><br><span class="line">yum list kubeadm --showduplicates|sort -r</span><br><span class="line">yum install kubelet-1.17.4-0 kubeadm-1.17.4-0 kubectl-1.17.4-0 --disableexcludes=kubernetes</span><br></pre></td></tr></table></figure><h4 id="Ubuntu-1804"><a href="#Ubuntu-1804" class="headerlink" title="Ubuntu 1804"></a>Ubuntu 1804</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">apt update</span><br><span class="line">apt-get install -y apt-transport-https ca-certificates curl software-properties-common</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 添加阿里云 docker-ce 镜像源</span></span><br><span class="line">curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -</span><br><span class="line">add-apt-repository "deb [arch=amd64] http://mirrors.aliyun.com/docker-ce/linux/ubuntu $(lsb_release -cs) stable"</span><br><span class="line"><span class="meta">#</span><span class="bash"> 添加阿里云 kubernetes 镜像源</span></span><br><span class="line">curl https://mirrors.aliyun.com/kubernetes/apt/doc/apt-key.gpg | apt-key add -</span><br><span class="line">cat &lt;&lt;EOF &gt;/etc/apt/sources.list.d/kubernetes.list</span><br><span class="line">deb https://mirrors.aliyun.com/kubernetes/apt/ kubernetes-xenial main</span><br><span class="line">EOF</span><br><span class="line">apt-get update</span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装指定版本的 docker-ce</span></span><br><span class="line">apt list -a docker-ce</span><br><span class="line">apt install docker-ce=5:19.03.8~3-0~ubuntu-bionic</span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装指定版本的 kubernetes</span></span><br><span class="line">apt install kubeadm=1.17.4-00 kubelet=1.17.4-00 kubectl=1.17.4-00</span><br></pre></td></tr></table></figure><h4 id="华为云坑"><a href="#华为云坑" class="headerlink" title="华为云坑"></a>华为云坑</h4><p>需要注意的是，如果你使用的华为云 kubernetes 镜像源，目前 （2020-04-15） 华为云上的 kubernetes 版本最高支持到 1.14.2，而 1.14 版本 kubernetes 已经不在维护了，所以推荐换个镜像源安装 v.1.16.8 或者 v1.17.4 这两个版本，v1.18.1 也不建议建议安装使用。关于版本的选择可以参考 <a href="https://blog.k8s.li/How-to-choose-the-right-version-of-kubernetes.html">生产环境如何保守地选择 kubernetes 版本</a> 。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">╭─root@k8s-master-01 ~</span><br><span class="line">╰─# yum list kubeadm --showduplicates|sort -r</span><br><span class="line">kubeadm.x86_64                       1.6.11-0                         kubernetes</span><br><span class="line">kubeadm.x86_64                       1.6.1-0                          kubernetes</span><br><span class="line">kubeadm.x86_64                       1.6.10-0                         kubernetes</span><br><span class="line">kubeadm.x86_64                       1.6.0-0                          kubernetes</span><br><span class="line">kubeadm.x86_64                       1.14.2-0                         kubernetes</span><br><span class="line">kubeadm.x86_64                       1.14.1-0                         kubernetes</span><br><span class="line">kubeadm.x86_64                       1.14.0-0                         kubernetes</span><br><span class="line">kubeadm.x86_64                       1.13.6-0                         kubernetes</span><br><span class="line">kubeadm.x86_64                       1.13.5-0                         kubernetes</span><br></pre></td></tr></table></figure><h3 id="设置-docker-的daemon-json"><a href="#设置-docker-的daemon-json" class="headerlink" title="设置 docker 的daemon.json"></a>设置 docker 的daemon.json</h3><p>安装完成之后先设置以下 docker 的启动参数 <code>/etc/docker/daemon.json</code></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">cat &gt; /etc/docker/daemon.json &lt;&lt;EOF</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"exec-opts"</span>: [<span class="string">"native.cgroupdriver=systemd"</span>],</span><br><span class="line">  <span class="attr">"registry-mirrors"</span>: [<span class="string">"https://xlx9erfu.mirror.aliyuncs.com"</span>],</span><br><span class="line">  <span class="attr">"log-driver"</span>: <span class="string">"json-file"</span>,</span><br><span class="line">  <span class="attr">"log-opts"</span>: &#123;</span><br><span class="line">    <span class="attr">"max-size"</span>: <span class="string">"100m"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"storage-driver"</span>: <span class="string">"overlay2"</span></span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><h3 id="设置开机自启并启动"><a href="#设置开机自启并启动" class="headerlink" title="设置开机自启并启动"></a>设置开机自启并启动</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">systemctl enable docker kubelet</span><br><span class="line">systemctl daemon-reload</span><br><span class="line">systemctl start docker kubelet</span><br></pre></td></tr></table></figure><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">╭─root@k8s-master-01</span> <span class="string">~</span></span><br><span class="line"><span class="string">╰─#</span> <span class="string">docker</span> <span class="string">info</span></span><br><span class="line"><span class="attr">Client:</span></span><br><span class="line"> <span class="attr">Debug Mode:</span> <span class="literal">false</span></span><br><span class="line"><span class="attr">Server:</span></span><br><span class="line"> <span class="attr">Containers:</span> <span class="number">0</span></span><br><span class="line">  <span class="attr">Running:</span> <span class="number">0</span></span><br><span class="line">  <span class="attr">Paused:</span> <span class="number">0</span></span><br><span class="line">  <span class="attr">Stopped:</span> <span class="number">0</span></span><br><span class="line"> <span class="attr">Images:</span> <span class="number">0</span></span><br><span class="line"> <span class="attr">Server Version:</span> <span class="number">19.03</span><span class="number">.3</span></span><br><span class="line"> <span class="attr">Storage Driver:</span> <span class="string">overlay2</span></span><br><span class="line">  <span class="attr">Backing Filesystem:</span> <span class="string">extfs</span></span><br><span class="line">  <span class="attr">Supports d_type:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">Native Overlay Diff:</span> <span class="literal">true</span></span><br><span class="line"> <span class="attr">Logging Driver:</span> <span class="string">json-file</span></span><br><span class="line"> <span class="attr">Cgroup Driver:</span> <span class="string">cgroupfs</span></span><br><span class="line"> <span class="attr">Plugins:</span></span><br><span class="line">  <span class="attr">Volume:</span> <span class="string">local</span></span><br><span class="line">  <span class="attr">Network:</span> <span class="string">bridge</span> <span class="string">host</span> <span class="string">ipvlan</span> <span class="string">macvlan</span> <span class="literal">null</span> <span class="string">overlay</span></span><br><span class="line">  <span class="attr">Log:</span> <span class="string">awslogs</span> <span class="string">fluentd</span> <span class="string">gcplogs</span> <span class="string">gelf</span> <span class="string">journald</span> <span class="string">json-file</span> <span class="string">local</span> <span class="string">logentries</span> <span class="string">splunk</span> <span class="string">syslog</span></span><br><span class="line"> <span class="attr">Swarm:</span> <span class="string">inactive</span></span><br><span class="line"> <span class="attr">Runtimes:</span> <span class="string">runc</span></span><br><span class="line"> <span class="attr">Default Runtime:</span> <span class="string">runc</span></span><br><span class="line"> <span class="attr">Init Binary:</span> <span class="string">docker-init</span></span><br><span class="line"> <span class="attr">containerd version:</span> <span class="string">894b81a4b802e4eb2a91d1ce216b8817763c29fb</span></span><br><span class="line"> <span class="attr">runc version:</span> <span class="string">425e105d5a03fabd737a126ad93d62a9eeede87f</span></span><br><span class="line"> <span class="attr">init version:</span> <span class="string">fec3683</span></span><br><span class="line"> <span class="attr">Security Options:</span></span><br><span class="line">  <span class="string">seccomp</span></span><br><span class="line">   <span class="attr">Profile:</span> <span class="string">default</span></span><br><span class="line"> <span class="attr">Kernel Version:</span> <span class="number">3.10</span><span class="number">.0</span><span class="number">-957.</span><span class="string">el7.x86_64</span></span><br><span class="line"> <span class="attr">Operating System:</span> <span class="string">CentOS</span> <span class="string">Linux</span> <span class="number">7</span> <span class="string">(Core)</span></span><br><span class="line"> <span class="attr">OSType:</span> <span class="string">linux</span></span><br><span class="line"> <span class="attr">Architecture:</span> <span class="string">x86_64</span></span><br><span class="line"> <span class="attr">CPUs:</span> <span class="number">4</span></span><br><span class="line"> <span class="attr">Total Memory:</span> <span class="number">3.</span><span class="string">683GiB</span></span><br><span class="line"> <span class="attr">Name:</span> <span class="string">k8s-master-01</span></span><br><span class="line"> <span class="attr">ID:</span> <span class="string">UXD4:IK6C:P3EO:TXRP:GQZD:STGH:GXZH:LO2C:HFBN:LV2B:LEVE:UWT2</span></span><br><span class="line"> <span class="attr">Docker Root Dir:</span> <span class="string">/var/lib/docker</span></span><br><span class="line"> <span class="attr">Debug Mode:</span> <span class="literal">false</span></span><br><span class="line"> <span class="attr">Registry:</span> <span class="string">https://index.docker.io/v1/</span></span><br><span class="line"> <span class="attr">Labels:</span></span><br><span class="line"> <span class="attr">Experimental:</span> <span class="literal">false</span></span><br><span class="line"> <span class="attr">Insecure Registries:</span></span><br><span class="line">  <span class="number">127.0</span><span class="number">.0</span><span class="number">.0</span><span class="string">/8</span></span><br><span class="line"> <span class="attr">Live Restore Enabled:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><p>目前最新版本的 docker 默认优先采用 <strong>overlay2</strong>  的存储驱动，对于已支持该驱动的 Linux 发行版，不需要任何进行任何额外的配置。另外需要注意的是<code>devicemapper</code> 存储驱动已经在 docker 18.09 版本中被废弃，docker 官方推荐使用 <code>overlay2</code> 替代<code>devicemapper</code>。可使用 lsmod 命令查看当前系统内核是否支持 overlay2 。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">╭─root@k8s-master-01 /opt/1.17.4</span><br><span class="line">╰─# lsmod |grep overlay</span><br><span class="line">overlay                71964  16</span><br></pre></td></tr></table></figure><h2 id="部署-master-节点"><a href="#部署-master-节点" class="headerlink" title="部署 master 节点"></a>部署 master 节点</h2><h3 id="准备镜像"><a href="#准备镜像" class="headerlink" title="准备镜像"></a>准备镜像</h3><p>对于 kubernetes 1.17.4 版本的 kubeadm 需要使用到以下 docker 镜像如下，对于墙国网络环境下，你需要找台可以自由访问互联网的服务器，在上面把它 pull 下来，然后 save 成 tar 包传回本地再 docker load 进镜像😂。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">k8s.gcr.io/kube-apiserver:v1.17.4</span><br><span class="line">k8s.gcr.io/kube-controller-manager:v1.17.4</span><br><span class="line">k8s.gcr.io/kube-scheduler:v1.17.4</span><br><span class="line">k8s.gcr.io/kube-proxy:v1.17.4</span><br><span class="line">k8s.gcr.io/pause:3.1</span><br><span class="line">k8s.gcr.io/etcd:3.4.3-0</span><br><span class="line">k8s.gcr.io/coredns:1.6.5</span><br></pre></td></tr></table></figure><p>需要注意的是，当使用 kubeadm pull 相关镜像时，kubeadm 的版本最好和 –kubernetes-version=${version} 版本一致，不一致的话有些版本的镜像是 pull 不下来的。对应版本的 kubenetes 要使用对应版本的镜像才可以。可以使用下面的脚本在可以自由访问互联网的服务器上将 pull 指定版本的镜像。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="keyword">for</span>: use kubeadm pull kubernetes images</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> date: 2019-08-15</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> author: muzi502</span></span><br><span class="line"></span><br><span class="line">set -xue</span><br><span class="line">apt-get update &amp;&amp; apt-get install -y apt-transport-https curl</span><br><span class="line">curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key add -</span><br><span class="line">cat &lt;&lt;EOF &gt;/etc/apt/sources.list.d/kubernetes.list</span><br><span class="line">deb https://apt.kubernetes.io/ kubernetes-xenial main</span><br><span class="line">EOF</span><br><span class="line">apt-get update</span><br><span class="line"></span><br><span class="line">for version in 1.17.4</span><br><span class="line">do</span><br><span class="line">    apt install kubeadm=$&#123;version&#125;-00</span><br><span class="line">    mkdir -p $&#123;version&#125;/bin</span><br><span class="line">    docker rmi $(docker images -q)</span><br><span class="line">    kubeadm config images pull --kubernetes-version=$&#123;version&#125;</span><br><span class="line">    docker save -o v$&#123;version&#125;.tar $(docker images | grep -v TAG | cut -d ' ' -f1)</span><br><span class="line">    gzip v$&#123;version&#125;.tar v$&#123;version&#125;.tar.gz</span><br><span class="line">done</span><br></pre></td></tr></table></figure><p>导入之后的镜像</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">╭─root@k8s-master-01 /opt/1.17.4</span><br><span class="line">╰─# docker load &lt; v1.17.4.tar.gz</span><br><span class="line">fc4976bd934b: Loading layer [=============&gt;]  53.88MB/53.88MB</span><br><span class="line">f6953727aaba: Loading layer [=============&gt;]   42.1MB/42.1MB</span><br><span class="line">Loaded image: k8s.gcr.io/kube-scheduler:v1.17.4</span><br><span class="line">225df95e717c: Loading layer [=============&gt;]  336.4kB/336.4kB</span><br><span class="line">7c9b0f448297: Loading layer [=============&gt;]  41.37MB/41.37MB</span><br><span class="line">Loaded image: k8s.gcr.io/coredns:1.6.5</span><br><span class="line">fe9a8b4f1dcc: Loading layer [=============&gt;]  43.87MB/43.87MB</span><br><span class="line">ce04b89b7def: Loading layer [=============&gt;]  224.9MB/224.9MB</span><br><span class="line">1b2bc745b46f: Loading layer [=============&gt;]  21.22MB/21.22MB</span><br><span class="line">Loaded image: k8s.gcr.io/etcd:3.4.3-0</span><br><span class="line">e17133b79956: Loading layer [=============&gt;]  744.4kB/744.4kB</span><br><span class="line">Loaded image: k8s.gcr.io/pause:3.1</span><br><span class="line">682fbb19de80: Loading layer [=============&gt;]  21.06MB/21.06MB</span><br><span class="line">2dc2f2423ad1: Loading layer [=============&gt;]  5.168MB/5.168MB</span><br><span class="line">ad9fb2411669: Loading layer [=============&gt;]  4.608kB/4.608kB</span><br><span class="line">597151d24476: Loading layer [=============&gt;]  8.192kB/8.192kB</span><br><span class="line">0d8d54147a3a: Loading layer [=============&gt;]  8.704kB/8.704kB</span><br><span class="line">960d0ce862e2: Loading layer [=============&gt;]  37.81MB/37.81MB</span><br><span class="line">Loaded image: k8s.gcr.io/kube-proxy:v1.17.4</span><br><span class="line">9daac3fed755: Loading layer [=============&gt;]  118.7MB/118.7MB</span><br><span class="line">Loaded image: k8s.gcr.io/kube-apiserver:v1.17.4</span><br><span class="line">99df54617e88: Loading layer [=============&gt;]  108.6MB/108.6MB</span><br><span class="line">Loaded image: k8s.gcr.io/kube-controller-manager:v1.17.4</span><br><span class="line">╭─root@k8s-master-01 /opt/1.17.4</span><br><span class="line">╰─# docker images</span><br><span class="line">REPOSITORY                           TAG                 CREATED             SIZE</span><br><span class="line">k8s.gcr.io/kube-proxy                v1.17.4             4 weeks ago         116MB</span><br><span class="line">k8s.gcr.io/kube-controller-manager   v1.17.4             4 weeks ago         161MB</span><br><span class="line">k8s.gcr.io/kube-apiserver            v1.17.4             4 weeks ago         171MB</span><br><span class="line">k8s.gcr.io/kube-scheduler            v1.17.4             4 weeks ago         94.4MB</span><br><span class="line">k8s.gcr.io/coredns                   1.6.5               5 months ago        41.6MB</span><br><span class="line">k8s.gcr.io/etcd                      3.4.3-0             5 months ago        288MB</span><br><span class="line">k8s.gcr.io/pause                     3.1                 2 years ago         742kB</span><br></pre></td></tr></table></figure><h3 id="初始化-master-节点"><a href="#初始化-master-节点" class="headerlink" title="初始化 master 节点"></a>初始化 master 节点</h3><p>使用 kubeadm init 命令初始化 master 节点，关于 kubeadm 的参数可以参考官方文档 <a href="https://kubernetes.io/zh/docs/reference/setup-tools/kubeadm/kubeadm-init/" target="_blank" rel="noopener">kubeadm init</a></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubeadm init --pod-network-cidr=10.244.0.0/16 --apiserver-advertise-address=10.20.172.211 --kubernetes-version=1.17.4</span><br></pre></td></tr></table></figure><ul><li>–pod-network-cidr= 指定 Pod 网段的 IP 地址块</li><li>–apiserver-advertise-address= 指定 api-server 监听的地址</li><li>–kubernetes-version= 指定 kubernetes 的版本，最好和 kubeadm 版本保持一致</li></ul><p>正常完成之后的日志输出如下</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">╭─root@k8s-master-01 /opt/1.17.4</span><br><span class="line">╰─# kubeadm init --pod-network-cidr=10.244.0.0/16 --apiserver-advertise-address=10.20.172.211 --kubernetes-version=1.17.4</span><br><span class="line"></span><br><span class="line">Your Kubernetes control-plane has initialized successfully!</span><br><span class="line"></span><br><span class="line">To start using your cluster, you need to run the following as a regular user:</span><br><span class="line"></span><br><span class="line">  mkdir -p $HOME/.kube</span><br><span class="line">  sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config</span><br><span class="line">  sudo chown $(id -u):$(id -g) $HOME/.kube/config</span><br><span class="line"></span><br><span class="line">You should now deploy a pod network to the cluster.</span><br><span class="line">Run "kubectl apply -f [podnetwork].yaml" with one of the options listed at:</span><br><span class="line">  https://kubernetes.io/docs/concepts/cluster-administration/addons/</span><br><span class="line"></span><br><span class="line">Then you can join any number of worker nodes by running the following on each as root:</span><br><span class="line"></span><br><span class="line">kubeadm join 10.20.172.211:6443 --token hi66lb.r13y2hottst2ks6f \</span><br><span class="line">    --discovery-token-ca-cert-hash sha256:9b96a436f2897a8371fccb3af4d8f2fff348fcb42763e005e9175a4e925c51d1</span><br></pre></td></tr></table></figure><p>刚刚安装完之后 coreDNS 的 Pod 会一直出于 pending 状态，而且 Master 的 STATUS 状态也是 <code>NotReady</code> 。遇到这种问题<code>不要慌,问题不大.jpg</code> 这是因为集群中还没有安装好 CNI 网络插件，等下部署好 flannel 就可以。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">╭─root@k8s-master-01 /opt/1.17.4</span><br><span class="line">╰─# kubectl get node</span><br><span class="line">NAME            STATUS     ROLES    AGE     VERSION</span><br><span class="line">k8s-master-01   NotReady   master   9m19s   v1.17.4</span><br><span class="line">╭─root@k8s-master-01 /opt/1.17.4</span><br><span class="line">╰─# kubectl get pod --all-namespaces</span><br><span class="line">NAMESPACE     NAME                                    READY   STATUS    RESTARTS   AGE</span><br><span class="line">kube-system   coredns-6955765f44-t4b6k                0/1     Pending   0          49s</span><br><span class="line">kube-system   coredns-6955765f44-vm5tm                0/1     Pending   0          49s</span><br><span class="line">kube-system   etcd-k8s-master-01                      1/1     Running   0          62s</span><br><span class="line">kube-system   kube-apiserver-k8s-master-01            1/1     Running   0          62s</span><br><span class="line">kube-system   kube-controller-manager-k8s-master-01   1/1     Running   0          62s</span><br><span class="line">kube-system   kube-proxy-rmgwl                        1/1     Running   0          49s</span><br><span class="line">kube-system   kube-scheduler-k8s-master-01            1/1     Running   0          62s</span><br></pre></td></tr></table></figure><h2 id="加入-node-节点"><a href="#加入-node-节点" class="headerlink" title="加入 node 节点"></a>加入 node 节点</h2><p>在另一台 Node 节点上重复节点初始化的内容，并将将所需的镜像导入到 node 节点。之后使用 kubeadm joine 命令将 Node 节点加入到集群中即可。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">╭─root@k8s-node-01 /opt/1.17.4</span><br><span class="line">╰─# kubeadm join 10.20.172.211:6443 --token hi66lb.r13y2hottst2ks6f \</span><br><span class="line"><span class="meta">&gt;</span><span class="bash">     --discovery-token-ca-cert-hash sha256:9b96a436f2897a8371fccb3af4d8f2fff348fcb42763e005e9175a4e925c51d1</span></span><br><span class="line">W0415 00:52:08.127829    9901 join.go:346] [preflight] WARNING: JoinControlPane.controlPlane settings will be ignored when control-plane flag is not set.</span><br><span class="line">[preflight] Running pre-flight checks</span><br><span class="line">        [WARNING Hostname]: hostname "k8s-node-01" could not be reached</span><br><span class="line">        [WARNING Hostname]: hostname "k8s-node-01": lookup k8s-node-01 on 192.168.10.254:53: no such host</span><br><span class="line">        [WARNING Service-Kubelet]: kubelet service is not enabled, please run 'systemctl enable kubelet.service'</span><br><span class="line">[preflight] Reading configuration from the cluster...</span><br><span class="line">[preflight] FYI: You can look at this config file with 'kubectl -n kube-system get cm kubeadm-config -oyaml'</span><br><span class="line">[kubelet-start] Downloading configuration for the kubelet from the "kubelet-config-1.17" ConfigMap in the kube-system namespace</span><br><span class="line">[kubelet-start] Writing kubelet configuration to file "/var/lib/kubelet/config.yaml"</span><br><span class="line">[kubelet-start] Writing kubelet environment file with flags to file "/var/lib/kubelet/kubeadm-flags.env"</span><br><span class="line">[kubelet-start] Starting the kubelet</span><br><span class="line">[kubelet-start] Waiting for the kubelet to perform the TLS Bootstrap...</span><br><span class="line"></span><br><span class="line">This node has joined the cluster:</span><br><span class="line">* Certificate signing request was sent to apiserver and a response was received.</span><br><span class="line">* The Kubelet was informed of the new secure connection details.</span><br><span class="line"></span><br><span class="line">Run 'kubectl get nodes' on the control-plane to see this node join the cluster.</span><br></pre></td></tr></table></figure><p>如果不出意外的话会提示 <code>This node has joined the cluster:</code> ，然后在 master 节点看一下节点是否加入</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">╭─root@k8s-master-01 /opt/1.17.4</span><br><span class="line">╰─# kubectl get node</span><br><span class="line">NAME            STATUS     ROLES    AGE   VERSION</span><br><span class="line">k8s-master-01   NotReady   master   31m   v1.17.4</span><br><span class="line">k8s-node-01     NotReady   &lt;none&gt;   58s   v1.17.4</span><br></pre></td></tr></table></figure><p>如果状态还是 <code>NotReady</code> 不要慌，问题不大）。接下来安装 CNI 网络插件即可</p><h2 id="部署网络插件"><a href="#部署网络插件" class="headerlink" title="部署网络插件"></a>部署网络插件</h2><p>在这我们使用 flannel 作为 Kubernetes 网络解决方案，在 kubeadm init 的时候指定的 –pod-network-cidr= 指定 Pod 网段的 IP 地址块，即为 flannel 默认的 IP 段，如果没有修改的话就直接在 master 节点上使用 kubectl apply -f 命令部署即可。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">╭─root@k8s-master-01 /opt/1.17.4</span><br><span class="line">╰─# kubectl apply -f https://raw.githubusercontent.com/coreos/flannel/master/Documentation/kube-flannel.yml</span><br></pre></td></tr></table></figure><p>由于墙国网络原因，访问 <code>raw.githubusercontent.com</code> 这个域名会比较慢，在这里可以使用 jsdelivr 来进行加速。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">╭─root@k8s-master-01 /opt/1.17.4</span><br><span class="line">╰─# kubectl apply -f https://cdn.jsdelivr.net/gh/coreos/flannel/Documentation/kube-flannel.yml</span><br><span class="line">podsecuritypolicy.policy/psp.flannel.unprivileged created</span><br><span class="line">clusterrole.rbac.authorization.k8s.io/flannel created</span><br><span class="line">clusterrolebinding.rbac.authorization.k8s.io/flannel created</span><br><span class="line">serviceaccount/flannel created</span><br><span class="line">configmap/kube-flannel-cfg created</span><br><span class="line">daemonset.apps/kube-flannel-ds-amd64 created</span><br><span class="line">daemonset.apps/kube-flannel-ds-arm64 created</span><br><span class="line">daemonset.apps/kube-flannel-ds-arm created</span><br><span class="line">daemonset.apps/kube-flannel-ds-ppc64le created</span><br><span class="line">daemonset.apps/kube-flannel-ds-s390x created</span><br></pre></td></tr></table></figure><p>flannel 的 docker 镜像是在 <code>quay.io/coreos/flannel</code> 一般情况下没问题能顺利 pull 下来。然后使用 <code>kubectl get pod -n kube-system</code> 命令查看 pod 的状态是不是都在 running 状态。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">╭─root@k8s-master-01 /opt/1.17.4</span><br><span class="line">╰─# kubectl get pod -n kube-system</span><br><span class="line">NAME                                    READY   STATUS    RESTARTS   AGE</span><br><span class="line">coredns-6955765f44-g5fwl                1/1     Running   0          23h</span><br><span class="line">coredns-6955765f44-g7cls                1/1     Running   0          23h</span><br><span class="line">etcd-k8s-master-01                      1/1     Running   0          24h</span><br><span class="line">kube-apiserver-k8s-master-01            1/1     Running   0          24h</span><br><span class="line">kube-controller-manager-k8s-master-01   1/1     Running   0          24h</span><br><span class="line">kube-flannel-ds-amd64-94hfr             1/1     Running   0          23h</span><br><span class="line">kube-flannel-ds-amd64-vpdfd             1/1     Running   0          23h</span><br><span class="line">kube-proxy-rmgwl                        1/1     Running   0          24h</span><br><span class="line">kube-proxy-xqcsq                        1/1     Running   0          24h</span><br><span class="line">kube-scheduler-k8s-master-01            1/1     Running   0          24h</span><br><span class="line"></span><br><span class="line">╭─root@k8s-master-01 /opt/1.17.4</span><br><span class="line">╰─# kubectl get node</span><br><span class="line">NAME            STATUS   ROLES    AGE   VERSION</span><br><span class="line">k8s-master-01   Ready    master   29h   v1.17.4</span><br><span class="line">k8s-node-01     Ready    &lt;none&gt;   28h   v1.17.4</span><br></pre></td></tr></table></figure><p>由此，一个简陋的 kubernetes 集群已经部署完了😂，文章有点水了~~。对于想要入门和学习 kubernetes 的同学来说 kubeadm 是个好工具。后续会更新一些 kubernetes 内容。</p><h2 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h2><p>最后提一下，文中提到的对于下载 github 上文件，可以通过以下规则进行替换，就可以使用 jsdelivr 来 fuck 一下 GFW ，无痛下载 GitHub 上的文件。这还是从 <a href="https://chanshiyu.com/#/post/94" target="_blank" rel="noopener">JsDelivr 全站托管</a> 学来的骚操作😂。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">GitHub rul:</span> <span class="string">https://github.com/ohmyzsh/ohmyzsh/blob/master/tools/install.sh</span></span><br><span class="line"><span class="attr">jsDelivr url:</span> <span class="string">https://cdn.jsdelivr.net/gh/ohmyzsh/ohmyzsh/tools/install.sh</span></span><br></pre></td></tr></table></figure><p>规则就是将 <code>github.com</code> 替换为 <code>cdn.jsdelivr.net/gh</code> ，然后去掉 <code>/blob/master</code>，接上 repo 里文件的绝对路径即可。也可以将以下脚本保存为一个可执行脚本文件 /usr/bin/rawg，当使用 rawg <a href="https://github.com/ohmyzsh/ohmyzsh/blob/master/tools/install.sh" target="_blank" rel="noopener">https://github.com/ohmyzsh/ohmyzsh/blob/master/tools/install.sh</a> 就可以直接将 url 进行替换，快速地下载文件。怎么样，很爽吧😂，对于某些 Linux 机器上没有代理的情况下该方法有效。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> data: 2020-03-31</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> author: muzi502</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="keyword">for</span>: Fuck GFW and download some raw file form github without proxy using jsDelivr CDN</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> usage: save the .she to your <span class="built_in">local</span> such as /usr/bin/rawg, and chmod +x /usr/bin/rawg</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> use rawg https://github.com/ohmyzsh/ohmyzsh/blob/master/tools/install.sh to download</span></span><br><span class="line"></span><br><span class="line">set -xue</span><br><span class="line"><span class="meta">#</span><span class="bash"> GitHub rul: https://github.com/ohmyzsh/ohmyzsh/blob/master/tools/install.sh</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> jsDelivr url: https://cdn.jsdelivr.net/gh/ohmyzsh/ohmyzsh/tools/install.sh</span></span><br><span class="line"></span><br><span class="line">wget $(echo $1 | sed 's/raw.githubusercontent.com/cdn.jsdelivr.net\/gh/' \</span><br><span class="line">               | sed 's/github.com/cdn.jsdelivr.net\/gh/' \</span><br><span class="line">               | sed 's/\/master//' | sed 's/\/blob//' )</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> curl $(<span class="built_in">echo</span> <span class="variable">$1</span> | sed <span class="string">'s/raw.githubusercontent.com/cdn.jsdelivr.net\/gh/'</span> \</span></span><br><span class="line"><span class="meta">#</span><span class="bash">                | sed <span class="string">'s/github.com/cdn.jsdelivr.net\/gh/'</span> \</span></span><br><span class="line"><span class="meta">#</span><span class="bash">                | sed <span class="string">'s/\/master//'</span> | sed <span class="string">'s/\/blob//'</span> )</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;h2 id=&quot;炒冷饭&quot;&gt;&lt;a href=&quot;#炒冷饭&quot;
        
      
    
    </summary>
    
    
      <category term="技术" scheme="https://blog.k8s.li/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="kubeadm" scheme="https://blog.k8s.li/tags/kubeadm/"/>
    
      <category term="kubernetes" scheme="https://blog.k8s.li/tags/kubernetes/"/>
    
      <category term="从零开始学习 K8s" scheme="https://blog.k8s.li/tags/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%AD%A6%E4%B9%A0-K8s/"/>
    
  </entry>
  
  <entry>
    <title>基于 Gitlab-ci + Harobr 的 CI 流水线</title>
    <link href="https://blog.k8s.li/gitlab-ci-harbor.html"/>
    <id>https://blog.k8s.li/gitlab-ci-harbor.html</id>
    <published>2020-04-11T16:00:00.000Z</published>
    <updated>2020-04-11T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>对于 CI/CD（持续集成与持续交付）的基本概念网络上已经有很多大佬在普及啦，咱才疏学浅怕误人子弟所以就剽窃一下别人的解释啦😂。下面就剽窃一下红帽子家的 <a href="https://www.redhat.com/zh/topics/devops/what-is-ci-cd" target="_blank" rel="noopener">CI/CD是什么？如何理解持续集成、持续交付和持续部署</a> 官方文档：</p><p><strong>CI 持续集成</strong></p><p><img src="https://cdn.jsdelivr.net/gh/muzi502/blog/sourchttps://cdn.jsdelivr.net/gh/muzi502/blog/sourchttps://cdn.jsdelivr.net/gh/muzi502/blog/sourchttps://cdn.jsdelivr.net/gh/muzi502/blog/sourchttps://cdn.jsdelivr.net/gh/muzi502/blog/source/img/409-images-for-snap-blog-postedit_image1.png" alt="Continuous integration puts the integration phase earlier in the development cycle"></p><p>图片剽窃自  <a href="https://www.mindtheproduct.com/what-the-hell-are-ci-cd-and-devops-a-cheatsheet-for-the-rest-of-us/" target="_blank" rel="noopener">The Product Managers’ Guide to Continuous Delivery and DevOps</a></p><blockquote><p>CI/CD 中的“CI”始终指持续集成，它属于开发人员的自动化流程。成功的 CI 意味着应用代码的新更改会定期构建、测试并合并到共享存储库中。该解决方案可以解决在一次开发中有太多应用分支，从而导致相互冲突的问题。</p></blockquote><p><strong>CD 持续交付</strong></p><p><img src="https://cdn.jsdelivr.net/gh/muzi502/blog/sourchttps://cdn.jsdelivr.net/gh/muzi502/blog/sourchttps://cdn.jsdelivr.net/gh/muzi502/blog/sourchttps://cdn.jsdelivr.net/gh/muzi502/blog/sourchttps://cdn.jsdelivr.net/gh/muzi502/blog/source/img/409-images-for-snap-blog-postedit_image4-manual.png" alt="Continuous Delivery is a software development discipline "></p><p>图片剽窃自 <a href="https://www.mindtheproduct.com/what-the-hell-are-ci-cd-and-devops-a-cheatsheet-for-the-rest-of-us/" target="_blank" rel="noopener">The Product Managers’ Guide to Continuous Delivery and DevOps</a></p><blockquote><p>CI/CD 中的“CD”指的是持续交付和/或持续部署，这些相关概念有时会交叉使用。两者都事关管道后续阶段的自动化，但它们有时也会单独使用，用于说明自动化程度。</p><p>持续<em>交付</em>通常是指开发人员对应用的更改会自动进行错误测试并上传到存储库（如 <a href="https://redhatofficial.github.io/#!/main" target="_blank" rel="noopener">GitHub</a> 或容器注册表），然后由运维团队将其部署到实时生产环境中。这旨在解决开发和运维团队之间可见性及沟通较差的问题。因此，持续交付的目的就是确保尽可能减少部署新代码时所需的工作量。</p></blockquote><p><strong>持续部署</strong></p><p><img src="https://cdn.jsdelivr.net/gh/muzi502/blog/sourchttps://cdn.jsdelivr.net/gh/muzi502/blog/sourchttps://cdn.jsdelivr.net/gh/muzi502/blog/sourchttps://cdn.jsdelivr.net/gh/muzi502/blog/sourchttps://cdn.jsdelivr.net/gh/muzi502/blog/source/img/409-images-for-snap-blog-postedit_image4-manual-1585574252795.png" alt="Continuous Delivery is a software development discipline "></p><p>图片剽窃自  <a href="https://www.mindtheproduct.com/what-the-hell-are-ci-cd-and-devops-a-cheatsheet-for-the-rest-of-us/" target="_blank" rel="noopener">The Product Managers’ Guide to Continuous Delivery and DevOps</a></p><blockquote><p>持续<em>部署</em>（另一种“CD”）指的是自动将开发人员的更改从存储库发布到生产环境，以供客户使用。它主要为了解决因手动流程降低应用交付速度，从而使运维团队超负荷的问题。持续部署以持续交付的优势为根基，实现了管道后续阶段的自动化。</p></blockquote><p>总之而言  CI/CD 是一整套软件开发的流水线，开发人员提交完更新的代码之后，根据流水线的触发情况来执行自定义的流水线任务，比如代码质量检测、构建 docker 镜像为交付产品、自动化部署到测试环境或生产环境等等。这些需要一系列相关的软件来构建这套 CI/CD 的系统，本文就通过 Gitlab + gitlab-ci + Harbor 构建一个简陋的 CI/CD 流水线。</p><p>另外推荐读一下这篇 <a href="https://www.mindtheproduct.com/what-the-hell-are-ci-cd-and-devops-a-cheatsheet-for-the-rest-of-us/" target="_blank" rel="noopener">The Product Managers’ Guide to Continuous Delivery and DevOps </a></p><h2 id="Gitlab"><a href="#Gitlab" class="headerlink" title="Gitlab"></a>Gitlab</h2><p>目前 Gitlab 官方给出的安装方式有很多种，普遍采用 Omnibus 包、Docker 安装。也可以用官方的 helm Chart 部署在 Kubernenets 集群中，然后使用网络存储，比如 Gluster、NFS、Ceph、vSAN 等进行 PG 数据库和代码仓库持久化存储。</p><p><strong>官方建议采用 Omnibus 方式安装：</strong></p><blockquote><p>我们强烈建议使用 Omnibus 包安装 GitLab ，因为它安装起来更快、更容易升级版本，而且包含了其他安装方式所没有的可靠性功能。</p></blockquote><h3 id="Omnibus-包安装方式比较"><a href="#Omnibus-包安装方式比较" class="headerlink" title="Omnibus 包安装方式比较"></a>Omnibus 包安装方式比较</h3><p>摘自官方文档</p><ul><li>✅ - Installed by default</li><li>⚙ - Requires additional configuration, or GitLab Managed Apps</li><li>⤓ - Manual installation required</li><li>❌ - Not supported or no instructions available</li><li>N/A - Not applicable</li></ul><table><thead><tr><th align="left">Component</th><th align="left">Description</th><th align="center"><a href="https://docs.gitlab.com/omnibus/" target="_blank" rel="noopener">Omnibus GitLab</a></th><th align="center"><a href="https://docs.gitlab.com/charts/" target="_blank" rel="noopener">GitLab chart</a></th><th align="center"><a href="https://gitlab.com/" target="_blank" rel="noopener">GitLab.com</a></th></tr></thead><tbody><tr><td align="left"><a href="https://docs.gitlab.com/ee/development/architecture.html#nginx" target="_blank" rel="noopener">NGINX</a></td><td align="left">Routes requests to appropriate components, terminates SSL</td><td align="center"><a href="https://docs.gitlab.com/omnibus/settings/" target="_blank" rel="noopener">✅</a></td><td align="center"><a href="https://docs.gitlab.com/charts/charts/nginx/" target="_blank" rel="noopener">✅</a></td><td align="center"><a href="https://about.gitlab.com/handbook/engineering/infrastructure/production/architecture/#service-architecture" target="_blank" rel="noopener">✅</a></td></tr><tr><td align="left"><a href="https://docs.gitlab.com/ee/development/architecture.html#unicorn" target="_blank" rel="noopener">Unicorn (GitLab Rails)</a></td><td align="left">Handles requests for the web interface and API</td><td align="center"><a href="https://docs.gitlab.com/omnibus/settings/unicorn.html" target="_blank" rel="noopener">✅</a></td><td align="center"><a href="https://docs.gitlab.com/charts/charts/gitlab/unicorn/" target="_blank" rel="noopener">✅</a></td><td align="center"><a href="https://docs.gitlab.com/ee/user/gitlab_com/index.html#unicorn" target="_blank" rel="noopener">✅</a></td></tr><tr><td align="left"><a href="https://docs.gitlab.com/ee/development/architecture.html#sidekiq" target="_blank" rel="noopener">Sidekiq</a></td><td align="left">Background jobs processor</td><td align="center"><a href="https://gitlab.com/gitlab-org/omnibus-gitlab/blob/master/files/gitlab-config-template/gitlab.rb.template" target="_blank" rel="noopener">✅</a></td><td align="center"><a href="https://docs.gitlab.com/charts/charts/gitlab/sidekiq/" target="_blank" rel="noopener">✅</a></td><td align="center"><a href="https://docs.gitlab.com/ee/user/gitlab_com/index.html#sidekiq" target="_blank" rel="noopener">✅</a></td></tr><tr><td align="left"><a href="https://docs.gitlab.com/ee/development/architecture.html#gitaly" target="_blank" rel="noopener">Gitaly</a></td><td align="left">Git RPC service for handling all Git calls made by GitLab</td><td align="center"><a href="https://docs.gitlab.com/ee/administration/gitaly/index.html" target="_blank" rel="noopener">✅</a></td><td align="center"><a href="https://docs.gitlab.com/charts/charts/gitlab/gitaly/" target="_blank" rel="noopener">✅</a></td><td align="center"><a href="https://about.gitlab.com/handbook/engineering/infrastructure/production/architecture/#service-architecture" target="_blank" rel="noopener">✅</a></td></tr><tr><td align="left"><a href="https://docs.gitlab.com/ee/development/architecture.html#praefect" target="_blank" rel="noopener">Praefect</a></td><td align="left">A transparent proxy between any Git client and Gitaly storage nodes.</td><td align="center"><a href="https://docs.gitlab.com/ee/administration/gitaly/index.html" target="_blank" rel="noopener">✅</a></td><td align="center"><a href="https://docs.gitlab.com/charts/charts/gitlab/gitaly/" target="_blank" rel="noopener">❌</a></td><td align="center"><a href="https://about.gitlab.com/handbook/engineering/infrastructure/production/architecture/#service-architecture" target="_blank" rel="noopener">✅</a></td></tr><tr><td align="left"><a href="https://docs.gitlab.com/ee/development/architecture.html#gitlab-workhorse" target="_blank" rel="noopener">GitLab Workhorse</a></td><td align="left">Smart reverse proxy, handles large HTTP requests</td><td align="center"><a href="https://gitlab.com/gitlab-org/omnibus-gitlab/blob/master/files/gitlab-config-template/gitlab.rb.template" target="_blank" rel="noopener">✅</a></td><td align="center"><a href="https://docs.gitlab.com/charts/charts/gitlab/unicorn/" target="_blank" rel="noopener">✅</a></td><td align="center"><a href="https://about.gitlab.com/handbook/engineering/infrastructure/production/architecture/#service-architecture" target="_blank" rel="noopener">✅</a></td></tr><tr><td align="left"><a href="https://docs.gitlab.com/ee/development/architecture.html#gitlab-shell" target="_blank" rel="noopener">GitLab Shell</a></td><td align="left">Handles <code>git</code> over SSH sessions</td><td align="center"><a href="https://gitlab.com/gitlab-org/omnibus-gitlab/blob/master/files/gitlab-config-template/gitlab.rb.template" target="_blank" rel="noopener">✅</a></td><td align="center"><a href="https://docs.gitlab.com/charts/charts/gitlab/gitlab-shell/" target="_blank" rel="noopener">✅</a></td><td align="center"><a href="https://about.gitlab.com/handbook/engineering/infrastructure/production/architecture/#service-architecture" target="_blank" rel="noopener">✅</a></td></tr><tr><td align="left"><a href="https://docs.gitlab.com/ee/development/architecture.html#gitlab-pages" target="_blank" rel="noopener">GitLab Pages</a></td><td align="left">Hosts static websites</td><td align="center"><a href="https://docs.gitlab.com/ee/administration/pages/index.html" target="_blank" rel="noopener">⚙</a></td><td align="center"><a href="https://gitlab.com/gitlab-org/charts/gitlab/issues/37" target="_blank" rel="noopener">❌</a></td><td align="center"><a href="https://docs.gitlab.com/ee/user/gitlab_com/index.html#gitlab-pages" target="_blank" rel="noopener">✅</a></td></tr><tr><td align="left"><a href="https://docs.gitlab.com/ee/development/architecture.html#registry" target="_blank" rel="noopener">Registry</a></td><td align="left">Container registry, allows pushing and pulling of images</td><td align="center"><a href="https://docs.gitlab.com/ee/administration/packages/container_registry.html#container-registry-domain-configuration" target="_blank" rel="noopener">⚙</a></td><td align="center"><a href="https://docs.gitlab.com/charts/charts/registry/" target="_blank" rel="noopener">✅</a></td><td align="center"><a href="https://docs.gitlab.com/ee/user/packages/container_registry/index.html#build-and-push-images-using-gitlab-cicd" target="_blank" rel="noopener">✅</a></td></tr><tr><td align="left"><a href="https://docs.gitlab.com/ee/development/architecture.html#redis" target="_blank" rel="noopener">Redis</a></td><td align="left">Caching service</td><td align="center"><a href="https://docs.gitlab.com/omnibus/settings/redis.html" target="_blank" rel="noopener">✅</a></td><td align="center"><a href="https://docs.gitlab.com/omnibus/settings/redis.html" target="_blank" rel="noopener">✅</a></td><td align="center"><a href="https://about.gitlab.com/handbook/engineering/infrastructure/production/architecture/#service-architecture" target="_blank" rel="noopener">✅</a></td></tr><tr><td align="left"><a href="https://docs.gitlab.com/ee/development/architecture.html#postgresql" target="_blank" rel="noopener">PostgreSQL</a></td><td align="left">Database</td><td align="center"><a href="https://docs.gitlab.com/omnibus/settings/database.html" target="_blank" rel="noopener">✅</a></td><td align="center"><a href="https://github.com/helm/charts/tree/master/stable/postgresql" target="_blank" rel="noopener">✅</a></td><td align="center"><a href="https://docs.gitlab.com/ee/user/gitlab_com/index.html#postgresql" target="_blank" rel="noopener">✅</a></td></tr><tr><td align="left"><a href="https://docs.gitlab.com/ee/development/architecture.html#pgbouncer" target="_blank" rel="noopener">PgBouncer</a></td><td align="left">Database connection pooling, failover</td><td align="center"><a href="https://docs.gitlab.com/ee/administration/high_availability/pgbouncer.html" target="_blank" rel="noopener">⚙</a></td><td align="center"><a href="https://docs.gitlab.com/charts/installation/deployment.html#postgresql" target="_blank" rel="noopener">❌</a></td><td align="center"><a href="https://about.gitlab.com/handbook/engineering/infrastructure/production/architecture/#database-architecture" target="_blank" rel="noopener">✅</a></td></tr><tr><td align="left"><a href="https://docs.gitlab.com/ee/development/architecture.html#consul" target="_blank" rel="noopener">Consul</a></td><td align="left">Database node discovery, failover</td><td align="center"><a href="https://docs.gitlab.com/ee/administration/high_availability/consul.html" target="_blank" rel="noopener">⚙</a></td><td align="center"><a href="https://docs.gitlab.com/charts/installation/deployment.html#postgresql" target="_blank" rel="noopener">❌</a></td><td align="center"><a href="https://docs.gitlab.com/ee/user/gitlab_com/index.html#consul" target="_blank" rel="noopener">✅</a></td></tr><tr><td align="left"><a href="https://docs.gitlab.com/ee/development/architecture.html#prometheus" target="_blank" rel="noopener">GitLab self-monitoring: Prometheus</a></td><td align="left">Time-series database, metrics collection, and query service</td><td align="center"><a href="https://docs.gitlab.com/ee/administration/monitoring/prometheus/index.html" target="_blank" rel="noopener">✅</a></td><td align="center"><a href="https://github.com/helm/charts/tree/master/stable/prometheus" target="_blank" rel="noopener">✅</a></td><td align="center"><a href="https://docs.gitlab.com/ee/user/gitlab_com/index.html#prometheus" target="_blank" rel="noopener">✅</a></td></tr><tr><td align="left"><a href="https://docs.gitlab.com/ee/development/architecture.html#alertmanager" target="_blank" rel="noopener">GitLab self-monitoring: Alertmanager</a></td><td align="left">Deduplicates, groups, and routes alerts from Prometheus</td><td align="center"><a href="https://gitlab.com/gitlab-org/omnibus-gitlab/blob/master/files/gitlab-config-template/gitlab.rb.template" target="_blank" rel="noopener">⚙</a></td><td align="center"><a href="https://github.com/helm/charts/tree/master/stable/prometheus" target="_blank" rel="noopener">✅</a></td><td align="center"><a href="https://about.gitlab.com/handbook/engineering/monitoring/" target="_blank" rel="noopener">✅</a></td></tr><tr><td align="left"><a href="https://docs.gitlab.com/ee/development/architecture.html#grafana" target="_blank" rel="noopener">GitLab self-monitoring: Grafana</a></td><td align="left">Metrics dashboard</td><td align="center"><a href="https://docs.gitlab.com/ee/administration/monitoring/performance/grafana_configuration.html" target="_blank" rel="noopener">✅</a></td><td align="center"><a href="https://github.com/helm/charts/tree/master/stable/grafana" target="_blank" rel="noopener">⤓</a></td><td align="center"><a href="https://dashboards.gitlab.com/d/RZmbBr7mk/gitlab-triage?refresh=30s" target="_blank" rel="noopener">✅</a></td></tr><tr><td align="left"><a href="https://docs.gitlab.com/ee/development/architecture.html#sentry" target="_blank" rel="noopener">GitLab self-monitoring: Sentry</a></td><td align="left">Track errors generated by the GitLab instance</td><td align="center"><a href="https://docs.gitlab.com/omnibus/settings/configuration.html#error-reporting-and-logging-with-sentry" target="_blank" rel="noopener">⤓</a></td><td align="center"><a href="https://gitlab.com/gitlab-org/charts/gitlab/issues/1319" target="_blank" rel="noopener">❌</a></td><td align="center"><a href="https://about.gitlab.com/handbook/support/workflows/500_errors.html#searching-sentry" target="_blank" rel="noopener">✅</a></td></tr><tr><td align="left"><a href="https://docs.gitlab.com/ee/development/architecture.html#jaeger" target="_blank" rel="noopener">GitLab self-monitoring: Jaeger</a></td><td align="left">View traces generated by the GitLab instance</td><td align="center"><a href="https://gitlab.com/gitlab-org/omnibus-gitlab/issues/4104" target="_blank" rel="noopener">❌</a></td><td align="center"><a href="https://gitlab.com/gitlab-org/charts/gitlab/issues/1320" target="_blank" rel="noopener">❌</a></td><td align="center"><a href="https://gitlab.com/gitlab-org/omnibus-gitlab/issues/4104" target="_blank" rel="noopener">❌</a></td></tr><tr><td align="left"><a href="https://docs.gitlab.com/ee/development/architecture.html#redis-exporter" target="_blank" rel="noopener">Redis Exporter</a></td><td align="left">Prometheus endpoint with Redis metrics</td><td align="center"><a href="https://docs.gitlab.com/ee/administration/monitoring/prometheus/redis_exporter.html" target="_blank" rel="noopener">✅</a></td><td align="center"><a href="https://docs.gitlab.com/charts/charts/redis/" target="_blank" rel="noopener">✅</a></td><td align="center"><a href="https://about.gitlab.com/handbook/engineering/monitoring/" target="_blank" rel="noopener">✅</a></td></tr><tr><td align="left"><a href="https://docs.gitlab.com/ee/development/architecture.html#postgresql-exporter" target="_blank" rel="noopener">PostgreSQL Exporter</a></td><td align="left">Prometheus endpoint with PostgreSQL metrics</td><td align="center"><a href="https://docs.gitlab.com/ee/administration/monitoring/prometheus/postgres_exporter.html" target="_blank" rel="noopener">✅</a></td><td align="center"><a href="https://github.com/helm/charts/tree/master/stable/postgresql" target="_blank" rel="noopener">✅</a></td><td align="center"><a href="https://about.gitlab.com/handbook/engineering/monitoring/" target="_blank" rel="noopener">✅</a></td></tr><tr><td align="left"><a href="https://docs.gitlab.com/ee/development/architecture.html#pgbouncer-exporter" target="_blank" rel="noopener">PgBouncer Exporter</a></td><td align="left">Prometheus endpoint with PgBouncer metrics</td><td align="center"><a href="https://docs.gitlab.com/ee/administration/monitoring/prometheus/pgbouncer_exporter.html" target="_blank" rel="noopener">⚙</a></td><td align="center"><a href="https://docs.gitlab.com/charts/installation/deployment.html#postgresql" target="_blank" rel="noopener">❌</a></td><td align="center"><a href="https://about.gitlab.com/handbook/engineering/monitoring/" target="_blank" rel="noopener">✅</a></td></tr><tr><td align="left"><a href="https://docs.gitlab.com/ee/development/architecture.html#gitlab-exporter" target="_blank" rel="noopener">GitLab Exporter</a></td><td align="left">Generates a variety of GitLab metrics</td><td align="center"><a href="https://docs.gitlab.com/ee/administration/monitoring/prometheus/gitlab_exporter.html" target="_blank" rel="noopener">✅</a></td><td align="center"><a href="https://docs.gitlab.com/charts/charts/gitlab/gitlab-exporter/index.html" target="_blank" rel="noopener">✅</a></td><td align="center"><a href="https://about.gitlab.com/handbook/engineering/monitoring/" target="_blank" rel="noopener">✅</a></td></tr><tr><td align="left"><a href="https://docs.gitlab.com/ee/development/architecture.html#node-exporter" target="_blank" rel="noopener">Node Exporter</a></td><td align="left">Prometheus endpoint with system metrics</td><td align="center"><a href="https://docs.gitlab.com/ee/administration/monitoring/prometheus/node_exporter.html" target="_blank" rel="noopener">✅</a></td><td align="center"><a href="https://gitlab.com/gitlab-org/charts/gitlab/issues/1332" target="_blank" rel="noopener">N/A</a></td><td align="center"><a href="https://about.gitlab.com/handbook/engineering/monitoring/" target="_blank" rel="noopener">✅</a></td></tr><tr><td align="left"><a href="https://docs.gitlab.com/ee/development/architecture.html#mattermost" target="_blank" rel="noopener">Mattermost</a></td><td align="left">Open-source Slack alternative</td><td align="center"><a href="https://docs.gitlab.com/omnibus/gitlab-mattermost/" target="_blank" rel="noopener">⚙</a></td><td align="center"><a href="https://docs.mattermost.com/install/install-mmte-helm-gitlab-helm.html" target="_blank" rel="noopener">⤓</a></td><td align="center"><a href="https://docs.gitlab.com/ee/user/project/integrations/mattermost.html" target="_blank" rel="noopener">⤓</a></td></tr><tr><td align="left"><a href="https://docs.gitlab.com/ee/development/architecture.html#minio" target="_blank" rel="noopener">MinIO</a></td><td align="left">Object storage service</td><td align="center"><a href="https://min.io/download" target="_blank" rel="noopener">⤓</a></td><td align="center"><a href="https://docs.gitlab.com/charts/charts/minio/" target="_blank" rel="noopener">✅</a></td><td align="center"><a href="https://about.gitlab.com/handbook/engineering/infrastructure/production/architecture/#storage-architecture" target="_blank" rel="noopener">✅</a></td></tr><tr><td align="left"><a href="https://docs.gitlab.com/ee/development/architecture.html#gitlab-runner" target="_blank" rel="noopener">Runner</a></td><td align="left">Executes GitLab CI/CD jobs</td><td align="center"><a href="https://docs.gitlab.com/runner/" target="_blank" rel="noopener">⤓</a></td><td align="center"><a href="https://docs.gitlab.com/runner/install/kubernetes.html" target="_blank" rel="noopener">✅</a></td><td align="center"><a href="https://docs.gitlab.com/ee/user/gitlab_com/index.html#shared-runners" target="_blank" rel="noopener">✅</a></td></tr><tr><td align="left"><a href="https://docs.gitlab.com/ee/development/architecture.html#database-migrations" target="_blank" rel="noopener">Database Migrations</a></td><td align="left">Database migrations</td><td align="center"><a href="https://docs.gitlab.com/omnibus/settings/database.html#disabling-automatic-database-migration" target="_blank" rel="noopener">✅</a></td><td align="center"><a href="https://docs.gitlab.com/charts/charts/gitlab/migrations/" target="_blank" rel="noopener">✅</a></td><td align="center">✅</td></tr><tr><td align="left"><a href="https://docs.gitlab.com/ee/development/architecture.html#certificate-management" target="_blank" rel="noopener">Certificate Management</a></td><td align="left">TLS Settings, Let’s Encrypt</td><td align="center"><a href="https://docs.gitlab.com/omnibus/settings/ssl.html" target="_blank" rel="noopener">✅</a></td><td align="center"><a href="https://docs.gitlab.com/charts/installation/tls.html" target="_blank" rel="noopener">✅</a></td><td align="center"><a href="https://about.gitlab.com/handbook/engineering/infrastructure/production/architecture/#secrets-management" target="_blank" rel="noopener">✅</a></td></tr><tr><td align="left"><a href="https://docs.gitlab.com/ee/development/architecture.html#gitlab-geo" target="_blank" rel="noopener">GitLab Geo Node</a></td><td align="left">Geographically distributed GitLab nodes</td><td align="center"><a href="https://docs.gitlab.com/ee/administration/geo/replication/index.html#setup-instructions" target="_blank" rel="noopener">⚙</a></td><td align="center"><a href="https://gitlab.com/gitlab-org/charts/gitlab/issues/8" target="_blank" rel="noopener">❌</a></td><td align="center">✅</td></tr><tr><td align="left"><a href="https://docs.gitlab.com/ee/development/architecture.html#ldap-authentication" target="_blank" rel="noopener">LDAP Authentication</a></td><td align="left">Authenticate users against centralized LDAP directory</td><td align="center"><a href="https://docs.gitlab.com/ee/administration/auth/ldap.html" target="_blank" rel="noopener">⤓</a></td><td align="center"><a href="https://docs.gitlab.com/charts/charts/globals.html#ldap" target="_blank" rel="noopener">⤓</a></td><td align="center"><a href="https://about.gitlab.com/pricing/#gitlab-com" target="_blank" rel="noopener">❌</a></td></tr><tr><td align="left"><a href="https://docs.gitlab.com/ee/development/architecture.html#outbound-email" target="_blank" rel="noopener">Outbound email (SMTP)</a></td><td align="left">Send email messages to users</td><td align="center"><a href="https://docs.gitlab.com/omnibus/settings/smtp.html" target="_blank" rel="noopener">⤓</a></td><td align="center"><a href="https://docs.gitlab.com/charts/installation/command-line-options.html#outgoing-email-configuration" target="_blank" rel="noopener">⤓</a></td><td align="center"><a href="https://docs.gitlab.com/ee/user/gitlab_com/index.html#mail-configuration" target="_blank" rel="noopener">✅</a></td></tr><tr><td align="left"><a href="https://docs.gitlab.com/ee/development/architecture.html#inbound-email" target="_blank" rel="noopener">Inbound email (SMTP)</a></td><td align="left">Receive messages to update issues</td><td align="center"><a href="https://docs.gitlab.com/ee/administration/incoming_email.html" target="_blank" rel="noopener">⤓</a></td><td align="center"><a href="https://docs.gitlab.com/charts/installation/command-line-options.html#incoming-email-configuration" target="_blank" rel="noopener">⤓</a></td><td align="center"><a href="https://docs.gitlab.com/ee/user/gitlab_com/index.html#mail-configuration" target="_blank" rel="noopener">✅</a></td></tr><tr><td align="left"><a href="https://docs.gitlab.com/ee/development/architecture.html#elasticsearch" target="_blank" rel="noopener">Elasticsearch</a></td><td align="left">Improved search within GitLab</td><td align="center"><a href="https://docs.gitlab.com/ee/integration/elasticsearch.html" target="_blank" rel="noopener">⤓</a></td><td align="center"><a href="https://docs.gitlab.com/ee/integration/elasticsearch.html" target="_blank" rel="noopener">⤓</a></td><td align="center"><a href="https://gitlab.com/groups/gitlab-org/-/epics/153" target="_blank" rel="noopener">❌</a></td></tr><tr><td align="left"><a href="https://docs.gitlab.com/ee/development/architecture.html#sentry" target="_blank" rel="noopener">Sentry integration</a></td><td align="left">Error tracking for deployed apps</td><td align="center"><a href="https://docs.gitlab.com/ee/user/project/operations/error_tracking.html" target="_blank" rel="noopener">⤓</a></td><td align="center"><a href="https://docs.gitlab.com/ee/user/project/operations/error_tracking.html" target="_blank" rel="noopener">⤓</a></td><td align="center"><a href="https://docs.gitlab.com/ee/user/project/operations/error_tracking.html" target="_blank" rel="noopener">⤓</a></td></tr><tr><td align="left"><a href="https://docs.gitlab.com/ee/development/architecture.html#jaeger" target="_blank" rel="noopener">Jaeger integration</a></td><td align="left">Distributed tracing for deployed apps</td><td align="center"><a href="https://docs.gitlab.com/ee/user/project/operations/tracing.html" target="_blank" rel="noopener">⤓</a></td><td align="center"><a href="https://docs.gitlab.com/ee/user/project/operations/tracing.html" target="_blank" rel="noopener">⤓</a></td><td align="center"><a href="https://docs.gitlab.com/ee/user/project/operations/tracing.html" target="_blank" rel="noopener">⤓</a></td></tr><tr><td align="left"><a href="https://docs.gitlab.com/ee/development/architecture.html#gitlab-managed-apps" target="_blank" rel="noopener">GitLab Managed Apps</a></td><td align="left">Deploy <a href="https://helm.sh/docs/" target="_blank" rel="noopener">Helm</a>, <a href="https://kubernetes.io/docs/concepts/services-networking/ingress/" target="_blank" rel="noopener">Ingress</a>, <a href="https://docs.cert-manager.io/en/latest/" target="_blank" rel="noopener">Cert-Manager</a>, <a href="https://prometheus.io/docs/introduction/overview/" target="_blank" rel="noopener">Prometheus</a>, a <a href="https://docs.gitlab.com/runner/" target="_blank" rel="noopener">Runner</a>, <a href="https://jupyter.org/" target="_blank" rel="noopener">JupyterHub</a>, <a href="https://cloud.google.com/knative/" target="_blank" rel="noopener">Knative</a> to a cluster</td><td align="center"><a href="https://docs.gitlab.com/ee/user/project/clusters/index.html#installing-applications" target="_blank" rel="noopener">⤓</a></td><td align="center"><a href="https://docs.gitlab.com/ee/user/project/clusters/index.html#installing-applications" target="_blank" rel="noopener">⤓</a></td><td align="center"><a href="https://docs.gitlab.com/ee/user/project/clusters/index.html#installing-applications" target="_blank" rel="noopener">⤓</a></td></tr></tbody></table><h2 id="安装-Gitlab"><a href="#安装-Gitlab" class="headerlink" title="安装 Gitlab"></a>安装 Gitlab</h2><p>咱遵从官方的建议，使用 Omnibus 包的方式来部署 Gitlab 实例。</p><h3 id="Ubuntu-1804"><a href="#Ubuntu-1804" class="headerlink" title="Ubuntu 1804"></a>Ubuntu 1804</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install openssh-server</span><br><span class="line">curl https://packages.gitlab.com/gpg.key 2&gt; /dev/null | sudo apt-key add - &amp;&gt;/dev/null</span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加清华大学的镜像站源 bionic是 Ubuntu18.04 xenial是16.04，根据自己的 Ubuntu 发行版本修改一下下</span></span><br><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/gitlab-ce/ubuntu bionic main</span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install gitlab-ce</span><br><span class="line"></span><br><span class="line"><span class="comment"># 也可以考虑使用 wget 的方式把 deb 包下载下来</span></span><br><span class="line">wget https://mirrors.tuna.tsinghua.edu.cn/gitlab-ce/ubuntu/pool/bionic/main/g/gitlab-ce/gitlab-ce_12.3.5-ce.0_amd64.deb</span><br><span class="line"></span><br><span class="line">opkg -i gitlab-ce/gitlab-ce_12.3.5-ce.0_amd64.deb</span><br></pre></td></tr></table></figure><h3 id="CentOS7"><a href="#CentOS7" class="headerlink" title="CentOS7"></a>CentOS7</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装依赖</span></span><br><span class="line">sudo yum install -y curl policycoreutils-python openssh-server</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置防火墙</span></span><br><span class="line">sudo firewall-cmd --permanent --add-service=http</span><br><span class="line">sudo systemctl reload firewalld</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用清华大学镜像站的源，下载速度会快些。</span></span><br><span class="line">sudo cat &gt; /etc/yum.repos.d/gitlab-ce.repo &lt;&lt;EOF</span><br><span class="line">[gitlab-ce]</span><br><span class="line">name=Gitlab CE Repository</span><br><span class="line">baseurl=https://mirrors.tuna.tsinghua.edu.cn/gitlab-ce/yum/el7/</span><br><span class="line">gpgcheck=0</span><br><span class="line">enabled=1</span><br><span class="line">Ece</span><br><span class="line"></span><br><span class="line">sudo yum makecache</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看可用的版本neng'b</span></span><br><span class="line">yum list gitlab-ce --showduplicates</span><br><span class="line"><span class="comment"># 然后安装最新的版本</span></span><br><span class="line">yum install -y gitlab-ce</span><br><span class="line"><span class="comment"># 安装指定版本 12.3.5</span></span><br><span class="line">yum install gitlab-ce-12.3.5-ce.0.el7.x86_64.rpm</span><br><span class="line"></span><br><span class="line"><span class="comment"># 也可以使用 wget 的方式把 rpm 包下载下来安装</span></span><br><span class="line">wget https://mirrors.tuna.tsinghua.edu.cn/gitlab-ce/yum/el7/gitlab-ce-12.8.2-ce.0.el7.x86_64.rpm</span><br><span class="line">yum install gitlab-ce-12.8.2-ce.0.el7.x86_64.rpm</span><br></pre></td></tr></table></figure><p>安装成功之后会出现 Gitlab 的 Logo</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">       *.                  *.</span><br><span class="line">      ***                 ***</span><br><span class="line">     *****               *****</span><br><span class="line">    .******             *******</span><br><span class="line">    ********            ********</span><br><span class="line">   ,,,,,,,,,***********,,,,,,,,,</span><br><span class="line">  ,,,,,,,,,,,*********,,,,,,,,,,,</span><br><span class="line">  .,,,,,,,,,,,*******,,,,,,,,,,,,</span><br><span class="line">      ,,,,,,,,,*****,,,,,,,,,.</span><br><span class="line">         ,,,,,,,****,,,,,,</span><br><span class="line">            .,,,***,,,,</span><br><span class="line">                ,*,.</span><br><span class="line"></span><br><span class="line">     _______ __  __          __</span><br><span class="line">    / ____(_) /_/ /   ____ _/ /_</span><br><span class="line">   / / __/ / __/ /   / __ `/ __ \</span><br><span class="line">  / /_/ / / /_/ /___/ /_/ / /_/ /</span><br><span class="line">  \____/_/\__/_____/\__,_/_.___/</span><br><span class="line"></span><br><span class="line">Thank you for installing GitLab!</span><br><span class="line">GitLab was unable to detect a valid hostname for your instance.</span><br><span class="line">Please configure a URL for your GitLab instance by setting `external_url`</span><br><span class="line">configuration in /etc/gitlab/gitlab.rb file.</span><br><span class="line">Then, you can start your GitLab instance by running the following command:</span><br><span class="line">  sudo gitlab-ctl reconfigure</span><br></pre></td></tr></table></figure><h3 id="2-打补丁，补充汉化的补丁"><a href="#2-打补丁，补充汉化的补丁" class="headerlink" title="2.打补丁，补充汉化的补丁"></a>2.打补丁，补充汉化的补丁</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://gitlab.com/xhang/gitlab.git</span><br><span class="line"><span class="built_in">cd</span> gitlab</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取当前安装的版本</span></span><br><span class="line">gitlab_version=$(cat /opt/gitlab/embedded/service/gitlab-rails/VERSION)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 生成对应版本补丁文件</span></span><br><span class="line">git diff v<span class="variable">$&#123;gitlab_version&#125;</span> v<span class="variable">$&#123;gitlab_version&#125;</span>-zh &gt; ../<span class="variable">$&#123;gitlab_version&#125;</span>-zh.diff</span><br><span class="line"></span><br><span class="line">gitlab-ctl stop</span><br><span class="line"></span><br><span class="line"><span class="comment"># 打补丁的时候会提示一些补丁文件不存在，一定要跳过这些文件，不然后面reconfig的时候会报错的。</span></span><br><span class="line">patch -d /opt/gitlab/embedded/service/gitlab-rails -p1 &lt; <span class="variable">$&#123;gitlab_version&#125;</span>-zh.diff</span><br></pre></td></tr></table></figure><h3 id="3-修改默认配置"><a href="#3-修改默认配置" class="headerlink" title="3. 修改默认配置"></a>3. 修改默认配置</h3><p>修改 gitlab 的配置文件 <code>/etc/gitlab/gitlab.rb</code></p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 修改为你自己的域名或者 IP，是单引号，而且前面的 http 不要改</span></span><br><span class="line">external_url  'http://gitlab.domain'</span><br><span class="line"></span><br><span class="line"><span class="comment"># 邮件配置，没有邮件服务器可以关闭邮件服务功能</span></span><br><span class="line">gitlab_rails['smtp_enable'] = false</span><br><span class="line">gitlab_rails['smtp_address'] = ""</span><br><span class="line">gitlab_rails['smtp_port'] =  587</span><br><span class="line">gitlab_rails['smtp_user_name'] = ""</span><br><span class="line">gitlab_rails['smtp_password'] = ""</span><br><span class="line">gitlab_rails['smtp_authentication'] = ""</span><br><span class="line">gitlab_rails['smtp_enable_starttls_auto'] =</span><br><span class="line">gitlab_rails['smtp_tls'] =</span><br><span class="line">gitlab_rails['gitlab_email_from'] = ''</span><br></pre></td></tr></table></figure><h3 id="4-初始化设置"><a href="#4-初始化设置" class="headerlink" title="4. 初始化设置"></a>4. 初始化设置</h3><p>修改完成配置之后使用 <code>gitlab-ctl reconfigure</code> 重新更新一下 gitlab 服务的配置，更新完成配置之后使用<br><code>gitlab-ctl restart</code> 来重新启动 gitlab 。如果 reconfigure 失败，则需要 <code>systemctl enable gitlab- runsvdir &amp;&amp; systemctl restart gitlab- runsvdir</code> 重启一下  <code>gitlab-runsvdir</code> 服务。</p><p>打开浏览器进行初始化账户设定密码，这个密码为 root 管理员账户的密码。设置完密码之后会自动跳转到登录页面。username 为 <code>root</code> 密码为刚刚设置的密码。</p><h2 id="安装-gitlab-runner"><a href="#安装-gitlab-runner" class="headerlink" title="安装 gitlab-runner"></a>安装 gitlab-runner</h2><h3 id="Debian-Ubuntu"><a href="#Debian-Ubuntu" class="headerlink" title="Debian/Ubuntu"></a>Debian/Ubuntu</h3><p>首先信任 GitLab 的 GPG 公钥:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl https://packages.gitlab.com/gpg.key 2&gt; /dev/null | sudo apt-key add - &amp;&gt;/dev/null</span><br></pre></td></tr></table></figure><p>再选择你的 Debian/Ubuntu 版本，文本框中内容写进 <code>/etc/apt/sources.list.d/gitlab-runner.list</code></p><h4 id="Debian"><a href="#Debian" class="headerlink" title="Debian"></a>Debian</h4><p>根据自己的发行版代号修改一下 <code>stretch</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">deb http://mirrors.tuna.tsinghua.edu.cn/gitlab-runner/debian stretch main</span><br></pre></td></tr></table></figure><h4 id="Ubuntu"><a href="#Ubuntu" class="headerlink" title="Ubuntu"></a>Ubuntu</h4><p>根据自己的发行版代号修改一下 <code>bionic</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">deb https://mirrors.tuna.tsinghua.edu.cn/gitlab-runner/ubuntu bionic main</span><br></pre></td></tr></table></figure><p>配置好 deb 源之后再执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt uodate</span><br><span class="line">apt install gitlab-runner -y</span><br></pre></td></tr></table></figure><h3 id="CentOS7-1"><a href="#CentOS7-1" class="headerlink" title="CentOS7"></a>CentOS7</h3><p>新建 <code>/etc/yum.repos.d/gitlab-runner.repo</code>，内容为</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[gitlab-runner]</span><br><span class="line">name=gitlab-runner</span><br><span class="line">baseurl=https://mirrors.tuna.tsinghua.edu.cn/gitlab-runner/yum/el7</span><br><span class="line">repo_gpgcheck=0</span><br><span class="line">gpgcheck=0</span><br><span class="line">enabled=1</span><br><span class="line">gpgkey=https://packages.gitlab.com/gpg.key</span><br></pre></td></tr></table></figure><p>再执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo yum makecache</span><br><span class="line">sudo yum install gitlab-runner -y</span><br><span class="line"><span class="comment"># 安装指定版本 其中 12.3.5 即为指定的版本号</span></span><br><span class="line">yum install gitlab-runner-12.3.5-1.x86_64 -y</span><br></pre></td></tr></table></figure><h3 id="注册-gitlab-runner"><a href="#注册-gitlab-runner" class="headerlink" title="注册 gitlab-runner"></a>注册 gitlab-runner</h3><p>使用 root 用户从 web 端登录到 gitlab 管理中心。在 <code>概览</code> –&gt; <code>Runner</code> 。在右上角会有以下，稍后会用到。</p><ul><li>在 Runner 设置时指定以下 URL</li><li>在安装过程中使用以下注册令牌：</li></ul><p>安装好 gitlab-runner 之后如果直接向 gitlab 注册则会提示失败，提示 <code>ERROR: Registering runner... failed   runner=qRGh2M86 status=500 Internal Server Error</code> 。这是因为 Gitlab 默认禁止了私有网段 IP 里的 API 请求，需要手动开启才行。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">╭─root@gitlab ~</span><br><span class="line">╰─<span class="comment"># gitlab-runner register</span></span><br><span class="line">Runtime platform   arch=amd64 os=linux pid=6818 revision=1b659122 version=12.8.0</span><br><span class="line">Running <span class="keyword">in</span> system-mode.</span><br><span class="line">Please enter the gitlab-ci coordinator URL (e.g. https://gitlab.com/):</span><br><span class="line">http://10.10.107.216/</span><br><span class="line">Please enter the gitlab-ci token <span class="keyword">for</span> this runner:</span><br><span class="line">qRGh2M86iTasjBn1dU8L</span><br><span class="line">Please enter the gitlab-ci description <span class="keyword">for</span> this runner:</span><br><span class="line">[gitlab]: runner-centos</span><br><span class="line">Please enter the gitlab-ci tags <span class="keyword">for</span> this runner (comma separated):</span><br><span class="line">centos</span><br><span class="line">ERROR: Registering runner... failed   runner=qRGh2M86 status=500 Internal Server Error</span><br><span class="line">PANIC: Failed to register this runner. Perhaps you are having network problems</span><br></pre></td></tr></table></figure><h3 id="修改-gitlab-默认网络设置"><a href="#修改-gitlab-默认网络设置" class="headerlink" title="修改 gitlab 默认网络设置"></a>修改 gitlab 默认网络设置</h3><p>使用 root 用户从 web 端登录到 gitlab 管理中心 http://${ip}/admin 。管理中心 –&gt; 设置 –&gt; 网络 –&gt; 外发请求 –&gt; 允许来自钩子和服务的对本地网络的请求。以下选项全部允许，才能通过外部请求的方式注册 gitlab-runner。</p><ul><li>Allow requests to the local network from web hooks and services</li><li>Allow requests to the local network from system hooks</li></ul><p><strong>为了安全起见</strong>，也可以在 Whitelist to allow requests to the local network from hooks and services 下方的那个框框里添加上白名单，允许授权的 IP 。修改好之后不要忘记点击底部那个绿色按钮 <code>保存修改</code> 。</p><h4 id="500-错误"><a href="#500-错误" class="headerlink" title="500 错误"></a>500 错误</h4><p>如果点击 <code>保存修改</code> 之后就跳转到 Gitlab 500 错误的页面。尝试在管理中心修改其他设置保存时，也会出现 500 的情况。在安装 gitlab 的机器上查看一下日志。运行 <code>gitlab-ctl tail</code> 查看实时的日志。此时等到日志输出减慢的时候我们多按几下回车，然后就立即去点击<code>保存修改</code>  按钮，这样就能捕捉到此刻的错误日志。</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">==&gt; /<span class="keyword">var</span>/log/gitlab/gitlab-rails/production<span class="variable">.log</span> &lt;==</span><br><span class="line">Started PATCH <span class="string">"/admin/application_settings/network"</span> <span class="keyword">for</span> <span class="number">10</span><span class="variable">.0</span><span class="variable">.30</span><span class="variable">.2</span> at <span class="number">2020</span>-<span class="number">03</span>-<span class="number">10</span> <span class="number">11</span>:<span class="number">08</span>:<span class="number">20</span> +<span class="number">0000</span></span><br><span class="line">Processing by Admin::ApplicationSettingsController#network as HTML</span><br><span class="line">  Parameters: &#123;<span class="string">"utf8"</span>=&gt;<span class="string">"✓"</span>, <span class="string">"authenticity_token"</span>=&gt;<span class="string">"[FILTERED]"</span>, <span class="string">"application_setting"</span>=&gt;&#123;<span class="string">"allow_local_requests_from_web_hooks_and_services"</span>=&gt;<span class="string">"[FILTERED]"</span>, <span class="string">"allow_local_requests_from_system_hooks"</span>=&gt;<span class="string">"[FILTERED]"</span>, <span class="string">"outbound_local_requests_whitelist_raw"</span>=&gt;<span class="string">""</span>, <span class="string">"dns_rebinding_protection_enabled"</span>=&gt;<span class="string">"1"</span>&#125;&#125;</span><br><span class="line">Completed <span class="number">500</span> Internal Server Error in <span class="number">40</span>ms (ActiveRecord: <span class="number">14</span><span class="variable">.5ms</span> | Elasticsearch: <span class="number">0</span><span class="variable">.0ms</span>)</span><br><span class="line">OpenSSL::Cipher::CipherError ():</span><br><span class="line">lib/gitlab/crypto_helper<span class="variable">.rb</span>:<span class="number">27</span>:in <span class="meta">`aes256_gcm_decrypt'</span></span><br></pre></td></tr></table></figure><p>其中错误的输出是在 <code>OpenSSL::Cipher::CipherError ():</code></p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Processing by Admin::ApplicationSettingsController#network as HTML</span><br><span class="line">  Parameters: &#123;<span class="string">"utf8"</span>=&gt;<span class="string">"✓"</span>, <span class="string">"authenticity_token"</span>=&gt;<span class="string">"[FILTERED]"</span>, <span class="string">"application_setting"</span>=&gt;&#123;<span class="string">"allow_local_requests_from_web_hooks_and_services"</span>=&gt;<span class="string">"[FILTERED]"</span>, <span class="string">"allow_local_requests_from_system_hooks"</span>=&gt;<span class="string">"[FILTERED]"</span>, <span class="string">"outbound_local_requests_whitelist_raw"</span>=&gt;<span class="string">""</span>, <span class="string">"dns_rebinding_protection_enabled"</span>=&gt;<span class="string">"1"</span>&#125;&#125;</span><br><span class="line">Completed <span class="number">500</span> Internal Server Error in <span class="number">40</span>ms (ActiveRecord: <span class="number">14</span><span class="variable">.5ms</span> | Elasticsearch: <span class="number">0</span><span class="variable">.0ms</span>)</span><br><span class="line">OpenSSL::Cipher::CipherError ():</span><br></pre></td></tr></table></figure><blockquote><p>搜索了一下，发现网上说是由于迁移导入项目后，没有导入原来的加密信息<code>/etc/gitlab/gitlab-secrets.json</code>， 但是原来的加密信息文件我已经找不到了，后面发现可以直接重置就行了</p><p>参考 <a href="https://hihozhou.com/blog/2019/08/01/gitlab-500.html" target="_blank" rel="noopener">自搭gitlab报500错误</a></p></blockquote><p>命令行输入<code>gitlab-rails console</code>，然后输入</p><p><code>ApplicationSetting.current.reset_runners_registration_token!</code>即可，这样在保存修改的时候就不会再报 500 的问题了。应该是重新安装 Gitlab 之后的加密信息不对所致。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">╭─root@gitlab ~</span><br><span class="line">╰─<span class="comment"># gitlab-rails console</span></span><br><span class="line">--------------------------------------------------------------------------------</span><br><span class="line"> GitLab:       12.3.5 (2417d5becc7)</span><br><span class="line"> GitLab Shell: 10.0.0</span><br><span class="line"> PostgreSQL:   10.9</span><br><span class="line">--------------------------------------------------------------------------------</span><br><span class="line">Loading production environment (Rails 5.2.3)</span><br><span class="line">irb(main):001:0&gt; ApplicationSetting.current.reset_runners_registration_token!</span><br><span class="line">=&gt; <span class="literal">true</span></span><br><span class="line">irb(main):002:0&gt; <span class="built_in">exit</span></span><br></pre></td></tr></table></figure><h3 id="在项目中注册-Runner"><a href="#在项目中注册-Runner" class="headerlink" title="在项目中注册 Runner"></a>在项目中注册 Runner</h3><p>以上已经安装好并修改默认的网络设置允许 runner 所在的 IP 向 gitlab 发起外部请求。运行 <code>gitlab-runner register</code> 根据相应的提示输入 <code>URL</code> 和 <code>token</code> 即可。最后根据机器的类型选择好 runner 的类型，这个也是跑 CI 任务时的环境，到时候可以在项目的设置中选择启动相应的 runner 。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">╭─root@runner ~</span><br><span class="line">╰─<span class="comment"># gitlab-runner register</span></span><br><span class="line">Runtime platform   arch=amd64 os=linux pid=7501 revision=1b659122 version=12.8.0</span><br><span class="line">Running <span class="keyword">in</span> system-mode.</span><br><span class="line">Please enter the gitlab-ci coordinator URL (e.g. https://gitlab.com/):</span><br><span class="line">http://10.10.107.216/</span><br><span class="line">Please enter the gitlab-ci token <span class="keyword">for</span> this runner:</span><br><span class="line">4hjjA7meRGuxEm3LyMjq</span><br><span class="line">Please enter the gitlab-ci description <span class="keyword">for</span> this runner:</span><br><span class="line">[runner]:</span><br><span class="line">Please enter the gitlab-ci tags <span class="keyword">for</span> this runner (comma separated):</span><br><span class="line">centos</span><br><span class="line">Registering runner... succeeded                     runner=4hjjA7me</span><br><span class="line">Please enter the executor: shell, ssh, virtualbox, docker-ssh+machine, kubernetes, docker, docker-ssh, parallels, docker+machine, custom:</span><br><span class="line">[shell]: shell</span><br><span class="line">Runner registered successfully. Feel free to start it, but <span class="keyword">if</span> it<span class="string">'s running already the config should be automatically reloaded!</span></span><br></pre></td></tr></table></figure><ul><li>提示成功之后然后在 <code>管理中心</code>–&gt; <code>概览</code> –&gt; <code>Runner</code> 可以查看到相应的 Runner 了。也可以手动编辑 <code>/etc/gitlab-runner/config.toml</code> 来注册相应类型的  Runner</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">concurrent</span> = <span class="number">1</span></span><br><span class="line"><span class="attr">check_interval</span> = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="section">[session_server]</span></span><br><span class="line">  session_timeout = 1800</span><br><span class="line"></span><br><span class="line"><span class="section">[[runners]]</span></span><br><span class="line">  name = "runner"</span><br><span class="line">  url = "http://10.10.107.216/"</span><br><span class="line">  token = "ZTSAQ3q6x_upW9toyKTY"</span><br><span class="line">  executor = "shell"</span><br><span class="line">  <span class="section">[runners.custom_build_dir]</span></span><br><span class="line">  <span class="section">[runners.cache]</span></span><br><span class="line">    <span class="section">[runners.cache.s3]</span></span><br><span class="line">    <span class="section">[runners.cache.gcs]</span></span><br><span class="line"></span><br><span class="line"><span class="section">[[runners]]</span></span><br><span class="line">  name = "docker-runner"</span><br><span class="line">  url = "http://10.10.107.216/"</span><br><span class="line">  token = "Cf1cy6yx4Y-bGjVnRf8m"</span><br><span class="line">  executor = "docker"</span><br><span class="line">  <span class="section">[runners.custom_build_dir]</span></span><br><span class="line">  <span class="section">[runners.cache]</span></span><br><span class="line">    <span class="section">[runners.cache.s3]</span></span><br><span class="line">    <span class="section">[runners.cache.gcs]</span></span><br><span class="line">  <span class="section">[runners.docker]</span></span><br><span class="line">  <span class="comment"># 在这里需要添加上 harbor 的地址，才能允许 pull 私有 registry 的镜像</span></span><br><span class="line">    allowed_images = ["10.10.107.217/*:*"]</span><br><span class="line">    tls_verify = false</span><br><span class="line">    image = "golang:latest"</span><br><span class="line">    privileged = true</span><br><span class="line">    disable_entrypoint_overwrite = false</span><br><span class="line">    oom_kill_disable = false</span><br><span class="line">    disable_cache = false</span><br><span class="line">    volumes = ["/cache"]</span><br><span class="line">    shm_size = 0</span><br></pre></td></tr></table></figure><h2 id="部署-Harbor"><a href="#部署-Harbor" class="headerlink" title="部署 Harbor"></a>部署 Harbor</h2><ul><li>在 harbor 项目的 release 页面下载离线安装包 <a href="https://github.com/goharbor/harbor/releases/download/v1.9.4/harbor-offline-installer-v1.9.4.tgz" target="_blank" rel="noopener">harbor-offline-installer-v1.9.4.tgz</a> 到部署的机器上。部署之前需要安装好 <code>docker</code> 和 <code>docker-compose</code> 。之后再修改 <code>harbor.yml</code> 配置文件中的以下内容：</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># hostname 需要修改为相应的域名或者 IP</span></span><br><span class="line"><span class="attr">hostname:</span> <span class="number">10.10</span><span class="number">.107</span><span class="number">.217</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># http related config</span></span><br><span class="line"><span class="attr">http:</span></span><br><span class="line">  <span class="comment"># port for http, default is 80. If https enabled, this port will redirect to https port</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">80</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 首次登录时设定的 admin 账户密码</span></span><br><span class="line"><span class="attr">harbor_admin_password:</span> <span class="string">Harbor12345</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 数据存储的目录</span></span><br><span class="line"><span class="attr">data_volume:</span> <span class="string">/data</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># clair CVE 漏洞数据库更新，这里建议设置为 1h</span></span><br><span class="line"><span class="comment"># 由于 clair 数据库在国内网络访问问题，需要设置 http 代理</span></span><br><span class="line"><span class="attr">clair:</span></span><br><span class="line">  <span class="comment"># The interval of clair updaters, the unit is hour, set to 0 to disable the updaters.</span></span><br><span class="line">  <span class="attr">updaters_interval:</span> <span class="number">1</span></span><br><span class="line"><span class="attr">proxy:</span></span><br><span class="line">  <span class="attr">http_proxy:</span> <span class="number">10.20</span><span class="number">.172</span><span class="number">.106</span><span class="string">:2080</span></span><br><span class="line">  <span class="attr">https_proxy:</span></span><br><span class="line">  <span class="attr">no_proxy:</span></span><br><span class="line">  <span class="attr">components:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">clair</span></span><br></pre></td></tr></table></figure><ul><li>修改完配置文件之后再运行 <code>./install.sh --with-clair --with-chartmuseum</code> 将 clair 集成到 harbor 中。</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">╭─root@harbor /opt/harbor</span><br><span class="line">╰─# ./install.sh --with-clair --with-chartmuseum</span><br><span class="line">[Step 0]: checking installation environment ...</span><br><span class="line">[Step 1]: loading Harbor images ...</span><br><span class="line">[Step 2]: preparing environment ...</span><br><span class="line">[Step 3]: starting Harbor ...</span><br><span class="line">Creating network "harbor_harbor" with the default driver</span><br><span class="line">Creating network "harbor_harbor-clair" with the default driver</span><br><span class="line">Creating network "harbor_harbor-chartmuseum" with the default driver</span><br><span class="line">Creating harbor-log ... done</span><br><span class="line">Creating harbor-db     ... done</span><br><span class="line">Creating registryctl   ... done</span><br><span class="line">Creating harbor-portal ... done</span><br><span class="line">Creating chartmuseum   ... done</span><br><span class="line">Creating registry      ... done</span><br><span class="line">Creating redis         ... done</span><br><span class="line">Creating clair         ... done</span><br><span class="line">Creating harbor-core   ... done</span><br><span class="line">Creating harbor-jobservice ... done</span><br><span class="line">Creating nginx             ... done</span><br><span class="line"></span><br><span class="line">✔ ----Harbor has been installed and started successfully.----</span><br><span class="line"></span><br><span class="line">Now you should be able to visit the admin portal at http://10.20.172.236.</span><br><span class="line">For more details, please visit https://github.com/goharbor/harbor .</span><br></pre></td></tr></table></figure><ul><li>使用 <code>docker-compose ps</code> 检查 harbor 相关容器是否正常。</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">╭─root@harbor /opt/harbor</span><br><span class="line">╰─# docker-compose ps</span><br><span class="line">      Name                     Command                  State                 Ports</span><br><span class="line">---------------------------------------------------------------------------------------------</span><br><span class="line">chartmuseum         /docker-entrypoint.sh            Up (healthy)   9999/tcp</span><br><span class="line">clair               /docker-entrypoint.sh            Up (healthy)   6060/tcp, 6061/tcp</span><br><span class="line">harbor-core         /harbor/harbor_core              Up (healthy)</span><br><span class="line">harbor-db           /docker-entrypoint.sh            Up (healthy)   5432/tcp</span><br><span class="line">harbor-jobservice   /harbor/harbor_jobservice  ...   Up (healthy)</span><br><span class="line">harbor-log          /bin/sh -c /usr/local/bin/ ...   Up (healthy)   127.0.0.1:1514-&gt;10514/tcp</span><br><span class="line">harbor-portal       nginx -g daemon off;             Up (healthy)   8080/tcp</span><br><span class="line">nginx               nginx -g daemon off;             Up (healthy)   0.0.0.0:80-&gt;8080/tcp</span><br><span class="line">redis               redis-server /etc/redis.conf     Up (healthy)   6379/tcp</span><br><span class="line">registry            /entrypoint.sh /etc/regist ...   Up (healthy)   5000/tcp</span><br><span class="line">registryctl         /harbor/start.sh                 Up (healthy)</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/muzi502/blog/sourchttps://cdn.jsdelivr.net/gh/muzi502/blog/sourchttps://cdn.jsdelivr.net/gh/muzi502/blog/sourchttps://cdn.jsdelivr.net/gh/muzi502/blog/sourchttps://cdn.jsdelivr.net/gh/muzi502/blog/source/img/image-20200326163733610.png" alt="image-20200326163733610"></p><h3 id="设置-insecure-registry"><a href="#设置-insecure-registry" class="headerlink" title="设置 insecure registry"></a>设置 insecure registry</h3><ul><li>在 runner 服务器上设置一下 <code>/etc/docker/daemon.json</code> 将私有 registry 的 IP 地址填入到 <code>insecure-registries</code> 数组中。这样才可以推送和拉取镜像</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"insecure-registries"</span> : [<span class="string">"10.10.107.217"</span>]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>使用 <code>docker login</code> 测试是否能登录成功：</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">╭─root@docker-230 /opt</span><br><span class="line">╰─# docker login 10.10.107.217</span><br><span class="line">Username: admin</span><br><span class="line">Password:</span><br><span class="line">WARNING! Your password will be stored unencrypted in /root/.docker/config.json.</span><br><span class="line">Configure a credential helper to remove this warning. See</span><br><span class="line">https://docs.docker.com/engine/reference/commandline/login/#credentials-store</span><br><span class="line">Login Succeeded</span><br></pre></td></tr></table></figure><ul><li>登录到 harbor 新建一个项目仓库，并按照 <code>docker tag SOURCE_IMAGE[:TAG] 10.20.172.236/ciest/IMAGE[:TAG]</code> 格式给本地 docker 镜像打上 tag 并测试推送到 harbor 是否成功。</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">╭─root@docker-230 /opt</span><br><span class="line">╰─# docker tag openjdk:8-jdk-alpine 10.10.107.217/ops/openjdk:8-jdk-alpine</span><br><span class="line">╭─root@docker-230 /opt</span><br><span class="line">╰─# docker push !$</span><br><span class="line">╭─root@docker-230 /opt</span><br><span class="line">╰─# docker push 10.10.107.217/ops/openjdk:8-jdk-alpine</span><br><span class="line">The push refers to repository [10.10.107.217/ops/openjdk]</span><br><span class="line">ceaf9e1ebef5: Mounted from ops/ci-test</span><br><span class="line">9b9b7f3d56a0: Mounted from ops/ci-test</span><br><span class="line">f1b5933fe4b5: Mounted from ops/ci-test</span><br><span class="line">8-jdk-alpine: digest: sha256:44b3cea369c947527e266275cee85c71a81f20fc5076f6ebb5a13f19015dce71 size: 947</span><br></pre></td></tr></table></figure><ul><li>在 harbor 项目的页面查看是否推送成功</li></ul><p><img src="https://cdn.jsdelivr.net/gh/muzi502/blog/sourchttps://cdn.jsdelivr.net/gh/muzi502/blog/sourchttps://cdn.jsdelivr.net/gh/muzi502/blog/sourchttps://cdn.jsdelivr.net/gh/muzi502/blog/sourchttps://cdn.jsdelivr.net/gh/muzi502/blog/source/img/image-20200326170403918.png" alt="image-20200326170403918"></p><h2 id="测试-CI-CD-项目"><a href="#测试-CI-CD-项目" class="headerlink" title="测试 CI/CD 项目"></a>测试 CI/CD 项目</h2><ul><li>在 Gitlab 中使用 Spring 模板新建一个项目，并添加 <code>.gitlab-ci.yaml</code> 配置文件。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/muzi502/blog/sourchttps://cdn.jsdelivr.net/gh/muzi502/blog/sourchttps://cdn.jsdelivr.net/gh/muzi502/blog/sourchttps://cdn.jsdelivr.net/gh/muzi502/blog/sourchttps://cdn.jsdelivr.net/gh/muzi502/blog/source/img/image-20200326170523433.png" alt="image-20200326170523433"></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">stages:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">build</span></span><br><span class="line"><span class="attr">build-master:</span></span><br><span class="line">  <span class="comment"># Official docker image.</span></span><br><span class="line">  <span class="attr">image:</span> <span class="string">docker:latest</span></span><br><span class="line">  <span class="attr">tags:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">maven-runner</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">build</span></span><br><span class="line">  <span class="attr">services:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">docker:dind</span></span><br><span class="line">  <span class="attr">before_script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">docker</span> <span class="string">login</span> <span class="string">-u</span> <span class="string">"$CI_REGISTRY_USER"</span> <span class="string">-p</span> <span class="string">"$CI_REGISTRY_PASSWORD"</span> <span class="string">$CI_REGISTRY</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">docker</span> <span class="string">info</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">docker</span> <span class="string">build</span> <span class="string">--pull</span> <span class="string">-t</span> <span class="string">"$CI_REGISTRY_IMAGE"</span> <span class="string">.</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">docker</span> <span class="string">push</span> <span class="string">"$CI_REGISTRY_IMAGE"</span></span><br><span class="line">  <span class="attr">allow_failure:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="attr">build:</span></span><br><span class="line">  <span class="comment"># Official docker image.</span></span><br><span class="line">  <span class="attr">image:</span> <span class="string">docker:latest</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">build</span></span><br><span class="line">  <span class="attr">services:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">docker:dind</span></span><br><span class="line">  <span class="attr">before_script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">docker</span> <span class="string">login</span> <span class="string">-u</span> <span class="string">"$CI_REGISTRY_USER"</span> <span class="string">-p</span> <span class="string">"$CI_REGISTRY_PASSWORD"</span> <span class="string">$CI_REGISTRY</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">docker</span> <span class="string">build</span> <span class="string">--pull</span> <span class="string">-t</span> <span class="string">"$CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG"</span> <span class="string">.</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">docker</span> <span class="string">push</span> <span class="string">"$CI_REGISTRY_IMAGE:$CI_COMMIT_REF_SLUG"</span></span><br><span class="line">  <span class="attr">except:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">master</span></span><br></pre></td></tr></table></figure><h3 id="gitlab-ci-yaml"><a href="#gitlab-ci-yaml" class="headerlink" title=".gitlab-ci.yaml"></a>.gitlab-ci.yaml</h3><p><code>.gitlab-ci.yaml</code> 文件的配置高度依赖于项目本身，以及 CI/CD 流水线的需求。其配置文件主要由以下部分组成：</p><h4 id="Pipeline"><a href="#Pipeline" class="headerlink" title="Pipeline"></a>Pipeline</h4><p>一次 Pipeline 其实相当于一次构建任务，里面可以包含很多个流程，如安装依赖、运行测试、编译、部署测试服务器、部署生产服务器等流程。任何提交或者 Merge Request 的合并都可以触发 Pipeline 构建，如下图所示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">+------------------+           +----------------+</span><br><span class="line">|                  |  trigger  |                |</span><br><span class="line">|   Commit &#x2F; MR    +----------&gt;+    Pipeline    |</span><br><span class="line">|                  |           |                |</span><br><span class="line">+------------------+           +----------------+</span><br></pre></td></tr></table></figure><h4 id="Stages"><a href="#Stages" class="headerlink" title="Stages"></a>Stages</h4><p>Stages 表示一个构建阶段，也就是上面提到的一个流程。我们可以在一次 Pipeline 中定义多个 Stages，这些 Stages 会有以下特点：</p><ul><li>所有 Stages 会按照顺序运行，即当一个 Stage 完成后，下一个 Stage 才会开始</li><li>只有当所有 Stages 完成后，该构建任务 (Pipeline) 才会成功</li><li>如果任何一个 Stage 失败，那么后面的 Stages 不会执行，该构建任务 (Pipeline) 失败</li></ul><p>Stages 和 Pipeline 的关系如下所示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">+--------------------------------------------------------+</span><br><span class="line">|                                                        |</span><br><span class="line">|  Pipeline                                              |</span><br><span class="line">|                                                        |</span><br><span class="line">|  +-----------+     +------------+      +------------+  |</span><br><span class="line">|  |  Stage 1  |----&gt;|   Stage 2  |-----&gt;|   Stage 3  |  |</span><br><span class="line">|  +-----------+     +------------+      +------------+  |</span><br><span class="line">|                                                        |</span><br><span class="line">+--------------------------------------------------------+</span><br></pre></td></tr></table></figure><h4 id="Jobs"><a href="#Jobs" class="headerlink" title="Jobs"></a>Jobs</h4><p>Jobs 表示构建工作，表示某个 Stage 里面执行的工作。我们可以在 Stages 里面定义多个 Jobs，这些 Jobs 会有以下特点：</p><ul><li>相同 Stage 中的 Jobs 会并行执行</li><li>相同 Stage 中的 Jobs 都执行成功时，该 Stage 才会成功</li><li>如果任何一个 Job 失败，那么该 Stage 失败，即该构建任务 (Pipeline) 失败</li></ul><p>Jobs 和 Stage 的关系如下所示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">+------------------------------------------+</span><br><span class="line">|                                          |</span><br><span class="line">|  Stage 1                                 |</span><br><span class="line">|                                          |</span><br><span class="line">|  +---------+  +---------+  +---------+   |</span><br><span class="line">|  |  Job 1  |  |  Job 2  |  |  Job 3  |   |</span><br><span class="line">|  +---------+  +---------+  +---------+   |</span><br><span class="line">|                                          |</span><br><span class="line">+------------------------------------------+</span><br></pre></td></tr></table></figure><p>下面是一个<code>.gitlab-ci.yaml</code>  样例：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">stages:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">analytics</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">test</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">build</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">package</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">deploy</span></span><br><span class="line"></span><br><span class="line"><span class="attr">build:</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">analytics</span></span><br><span class="line">  <span class="attr">only:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">master</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">tags</span></span><br><span class="line">  <span class="attr">tags:</span></span><br><span class="line">    <span class="bullet">-</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">echo</span> <span class="string">"=============== 开始代码质量检测 ==============="</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">echo</span> <span class="string">"=============== 结束代码质量检测 ==============="</span></span><br><span class="line"></span><br><span class="line"><span class="attr">build:</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">build</span></span><br><span class="line">  <span class="attr">only:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">master</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">tags</span></span><br><span class="line">  <span class="attr">tags:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">runner-tag</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">echo</span> <span class="string">"=============== 开始编译任务 ==============="</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">echo</span> <span class="string">"=============== 结束编译任务 ==============="</span></span><br><span class="line"></span><br><span class="line"><span class="attr">package:</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">package</span></span><br><span class="line">  <span class="attr">tags:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">runner-tag</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">echo</span> <span class="string">"=============== 开始打包任务  ==============="</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">echo</span> <span class="string">"=============== 结束打包任务  ==============="</span></span><br><span class="line"></span><br><span class="line"><span class="attr">build:</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">test</span></span><br><span class="line">  <span class="attr">only:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">master</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">tags</span></span><br><span class="line">  <span class="attr">tags:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">runner-tag</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">echo</span> <span class="string">"=============== 开始测试任务 ==============="</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">echo</span> <span class="string">"=============== 结束测试任务 ==============="</span></span><br><span class="line"></span><br><span class="line"><span class="attr">deploy_test:</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">deploy</span></span><br><span class="line">  <span class="attr">tags:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">runner-tag</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">echo</span> <span class="string">"=============== 自动部署到测试服务器  ==============="</span></span><br><span class="line">  <span class="attr">environment:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">test</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">https://staging.example.com</span></span><br><span class="line"></span><br><span class="line"><span class="attr">deploy_test_manual:</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">deploy</span></span><br><span class="line">  <span class="attr">tags:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">runner-tag</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">echo</span> <span class="string">"=============== 手动部署到测试服务器  ==============="</span></span><br><span class="line">  <span class="attr">environment:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">test</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">https://staging.example.com</span></span><br><span class="line">  <span class="attr">when:</span> <span class="string">manual</span></span><br><span class="line"></span><br><span class="line"><span class="attr">deploy_production_manual:</span></span><br><span class="line">  <span class="attr">stage:</span> <span class="string">deploy</span></span><br><span class="line">  <span class="attr">tags:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">runner-tag</span></span><br><span class="line">  <span class="attr">script:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">echo</span> <span class="string">"=============== 手动部署到生产服务器  ==============="</span></span><br><span class="line">  <span class="attr">environment:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">production</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">https://staging.example.com</span></span><br><span class="line">  <span class="attr">when:</span> <span class="string">manual</span></span><br></pre></td></tr></table></figure><ul><li>修改好 <code>.gitlab-ci.yaml</code> 之后，将 CI/CD 过程中使用到的一些敏感信息，使用变量的方式填入在 项目 <code>设置</code> —&gt; <code>CI/CD</code> —&gt; <code>变量</code> 里。比如 Harbor 仓库的用户名密码、ssh 密钥信息、数据库配置信息等机密信息。</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">CI_REGISTRY: # Harbor 镜像仓库的地址</span><br><span class="line">CI_REGISTRY_USER: # Harbor 用户名</span><br><span class="line">CI_REGISTRY_PASSWORD: # Harbor 密码</span><br><span class="line">CI_REGISTRY_IMAGE: # 构建镜像的名称</span><br><span class="line">SSH_PASSWORD: # 部署测试服务器 ssh 密码</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/muzi502/blog/sourchttps://cdn.jsdelivr.net/gh/muzi502/blog/sourchttps://cdn.jsdelivr.net/gh/muzi502/blog/sourchttps://cdn.jsdelivr.net/gh/muzi502/blog/sourchttps://cdn.jsdelivr.net/gh/muzi502/blog/source/img/image-20200327102511419.png" alt="image-20200327102511419"></p><ul><li>设置好相关变量之后在，在项目页面的 <code>CI/CD</code> —–&gt; <code>流水线</code> 页面点击 <code>运行流水线</code>手动触发流水线任务进行测试。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/muzi502/blog/sourchttps://cdn.jsdelivr.net/gh/muzi502/blog/sourchttps://cdn.jsdelivr.net/gh/muzi502/blog/sourchttps://cdn.jsdelivr.net/gh/muzi502/blog/sourchttps://cdn.jsdelivr.net/gh/muzi502/blog/source/img/image-20200325163138089.png" alt="image-20200325163138089"></p><ul><li>如果流水线任务构建成功的话，会显示 <code>已通过</code> 的表示</li></ul><p><img src="https://cdn.jsdelivr.net/gh/muzi502/blog/sourchttps://cdn.jsdelivr.net/gh/muzi502/blog/sourchttps://cdn.jsdelivr.net/gh/muzi502/blog/sourchttps://cdn.jsdelivr.net/gh/muzi502/blog/sourchttps://cdn.jsdelivr.net/gh/muzi502/blog/source/img/image-20200325163254316.png" alt="image-20200325163254316"></p><ul><li>登录到 Harbor <a href="http://10.10.107.217" target="_blank" rel="noopener">http://10.10.107.217</a> 查看镜像是否构建成功</li></ul><p><img src="https://cdn.jsdelivr.net/gh/muzi502/blog/sourchttps://cdn.jsdelivr.net/gh/muzi502/blog/sourchttps://cdn.jsdelivr.net/gh/muzi502/blog/sourchttps://cdn.jsdelivr.net/gh/muzi502/blog/sourchttps://cdn.jsdelivr.net/gh/muzi502/blog/source/img/image-20200325163400519.png" alt="image-20200325163400519"></p><h2 id="参考-推荐"><a href="#参考-推荐" class="headerlink" title="参考/推荐"></a>参考/推荐</h2><ul><li><p><a href="https://docs.gitlab.com/runner/" target="_blank" rel="noopener">GitLab Runner Docs</a></p></li><li><p><a href="https://docs.gitlab.com/ee/README.html" target="_blank" rel="noopener">GitLab Docs</a></p></li><li><p><a href="https://nicksors.cc/2019/07/12/kubernetes系列之《构建企业级CICD平台-一-》.html" target="_blank" rel="noopener">kubernetes系列之《构建企业级CICD平台(一)》</a></p></li><li><p><a href="https://notes.mengxin.science/2018/09/02/gitlab-ci-cd-question-and-answer/" target="_blank" rel="noopener">GitLab的CI/CD使用问题汇总</a></p></li><li><p><a href="https://moelove.info/2018/08/05/%E5%9F%BA%E4%BA%8E-GitLab-%E7%9A%84-CI-%E5%AE%9E%E8%B7%B5/" target="_blank" rel="noopener">基于 GitLab 的 CI 实践</a></p></li><li><p><a href="https://blog.fleeto.us/courses/gitlab-notes/" target="_blank" rel="noopener">gitlab-notes</a></p></li><li><p><a href="https://xiaogenban1993.github.io/18.5/xiaomi_gitlabrunner.html" target="_blank" rel="noopener">gitlab runner部署细节优化</a></p></li><li><p><a href="https://tech.meituan.com/2018/08/02/erp-cd-jenkins-pipeline.html" target="_blank" rel="noopener">Jenkins的Pipeline脚本在美团餐饮SaaS中的实践</a></p></li><li><p><a href="https://laogen.site/gitlab-ci/example-docker-ssh-deploy/" target="_blank" rel="noopener">GitLab CI 示例：Docker 镜像打包发布 &amp; SSH 部署</a></p></li><li><p><a href="https://theviper.xyz/gitlab-ci-cd-optimize.html" target="_blank" rel="noopener">gitlab CI/CD优化</a></p></li><li><p><a href="http://zacksleo.top/2017/04/22/GitLab-CI%E4%BD%BF%E7%94%A8Docker%E8%BF%9B%E8%A1%8C%E6%8C%81%E7%BB%AD%E9%83%A8%E7%BD%B2/" target="_blank" rel="noopener">GitLab-CI使用Docker进行持续部署</a></p></li><li><p><a href="https://furur.xyz/2019/11/03/docker-gitlab-ci-deploy-springboot-project/" target="_blank" rel="noopener">Docker Gitlab CI 部署 Spring Boot 项目</a></p></li><li><p><a href="https://wsgzao.github.io/post/gitlab/" target="_blank" rel="noopener">RHEL7/CentOS7 在线和离线安装 GitLab 配置使用实践</a></p></li><li><p><a href="https://wayjam.me/post/how-gitlab-shell-works-with-ssh.md" target="_blank" rel="noopener">GitLab Shell如何通过SSH工作</a></p></li><li><p><a href="https://websoft9.gitbook.io/gitlab-image-guide/" target="_blank" rel="noopener">GitLab镜像手册</a></p></li><li><p><a href="https://xuanwo.io/2016/04/13/gitlab-install-intro/" target="_blank" rel="noopener">Gitlab部署和汉化以及简单运维</a></p></li></ul><h2 id="社群问答-QA-CI-CD-相关"><a href="#社群问答-QA-CI-CD-相关" class="headerlink" title="社群问答 QA | CI/CD 相关"></a>社群问答 QA | CI/CD 相关</h2><p>以下内容是整理摘自 <a href="https://blog.k8s.li/K8s-QA.html">《(2000+) kubernetes 社群分享 QA 汇总》</a>，中有关 CI/CD 相关的问答，从 2000 多个 QA 里使用关键字搜索 Gitlab、CI/CD、Jenkins 等，然后将一些相关的问题进行汇总。方便问题自查和从中吸取经验。</p><h3 id="2019-04-03：容器环境下的持续集成最佳实践"><a href="#2019-04-03：容器环境下的持续集成最佳实践" class="headerlink" title="2019-04-03：容器环境下的持续集成最佳实践"></a>2019-04-03：容器环境下的持续集成最佳实践</h3><blockquote><p>Q：Kubernetes 上主流的 CI/CD 方案是啥？</p></blockquote><p>A：其实这无关Kubernetes，从市场占有率来看，前三名分别是 Jenkins、JetBrains TeamCity、CircleCI。<a href="https://www.datanyze.com/market-share/ci" target="_blank" rel="noopener">来源：</a></p><blockquote><p>Q：GitLab 自带的 CI 与Jenkins 和 GitLab 结合的 CI，该如何选择？想知道更深层次的理解。</p></blockquote><p>A：还是要结合自己团队的实际情况做选择。从成熟度来说，肯定是 Jenkins用户最多，成熟度最高，缺点是侧重 Java，配置相对繁琐。GitLab 自带的 CI相对简单，可以用 yaml，和 GitLab 结合的最好，但功能肯定没有 Jenkins全面。如果是小团队新项目，GitLab CI 又已经可以满足需求的话，并不需要上Jenkins，如果是较大的团队，又是偏 Java 的，个人更偏向 Jenkins。</p><blockquote><p>Q：Jenkins 如果不想运行在 Kubernetes 里面，该怎么和 Kubernetes 集成？</p></blockquote><p>A：从 CI 的流程来说，CI 应用是不是跑在 Kubernetes 的并不重要，CI只要能访问代码库，有权限在生产环境发布，是不是跑在容器里从效果来说其实没有区别，只是用Kubernetes 部署 Jenkins的话，运维的一致性比较好，运维团队不用额外花时间维护一套物理机的部署方案。</p><blockquote><p>Q：Kubernetes的回滚方案是回滚代码，重做镜像，还是先切流量，后做修改？</p></blockquote><p>A：代码一定是打包到镜像里的，镜像的版本就是代码的版本，所以一定是切镜像。至于回滚操作本身，Kubernetes已经内置了很多滚动发布（Rollingupdate）的策略，无论是发新版本还是回滚版本，都可以做到用户无感知。</p><blockquote><p>Q：镜像大到几 G 的话如何更新部署，有什么好的实践呢，以及如何回滚？</p></blockquote><p>A：几个要点：&gt; Q：Drone 开放 API 服务吗？这样方便其他系统集成。</p><p>A：可以调整一下思路，直接把需要的功能做成镜像在 Drone 里调用就好了。</p><blockquote><p>Q：如果有 Drone 的 Server怎么做高可用？</p></blockquote><p>A：Drone serve r用 Kubernetes部署的话本身只起到了一个任务调度的作用，很难会遇到性能瓶颈。真的有性能问题可以尝试水平扩展Drone server，共享同一数据库。</p><h3 id="基于-GitLab-的-CI-实践"><a href="#基于-GitLab-的-CI-实践" class="headerlink" title="基于 GitLab 的 CI 实践"></a><a href="https://moelove.info/2018/08/05/基于-GitLab-的-CI-实践/" target="_blank" rel="noopener">基于 GitLab 的 CI 实践</a></h3><blockquote><p>Q：您提到把各种依赖都以 Service 的提供，请问是以哪种方式呢？ 比如Python的依赖，怎么做成Service呢？</p></blockquote><p>A：Service 化的依赖，主要是指类似 DB / MySQL/ Reids 之类的。 或者是 dind 其实它提供的是 2375 端口的TCP服务。 Python 的依赖，我推荐的做法是， 构建一个换了源的 Python 镜像。 安装依赖的时候，耗时会少很多。 或者说， 可以在定义 Pipeline 的时候， 将虚拟环境的 venv 文件夹作为 cache ，之后的安装也会检查这个，避免不必要的安装。</p><blockquote><p>Q：请问，你们为什么不用Jenkins Pipeline，而使用GitLab CI？</p></blockquote><p>A：主要原因是我提到的那几个方面。 集成较好， 界面美观优雅， 使用简单（所有有仓库写权限的人 都可以使用， 只要创建 .gitlab-ci.yml 并且配置了 Runner 即可使用） 。换个角度，我们来看下使用Jenkins 的问题， Jenkins 对于项目的配置其实和 GitLab 的代码是分离的， 两部分的， 用户（或者说我们的开发者）在使用的时候， 需要有两个平台， 并且，大多数时候， Jenkins 的权限是不放开的。 对用户来讲， 那相当于是个黑盒。 那可能的问题是什么呢？ 遇到构建失败了， 但是只有运维知道发生了什么，但是研发无能为力，因为没有权限。 使用GItLab的好处，这个时候就更加突出了， 配置就在代码仓库里面，并且使用 YAML 的配置，很简单。 有啥问题，直接查，直接改。</p><blockquote><p>Q：关于 Runner 的清理的问题，在长时间使用后，Runner 机器上回产生很多的 Cache 容器，如何清理呢。能够在任务中自动清除吗？</p></blockquote><p>A：这个就相对简单了，首先， 如果你的 Cache 容器确认没用了， 每个 Cache 容器其实都有名字的， 直接按 Cache 的名字过略， 批量删掉。 如果你不确定它是否有用，那你直接删掉也是不影响的， 因为 Docker Excutor 的执行机制是创建完 Service 容器后， 创建 Cache 容器。 要是删掉了，它只是会再创建一次。 如果你想在任务中清除， 目前还没做相关的实践，待我实践后，看看有没有很优雅的方式。</p><blockquote><p>Q：请问下Maven的settings.xml怎么处理？本地Maven仓库呢？</p></blockquote><p>A：我们构建了私有的 Maven 镜像， 私有镜像中是默认使用了我们的私有源。 对于项目中用户无需关注 settings.xml 中是否配置repo。</p><blockquote><p>Q：在GitLab的CD方案中，在部署的时候，需要在变量中配置跳板机的私钥，如果这个项目是对公司整部门开发，那么如何保护这个私钥呢？</p></blockquote><p>A：可以使用 secret variable 将私钥写入其中， （但是项目的管理员，具备查看该 variable 的权限）开发一个 web server （其实只要暴露 IP 端口之类的就可以） 在 CI 执行的过程中去请求， server 对来源做判断 （比如 执行CI 的时候，会有一些特定的变量，以此来判断，是否真的是 CI 在请求）然后返回私钥。</p><blockquote><p>Q：GitLab CI适合什么类型的项目呢？国内目前还比较小众吧？</p></blockquote><p>A：国内目前还较为小众（相比 Jenkins 来说）其实只要需要 CI 的项目，它都适合。</p><h2 id="2015-09-23：基于Docker和Java的持续集成实践"><a href="#2015-09-23：基于Docker和Java的持续集成实践" class="headerlink" title="2015-09-23：基于Docker和Java的持续集成实践"></a>2015-09-23：基于Docker和Java的持续集成实践</h2><blockquote><p>Q：CI过程中test需要连接数据库的代码时，您在写测试案例方面有哪些经验分享？</p></blockquote><p>A：单元测试不能依赖外部资源，用mock，或者用h2等内存数据库替代。集成测试的时候是从接口层直接调用测试的，测试用例对数据库无感知。</p><blockquote><p>Q：请问部署到生产环境是自动触发还是需要手动审批？SQL执行或回滚是否自动化？</p></blockquote><p>A：当前是需要手动触发。SQL更新当前没做到自动化，这块正在改进，因为部署私有环境需要。SQL不支持回滚，代码做兼容。Docker镜像回滚没有自动化。</p><blockquote><p>Q： 问一下你们的Redis内存版是用的什么？</p></blockquote><p>A：我们用的内存版的redis是 <a href="https://github.com/spullara/redis-protocol" target="_blank" rel="noopener">spullara/redis-protocol</a>中的server实现。不过这个实现部分功能没支持，比如lua脚本，我们自己做了改进。</p><blockquote><p>Q：介绍下workflow带来的好处。</p></blockquote><p>A：workflow的好处我那篇文章中有说明，如果没有workflow，所有的步骤都在同一个配置的不同step实现，如果后面的失败，要重新从头开始。workflow可以中途开始，并且每一步骤完成都会触发通知。</p><blockquote><p>Q：h2并不完全兼容MySQL脚本，你们如何处理的？</p></blockquote><p>A：我们通过一些hack的办法，会探测下数据库是什么类型的，替换掉一些不兼容的SQL，进行容错。</p><blockquote><p>Q：请问你们在构建的时候，你说有些需要半个小时左右，那么构建过程的进度监控和健康监控你们怎么做的呢，如果有build失败了怎么处理呢？</p></blockquote><p>A：CI的每一步都有进度的，并且我们的团队通讯工具可以和CI集成，如果失败会发消息到群里通知大家。</p><blockquote><p>Q：cleanup脚本做哪些？</p></blockquote><p>A：主要是清理旧的Docker镜像，以及清理自动化测试产生的垃圾数据。</p><blockquote><p>Q：请问你们文件存储怎么解决的呢，使用自己的网络文件系统还是云服务？</p></blockquote><p>A：文件系统支持多种storage配置，可以是本地目录（便于测试），也可以使云服务（比如s3）。</p><blockquote><p>Q：刚才说你们能通过一键部署，但是中间无法监控，测试环境可以这么玩，那生产环境你们是怎么做的呢？还有你们后续的改造方向是自己开发？还是采用集成第三方软件？</p></blockquote><p>A：生产环境shell当前只能是多加错误判断。这块我们在改进，比如通过ansible等工具，以及使用Kubernetes内置的rolling-update。自动化部署这块还没有好的开源工具。</p><blockquote><p>Q：你们的测试用了很多代替方案、如h2代MySQL，要保证测试效果，除了你们用的hack方法之外，是不是从写代码的时候就开始做了方便测试的设计？</p></blockquote><p>A：对。这也是我文章中分享的观点之一。测试用例的编写人员要有业务代码的修改权限，最好是同一个人。要做自动化测试，业务代码必须要给测试留各种钩子以及后门。</p><blockquote><p>Q：请问你们的集群应用编排怎么做的？</p></blockquote><p>A：上面说了，还没用到编排。一直等编排工具的成熟。正在测试k8s。</p><blockquote><p>Q：你们做这个项目选型是出于什么考虑的，介绍里有提到使用一些脚本来管理容器解决开发和测试各种问题，感觉这种管理容器方式过于简单会带来管理问题，为何不用第三方开源项目来做二次开发，如：Kubernetes；另一个问题是，下一步有没有考虑如何让你的Docker和云服务平台结合，要解决运营成本问题（Docker最大吸引力在这里），而不只是解决开发测试问题？</p></blockquote><p>A：因为我们最早用的时候k8s 1.0 还没有，变化太大，创业团队没精力跟进，脚本是粗暴简单的办法。一直在等待各种基于Docker的云解决方案呀，肯定考虑结合。</p><blockquote><p>Q：对于Docker storage分区用完问题，我想问一下，你们是使用Docker官方提供的Registry仓库吗，如何解决仓库单点问题，这机器要是故障了怎么办？</p></blockquote><p>A：Registry用的是官方的，后端存储是挂载到s3上的。没有s3,推荐使用京东田琪团队开源的<a href="https://github.com/jcloudpub/speedy" target="_blank" rel="noopener">Speedy</a>，实现了分布式存储。</p><blockquote><p>Q：除了介绍的Java相关的CI方案，对于C/C++开发语言有没有推荐的CI方案？</p></blockquote><p>A：Teamcity/Jenkins等CI工具支持任何语言的。其实任何语言的CI都差不多，单元测试，集成测试。关键还在于依赖环境的准备以及集成测试用例的管理。</p><blockquote><p>Q：我看到你们为了方便测试和调试会有独立的集合Docker环境，这种环境和上线环境其实是有差别的，这样测试的结果能够代表线上环境吗？这种问题怎么看待？</p></blockquote><p>A：所以我们有多个流程。清理数据的测试环境，以及不清理环境的沙箱环境。但这也不能避免一部分线上环境的数据导致的bug。另外就是配合灰度上线机制。当前我们的灰度是通过代码中的开关实现的，使用这种方案的也很多，比如facebook的Gatekeeper。</p><blockquote><p>Q：请问Grouk有涉及前端（Node.js方面的）并结合Docker的CI/CD经历吗，可以分享下吗？</p></blockquote><p>A：这我们也在尝试。当前js的测试主要还是基于<a href="https://github.com/ariya/phantomjs" target="_blank" rel="noopener">ariya/phantomjs</a>，纯粹的js库比较方便测试，但如果牵扯到界面，就比较复杂些了。</p><h2 id="2015-12-22：基于Docker和Git的持续集成工作流"><a href="#2015-12-22：基于Docker和Git的持续集成工作流" class="headerlink" title="2015-12-22：基于Docker和Git的持续集成工作流"></a>2015-12-22：基于Docker和Git的持续集成工作流</h2><blockquote><p>Q：开发每提交一个bugfix，都会触发jinkens去构建镜像，那么多的开发者，岂不是要构建很多镜像？</p></blockquote><p>A：没有错，我们是每次都触发构建 image，由于image是分层的，底层已经存在的父对象，是不用存储，只存储变化的部分所以再用的磁盘空间很低，在系统开始初，我做过统计，1000个 image 也不到 9G，这其中还有很多基础镜像。</p><blockquote><p>Q：想问一个集群相关的，像Docker部署这部是直接调用Docker部署容器，还是通过Ansible或其他工具？</p></blockquote><p>A：有了 Kubernetes 管理集群后，发布的工作就比较简单了，用不上 Ansible。但是 Ansible 还是有它的用处的，比如清理集群中过时的 image，和已经退出的 Container等。</p><blockquote><p>Q：你好，以前也做过类似的服务”第三步：Jenkins 会把相应的 image部署到服务器集群中，开发者就可以通过 iss001.kingdee这个域名访问刚刚对应分支的服务了”，单独一个分支解决了对应的bug，但实际生产中非常容易修改一个bug引起其他的bug，你们是怎么去把控整体的稳定性？如何提高这种单个bug分支单个测试环境的意义？</p></blockquote><p>A：这个 pull-request 的工作方式是应对功能开发的，如像长期开发某个 new feature，你刚刚说的一个 bug 产生另外一个bug，我们的做法是有回归测试，我们有一个 smoke 分支，持续不断的对其做功能回归测试，只有通过的才能 cherry pick 到release 上。</p><blockquote><p>Q：测试环境依赖的redis/MQ之类的外部服务如何做的隔离?每次测试单独拉起来一套外部依赖的服务吗？</p></blockquote><p>A：我们通过多个手段来实现共享数据：master、smoke、release 分支测试都有自己独立的中间件，要是不用访问共享的数据，可以部署如 MQ image，代码层面的，如 MQ key 的名称加上机器的 IP。</p><blockquote><p>Q：有没有用到Mesos？是否容易遇到问题？这方面的文档好像并不多。</p></blockquote><p>A：Mesos 是个二级调度，适用于像存在多套集群的情况，来均衡资源，如：部署了 Hadoop 和 storm ，一般会使用 storm 来处理实时的请求，Hadoop 做离线工作。晚上和白天就存在一种可能就是 Hadoop 闲置，但是 storm 可能很忙，这时 Mesos 这样的二级调度就可以平衡资源，节约成本，我们暂时没有这样的需求。至于文档方面我也没有深入研究，建议看官方文档。</p><blockquote><p>Q：请问你们在构建的时候，你说有些需要半个小时左右，那么构建过程的进度监控和健康监控你们怎么做的呢，如果有build失败了怎么处理呢？</p></blockquote><p>A：CI的每一步都有进度的，并且我们的团队通讯工具可以和CI集成，如果失败会发消息到群里通知大家。</p><h2 id="QA-Gitlab"><a href="#QA-Gitlab" class="headerlink" title="QA Gitlab"></a>QA Gitlab</h2><blockquote><p>Q9：gitlab接收一个push event触发构建，这个是监控所有的分支吗，分支模型是怎么样的</p></blockquote><p>A：不是的，按需。我们内部分支模型大概有四种，dev——&gt;test——&gt;release——&gt;master。master以外的为了效率都会做自动触发</p><blockquote><p>Q11：为什么不直接用gitlab-runner 而接jenkins</p></blockquote><p>A：gitlab-runner 需要每个仓库都配置构建信息，当需要统一修改构建的时候很麻烦</p><blockquote><p>Q：持续集成系统具体的细节可以透露下吗？基于gitlab ci，jekins？或者小公司可以直接用Spinnaker 这些吗？</p></blockquote><p>A：ci cd的话因为我们有自己现有的发布平台，背后的原理实际上还是调用jenkins去处理</p><blockquote><p>Q：和gitlab ci相比有什么优势</p></blockquote><p>A： 和 gitlab ci 相比的优势可以参考下 jenkins 与 jenkins x的对比。在用户角度来说，以应用为视角使用起来会更加方便，也方便利用社区资源。从架构和可维护性来说，Jenkins X 的架构会相对更加先进（与诞生年代有直接关系)。</p><blockquote><p>Q： 目前我们使用的gitlab-ci-runner 部署于k8s之外实现ci/cd。发现gitlab-ci在实际使用中，经常会遇到卡死报错。请问下，相比jenkins 做ci/cd 是会有什么优势，之前并没有使用过jenkins.</p></blockquote><p>A：gitlab-ci生产环境中，我们也没有使用，我们调研的结果是1、有侵入性 2、pipeline功能较弱，但是有一个好处是遇到错误好像还可以继续执行。jenkins遇到错误会中断流程。</p><blockquote><p>Q：请问Jenkinswebhook那些构建参数如何传入GitLab触发？</p></blockquote><p>A：webhook的触发和界面参数会有一些区别，我们在脚本里面做了处理。</p><blockquote><p>Q：离线部署，是不是通过打出镜像压缩包，然后带着镜像包到现场部署的容器云平台上，上传部署的方式？</p></blockquote><p>A：是在家里打出镜像压缩包，然后到现场解压出来，根据镜像类型进行处理，比如一些基础镜像，会直接上传到节点，业务的镜像会在部署完成后上传到Harbor，然后节点从Harbor去拉取。</p><blockquote><p>Q：GitLab 自带的 CI 与Jenkins 和 GitLab 结合的 CI，该如何选择？想知道更深层次的理解。</p></blockquote><p>A：还是要结合自己团队的实际情况做选择。从成熟度来说，肯定是 Jenkins用户最多，成熟度最高，缺点是侧重 Java，配置相对繁琐。GitLab 自带的 CI相对简单，可以用 yaml，和 GitLab 结合的最好，但功能肯定没有 Jenkins全面。如果是小团队新项目，GitLab CI 又已经可以满足需求的话，并不需要上Jenkins，如果是较大的团队，又是偏 Java 的，个人更偏向 Jenkins。</p><blockquote><p>Q：有了Gerrit，为什么还要GitLab，Gerrit也可以托管代码啊？</p></blockquote><p>A：这个是有历史背景的，我们是先选择使用GitLab做代码托管，后期才加入Gerrit做code review。Gerrit在代码review方面比GitLab的merge request要方便许多，更适合企业内部使用。关于这个，我的想法是，要么将GitLab迁移到Gerrit，要么不用Gerrit，可以使用GitLab的merge request来进行review，那GitLab其实是可以不要的。</p><blockquote><p>Q：公司环境较复杂：包含Java项目、PHP项目，Java项目目前大多是SpringBoot框架，PHP是ThinkPHP框架，项目架构并不复杂，有少许Java项目需要用Redis到Memcached、缓存机制。最大问题的是多，项目应该如何较好的依托Kubernetes顺利架构，将项目可持续集成？</p></blockquote><p>A：我们的Redis这一类中间件还放在VM上，目前尚未打算搬移到Kubernetes上，Kubernetes+Docker天然是跨平台的，PHP也可以支持，并且对容器集群（既应用集群）管理非常出色，包含部分自动化运维，并不会因多种开发语言而增加负担，持续集成是另外一块，目前各大CI工具厂商也都支持Kubernetes，比较友好，我们采用的是GitLab-CI。</p><blockquote><p>Q：SonarQube的权限控制及性能当面？</p></blockquote><p>A：权限控制使用SonarQube提供的API，将项目跟GitLab中相应项目权限匹配起来，GitLab中可以查看这个项目代码，那么SonarQube中就能看到这个项目结果和Code。</p><blockquote><p>Q: 你们是直接将SonarQube、GitLab/Jenkins的权限控制到一起了？怎样做的统一？</p></blockquote><p>A：使用LDAP认证。</p><blockquote><p>Q：Git Checkout的时候，你们的Git SCM没有考虑隐私安全的事情吗，比如代码权限受限？</p></blockquote><p>A：Jenkins使用了一个最小权限用户去GitLab上拉代码。安全方面，Jenkins所有节点都是可控的。</p><blockquote><p>Q：Jenkins的持续集成是怎么实现的？比如不同的源码仓库的提交触发，如GitHub、GitLab版本号怎么控制的？</p></blockquote><p>A：Jenkins的CI流程触发可以有很多种，代码提交触发，定时触发，手动触发。版本号的控制也可以有很多方案，比如使用job的编号，使用Git的commit号，使用时间戳等等。</p><blockquote><p>Q：请问，我们是java项目，在业务代码打成war包后，war包很大的情况下，在发布流程中，如何完成pod中的容器的代码更新，是采用挂载代码后重启容器方式，还是采用每次重新构建代码镜像，直接更新容器，或者有什么更好的建议吗</p></blockquote><p>A：配置分离（上配置中心)，参数通过启动鉴权下载配置文件启动，这样子环境的更新只需要基于通过一个包即可。</p><blockquote><p>Q：一个Job生成所有的Docker镜像，如果构建遇到问题，怎么去追踪这些记录？</p></blockquote><p>A：在项目前期接入时，生成镜像的流程都作了宣传和推广。标准化的流程，会减少产生问题的机率。如果在构建中遇到问题，Prism4k的界面中，会直接有链接到本次建的次序号。点击链接，可直接定位到Console输出。</p><blockquote><p>Q：Job和dind如何配合去实现打包镜像的呢？</p></blockquote><p>A：首先是dind技术，通过挂载宿主机的docker client和dockersock，可以实现在容器内调用宿主机的Docker来做一些事情，这里我们主要就用于build。Kubernetes的Job则是用于执行这个构建worker的方式，利用Kubernetes的Job来调度构建任务，充分利用测试集群的空闲资源。</p><blockquote><p>Q：请问下Maven的settings.xml怎么处理？本地Maven仓库呢？</p></blockquote><p>A：我们构建了私有的 Maven 镜像， 私有镜像中是默认使用了我们的私有源。 对于项目中用户无需关注 settings.xml 中是否配置repo。</p><blockquote><p>Q：生成新的镜像怎么自动打新的tag？</p></blockquote><p>A：我们镜像Tag使用本次构建选定的Git版本，如分支名称或者Tag。</p><blockquote><p>Q： 如何动态生成Dockerfile，如何在Docker镜像里配置JVM参数？</p></blockquote><p>A：Dockerfile文件：我们是使用sh脚本生成的，将内容 &gt;&gt; Dockerfile中；JVM参数是在应用中配置的，发送构建消息时，作为消息内容送过去。</p><blockquote><p>Q：Docker 的正确的使用姿势，在本地环境已经构建了企业私有 Registry Harbor，那么我要构建基于业务的应用时，是先从 Linux 系列的像 Ubuntu 或 CentOS 的 Base 的 Docker 镜像开始，然后通过 Dockerfile 定制业务需求，来使用吗？</p></blockquote><p>A：我们基础镜像统一采用 CentOS 6.8，不同的业务有不同的 Dockerfile 模板，生成镜像的过程业务对 Dockerfile 是透明的。</p><blockquote><p>Q：使用Pipeline先构建编译环境镜像，再编译，是否会导致整个流程需要很长时间？是否有优化方案？</p></blockquote><p>A：编译镜像由于不会经常变动，因此这个镜像的构建通常使用cache就能直接完成，另外我们也把编译环境镜像打包这个步骤抽出来单独作为job执行了，这样在实际编译流程中就无需再进行编译环境构建。</p><blockquote><p>Q：Docker存储考虑过Overlay当时吗？据说这种构建镜像比较快。</p></blockquote><p>A：考虑过，当时也做过各个方面的测试，这种增量式的构建，肯定最快，但是我们需要有专人从源码级别对其进行维护，成本对于我们还是有点高，我们后期打算采用环境和代码分离的方式，即环境部署一次，代码多次部署来提升效率。</p><blockquote><p>Q：您提到不过分强调测试自动化，尽量不改变测试流程，那么对于自动构建和单元测试的自动化有没有考虑呢？毕竟这些是比较消耗人力的部分。</p></blockquote><p>A：自动构建我认为比较现实，单元测试有考虑。不过我们测试案例过于复杂，目前看短期实现不太现实。而且性能也是个问题，如果下一步要做我们会更多考虑一些特定场景。比如产品发布后的回归测试，这个有可能，但不会是普遍应用。</p><blockquote><p>Q：自动化构建过程中，对应用的测试是怎么实现的？</p></blockquote><p>A：单元测试可以在编译的时候完成，功能测试需要启动部署。</p><blockquote><p>Q：通过镜像的构建脚本是怎么生成镜像的？在基础镜像上执行相关脚本么？一些端口存储卷环境变量这些镜像中的信息是怎么解决的？</p></blockquote><p>A：我们对Dockerfile进行了封装，业务和开发人员不需要关心Dockerfile语法，直接写一个镜像构建脚本，最后根据一定的规则由Harbor生成Dockerfile，之后调用docker build去生成镜像。在这个过程中， 镜像的名称，版本都已经根据规则生成</p><blockquote><p>Q：在构建时候，这些环境可以提前安装好？</p></blockquote><p>A：应用里都有自己的版本概念，每个应用版本里有：镜像版本，环境变量、 export、Volmue等信息，所以在回退或者升级时候，最终的表现形式就是杀掉旧容器，根据版本的参数创建新容器。</p><blockquote><p>Q：请问构建一次平均要多长时间？</p></blockquote><p>A：现在Java、Dubbo、Python、go的多， 一般2分钟，而且有的镜像用户开启了自动构建后，在他们没意识的过程中，都已经构建完成。 到时候升级时候，选择对应的镜像版本即可。</p><blockquote><p>Q：App的每一次提交都是一个version吗，是不是每次构建完测试完成，就可以发布了？</p></blockquote><p>A：App 没有提交的概念，您说的应该是镜像，我们设计的是一个镜像对应一个Git仓库以及分支。当有push或者tag操作后，会自动触发构建，构建的行为是根据用户写的镜像构建shell脚本来决定的。 一般我们建议业务部门做出的镜像跟测试环境和生成环境没关系。 镜像就是镜像，只有应用有测试环境和生产环境。</p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;对于
        
      
    
    </summary>
    
    
      <category term="技术" scheme="https://blog.k8s.li/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="gitlab" scheme="https://blog.k8s.li/tags/gitlab/"/>
    
      <category term="CI/CD" scheme="https://blog.k8s.li/tags/CI-CD/"/>
    
      <category term="harbor" scheme="https://blog.k8s.li/tags/harbor/"/>
    
  </entry>
  
  <entry>
    <title>和蝉时雨的有趣笔谈</title>
    <link href="https://blog.k8s.li/with-chanshiyu-qa.html"/>
    <id>https://blog.k8s.li/with-chanshiyu-qa.html</id>
    <published>2020-04-04T16:00:00.000Z</published>
    <updated>2020-04-09T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="由来"><a href="#由来" class="headerlink" title="由来"></a>由来</h2><p>起初是咱看到 <a href="https://blog.yoitsu.moe" target="_blank" rel="noopener">萌狼</a> 写的 <a href="https://blog.yoitsu.moe/life/question_exchange_fiveyellowmice.html" target="_blank" rel="noopener">和 FiveYellowMice 交换问题！</a> 博客后就想着找几个友链里的友人来次类似的笔谈，但也是很纠结怕被拒绝唉，所以再三斟酌了一下就找到了咱博客里留言次数最多的友人 <a href="https://chanshiyu.com/#/" target="_blank" rel="noopener">蝉时雨</a> 来进行此次笔谈😂。</p><h2 id="QA"><a href="#QA" class="headerlink" title="QA"></a>QA</h2><h3 id="Q1：木子の独白？一句话介绍自己"><a href="#Q1：木子の独白？一句话介绍自己" class="headerlink" title="Q1：木子の独白？一句话介绍自己~"></a>Q1：木子の独白？一句话介绍自己~</h3><p>想了半天觉着这个问题估计是 10 个问题里最难的😂，挑几个 bio 来概括一下咱的组成吧😋：</p><p><strong>地球人、素食者、水果迷、电子前哨基金会成员、搬砖社畜、运维攻城狮。</strong></p><ul><li><p>地球人：因为这次武汉肺炎病毒疫情的影响，全世界都在遭受这场瘟疫的折磨，而我现实世界里周围的人却在幸灾乐祸地庆祝欧美国家感染人数越多越好。每听到身边的人对其他国家感人人数增多而幸灾乐祸地嘲笑，哎呀！咱气得跺脚啊！(掀桌儿。在极权专制国家，统治者为了维护其权力的合法性而进行意识形态控制住人民的思想，通过制造仇恨来塑造一个远在天边的敌人而让人民忘记身边的痛苦。咱就想：咱不做<code>赵</code>国人，做个地球人多好呀；如果人类能够抛弃国家和民族这种意识形态上的身份，都把人类当作这个孤独星球上的同胞，友好相处多好呀。</p></li><li><p>素食者：有时咱在想我们在大自然中索取了太多，同时又不断地破坏大自然的生态平衡。我们有义务为大自然去做出相应的补偿。我自己身体力行的做法就是做一个素食者，尽自己最大努力尊重和保护动物。我不是动物权利的倡导者，我这样做只是出于对大自然，对生命尊严的思考。汉密尔顿法则模型认为 rB &gt; C 是利他行为发生的原因，而这是动物的天性。其中 r 是施利者与受害者之间的关系，关系越好就越高、B 是受利者所能获得的利益、C是施利者所需付出的代价。所以两者关系越紧密，那么利他行为越容易发生。正是因为 r 很大这个原因，人类很少会把灵长类动物当作食物，也越来越少地把亲密的动物比如猫狗当作食物。而从 C 角度也就是人类的代价来看，人类拯救其他动物的利他行为，也和人类发展的程度有关，发展程度越高可以做到的事情也就越多，也就可以考虑更多的事情，而素食这样的事情并不需要付出极高的代价，这样的事情为什么不做呢?</p></li><li><p>水果迷：因为咱素食后就失去了很多美味食物，所以唯有水果才能满足咱的胃口啦，咱不挑食，基本上所有的水果咱都喜欢吃😋。葡萄🍇和草莓🍓可能更喜欢一点😂</p></li><li><p>电子前哨基金会成员：其实每个月给 EFF 捐赠就可以啦😂。自从咱大学毕业当了社畜开始搬砖之后，自己能赚一点小钱了，所以就每月给 EFF 电子前哨基金会捐赠 5$ 。因为 EFF 是一个具有领导地位的非盈利组织，致力于在数字世界捍卫公民自由。自由软件基金会和电子前线基金会一直是自由互联网世界里对抗 BIG BROTHER 的最前线，这种对抗不仅仅是在技术领域，法律领域也是如此。EFF 过去的 30 多年中，通过影响诉讼，政策分析，基层行动以及技术研发，捍卫用户隐私，言论自由以及创新。该基金会的试图通过努力保障，在技术进步的前提下，人们的自由和权力也受到相应的保护。虽然个人的捐赠对于总体来讲微乎其微，<strong>但无论整体结果如何，忠于原则的行为，都有其本身的道德价值，这一点非常重要。</strong> 咱坚信的道德价值就是：<strong>无论墙有多高，都不能放弃对自由互联网的追求</strong>，而捐赠支持像电子前哨基金会、维基媒体基金会、自由软件基金会、互联网档案馆等这些捍卫互联网自由的非营利性组织，正是在传播自由互联网的精神。</p></li></ul><h3 id="Q2：对时雨的初印象？"><a href="#Q2：对时雨的初印象？" class="headerlink" title="Q2：对时雨的初印象？"></a>Q2：对时雨的初印象？</h3><ul><li>可爱温柔 <strong>(<em>≧︶≦))(￣▽￣</em> )ゞ</strong>：</li></ul><p>咱第一次访问时雨的博客是汝在咱那篇<a href="https://blog.k8s.li/Kindle-Oasis2-vs-Paperwhite3.html">《Kindle Oasis 和 Kindle Paperwhite3 使用体验》</a> 客留言之后，咱才注意到时雨，因为之前很少会有人在咱博客多次留言。于是咱好奇地点开了时雨的博客，第一眼就惊呆了<strong>w(ﾟДﾟ)w</strong>。这也是咱见过的最有心的博客，被时雨的才能深深折服（商业胡吹😂。然后咱就翻遍了时雨的博客和 dispus 上的评论，想要认识一下时雨。不仅仅是博客的设计和主题，连文字都会带着可爱的<code>声音</code>。比如 <code>～</code> 和 <code>‗。‗</code> 等标点符号，仿佛就像文章的指纹，读起来就像有了声音一样神奇。咱好像也受汝的影响耶，慢慢地地喜欢加一些标点符号😂。</p><ul><li>诗意少年：</li></ul><blockquote><p>夏日众蝉鸣叫此起彼伏好似落雨，蝉儿们似要将仅存的的生命燃烧奏出最后的音符，绚烂与壮美中氤氲着沉寂与无常，是日本夏天最具代表性的季节物语之一。</p></blockquote><ul><li><p>善良热心：将自己写的博客主题开源分享出来，而且热心帮助他人怎么去食用 😋</p></li><li><p>心思细腻：通过汝的文章和流言可以猜测出，现实中比较内向不善表达，但心里活动丰富，想交流的话也很多的样子耶。</p></li></ul><p>以上就是咱对时雨的初印象啦😊</p><h3 id="Q3：喜欢什么类型的音乐？推荐一首单曲循环的歌？"><a href="#Q3：喜欢什么类型的音乐？推荐一首单曲循环的歌？" class="headerlink" title="Q3：喜欢什么类型的音乐？推荐一首单曲循环的歌？"></a>Q3：喜欢什么类型的音乐？推荐一首单曲循环的歌？</h3><ul><li><p>一些动画的 OP/ED/特典/BGM ，比如： 四月は君の嘘、 リズと青い鳥、 NARUTO -ナルト-、「日常」の合唱曲</p></li><li><p>单曲循环的：当然是咱最喜欢的「四月は君の嘘」オープニングテーマ『光るなら』啦😋</p></li></ul><h3 id="Q4：喜欢什么类型的书籍？对纸质书和电子书两种阅读方式的看法？"><a href="#Q4：喜欢什么类型的书籍？对纸质书和电子书两种阅读方式的看法？" class="headerlink" title="Q4：喜欢什么类型的书籍？对纸质书和电子书两种阅读方式的看法？"></a>Q4：喜欢什么类型的书籍？对纸质书和电子书两种阅读方式的看法？</h3><p>虽然各方面的书都有所涉猎，但更偏向于自然科学之类的书籍。因为这些书共同点就是满足自己的好奇心和求知欲，使自己更加清楚万事万物背后的自然真理，从而对大自然以及生命怀有崇高的敬意，这样才能明白人类的渺小和无知。</p><p>比如咱想知道木星上的那块能吞下地球的大红斑；咱想知道地球的内核时固态的还是液态的？地磁场如何形成，为什么地磁场会倒转？地球的生命起源以及几十亿年的生命进化历程；咱们人类的祖先智人从东非大裂谷走出后历经万年的迁移进化之旅？咱想知道细胞中的细胞器是如何进化而来的，以及它们之间如何分工合作的；DNA 如何控制基因表达以创造出与众不同的万物生灵。还有咱想知道古希腊城邦雅典文明；想知道金字塔如何建造以及古埃及法老追求永生赋予的意义是什么？想知道 NASA 探索太空的艰辛历程？想知道飞出星际空间的旅行者 1 号现在还好吗？</p><p><img src="img/image-20200404190616475.png" alt="image-20200404190616475"></p><p>总之虽然咱都已经是二十有五的人成年人了，但咱的心智还是和中小学生一样，长不大的好奇宝宝，想知道的事情还有很多很多。这一点咱和 <a href="https://twitter.com/Philo2018" target="_blank" rel="noopener">Philo</a> 有点像 😂，汝可以看看她写的 <a href="http://lulalap.com/2020/01/02/collection-of-interesting-ideas-2019/" target="_blank" rel="noopener">Philo的脑洞合集（2019）</a> 。而读这类书籍正是满足咱好奇心，汲取知识的海洋，这也是咱读书的原因。想起了法国博物学家 <a href="https://zh.wikipedia.org/wiki/%E5%B8%83%E4%B8%B0" target="_blank" rel="noopener">布丰</a> 在《自然史》书中的诗句：</p><blockquote><p>世界万物运转无止息，万物都在的世间洪流中相遇，在广袤无尽的空间中，以及物换星移的接轨瞬间，万物混成冥河，不拘任何形体，不拘任何被赋予的形象。因此，万事万物或相近，或远离，或合一，或分离或相容，或相斥，或生，或灭，恒久不变的，只有交互作用的力。恣意横行，却灵巧而不自伐，为宇宙燃起生命气息，让生命舞台上，无时无刻上演着新的戏码，写下生生不息，永无止境的诗篇。</p></blockquote><p>通过阅读这类书籍去和先贤哲人们交流，怀揣着懵懂的好奇心去感悟大自然的神奇和奥秘。</p><p>关于纸质书：咱喜欢的读书方式还是倾向于纸质书，因为书这种东西不仅仅是用来看上面的文字，也是用来调整自己感觉得工具。当手指触碰书页时的感觉和哗啦啦翻书的瞬间给神经的刺激是电子书无法替代的。而且咱读书的时候喜欢拿一支笔在书中有趣的地方乱涂乱画😂，写下自己的感悟和思考。喜欢把一些精美的片段摘抄在纸质摘抄本上，读书的思考笔记写在日记本上。大学的时候写了很多的摘抄本和日记，现在翻来看看有时觉着当初好幼稚😂。这个习惯自从毕业之后就废弃了，因为慢慢地习惯上在 kindle 上读书，摘抄和笔记也都是标注和打字的方式，仿佛失去了当初在大学时读书的那种纯真，有点遗憾，有时又想捡起这个习惯。</p><p>大学的时候咱读的基本上全是纸质书，整天泡图书馆里摸鱼😂。四年间买了不少书，毕业前捐赠给图书馆很大一部分，送给学弟学妹们一些，到最后还剩两麻袋的书不舍得仍就邮寄回家了。当时寄快递的时候费了很大的功夫，要送到三十公里外的物流园区，可把咱累坏了😑。从毕业之后就很少再买纸质书了，搬家的时候太不方便了，不想再体验第二次了😂，所以后来就慢慢习惯用 kindle 看书了。</p><p>kindle 电子书也是快要大四的时候才买的。再到去年的时候又换了 kindle oasis，带有物理翻页键，有了一种读纸质书时翻页的感觉，直到现在一直是咱每天必须要用到的睡前读物 + 催眠神器😂</p><p>电子书和纸质书只是文字的承载方式变了，只要我们专心认真地去读会就会缩小两种阅读方式之间的差距，我相信即便读电子书也是能和纸质书那样有同样的效果和体验。状态不好时，有时候会读不下去，这时候就要思考是什么干扰了读书，有些书即使在状态不好时也能顺利的看下去，这时候就想想为什么会这样。</p><p>电子书咱还是喜欢 kindle 这种简单的读书工具，没有杂七杂八的花架子。而手机上的 app 其实并不适合读书，比如微信读书等软件，他们除了读书功能以外还夹带社交功能，广告流量商业化也很令人作呕。我仅仅是纯粹地读个书而已，而这些软件却在社交和攀比虚荣。</p><p>而且咱用 kindle 读书，遇到喜欢的书一口气读一两个小时不中断可以轻轻松松地做到，而手机上和阅读无关的信息流太多，极容易被泛滥的信息所束缚住而用实际阅读，我相信很多人都无法做到坚持三十分钟不中断。这也是咱克制每天使用手机时长不超过一个小时的原因，咱使用 kindle 的时间是手机了两倍😂。有时候接受的信息太多也是一种束缚，使自己无法集中精力在重要的阅读上。</p><h3 id="Q5：对当今时代独立博客的发展与展望？"><a href="#Q5：对当今时代独立博客的发展与展望？" class="headerlink" title="Q5：对当今时代独立博客的发展与展望？"></a>Q5：对当今时代独立博客的发展与展望？</h3><p>木子为什么要写个人独立博客呐，我想当今国内局域网大规模删帖封号、信息封锁、愚民洗脑、公权造谣式辟谣的事情已经给出很明确的答案。</p><p>虽说各国都会有审查制度的存在，但天朝这种审查制度，是以人性改造为目的思想钳制，是作为欺骗手段的谎言宣传；是极权统治者将人民驯服为国家机器奴隶的工具。武汉肺炎病毒疫情已经过去一百多天，再看看现在的国内媒体舆论。早已经没了当初对谎报延误疫情的追究问责；早已经没了对李文亮医生被训诫背后言论自由和新闻自由的诉求；早已经没有了对红十字会的渎职的追责。现在主流的声音而是对美帝国主义的幸灾乐祸；对官僚体制无能腐败的掩饰；对权贵们不知羞耻的歌功赞德。更可怕的是，这台极权统治的机器现在在试图篡改这段记忆，去抹去他当初瞒报疫情的罪责，将病毒的源头转嫁到国外。而在这一切的背后，都是互联网这个工具在帮助极权统治者为虎作伥，只存在对他有利的声音而达到集体洗脑控制。也恰恰验证了“当媒体都姓党”时，“人民就被抛弃”了的现实。没有了媒体代表人民利益去公告事实的真相，剩下的就是人民的生命被病毒和体制的重病共同伤害的结果。</p><p>我不认为互联网封锁、流量垄断、言论审查是互联网该有的样子，互联网的创造和普及是我心目中人类有史以来最伟大的公益事业。维基百科和互联网档案馆以及知识共享社区他们借助互联网为全世界每一个人提供平等获取知识的权利，这些知识是我们全人类智慧文明的结晶，而在有些国家却在封锁维基百科，为什么要封杀维基百科，因为维基百科上客观存在的历史事实让统治者担惊受怕。我无法现象成长在 GFW 下的后辈们他们认为的互联网是什么样子？是像百度那样不羞耻地作恶，删帖封号是对的，言论审查是正当的？</p><p>好像有点跑题了😂对于（中文）独立博客的发展和未来，我是挺悲观的。因为墙越来越高了，而会翻墙的中学生或大学生又是极少数，剩下的都是些小粉红们，在 GFW 下成长起来的一代还明白自由互联网的精神吗？随着 GFW 的不断升级、GitHub 一次次遭受屏蔽、RSSHUB 也被封杀、国内的域名备案又进一步加强。这会逼退那些想要拥有独立博客的人开倒车回墙内，也许大多数想写博客的人都会放弃独立博客，转而投报微信公众号、知乎专栏、简书掘金、CSDN 博客园这类博客平台。毕竟他们垄断着国内信息获取的流量。在这些平台上甘愿自我审查和自我阉割，在自我心中树立一道墙。而最可怕的后果就是这类平台<strong>让能写文章的人好像成为了这个平台的一个写作的奴隶，而不是让他们的文章中的内容和观点可以有长时间的影响力。换言之，在社交网络上，如果你要有影响力，你就要使劲写，需要更多的粉丝和订阅者。我个人认为这是违反了信息传播规律的。</strong></p><p>对于独立博客，咱比较喜欢 <a href="https://coolshell.cn/haoel" target="_blank" rel="noopener">陈皓</a> 前辈写过的一篇文章 <a href="https://coolshell.cn/articles/17391.html" target="_blank" rel="noopener">《我为什么不在微信公众号写文章》</a></p><blockquote class="twitter-tweet"><p lang="zh" dir="ltr">同事开了微信公众号，发我二维🐎让我去关注一波。我直接一篇 <a href="https://twitter.com/haoel?ref_src=twsrc%5Etfw" target="_blank" rel="noopener">@haoel</a> 的《为什么我不在微信公众号上写文章》回绝了过去 😂，千辛万苦翻出来了干嘛还要开倒车回墙内🤔。<a href="https://t.co/NEyO9RucrV" target="_blank" rel="noopener">https://t.co/NEyO9RucrV</a></p>&mdash; HTTP 502 (@muzi_ii) <a href="https://twitter.com/muzi_ii/status/1238335413799890944?ref_src=twsrc%5Etfw" target="_blank" rel="noopener">March 13, 2020</a></blockquote> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script><p>我希望互联网能够持续公开透明可检索，所有人都可以在网络世界里自由和独立地表达自我。而言论审查、互联网封锁、流量垄断等等这不是万维网之父 <a href="https://zh.wikipedia.org/zh-cn/%E8%92%82%E5%A7%86%C2%B7%E4%BC%AF%E7%BA%B3%E6%96%AF-%E6%9D%8E" target="_blank" rel="noopener">蒂姆·伯纳斯-李</a> 前辈当初所创造的网络世界，也不是互联网之子 <a href="https://coolshell.cn/articles/11928.html" target="_blank" rel="noopener">亚伦·斯沃茨</a> 用生命去捍卫的赛博空间。</p><p>假若有人看到咱的博客，或许能改变他们，让他们也能加入到咱们中来。这也是咱写这个博客现在的动力吧。其实咱并不是很喜欢写技术相关的内容，就如鲁迅先生所言：学医救不了中国人一样😂。咱觉着咱写技术文章也救不了身边被真理部愚民洗脑的粉红们。所以咱觉着在读书和写博客的同时，咱更应该肩负起知识份子最应有的责任：<strong>传播常识让人摆脱无知，启人思考让人走出愚昧，揭露真相让人远离谎言。</strong></p><p>咱的博客就是咱的“另一半”，永远会守护着他。不过咱也在引导一些新人加入到独立博客中来，比如去年暑假的时候认识的一个小学弟，咱就教他一些搭建博客、买服务器、注册域名的方法，引导他也来写博客🤣。所以咱的博客写好了，也是对后辈们的一种指引，去指引他们在自由的互联网勇于传播自己的思想。</p><p>总之独立博客的前途还要我们共同努力，独立博客是咱们自己的小世界，就像时雨自己写的博客一样。精心打理呵护，像一件艺术品一样去雕琢它，这也是独立博客迷人之处，也正是像时雨这样开源分享的精神，会吸引更多的人加入到独立博客中来。独立博客上的文章只要域名和服务器还在，就会被搜索引擎检索到，不管多久它都会被需要它的人发掘到。</p><p><img src="img/image-20200404190715388.png" alt="image-20200404190715388"></p><p><img src="img/image-20200404190726626.png" alt="image-20200404190726626"></p><p>最后还想说的是，阿房宫的楼宇宫阁早已荡然无存，但杜牧的阿房宫赋却能流芳百世。书写能记载着我们的思想，并跨越时间和空前传播它们，但愿千百年后的互联网还能检索到咱曾经留下的闲言碎语。独立博客就像一艘小船，在自由的互联网航行，而我们彼此之间的连接，构筑成了一个独立的世界，这个世界里没有删帖封号，没有言论审查、没有互联网封锁，有的是不同的声音；有的是思想碰撞的火花；有的是自由的精神和独立的思想！</p><h3 id="Q6：木子最想获得的一份能力？"><a href="#Q6：木子最想获得的一份能力？" class="headerlink" title="Q6：木子最想获得的一份能力？"></a>Q6：木子最想获得的一份能力？</h3><p>目前来讲现实中最需要的是搬砖能力，比如：精通 K8s 、精通 Golang 编程 、精通 Linux😂 ，然后也能像时雨的 <a href="https://github.com/chanshiyucx/aurora" target="_blank" rel="noopener">Aurora</a> 那样，有个可以拿的出手的开源项目分享给大家。因为搬砖技术太菜了，面试了好几家公司都不要咱（大哭。咱不放弃，咱耶在努力学习ing，争取早一天离开这里，成功拿到心满意足的 offer ！</p><h3 id="Q7：对于-ACGN-的看法？"><a href="#Q7：对于-ACGN-的看法？" class="headerlink" title="Q7：对于 ACGN 的看法？"></a>Q7：对于 ACGN 的看法？</h3><p><code>此生无悔入东方，来世愿生幻想乡😂</code></p><p>首先想到的一个词时 <strong>纯粹</strong> ，ACGN 里面的作品和人物很少有三次元明星歌星那样的光环效应，一部作品口碑和一个人物角色塑造，都是全凭实力，没有杂七杂八的花架子。</p><p>中学时代曾追过火影忍者，直到高中毕业后的不久火影完结。这部动漫为高三枯燥的苦逼学习生活增添了一抹色彩，每周的周四晚自习后，咱就带头在班里公开放映，隔壁班里也会来很多人，凑在一起十来个人。恐怕当时也是全校唯一一个敢如此胆大妄为的班级了😂。那时，火影确实是咱每周的快乐调剂，没有它的高三是多么地无味。</p><p>再到后来上大学后，终于有了充足的时间来追番。这才真正意义上开始了解 ACGN ，大一大二的时候开始入宅，每天下课后都躲到宿舍追番，死肥宅一个😂。再到现在也会看一些漫画和轻小说，每季度追 1~2 部动画。毕竟每周有点盼头也是咱生活的乐趣呀。</p><p>至于游戏，咱不太会玩儿，手残党😂，虽然也想从中收获快乐，但是就是觉着游戏和咱还是不太般配。去年的时候玩过一点 <code>崩坏 3rd</code> 后来就弃坑了，因为从中找不到快乐！不如像看书和看漫画去思考这部作品表达信念那样有趣，总之游戏是好玩的一点，但却不像其他文化作品一样能够启发人们去思考一些事情。</p><p>总之 ACNG 也是我们成长中的老师，它们会伴随着我走完这一生，无论多久都不会忘记这份初心。</p><h3 id="Q8：对寄托于内心幻想世界的生活态度的看法？"><a href="#Q8：对寄托于内心幻想世界的生活态度的看法？" class="headerlink" title="Q8：对寄托于内心幻想世界的生活态度的看法？"></a>Q8：对寄托于内心幻想世界的生活态度的看法？</h3><p>内心幻想世界?莫非说的是咱😂(大雾。幻想、想想、思考，这三者占据了咱一天中除了工作时间以外的绝大多数的时间，只是比例不同而已。只要不影响正常的工作和学习，都可以呀，反正咱喜欢这样的生活态度，总比那些一天到晚只顾的捞钱，娱乐至死地刷短视频的生活态度要好呀。</p><p>咱中学时有过一段时间活在纯粹幻想的世界中(中二病，绝对的黑历史，从来没和他人提过😂。那时咱看了很多很多的玄幻/穿越/修真小说，加起来至少要 1000 万字吧(惊！主要是因为讨厌学习不想上学，上课时就幻想者和小说中的主人公一样在异世界修真打怪升级，幻想着女主角就是班里喜欢的那个女生😂。总之我感觉那段时间是活在白日梦中，为了逃避枯燥的学习而活在幻想的世界中。后来直到高中时也会在课上听不下去的时候幻想些别的。上大学之后就很少再幻想了，因为现实世界充实起来很少有时间幻想这些事儿了。</p><p>现在呢？有时也会幻想着以后的生活，幻想着将来如何整理自己的小窝和书房；幻想着和想见的人面对面讨论木星上的那块大红斑？幻想着像苹果之父 <a href="https://zh.wikipedia.org/wiki/%E6%96%AF%E8%92%82%E5%A4%AB%C2%B7%E6%B2%83%E5%85%B9%E5%B0%BC%E4%BA%9A%E5%85%8B" target="_blank" rel="noopener">沃兹</a> 的父亲那样教未来的儿子有关电子电阻的知识（因为看了 <a href="https://m.douban.com/book/subject/21966356/" target="_blank" rel="noopener">《沃兹传:与苹果一起疯狂》</a> ,父与子结对编程多好玩呀(大雾 。幻想着送未来的儿子去上学…… 幻想着很多未来的生活。不同于中学中二病时期的那样，现在的幻想多少给了点自己活下去的动力和希望吧，也许有些事情永远不会实现，但保持对未来的期待和幻想才让当下的生活才有意义呀。</p><p>思考和想象则赋予咱更多现实意义，书籍就如咱思考的源泉，而想象则是思想碰撞💥后的涟漪，就如 <a href="https://zh.wikipedia.org/zh-cn/%E5%AE%87%E5%AE%99%E6%97%B6%E7%A9%BA%E4%B9%8B%E6%97%85" target="_blank" rel="noopener">《宇宙时空之旅》</a> 里的想象之舟，带着咱从天文学知识到生命起源、气候变化、科学精神都一一探讨，足以改变人生观，让人在抬头仰望星空时，少一点迷信和无知，多一份好奇与关爱。</p><p><img src="img/image-20200404190442465.png" alt="image-20200404190442465"></p><p>但前提是不要影响到现实中的工作和学习哦，毕竟现实世界也很重要呀。自己的小世界要靠在现实世界里的付出才能维持住的，当完成现实世界里的任务就躲到自己的小世界里天马行空遨游星际。这才是我们作为人原本的生活态度呀，毛茹饮血的古人们晚上仰望星空时不正也在幻想我们正在幻想的宇宙嘛~</p><p>睡觉吧，梦里啥都有（偷笑</p><h3 id="Q9：木子如何在一个人的自由生活如何获得快乐调剂？"><a href="#Q9：木子如何在一个人的自由生活如何获得快乐调剂？" class="headerlink" title="Q9：木子如何在一个人的自由生活如何获得快乐调剂？"></a>Q9：木子如何在一个人的自由生活如何获得快乐调剂？</h3><p>主要是通过学习新知识和瞎折腾来满足好奇心和求知欲，在此过程中收获的知识是最美味的快乐调剂。</p><p>比如之前咱在去年的时候折腾过 <a href="https://blog.k8s.li/esp8266-pc-switch.html">《使用 ESP8266 NodeMCU 打造 WiFi 开关》</a>，当时咱对嵌入式开发一点都不熟悉，对逻辑电路也不太懂。自己就从零开始学习各种概念和原理，看了一些科普视频，那期咱终于理解了场效应管、放大器、三极晶体管、触发器、晶体管等原理，才体会到由 0 和 1 控制的电子世界的神奇！</p><blockquote class="twitter-tweet"><p lang="zh" dir="ltr">今天花了一整天，从零开始学习了 Arduino 编程，制作好了一个 WiFi 控制的继电器开关，这样在公司也能通过一个 curl 命令控制家里的主机开关啦！<br>由 0和1 控制的世界真神奇！ <a href="https://t.co/ubt8ncbK1z" target="_blank" rel="noopener">pic.twitter.com/ubt8ncbK1z</a></p>&mdash; HTTP 502 (@muzi_ii) <a href="https://twitter.com/muzi_ii/status/1175408986557779968?ref_src=twsrc%5Etfw" target="_blank" rel="noopener">September 21, 2019</a></blockquote> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script><blockquote><p>『我一直觉得，费马、欧拉、哥德巴赫等人与现代人相比，他们具有格外旺盛的好奇心和丰富的想象力，并且充满了生机与活力。随着社会发展的日益成熟，好奇心和想象力不可避免地不断降低，但并不代表现代社会不再需要好奇心和想象力。』</p></blockquote><blockquote class="twitter-tweet"><p lang="zh" dir="ltr">作为一个垃圾佬，当然要自己 xjb 捣鼓啦，折腾起来很有成就感😂<br>期间学到不少东西，GPIO 引脚定义、三极管的原理、继电器、ESP8266 电路图、通过命令行控制 USB 电源、Arduino IDE 、设备树、光耦隔离、AT 指令 、TCP/IP 、串口通信、波特率等<br>折腾的意义也就在于此吧，去探究电子世界如何运行的。</p>&mdash; HTTP 502 (@muzi_ii) <a href="https://twitter.com/muzi_ii/status/1175445308681015298?ref_src=twsrc%5Etfw" target="_blank" rel="noopener">September 21, 2019</a></blockquote> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script><p>咱刚毕业那会，自己一个人生活了一段时间，也是不知道怎么给自己找乐趣儿，整天也是很抑郁的。不过后来看了 <a href="https://twitter.com/Philo2018" target="_blank" rel="noopener">Philo</a> 分享的 <a href="https://twitter.com/Philo2018/status/1160151987654025218" target="_blank" rel="noopener">开一个 thread 分享 #如何变快乐</a> tweet 之后咱也试着改变自己的生活态度。也开始给自己找快乐，以前追不到自己喜欢的女生会闷闷不乐，但慢慢地转变了过来。自己想要快乐还是要自己制造，不能依赖于他人，没有必须要得到的东西，也没有不能无法失去的东西。只有自己不会抛弃自己，所以一个人的快乐要学会从自己身上发掘。好奇心促使着咱去发掘新鲜事物，去探索未知世界。</p><p>以上就是咱自己一个人<code>玩泥巴</code>时候的快乐调剂：<strong>好奇心和求知欲！</strong></p><h3 id="Q10：木子の心愿单？最想收到的一份礼物？"><a href="#Q10：木子の心愿单？最想收到的一份礼物？" class="headerlink" title="Q10：木子の心愿单？最想收到的一份礼物？"></a>Q10：木子の心愿单？最想收到的一份礼物？</h3><ul><li><p>未来能拥有属于自己的小窝和书房😁</p></li><li><p>《数学女孩4：随机算法》</p></li><li><p>《法律立法与自由》</p></li><li><p>《末日三问》</p><p><code>做一生的朋友券</code> 出自动画 <a href="https://bgm.tv/subject/9912" target="_blank" rel="noopener">日常 nichijou</a> 25 话😄</p></li></ul><p><img src="img/nichijo.png" alt="img"></p><h2 id="end"><a href="#end" class="headerlink" title="end"></a>end</h2><p>去掉了一些敏感信息，内容少有修改~~</p><blockquote><p>  每一个平凡的日常都是连续发生中的奇迹</p><p>  像这样种种微小的事情加起来，才形成了『当下』的我们啊</p></blockquote><p>汝想和咱以笔谈的方式交换问题，欢迎啦😂，咱会认真回复的）其实下一个人咱已经想好啦😂</p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;h2 id=&quot;由来&quot;&gt;&lt;a href=&quot;#由来&quot;
        
      
    
    </summary>
    
    
      <category term="生活" scheme="https://blog.k8s.li/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="life" scheme="https://blog.k8s.li/tags/life/"/>
    
      <category term="笔谈" scheme="https://blog.k8s.li/tags/%E7%AC%94%E8%B0%88/"/>
    
  </entry>
  
  <entry>
    <title>春季读书笔记</title>
    <link href="https://blog.k8s.li/spring-reading-note.html"/>
    <id>https://blog.k8s.li/spring-reading-note.html</id>
    <published>2020-03-27T16:00:00.000Z</published>
    <updated>2020-03-29T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>人与政权的斗争，就是记忆与遗忘的斗争。</p></blockquote><p>转眼间三月就结束了，一年走完了四分之一。因为疫情的影响，自己独自一人宅在住的地方一个多月，加上两周的春节假期，这期间空闲的时间特别多，所以阅读的时间也比较多，也正好周末有空就更新一下博客，记录一下。</p><h2 id="阅读记录"><a href="#阅读记录" class="headerlink" title="阅读记录"></a>阅读记录</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line">╭─debian@debian ~/Kindle</span><br><span class="line">╰─$ tree -d</span><br><span class="line">├── 2020-01-01-社会主义：经济学与社会学的分析</span><br><span class="line">├── 2020-01-01-自由与繁荣的国度</span><br><span class="line">├── 2020-01-01-论人类不平等的起源和基础</span><br><span class="line">├── 2020-01-02-娱乐至死</span><br><span class="line">├── 2020-01-02-技术垄断：文化向技术投降</span><br><span class="line">├── 2020-01-02-童年的消逝</span><br><span class="line">├── 2020-01-03-心里测量者</span><br><span class="line">├── 2020-01-04-论革命</span><br><span class="line">├── 2020-01-06-消逝的微生物</span><br><span class="line">├── 2020-01-07-风险社会：新的现代性之路</span><br><span class="line">├── 2020-01-10-人的境况</span><br><span class="line">├── 2020-01-10-康德的政治哲学</span><br><span class="line">├── 2020-01-10-自然史</span><br><span class="line">├── 2020-01-11-Booklist</span><br><span class="line">├── 2020-01-12-哈耶克法律哲学</span><br><span class="line">├── 2020-01-12-暗杀教室</span><br><span class="line">├── 2020-01-12-论法的精神</span><br><span class="line">├── 2020-01-15-大国崛起</span><br><span class="line">├── 2020-01-15-新常识：一党专政的性质与后果</span><br><span class="line">├── 2020-01-17-Happy-Suger-Life</span><br><span class="line">├── 2020-01-17-哈耶克社会理论</span><br><span class="line">├── 2020-01-17-地球脉动：前所未见的自然之美</span><br><span class="line">├── 2020-01-17-大国的崩溃：苏联解体的台前幕后</span><br><span class="line">├── 2020-01-18-通往奴役之路</span><br><span class="line">├── 2020-01-19-论国家的作用</span><br><span class="line">├── 2020-01-23-卢梭</span><br><span class="line">├── 2020-01-27-中国国家治理的制度逻辑：一个组织学研究</span><br><span class="line">├── 2020-01-27-盗火者：中国教育体制改革调查</span><br><span class="line">├── 2020-01-28-病毒星球</span><br><span class="line">├── 2020-01-28-病毒来袭</span><br><span class="line">├── 2020-01-28-血疫：埃博拉的故事</span><br><span class="line">├── 2020-01-30-哈耶克传</span><br><span class="line">├── 2020-02-05-远古的葱茏：古植物王国</span><br><span class="line">├── 2020-02-06-Carton</span><br><span class="line">├── 2020-02-06-古生物学简明教程</span><br><span class="line">├── 2020-02-06-政治秩序的起源</span><br><span class="line">├── 2020-02-06-朱钦士的个人博客</span><br><span class="line">├── 2020-02-07-上帝造人有多难：生命的密钥</span><br><span class="line">├── 2020-02-08-我的青春恋爱物语</span><br><span class="line">├── 2020-02-09-古拉格之恋：一个爱情与求生的真是故事</span><br><span class="line">├── 2020-02-09-古拉格群岛</span><br><span class="line">├── 2020-02-09-葛剑雄文集六：史迹记踪</span><br><span class="line">├── 2020-02-10-鲁迅全集</span><br><span class="line">├── 2020-02-12-永久记录</span><br><span class="line">├── 2020-02-12-大灭绝时代：一部反常的自然史</span><br><span class="line">├── 2020-02-13-牛津通识读本：地球</span><br><span class="line">├── 2020-02-13-远古的辉煌：生物大幅射</span><br><span class="line">├── 2020-02-14-国家建设与政府行为</span><br><span class="line">├── 2020-02-14-地球的故事</span><br><span class="line">├── 2020-02-16-生命活动的摇篮：细胞</span><br><span class="line">├── 2020-02-19-博客文章</span><br><span class="line">├── 2020-02-20-自私的基因</span><br><span class="line">├── 2020-02-21-红太阳</span><br><span class="line">├── 2020-02-24-地球脉动2：奇迹世界</span><br><span class="line">├── 2020-02-26-牛津通识读本：福柯</span><br><span class="line">├── 2020-02-29-J</span><br><span class="line">├── 2020-03-03-历史的终结</span><br><span class="line">├── 2020-03-04-极权主义的起源</span><br><span class="line">├── 2020-03-06-中国官僚政治研究</span><br><span class="line">├── 2020-03-07-一想到还有~</span><br><span class="line">├── 2020-03-07-华氏451</span><br><span class="line">├── 2020-03-11-这才是好读的数学史</span><br><span class="line">├── 2020-03-12-对本次疫情的反思</span><br><span class="line">├── 2020-03-12-张千帆：极权主义的构建</span><br><span class="line">├── 2020-03-12-徐贲：中国的“新极权主义”及其末世景象</span><br><span class="line">├── 2020-03-13-我無罪：劉曉波傳</span><br><span class="line">├── 2020-03-13-林愈靜</span><br><span class="line">├── 2020-03-14-Age of Ambition</span><br><span class="line">├── 2020-03-14-Amusing Ourselves to Death</span><br><span class="line">├── 2020-03-14-Permanent Record</span><br><span class="line">├── 2020-03-15-不能承受的生命之轻</span><br><span class="line">├── 2020-03-20-老钱文集：硅谷传奇</span><br><span class="line">├── 2020-03-22-笑忘书</span><br><span class="line">├── 2020-03-25-神奇的生物化学</span><br><span class="line">├── 2020-03-26-费马最终定理</span><br><span class="line">├── 2020-03-28-被讨厌的勇气</span><br><span class="line">├── 2020-03-29-艾希曼在耶路撒冷</span><br><span class="line">├── 2020-03-30-从一到无穷大</span><br><span class="line">└── 2020-03-30-如果历史是一群肥喵</span><br><span class="line"></span><br><span class="line">79 directories, 1181 files</span><br></pre></td></tr></table></figure><p>自从元旦的时候知道了 kindle 的截屏方法之后就一直将阅读过程中一些精彩的片段截屏下来，然后再移动到本地磁盘进行分类和整理。每一个文件对应一本书，前面在加上截屏时的时间，这样就能记录下整个阅读的时间线。原本只是将截屏的图片按照书名分类好，并没有加上日期。后来就写了个脚本自动加上了日期😂。这样还好，有个时间线来做参考~</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"></span><br><span class="line">set -xue</span><br><span class="line">for dir in $(ls | grep -v "\." | grep -Ev  "2019|2020")</span><br><span class="line">do</span><br><span class="line">    date=$(ls $&#123;dir&#125;/*.png |grep -Eo "[0-9][0-9][0-9][0-9]_[0-9][0-9]_[0-9][0-9]" | sed 's/_/-/g' | head -n1)</span><br><span class="line">    title=$(echo $&#123;dir&#125; | sed 's/ /-/g')</span><br><span class="line">    dir_name=$&#123;date&#125;-$&#123;title&#125;</span><br><span class="line">    mv $&#123;dir&#125; $&#123;dir_name&#125;</span><br><span class="line">done</span><br></pre></td></tr></table></figure><h2 id="读书进度"><a href="#读书进度" class="headerlink" title="读书进度"></a>读书进度</h2><h3 id="读完"><a href="#读完" class="headerlink" title="读完"></a>读完</h3><table><thead><tr><th align="center">书名</th><th align="center">作者</th><th align="center">日期</th><th align="center">时长</th><th align="center">进度</th></tr></thead><tbody><tr><td align="center">社会主义：经济学与社会学的分析</td><td align="center">[奥] 路德维希·冯·米瑟斯</td><td align="center">01-01</td><td align="center">10h</td><td align="center">100%</td></tr><tr><td align="center">论人类不平等的起源和基础</td><td align="center">[法]让-雅克·卢梭</td><td align="center">01-01</td><td align="center">5h</td><td align="center">100%</td></tr><tr><td align="center">心理测量者</td><td align="center">[日]深真见</td><td align="center">01-03</td><td align="center">6h</td><td align="center">100%</td></tr><tr><td align="center">新常识：一党专政的性质和后果</td><td align="center">张雪忠</td><td align="center">01-15</td><td align="center">4h</td><td align="center">100%</td></tr><tr><td align="center">地球脉动：前所未见的自然之美</td><td align="center">[英]阿拉斯泰尔·福瑟吉尔</td><td align="center">01-22</td><td align="center">4h</td><td align="center">100%</td></tr><tr><td align="center">论科学与艺术</td><td align="center">让-雅克·卢梭</td><td align="center">01-21</td><td align="center">2h</td><td align="center">100%</td></tr><tr><td align="center">社会契约论 (译林人文精选)</td><td align="center">让-雅克·卢梭</td><td align="center">01-23</td><td align="center">4h</td><td align="center">100%</td></tr><tr><td align="center">中国国家治理的制度逻辑：一个组织学研究</td><td align="center">周雪光</td><td align="center">01-28</td><td align="center">8h</td><td align="center">100%</td></tr><tr><td align="center">病毒星球</td><td align="center">[美]卡尔·齐默</td><td align="center">01-28</td><td align="center">4h</td><td align="center">100%</td></tr><tr><td align="center">病毒来袭</td><td align="center">[美]内森•沃尔夫</td><td align="center">01-29</td><td align="center">2h</td><td align="center">100%</td></tr><tr><td align="center">远古的葱茏：古植物王国</td><td align="center">周志炎</td><td align="center">02-05</td><td align="center">4h</td><td align="center">100%</td></tr><tr><td align="center">古生物学简明教程</td><td align="center">朱才伐</td><td align="center">02-06</td><td align="center">3h</td><td align="center">100%</td></tr><tr><td align="center">上帝造人有多难：生命的密钥</td><td align="center">朱钦士</td><td align="center">02-07</td><td align="center">6h</td><td align="center">100%</td></tr><tr><td align="center">朱钦士的个人博客</td><td align="center">朱钦士</td><td align="center">02-08</td><td align="center">8h</td><td align="center">100%</td></tr><tr><td align="center">远古的辉煌：生物大幅射</td><td align="center">戎嘉余</td><td align="center">02-13</td><td align="center">6h</td><td align="center">100%</td></tr><tr><td align="center">牛津通识读本：地球</td><td align="center">[英]马丁·雷德芬</td><td align="center">02-13</td><td align="center">6h</td><td align="center">100%</td></tr><tr><td align="center">生命活动的摇篮：细胞</td><td align="center">王耀发</td><td align="center">02-16</td><td align="center">4h</td><td align="center">100%</td></tr><tr><td align="center">地球脉动2：奇迹世界</td><td align="center">胡·科里</td><td align="center">02-24</td><td align="center">3h</td><td align="center">100%</td></tr><tr><td align="center">一想到还有百分之九十五的问题~</td><td align="center">豪尔赫•陈</td><td align="center">03-07</td><td align="center">4h</td><td align="center">100%</td></tr><tr><td align="center">历史的终结及最后之人</td><td align="center">[美]弗朗西斯·福山</td><td align="center">03-03</td><td align="center">10h</td><td align="center">100%</td></tr><tr><td align="center">我無罪：劉曉波傳</td><td align="center">余杰</td><td align="center">03-13</td><td align="center">8h</td><td align="center">100%</td></tr><tr><td align="center">神奇的生物化学</td><td align="center">神奇的生物化学</td><td align="center">03-23</td><td align="center">4h</td><td align="center">100%</td></tr><tr><td align="center">费马最终定理</td><td align="center">[日]日冲樱皮</td><td align="center">03-26</td><td align="center">3h</td><td align="center">100%</td></tr><tr><td align="center">被讨厌的勇气</td><td align="center">岸見一郎</td><td align="center">03-28</td><td align="center">4h</td><td align="center">100%</td></tr></tbody></table><h3 id="在读"><a href="#在读" class="headerlink" title="在读"></a>在读</h3><table><thead><tr><th align="center">书名</th><th align="center">作者</th><th align="center">日期</th><th align="center">时长</th><th align="center">进度</th></tr></thead><tbody><tr><td align="center">Age of Ambition</td><td align="center">Evan Osnos</td><td align="center">03-13</td><td align="center">4h</td><td align="center">8%</td></tr><tr><td align="center">从一到无穷大</td><td align="center">乔治·伽莫夫</td><td align="center">03-30</td><td align="center">-</td><td align="center">-</td></tr><tr><td align="center">极权主义的起源</td><td align="center">[德] 汉娜·阿伦特</td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center">自由秩序原理</td><td align="center">弗里德里希·哈耶克</td><td align="center"></td><td align="center"></td><td align="center"></td></tr></tbody></table><h3 id="暂时弃坑"><a href="#暂时弃坑" class="headerlink" title="暂时弃坑"></a>暂时弃坑</h3><table><thead><tr><th align="center">书名</th><th align="center">作者</th><th align="center">日期</th><th align="center">进度</th><th></th></tr></thead><tbody><tr><td align="center">生命中不能承受之輕</td><td align="center">米蘭·昆德拉</td><td align="center">03-15</td><td align="center">40%</td><td></td></tr><tr><td align="center">笑忘书</td><td align="center">米蘭·昆德拉</td><td align="center">03-22</td><td align="center">40%</td><td></td></tr><tr><td align="center">血疫：埃博拉的故事</td><td align="center">理查德·普雷斯顿</td><td align="center">02-01</td><td align="center">20%</td><td></td></tr><tr><td align="center">华氏451</td><td align="center">雷·布雷德伯里</td><td align="center">04-07</td><td align="center">30%</td><td></td></tr><tr><td align="center">消失的微生物：滥用抗生素引发的危机</td><td align="center">［美］马丁•布莱泽</td><td align="center">01-06</td><td align="center">10%</td><td></td></tr><tr><td align="center">古拉格之恋</td><td align="center">奥兰多·费吉斯</td><td align="center">02-09</td><td align="center">10%</td><td></td></tr><tr><td align="center">论国家的作用</td><td align="center">洪堡</td><td align="center">01-19</td><td align="center">30%</td><td></td></tr><tr><td align="center">鲁迅全集</td><td align="center">鲁迅</td><td align="center">02-10</td><td align="center">5%</td><td></td></tr><tr><td align="center">自私的基因</td><td align="center">理查德·道金斯</td><td align="center">02-20</td><td align="center">30%</td><td></td></tr><tr><td align="center">国家建设与政府行为</td><td align="center">周雪光</td><td align="center">02-14</td><td align="center">40%</td><td></td></tr><tr><td align="center">盗火者：中国教育革命静悄悄</td><td align="center">邓康延 梁罗兴</td><td align="center">01-23</td><td align="center">20%</td><td></td></tr><tr><td align="center">大国崛起</td><td align="center">唐晋</td><td align="center">01-16</td><td align="center">50%</td><td></td></tr></tbody></table><h2 id="笔记"><a href="#笔记" class="headerlink" title="笔记"></a>笔记</h2><h3 id="社会主义：经济学与社会学的分析"><a href="#社会主义：经济学与社会学的分析" class="headerlink" title="社会主义：经济学与社会学的分析"></a>社会主义：经济学与社会学的分析</h3><p><img src="https://cdn.jsdelivr.net/gh/muzi502/blog/sourchttps://cdn.jsdelivr.net/gh/muzi502/blog/sourchttps://cdn.jsdelivr.net/gh/muzi502/blog/sourchttps://cdn.jsdelivr.net/gh/muzi502/blog/sourchttps://cdn.jsdelivr.net/gh/muzi502/blog/source/img/screenshot_2020_01_01T12_33_41+0800.png" alt="img"></p><p>这本书是今年读的第一本书，这本书可以和哈耶克的《通往奴役之路》结合着读。本书出版于 1922 年，分别从多个领域（政治、经济、文化、伦理、宗教…）论述了社会主义必定失败的悲惨结局，对当时的社会尤其青年学生来讲冲击相当的大，那时候 CCP 刚刚成立才 1 年哦。</p><p>先说一下作者，路德维希·冯·米塞斯作为“<a href="https://zh.wikipedia.org/wiki/奧地利經濟學派" target="_blank" rel="noopener">奥地利经济学派</a>的院长”，现代<a href="https://zh.wikipedia.org/wiki/自由意志主義" target="_blank" rel="noopener">自由意志主义</a>运动的主要领导人，也是<a href="https://zh.wikipedia.org/wiki/古典自由主義" target="_blank" rel="noopener">古典自由主义</a>第一把交椅，其影响力不言而喻。他的学生更是青出于蓝胜于蓝：弗里德里希·冯·哈耶克、弗里茨·马克卢普、戈特弗里德·冯·哈伯勒、奥斯卡·摩根斯坦、威廉·勒普克、理查德·冯·施特里戈尔、艾尔弗雷德·舒茨、费里克斯·考夫曼、埃里克·沃格林、格奥尔格·哈尔姆、保罗·罗森斯坦-罗丹、莱昂内尔·罗宾斯。在他的学生当中，哈耶克获诺贝尔经济学奖，弗里茨·马克卢普、戈特弗里德·冯·哈伯勒曾先后任美国经济学会会长。</p><blockquote><p>我们感到，我们成长于其中的那个文明已经崩溃。我们立志建设一个更美好的世界，而正是这种再造社会的渴望，鞭策我们投身经济学研究。社会主义许诺给我们一个更加理性、更加公正的世界。此时，《社会主义》问世了，我们的信念坍塌了。《社会主义》对我们说，我们的方向错了。</p></blockquote><p>可以结合着哈耶克的书来读，这本书告诉我们的是：<strong>社会主义是通往奴役之路</strong> 。</p><p><code>摘抄</code> <a href="https://t.co/mSj0qay7jW" target="_blank" rel="noopener">社会主义：经济学与社会学的分析</a></p><blockquote><p>米塞斯在书中分别从多个领域（政治、经济、文化、伦理、宗教…）对【各种流派】的社会主义进行猛烈批判。其抨击的火力之猛，实属罕见。</p></blockquote><p>另外推荐读一下 <a href="https://program-think.blogspot.com/2018/09/Book-Review-The-Errors-of-Marxism-Leninism.html" target="_blank" rel="noopener">为什么马克思是错的？——全面批判马列主义的知名著作导读</a> 。</p><blockquote><p>作者<a href="https://zh.wikipedia.org/wiki/路德維希·馮·米塞斯" target="_blank" rel="noopener">路德维希·冯·米塞斯</a>是奥地利学派的干将，并对同一学派的哈耶克有重大影响。在哈耶克的很多著作和理论中，都可以看到米塞斯的影子。<br>　　米塞斯的成就长期被学术界忽视（甚至是排斥）。一方面是他的理论太超前，另一方面是他的性格太激烈——与人交流时总是一针见血，不留情面，毫不顾忌他人感受。<br>　　说到【超前性】，他可能是经济学界最早意识到“【博弈论】重要性”的那个人（时间是20世纪初期）。几十年后，与冯·诺依曼共同发表划时代论文《博弈论与经济行为》的那个摩根斯坦（前面俺提过此人），就是米塞斯的学生。</p></blockquote><h3 id="论人类不平等的起源和基础"><a href="#论人类不平等的起源和基础" class="headerlink" title="论人类不平等的起源和基础"></a>论人类不平等的起源和基础</h3><p><img src="https://cdn.jsdelivr.net/gh/muzi502/blog/sourchttps://cdn.jsdelivr.net/gh/muzi502/blog/sourchttps://cdn.jsdelivr.net/gh/muzi502/blog/sourchttps://cdn.jsdelivr.net/gh/muzi502/blog/sourchttps://cdn.jsdelivr.net/gh/muzi502/blog/source/img/screenshot_2020_01_01T18_23_18+0800.png" alt="img"></p><p>这本书是我在看心理测量者动画的时候提到的，在看小说的时候也见到过。于是就拿来读了一下，<code>Kindle Unlimited</code>  的会员可以在 Amazon 商店免费借阅到。《论人类不平等起源和基础》是卢梭应法国第戎科学院的征文而撰写的第二论文，第一篇论文是《论科学与艺术的复兴是否有助于使风俗日趋纯朴》。</p><p>在书中，卢梭阐发了自身的政治哲学，为《社会契约论》的写作奠定了基础。卢梭将人类历史的发展过程视作进步与退化的矛盾统一体。他一方面借助当时有关自然状态下人的人类学材料，一方面展开辩证的想象，回顾了人类由自然状态向社会状态过渡的历史进程，指出人类的进步史同时也是人类的堕落史，因为人类每向前发展一步，不平等的程度即加深一步。而私有制的确立，是造成人类不平等及其后果的关键环节。</p><p>正是这样的假设，使人们得以明白“我们并非生来如此”，只是“已然如此”。既然处于自然状态下的人类只是一个抽象化的形象，即一种“无”的境界，那么我们当然不能说卢梭的目的是让人类回到这个本就不存在的形象了。他只是企图以这个“无”的境界为起点，向人们展示出人类是如何一步步变成现在的样子，从而进一步思考，要想摆脱现在的困境，我们所需要做出的努力。本文为我们提供的反思就像那高速路上的缓冲带，只有停留在缓冲带上的那一秒钟，人类才终于真正地思考。</p><p><img src="https://blog.k8s.lhttps://cdn.jsdelivr.net/gh/muzi502/blog/sourchttps://cdn.jsdelivr.net/gh/muzi502/blog/sourchttps://cdn.jsdelivr.net/gh/muzi502/blog/sourchttps://cdn.jsdelivr.net/gh/muzi502/blog/sourchttps://cdn.jsdelivr.net/gh/muzi502/blog/source/img/image-20200106182021903.png" alt="image-20200106182021903"></p><p><code>摘抄</code> <a href="https://t.co/oTmpnrHLKS" target="_blank" rel="noopener">论人类不平等的起源和基础</a></p><h3 id="心里测量者"><a href="#心里测量者" class="headerlink" title="心里测量者"></a>心里测量者</h3><p><img src="https://cdn.jsdelivr.net/gh/muzi502/blog/sourchttps://cdn.jsdelivr.net/gh/muzi502/blog/sourchttps://cdn.jsdelivr.net/gh/muzi502/blog/sourchttps://cdn.jsdelivr.net/gh/muzi502/blog/sourchttps://cdn.jsdelivr.net/gh/muzi502/blog/source/img/screenshot_2020_01_03T10_49_43+0800.png" alt="img"></p><p>读后感可以参见 <a href="https://blog.k8s.li/PSYCHO-PASS-booklist.html">PSYCHO-PASS 心理测量者小说读后感</a>，弃坑两个月了才写了一点😐。</p><p>这部改编自动漫的小说基本上还原了整个第一部动画完整的剧情，总之也是关于一个如何构建人类社会题材的小说。小说中也提到了很多书籍，也有网友总结了一份心理测量者中提到的书籍，书单如下:</p><p><strong>政治/哲学/心理学/社会学</strong></p><table><thead><tr><th>书名</th><th>作者</th></tr></thead><tbody><tr><td>《论道德的谱系 善恶之彼岸》</td><td>弗里德里希·尼采</td></tr><tr><td>《悲剧的诞生》</td><td>弗里德里希·尼采</td></tr><tr><td>《查拉图斯特拉如是说》</td><td>弗里德里希·尼采</td></tr><tr><td>《论人与人之间不平等的起因和基础》</td><td>让·雅克·卢梭</td></tr><tr><td>《社会契约论》</td><td>让·雅克·卢梭</td></tr><tr><td>《思想录》</td><td>布莱兹·帕斯卡尔</td></tr><tr><td>《大众的反叛》</td><td>奥尔特加·加塞特</td></tr><tr><td>《经济与社会》</td><td>马克思·韦伯</td></tr><tr><td>《道德与立法原理导论》</td><td>杰里米·边沁</td></tr><tr><td>《探求真理的指导原则》</td><td>勒内·笛卡尔</td></tr><tr><td>《哲学原理》</td><td>勒内·笛卡尔</td></tr><tr><td>《致死的疾病》</td><td>索伦·克尔凯郭尔</td></tr><tr><td>《非此即彼》</td><td>索伦·克尔凯郭尔</td></tr><tr><td>《被背叛的革命》</td><td>托洛茨基</td></tr><tr><td>《乌合之众》</td><td>古斯塔夫·勒庞</td></tr><tr><td>《纯粹理性批判》</td><td>伊曼努尔·康德</td></tr><tr><td>《论法的精神》</td><td>孟德斯鸠</td></tr><tr><td>《形而上学伦》</td><td>伏尔泰</td></tr><tr><td>《拿破仑法典》</td><td></td></tr><tr><td>《资本论》</td><td>卡尔·马克思</td></tr><tr><td>《规训与惩罚：监狱的诞生》</td><td>福柯</td></tr><tr><td>《当尼采在哭泣》</td><td>欧文·亚隆</td></tr><tr><td>《战争论》</td><td>卡尔·冯·克劳塞维茨</td></tr><tr><td>《黑皮肤，白面具》</td><td>弗朗茨·法农</td></tr><tr><td>《追寻生命的意义》</td><td>维克多·E·弗兰克尔</td></tr></tbody></table><p><strong>反乌托邦文学</strong></p><table><thead><tr><th>书名</th><th>作者</th></tr></thead><tbody><tr><td>《一九八四》</td><td>乔治·奥威尔</td></tr><tr><td>《动物农场》</td><td>乔治·奥威尔</td></tr><tr><td>《美丽新世界》</td><td>赫胥黎</td></tr><tr><td>《我们》</td><td>扎米亚京</td></tr><tr><td>《这完美的一天》</td><td>艾拉·莱文</td></tr></tbody></table><p><strong>戏剧文学</strong></p><table><thead><tr><th>《第十二夜》</th><th>莎士比亚</th></tr></thead><tbody><tr><td>《泰特斯·安德洛尼克斯》</td><td>莎士比亚</td></tr><tr><td>《麦克白》</td><td>莎士比亚</td></tr><tr><td>《斐多篇》</td><td>柏拉图</td></tr><tr><td>《黑暗的心》</td><td>康拉德</td></tr><tr><td>《预先被背叛的革命》</td><td>岩上安身 （无中文版）</td></tr><tr><td>《少数派报告》</td><td>菲利普·迪克</td></tr><tr><td>《机器人会梦见电子羊吗》</td><td>菲利普·迪克</td></tr><tr><td>《神经漫游者》</td><td>威廉·吉布森</td></tr><tr><td>《捍卫机密》</td><td>威廉·吉布森</td></tr><tr><td>《格列佛游记》</td><td>乔纳森·斯威夫特</td></tr><tr><td>《追忆似水年华》</td><td>马塞尔·普鲁斯特</td></tr><tr><td>《克苏鲁神话》</td><td>洛夫克拉夫特</td></tr><tr><td>《克苏鲁神话II》</td><td>洛夫克拉夫特</td></tr><tr><td>《再见了，电影》</td><td>寺山修司</td></tr><tr><td>《幻想图书馆》</td><td>寺山修司</td></tr><tr><td>《道林格雷的画像》</td><td>奥斯卡·王尔德</td></tr><tr><td>《钢窟》</td><td>艾萨克·阿西莫夫</td></tr><tr><td>《寂静的春天》</td><td>蕾切尔·卡森</td></tr><tr><td>《忏悔录》</td><td>让·雅克·卢梭</td></tr><tr><td>《理想国》</td><td>柏拉图</td></tr><tr><td>《和谐》</td><td>伊藤计划</td></tr></tbody></table><p>其中卢梭的书也是我看了这部小说之后才开始读的，还有一本是福柯的《规训与惩罚：监狱的诞生》，剩余价值那期被封杀的节目里罗新老师也提到过这本书。马克思·韦伯的书在《中国国家治理的制度逻辑：一个组织学研究》中提到不少，尤其是关于官僚政治的，而且马克思·韦伯还和前文提到的路德维希·冯·米塞斯也是一对学术上的好基友。</p><p><code>摘抄</code> <a href="https://t.co/gp1upTv3IK" target="_blank" rel="noopener">心里测量者</a></p><h3 id="新常识：一党专政的性质与后果"><a href="#新常识：一党专政的性质与后果" class="headerlink" title="新常识：一党专政的性质与后果"></a>新常识：一党专政的性质与后果</h3><p>这本书是张雪忠教授写的，写作风格和张千帆、许章润、张维迎他们一样。比较喜欢这样的老师，关于张雪忠教授，维基百科上有一段：</p><blockquote><p>2013年5月，张雪忠首先在网络公开一份中国官方的“<a href="https://zh.wikipedia.org/wiki/七不讲" target="_blank" rel="noopener">七不讲</a>”的内部材料的内容。其后得到其他学者和教授的证实。“七不讲”是中共中央在2013年在意识形态领域的指令，确定七个领域为禁区：<a href="https://zh.wikipedia.org/wiki/普世价值" target="_blank" rel="noopener">普世价值</a>、<a href="https://zh.wikipedia.org/wiki/新闻自由" target="_blank" rel="noopener">新闻自由</a>、<a href="https://zh.wikipedia.org/wiki/公民社会" target="_blank" rel="noopener">公民社会</a>、<a href="https://zh.wikipedia.org/wiki/公民权利" target="_blank" rel="noopener">公民权利</a>、中国共产党的历史错误、<a href="https://zh.wikipedia.org/wiki/权贵资产阶级" target="_blank" rel="noopener">权贵资产阶级</a>、<a href="https://zh.wikipedia.org/wiki/司法獨立" target="_blank" rel="noopener">司法独立</a>。随后“七不讲”成为网络禁词，张的新浪微博再次被删号。<a href="https://zh.wikipedia.org/wiki/张雪忠#cite_note-rfa2-6" target="_blank" rel="noopener">[6]</a></p></blockquote><p>这一件事不得报道、那一本书不得出版、这句话不能讲，删贴封号等，表面上言论审查是在侵犯言论自由，但实质上却是在贬低全体国民的人格和尊严。言论审查完全是在向全体国民宣告：“你们这帮屁民根本就没有资格了解这件事情的真相，也没有资格去思考和辨别信息的真假。”，价值判断的标准由真理部说了算。一个人与一头猪的最大区别，就在于人具有猪所没有的理智，而言论审查恰恰是在剥夺人们自由运用理智的资格，也就是尽量缩小人与猪之间的差别。专制统治者确实希望国民忘记自己是有理智的动物，并能像猪一样容易满足，只需有足以果腹的食物，就会对统治者感恩戴德。</p><blockquote><p>全体国民作为主权者组建政府并选任执政者，本是为了更好地保护自己的生命、财产和自由。政府的目的和执政者的使命，是保护主权者本来就享有的权利和自由，而不是赐予主权者本来不享有的权利和自由。执政者认为国民的权利和追求幸福的机会，是源于自己的赏赐，就像子女认为父母的存在是出于自己的意志一样荒谬和悖理。</p></blockquote><p>此次疫情还尚未结束，歌功赞德的号角已经吹响了，呵呵，真他妈可笑。所以，为什么有个小学生在给方舱医院唱赞歌，也就不难理解了😂</p><blockquote><p><strong>剩余价值：</strong> 李海鹏之前发了一条微博，大概是说，一个举国体制的隐患到最后可能又会变成一个举国体制的胜利。<br><strong>罗新：</strong>历史学者认为，在西方，你看到所有的战争、灾难性的革命或者是体制性的崩溃，其后果可能是引起了一波新的历史上升期。比如美国在经济大萧条之后，经济反而有所回升，反而开通了一条向上爬的新的道路。但是研究者也发现，在东方不一定是这样，灾难之后可能是更大的灾难，更大的灾难后面还有更大的灾难，引发灾难的那些因素不仅得不到修正，还得到了加强化。这是我们要注意的。人们说，都发生了这么大的事，我们该不该反思了？要小心，可能没有反思，可能是强化。</p></blockquote><p>到现在没有了追究问责，就连进驻武汉对李文亮医生事件的调查结果也是一纸空文苍白无力，甚至那些纪念李文亮医生的人也被喝茶问候。目前存在的也只有像《大国战疫》这样对权贵歌功赞德的声音，对美帝国主义的敌忾同仇……唉，一场灾难变成了一场举国体制的胜利，是我们的悲哀也是全世界的悲哀。</p><p>想起了 《1984》 里的一段话，或许用极权主义来解释当下最适合不过了：<strong>极权最有效的统治术是仇恨教育，塑造一个远在天边的外在敌人，人们就会忘记身边的痛苦。</strong></p><p><code>摘抄</code> <a href="https://t.co/1vyK1t0NMr" target="_blank" rel="noopener">新常识：一党专政的性质与后果</a></p><h3 id="地球脉动：前所未见的自然之美"><a href="#地球脉动：前所未见的自然之美" class="headerlink" title="地球脉动：前所未见的自然之美"></a>地球脉动：前所未见的自然之美</h3><p><img src="https://cdn.jsdelivr.net/gh/muzi502/blog/sourchttps://cdn.jsdelivr.net/gh/muzi502/blog/sourchttps://cdn.jsdelivr.net/gh/muzi502/blog/sourchttps://cdn.jsdelivr.net/gh/muzi502/blog/sourchttps://cdn.jsdelivr.net/gh/muzi502/blog/source/img/screenshot_2020_01_17T08_00_05+0800.png" alt="img"></p><p><code>摘抄</code> <a href="https://t.co/gjRzZG1OqC" target="_blank" rel="noopener">地球脉动：前所未见的自然之美</a></p><h3 id="《社会契约论》"><a href="#《社会契约论》" class="headerlink" title="《社会契约论》"></a>《社会契约论》</h3><p><img src="https://cdn.jsdelivr.net/gh/muzi502/blog/sourchttps://cdn.jsdelivr.net/gh/muzi502/blog/sourchttps://cdn.jsdelivr.net/gh/muzi502/blog/sourchttps://cdn.jsdelivr.net/gh/muzi502/blog/sourchttps://cdn.jsdelivr.net/gh/muzi502/blog/source/img/screenshot_2020_01_23T08_56_10+0800.png" alt="img"></p><p>按照卢梭的第一篇论文《论科学与艺术的复兴是否有助于使风俗日趋纯朴》和第二篇论文《论人类不平等的起源和基础 》的分析，人本来是纯朴善良的，由于有缺陷的社会制度，生活于社会中的人才变坏，并堕入罪恶的深渊。由文明引发的问题必须通过新的政治组织形式来加以克服。《社会契约论》要做的工作是，通过建立一个健全的社会政治制度，帮助人们恢复自然良善（natural goodness）。</p><p>什么样的社会政治制度才是健全的呢？这就要追问一个核心问题：正义与合法的政治秩序及其基础是什么？《社会契约论》所有其他的问题均是从这里生发出来，并与之关联在一起的。《社会契约论》共有四卷，第一卷讨论的是合法的政治秩序的基础；第二卷讨论的主题是法律和立法；第三卷的主题是普遍意志运用于特定情形即政府的机制；第四卷，这一卷以对罗马的政治制度的描述为核心内容，以此来探讨政治共同体的凝聚力问题，最后以公民宗教结束全书。</p><p>《社会契约论》的核心思想就是<strong>合法的国家必须根据普遍意志来进行管理，即已提出</strong>。《爱弥儿》背后的一个基本预设是：没有文化做支撑，制度是没有办法有效运行的。因此，最重要的任务是：通过教育，将“人”转变为“公民”，像爱弥儿一样的公民。唯其如此，普遍意志才有可能，正义而合法的政治秩序才有可能。</p><p>所以卢梭的这几本书连贯性很强，推荐都读完才能理解卢梭的政治哲学思想。</p><p><code>摘抄</code> <a href="https://kindle.502.li/" target="_blank" rel="noopener">社会契约论</a></p><h3 id="中国国家治理的制度逻辑：一个组织学研究"><a href="#中国国家治理的制度逻辑：一个组织学研究" class="headerlink" title="中国国家治理的制度逻辑：一个组织学研究"></a>中国国家治理的制度逻辑：一个组织学研究</h3><p><img src="https://cdn.jsdelivr.net/gh/muzi502/blog/sourchttps://cdn.jsdelivr.net/gh/muzi502/blog/sourchttps://cdn.jsdelivr.net/gh/muzi502/blog/sourchttps://cdn.jsdelivr.net/gh/muzi502/blog/sourchttps://cdn.jsdelivr.net/gh/muzi502/blog/source/img/screenshot_2020_01_27T22_54_06+0800.png" alt="img"></p><p>这本书是春节的时候在家读完的，较之于张雪忠教授的《新常识：一党专政的性质和后果》，周雪光从组织学角度来进行分析中共国家治理得逻辑。对于这次得疫情来讲，再一次印证了书中所阐释的内容。<strong>即一统体制与有效治理：中国国家治理的一个深刻矛盾</strong>。不做过多评论，此书如同推特上的一些人推荐一样，很适合当下去看看，去分析一下这个官僚体制是多么地腐败和无能。就如《心理测量者》中所说的，<strong>我们始终承担着政府强加给我们的风险</strong>，这是权力集中化的必然结果。那些已经集中起来的权力绝对不会因为他美好的愿景而变得无害。那些死在武汉肺炎病毒之外的人不正是我们每个人都要承担的风险吗？</p><p>在专制国家，权力不受约束的统治者，是普遍的政府腐败和各种社会问题的根由，也是人类文明社会最大的<code>病毒</code> 。也正是正是这个腐败无能的官僚体制欺上瞒下、删帖封号、维稳抓人、封杀言论、拘留记者、抓捕律师、造谣式辟谣等等作恶行为才导致的全球疫情大爆发。其实这些时刻伴随着我们，只不过是这次的病毒将这个体制的一个阴暗面揭露了出来而已，它腐烂到根里已经很久很久……</p><p>在极权主义体制下，国家一方面用意识形态蛊惑和麻醉人民，另一方面又用利用国家机器限制社会内部的直接交往，使之保持有利于国家控制的“原子化”状态。基于国家的绝对权力和整个社会的非结构化，国家能够根据自己的意志发起任何行动，包括政治或社会运动。这次的<code>疫情防卫战疫</code>不就是这个官僚体制发起的政治运动嘛？感染死亡人数作假，公信力不断地丧失。你能在这本书里找到很好的解释，书中也提到过上级来视察的时候，地方政府如何忽悠中央，以及各种权利关系之间如何共谋达到<strong>上有政策下有对策的</strong>。</p><p>『卡理斯玛权威的核心是，领袖以其超凡禀赋而得到追随者的拥戴和服从；而领袖则通过不断地创造“奇迹”来显示其超凡禀赋，以延续和强化这一合法性基础。 在经过了战争动荡，民生凋敝，丧权辱国的民族危机之后，中国大地有期冀奇迹、崇尚伟人的卡理斯玛权威的肥沃土壤。』</p><p>『任何挑战卡理斯玛权威的话语都会弱化甚至瓦解其合法性基础，因此话语垄断权是维系卡理斯玛权威的关键所在。建国以后，国家逐步通过官僚体制介入、控制以至垄断意识形态相关的领域，有效地杜绝了质疑或挑战卡理斯玛权威的潜在可能性』 这也是言论审查的根本原因吧，维护统治者的权力合法性。</p><p>在政治运行过程中，我们不难看到地方政府的各种做法（如在拆迁、严打、城管、信访等等过程中的具体所为）常常与法律条文相悖。地方政府的这些做法在很大程度上增强了基层政府解决实际问题的能力，但与此同时，它们不断地侵蚀弱化法治基础和法理观念。</p><p><code>摘抄</code> <a href="https://t.co/tl1mmh7z3t" target="_blank" rel="noopener">中国国家治理的制度逻辑：一个组织学研究</a></p><h3 id="病毒星球"><a href="#病毒星球" class="headerlink" title="病毒星球"></a>病毒星球</h3><p><img src="https://cdn.jsdelivr.net/gh/muzi502/blog/sourchttps://cdn.jsdelivr.net/gh/muzi502/blog/sourchttps://cdn.jsdelivr.net/gh/muzi502/blog/sourchttps://cdn.jsdelivr.net/gh/muzi502/blog/sourchttps://cdn.jsdelivr.net/gh/muzi502/blog/source/img/screenshot_2020_01_28T22_03_02+0800.png" alt="img"></p><p>极为简短的一本科普，大概用了两个小时的时间就读完了。主要科普了一下病的性质以及入侵人体细胞的机理等。感觉读起来海星吧，没有太多精彩的地方，就像回顾了一下高中生物学。</p><p><code>摘抄</code> <a href="https://t.co/Op5GTfaOch" target="_blank" rel="noopener">病毒星球</a></p><h3 id="病毒来袭"><a href="#病毒来袭" class="headerlink" title="病毒来袭"></a>病毒来袭</h3><p><img src="https://cdn.jsdelivr.net/gh/muzi502/blog/sourchttps://cdn.jsdelivr.net/gh/muzi502/blog/sourchttps://cdn.jsdelivr.net/gh/muzi502/blog/sourchttps://cdn.jsdelivr.net/gh/muzi502/blog/sourchttps://cdn.jsdelivr.net/gh/muzi502/blog/source/img/screenshot_2020_01_28T22_03_47+0800.png" alt="img"></p><p>感觉没《病毒星球》要好一些，总之推荐前一本。</p><p><code>摘抄</code> <a href="https://t.co/kfTZIY7Zt0" target="_blank" rel="noopener">病毒来袭</a></p><h3 id="血疫：埃博拉的故事"><a href="#血疫：埃博拉的故事" class="headerlink" title="血疫：埃博拉的故事"></a>血疫：埃博拉的故事</h3><p><img src="https://cdn.jsdelivr.net/gh/muzi502/blog/sourchttps://cdn.jsdelivr.net/gh/muzi502/blog/sourchttps://cdn.jsdelivr.net/gh/muzi502/blog/sourchttps://cdn.jsdelivr.net/gh/muzi502/blog/sourchttps://cdn.jsdelivr.net/gh/muzi502/blog/source/img/screenshot_2020_01_28T22_02_45+0800.png" alt="img"></p><p>看完了纪录片，书籍就看了 20% ，推荐先看完书再去看纪录片。</p><p><code>摘抄</code> <a href="https://kindle.502.li/" target="_blank" rel="noopener">血疫：埃博拉的故事</a></p><h3 id="远古的葱茏：古植物王国"><a href="#远古的葱茏：古植物王国" class="headerlink" title="远古的葱茏：古植物王国"></a>远古的葱茏：古植物王国</h3><p><img src="https://cdn.jsdelivr.net/gh/muzi502/blog/sourchttps://cdn.jsdelivr.net/gh/muzi502/blog/sourchttps://cdn.jsdelivr.net/gh/muzi502/blog/sourchttps://cdn.jsdelivr.net/gh/muzi502/blog/sourchttps://cdn.jsdelivr.net/gh/muzi502/blog/source/img/screenshot_2020_02_05T20_28_57+0800.png" alt="img"></p><p>这本书主要讲了植物的起源、光合作用、叶绿体、孢子生殖以及一些远古时期的生态环境等。总之对于咱这种对古生物学感兴趣的来说算是一顿科普盛宴，学到很多知识耶，极大得满足了咱的好奇心😂。</p><p><code>摘抄</code> <a href="https://t.co/5KOfa96qlr" target="_blank" rel="noopener">远古的葱茏：古植物王国</a></p><h3 id="古生物学简明教程"><a href="#古生物学简明教程" class="headerlink" title="古生物学简明教程"></a>古生物学简明教程</h3><p><img src="https://cdn.jsdelivr.net/gh/muzi502/blog/sourchttps://cdn.jsdelivr.net/gh/muzi502/blog/sourchttps://cdn.jsdelivr.net/gh/muzi502/blog/sourchttps://cdn.jsdelivr.net/gh/muzi502/blog/sourchttps://cdn.jsdelivr.net/gh/muzi502/blog/source/img/screenshot_2020_02_06T13_52_57+0800.png" alt="img"></p><p>课本教材，枯燥、只是了解了一下基本的概念，感觉我不适合读这种枯燥的课本(￣▽￣)”</p><p><code>摘抄</code> <a href="https://t.co/G6oMMnAAji" target="_blank" rel="noopener">古生物学简明教程</a></p><h3 id="朱钦士的个人博客"><a href="#朱钦士的个人博客" class="headerlink" title="朱钦士的个人博客"></a>朱钦士的个人博客</h3><p><img src="https://cdn.jsdelivr.net/gh/muzi502/blog/sourchttps://cdn.jsdelivr.net/gh/muzi502/blog/sourchttps://cdn.jsdelivr.net/gh/muzi502/blog/sourchttps://cdn.jsdelivr.net/gh/muzi502/blog/sourchttps://cdn.jsdelivr.net/gh/muzi502/blog/source/img/screenshot_2020_02_17T23_10_27+0800.png" alt="img"></p><p>这并不是一本书，而是我在 <a href="http://blog.sciencenet.cn/home.php?mod=space&uid=582158" target="_blank" rel="noopener">朱钦士 </a>博士的个人博客上复制下来整理成的电子书，在 kindle 上读起来比较方便。对于只具备高中生物知识得咱来说，读起朱院士写的文章还是有些吃力的，感觉这基本上就是论文的注释版。里面的一些学术用语有很多都不懂，只能自己搜索了解一下。讲到了真核生物的起源，以及动物细胞和植物细胞的起源。咱们人类（动物）是从单鞭毛的原生生物领鞭毛虫（Choanoflagellate）演化而来，而植物则由双鞭毛原生生物中的双星藻（Zygmematales）演化而来，原来咱的祖先是只鞭毛虫😂？</p><p>真核细胞是怎样形成的呢，朱院士解释为：真核细胞是先获得线粒体，再发展出细胞核。线粒体的出现给真核生物带来充足能源的同时，也带来了内含子的入侵。为蛋白质编码的基因中内含子的出现，又迫使细胞形成细胞核以把DNA和核糖体分隔开来。这大概就是真核细胞出现的根本原因。其它的改变都是在这个基础上进行的。转录和蛋白质合成必须在空间上分开，而这正是细胞核的作用。细胞核的膜能够防止完整的核糖体进入细胞，而mRNA在剪接完成前，又不会离开细胞核，这样核糖体能够接触的，就只能是加工完毕的 mRNA。</p><p>总之对于生命科学感兴趣的可以去读读朱院士的博客，如果汝想要咱制作好的电子书私信咱即可。</p><p><code>摘抄</code> <a href="https://t.co/50HX5FvBPk" target="_blank" rel="noopener">朱钦士的个人博客</a></p><h3 id="上帝造人有多难：生命的密钥"><a href="#上帝造人有多难：生命的密钥" class="headerlink" title="上帝造人有多难：生命的密钥"></a>上帝造人有多难：生命的密钥</h3><p><img src="https://cdn.jsdelivr.net/gh/muzi502/blog/sourchttps://cdn.jsdelivr.net/gh/muzi502/blog/sourchttps://cdn.jsdelivr.net/gh/muzi502/blog/sourchttps://cdn.jsdelivr.net/gh/muzi502/blog/sourchttps://cdn.jsdelivr.net/gh/muzi502/blog/source/img/screenshot_2020_02_07T11_54_34+0800.png" alt="img"></p><p>读完了朱院士的博客上的文章，就像打开了我的好奇心潘多拉魔盒，越来越像知道关于生命科学的知识，就在 Amazon 上搜了一下他的书，还真的有一本，就 get 到啦。</p><blockquote><p>这是一本从分子细胞尺度上讲解生命奥秘的科普小书。用平实浅显的语言解释了复杂生命系统的一些基本知识。 让我了解了人体是由60万亿个细胞组成的复杂系统，蛋白质对生命体的重要意义，了解了所有生物从分子层面上是基本一致的、具有共同的祖先。书中解释了先有蛋再有鸡的结论，解释了对牛弹琴的科学依据。给这些“千古奇案”以“科学定论”。还有很多平时我们体会到了但是没有深想的生命现象，作者都给出了有意思的描述和解释。 最后一章解释了神经系统的复杂程度，让我从生物学意义上了解了时下大热的人工智能深度学习技术的生物学基础。 不过，最后一章在全书中占了大约四分之一的篇幅，个人感觉用力不均。我是跳着看了些片段。 然而瑕不掩瑜，对于生物学小白来说，会让你入迷的。感谢作者！</p></blockquote><p>看这本书和他的博客一样精彩，另外还出了另一本书《生命通史》，看了一下目录和他博客里写的内容及其相似，等到以后再买本纸质版的看。想起来了大学时曾读过的一本书《生命的跃升》，我觉着二者之间比较相似。</p><p><code>摘抄</code> <a href="https://t.co/tjOSuGPhu7" target="_blank" rel="noopener">上帝造人有多难：生命的密钥</a></p><h3 id="牛津通识读本：地球"><a href="#牛津通识读本：地球" class="headerlink" title="牛津通识读本：地球"></a>牛津通识读本：地球</h3><p><img src="https://cdn.jsdelivr.net/gh/muzi502/blog/sourchttps://cdn.jsdelivr.net/gh/muzi502/blog/sourchttps://cdn.jsdelivr.net/gh/muzi502/blog/sourchttps://cdn.jsdelivr.net/gh/muzi502/blog/sourchttps://cdn.jsdelivr.net/gh/muzi502/blog/source/img/screenshot_2020_02_13T16_03_07+0800.png" alt="img"></p><p>牛津通识读本系列的书籍大概有三十几本，在 Amazon 上 Kindle Unlimited 会员是可以免费借阅。基本上都是一些一两百页子。这本关于地球科普小册子简单地介绍了一下地球的地球的形成、内核、地磁场、火山运动等知识。总之读起来可以满足一下自己的好奇心啦😋</p><p><code>摘抄</code> <a href="https://t.co/ExJxAKtv8d" target="_blank" rel="noopener">牛津通识读本：地球</a></p><h3 id="远古的辉煌：生物大幅射"><a href="#远古的辉煌：生物大幅射" class="headerlink" title="远古的辉煌：生物大幅射"></a>远古的辉煌：生物大幅射</h3><p><img src="https://cdn.jsdelivr.net/gh/muzi502/blog/sourchttps://cdn.jsdelivr.net/gh/muzi502/blog/sourchttps://cdn.jsdelivr.net/gh/muzi502/blog/sourchttps://cdn.jsdelivr.net/gh/muzi502/blog/sourchttps://cdn.jsdelivr.net/gh/muzi502/blog/source/img/screenshot_2020_02_13T16_02_25+0800.png" alt="img"></p><p><code>摘抄</code> <a href="https://t.co/zU8WXIDMKJ" target="_blank" rel="noopener">远古的辉煌：生物大幅射</a></p><h3 id="国家建设与政府行为"><a href="#国家建设与政府行为" class="headerlink" title="国家建设与政府行为"></a>国家建设与政府行为</h3><p><img src="https://cdn.jsdelivr.net/gh/muzi502/blog/sourchttps://cdn.jsdelivr.net/gh/muzi502/blog/sourchttps://cdn.jsdelivr.net/gh/muzi502/blog/sourchttps://cdn.jsdelivr.net/gh/muzi502/blog/sourchttps://cdn.jsdelivr.net/gh/muzi502/blog/source/img/screenshot_2020_02_14T23_23_38+0800.png" alt="img"></p><p>读完《中国国家治理的制度逻辑：一个组织学研究》后在 Amazon 上搜索周雪光作者找到的书。与其说是一本书，其实更像是一册研究中国官僚体制的论文集，从学术角度来分析一些体制问题。</p><blockquote><p>作为所有权力集于一身的中央政府，主要需要完成两项基本任务：一是为广大百姓提供基本的公共服务，维持政权的长期稳定；二是保证下放给行政代理人的权力不被滥用，中央的政令能够畅通无阻。这两项任务本质上是冲突的：一方面，为了给广大百姓更好地提供公共服务，就必须尽可能把权力下放给基层政府，因为基层政府相对来说更了解当地民众对公共服务的偏好，更了解当地的具体条件；从公共服务的角度，集权者应该尽可能选择分权。另一方面，给定下级政府的官员目标和利益不同于中央政府，下级官员的行为不易监督，权力下放就意味着权力被滥用的危险，甚至被架空，而且权力下放越是到基层，监督就越困难，权力被滥用的威胁也就越大。</p><p>当政府默许或鼓励下级政府因地制宜时，后者可能按自己意图解读实施政策，随着政策实施过程的展开，执行灵活性越来越大，与这一主线的偏差距离越来越大，导致与原政策相去甚远的结果。</p></blockquote><p>结合这次疫情，不难理解为什么地方政府擅自封路封城的举措，即便这些举措已经明显地违反了法律（国务院颁布的规定），即便是因为封路而造成人员意外身亡，即便是一家四口在家打麻将也要被拉上街被<code>批斗</code>……中央政府也不会处罚地方政府。在这次疫情中，地方政府的一些行为已经违反了宪法，简称违宪行为，而所谓的<code>红袖章</code>仗着点手中的特权肆意侵犯着公民的权力。就如剩余价值被封杀的那期中罗新老师提到的：</p><blockquote><p>我们现在听很多人大谈<strong>战时状态</strong>，但随便一个行政官员就能够宣布”战时状态”吗？这必须是要经过最高立法机构决定的。封城或者诸如此类的极端措施带来的伤害，一定会比病毒本身还要大。</p></blockquote><p><code>摘抄</code> <a href="https://t.co/7oYY1ZTdAL" target="_blank" rel="noopener">国家建设与政府行为</a></p><h3 id="地球脉动2：奇迹世界"><a href="#地球脉动2：奇迹世界" class="headerlink" title="地球脉动2：奇迹世界"></a>地球脉动2：奇迹世界</h3><p><img src="https://cdn.jsdelivr.net/gh/muzi502/blog/sourchttps://cdn.jsdelivr.net/gh/muzi502/blog/sourchttps://cdn.jsdelivr.net/gh/muzi502/blog/sourchttps://cdn.jsdelivr.net/gh/muzi502/blog/sourchttps://cdn.jsdelivr.net/gh/muzi502/blog/source/img/screenshot_2020_02_24T14_42_00+0800.png" alt="img"></p><p><code>摘抄</code> <a href="https://t.co/qlnVJv7trg" target="_blank" rel="noopener">地球脉动2：奇迹世界</a></p><h3 id="历史的终结"><a href="#历史的终结" class="headerlink" title="历史的终结"></a>历史的终结</h3><p><img src="https://cdn.jsdelivr.net/gh/muzi502/blog/sourchttps://cdn.jsdelivr.net/gh/muzi502/blog/sourchttps://cdn.jsdelivr.net/gh/muzi502/blog/sourchttps://cdn.jsdelivr.net/gh/muzi502/blog/sourchttps://cdn.jsdelivr.net/gh/muzi502/blog/source/img/screenshot_2020_02_25T19_30_49+0800.png" alt="img"></p><p><code>摘抄</code> <a href="https://t.co/OQfS3drfyk" target="_blank" rel="noopener">历史的终结</a></p><h3 id="一想到还有百分之九十五的问题留给人类-我就放心了"><a href="#一想到还有百分之九十五的问题留给人类-我就放心了" class="headerlink" title="一想到还有百分之九十五的问题留给人类,我就放心了"></a>一想到还有百分之九十五的问题留给人类,我就放心了</h3><p><img src="https://cdn.jsdelivr.net/gh/muzi502/blog/sourchttps://cdn.jsdelivr.net/gh/muzi502/blog/sourchttps://cdn.jsdelivr.net/gh/muzi502/blog/sourchttps://cdn.jsdelivr.net/gh/muzi502/blog/sourchttps://cdn.jsdelivr.net/gh/muzi502/blog/source/img/screenshot_2020_03_07T00_11_25+0800.png" alt="img"></p><p><code>摘抄</code> <a href="https://t.co/HX1EXtz2oZ" target="_blank" rel="noopener">一想到还有百分之九十五的问题留给人类,我就放心了</a></p><h3 id="我無罪：劉曉波傳"><a href="#我無罪：劉曉波傳" class="headerlink" title="我無罪：劉曉波傳"></a>我無罪：劉曉波傳</h3><p>这本书是我在 <a href="https://twitter.com/linyujing" target="_blank" rel="noopener">林愈靜</a> 立场新闻的文章里上发现的。之前我是知道刘晓波是诺贝尔和平奖得主，也知道他的一些事迹，但通过这本传记才真真切切地了解到刘晓波是一位多么伟大而坚强的知识份子。包括独立中文笔会的发展，都离不开刘晓波先生的付出。凄凄惨惨的半生，别无可言……</p><blockquote><p>劉曉波承認：「類似的殘忍行為以及對殘忍的自得其樂，我小時候沒少幹。這種行為與專門打砸搶、揪鬥別人的紅衛兵沒有什麼實質的區別。我們這些人，在一種野蠻的制度和教育之下長大，它崇尚暴力、培養仇恨、鼓勵殘忍、縱容無情，教給孩子們一種從娘胎裡帶出來的不拿人當人的殘暴兇狠。在視生命如草芥的年代，我們都在不同的程度上充當過劊子手和幫兇，誰也脫不掉責任，洗不清自己！」</p></blockquote><blockquote><p>我的整個青春期生長於文化沙漠之中，我所賴以寫作的文化滋養，除了仇恨、暴力、狂妄，就是說謊、無賴、犬儒，這些黨文化的毒素餵養了整整幾代人，我便是其中之一，即便在思想解放的八○年代，也並沒有完全擺脫黨文化。</p></blockquote><p>自八九六四之后到 2009 年末，二十年间，刘晓波先生写的文章在 <a href="http://www.liu-xiaobo.org" target="_blank" rel="noopener">刘晓波刘霞网站</a> 上，可以找到。我用脚本爬了一下，在这二十年间刘晓波先生写下了不下于 1500 篇文章，平均每周至少写一篇。二十年来，还有哪个知识份子谁能做到？</p><blockquote><p><strong>我堅守著二十年前我在〈「六二」絕食宣言〉中所表達的信念──我沒有敵人，也沒有仇恨。</strong></p></blockquote><p>我想诺贝尔和平奖是对这句话最完美的诠释</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">http://www.liu-xiaobo.org/blog/archives/8696</span><br><span class="line">http://www.liu-xiaobo.org/blog/archives/8620</span><br><span class="line">http://www.liu-xiaobo.org/blog/archives/8091</span><br><span class="line">http://www.liu-xiaobo.org/blog/archives/8093</span><br><span class="line">http://www.liu-xiaobo.org/blog/archives/8625</span><br><span class="line">http://www.liu-xiaobo.org/blog/archives/8096</span><br><span class="line">http://www.liu-xiaobo.org/blog/archives/8098</span><br><span class="line">╭─root@blog /home/ubuntu/page</span><br><span class="line">╰─# cat url.log | wc</span><br><span class="line">   1502    1502   67907</span><br></pre></td></tr></table></figure><blockquote><p>劉曉波強調了言論自由的重要性：「一個政權不可能靠壓抑不同政見來建立合法性，也不可能靠文字獄來達成長治久安。」他呼籲中國早日告別文字獄：「只有從制度上根絕文字獄，憲法所規定的言論自由權利才能落實到每一位國民身上；只有當國民的言論自由權利得到制度化的現實保障，文字獄才會在中國大地上滅絕。」</p></blockquote><p><code>摘抄</code> <a href="https://t.co/eefs4gZspV" target="_blank" rel="noopener">我無罪：劉曉波傳</a></p><h3 id="Age-of-Ambition"><a href="#Age-of-Ambition" class="headerlink" title="Age of Ambition"></a>Age of Ambition</h3><p><img src="https://cdn.jsdelivr.net/gh/muzi502/blog/sourchttps://cdn.jsdelivr.net/gh/muzi502/blog/sourchttps://cdn.jsdelivr.net/gh/muzi502/blog/sourchttps://cdn.jsdelivr.net/gh/muzi502/blog/sourchttps://cdn.jsdelivr.net/gh/muzi502/blog/source/img/screenshot_2020_03_14T22_17_43+0800.png" alt="img"></p><p><code>摘抄</code> <a href="https://t.co/uvCqxbUb0i" target="_blank" rel="noopener">Age of Ambition</a></p><h3 id="费马最终定理"><a href="#费马最终定理" class="headerlink" title="费马最终定理"></a>费马最终定理</h3><p><img src="https://cdn.jsdelivr.net/gh/muzi502/blog/sourchttps://cdn.jsdelivr.net/gh/muzi502/blog/sourchttps://cdn.jsdelivr.net/gh/muzi502/blog/sourchttps://cdn.jsdelivr.net/gh/muzi502/blog/sourchttps://cdn.jsdelivr.net/gh/muzi502/blog/source/img/screenshot_2020_03_26T23_45_47+0800.png" alt="img"></p><p>日系狗粮小说🐕，第一次读这本书还是大三的时候，<del>那时候咱刚刚开始了人生的第一次初恋，并把这本书送给了前女友</del>🤣。同样的小说还有《数学女孩》，后者的评价很高，但想要通过小说来学习数学是痴心妄想啦。嘛，小说就是兴趣读物，给这些枯燥会色的数学公式增加一点色彩~~</p><p>虽然对于数学来讲，咱木子简直是个学脆😭，高考数学考了 60 几分，这也让咱与名牌大学失之交臂，只能去读第六级本科院校😑，多少有点遗憾吧。不过纳，对于那些枯燥无比的计算公式求积分解微分方程等，咱更喜欢知道数学这本学科背后的历史：想知道牛顿和莱布尼茨之间的撕逼大战，想知道伯努力家族的恩仇怨恨，想知道笛卡尔与公主的爱情故事，想知道欧拉奋笔疾书非凡的一生，想知道庞加莱猜想与<code>宇宙的形状</code>等等。这也是咱即便毕业离开大学之后，不再是一名学生但也是像学生时代的自己那样好奇心如此地旺盛😂</p><blockquote><p>『我一直觉得，费马、欧拉、哥德巴赫等人与现代人相比，他们具有格外旺盛的好奇心和丰富的想象力，并且充满了生机与活力。随着社会发展的日益成熟，好奇心和想象力不可避免地不断降低，但并不代表现代社会不再需要好奇心和想象力。』</p></blockquote><p><code>摘抄</code> <a href="https://t.co/UqDfbYRjs7" target="_blank" rel="noopener">费马最终定理</a></p><h3 id="被讨厌的勇气"><a href="#被讨厌的勇气" class="headerlink" title="被讨厌的勇气"></a>被讨厌的勇气</h3><p><img src="https://cdn.jsdelivr.net/gh/muzi502/blog/sourchttps://cdn.jsdelivr.net/gh/muzi502/blog/sourchttps://cdn.jsdelivr.net/gh/muzi502/blog/sourchttps://cdn.jsdelivr.net/gh/muzi502/blog/sourchttps://cdn.jsdelivr.net/gh/muzi502/blog/source/img/screenshot_2020_03_28T01_28_04+0800.png" alt="img"></p><p>无意间在 <a href="https://sanshiliuxiao.top/talkSelf/20191212/" target="_blank" rel="noopener">椎咲良田|想不到啥标题</a> 发现了这本书。</p><blockquote><p>书里面有很多的观点一开始都挺让人难以接受的，就像那位去寻求哲人帮助的青年，不去接受哲人的观点，心里想着根本就不是哲人说的那样，决定要去好好反驳他。可是仔细想想，哲人说的话也算是蛮有道理的。整本书中哲人说的一些言论，如果单单只拆出一段或一句，就会觉得这个哲人是在强词夺理，可是他的话里面有着是有很多的前置条件，如何结合着一起看，那就会感觉不一样。</p></blockquote><p>先说一下我自己的感受吧，读完这本书确实改变了我一些根深蒂固的观念。我承认我有点极端心理，并且我很长时间把它归因于童年时期的家庭暴力，我觉着是老爸的暴脾气影响了我的性格，以至于性格偏激、寡言少语、不善社交、自卑内向等。很长很长一段时间我都把这一切归责于老爸对我的家庭暴力，长久不能释怀。就在今年过年时在家还和老爸争吵怪他小时候打我才导致我性格偏激。</p><p>直到读完这本书，我才改变了这种幼稚的想法。<strong>我们并非因为自身经历中的刺激——所谓的心理创伤——而痛苦，事实上我们会从经历中发现符合自己目的的因素。决定我们自身的不是过去的经历，而是我们自己赋予经历的意义。</strong>经历本身不会决定什么。我们给过去的经历“赋予了什么样的意义”，这直接决定了我们的生活。不可以从过去中找原因；要否定精神创伤；人不是受过去原因支配的存在，人是为了达成某种目的而采取行动的。</p><p><code>摘抄</code> <a href="https://t.co/o6cc1csJI2" target="_blank" rel="noopener">被讨厌的勇气</a></p><h2 id="结束"><a href="#结束" class="headerlink" title="结束"></a>结束</h2><blockquote><p>正如開篇昆德拉就一語驚人的寫道：人與政權的鬥爭，就是記憶與遺忘的鬥爭 。這個論斷是如此準確又如此令人絕望，就目前來看，歷史車輪滾滾向前，我們忘記了很多人，很多事，在記憶與遺忘的鬥爭中，人類徹底失敗了。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;blockquote&gt;
&lt;p&gt;人与政权的斗争，就是记忆与遗忘的
        
      
    
    </summary>
    
    
      <category term="阅读" scheme="https://blog.k8s.li/categories/%E9%98%85%E8%AF%BB/"/>
    
    
      <category term="life" scheme="https://blog.k8s.li/tags/life/"/>
    
      <category term="读书笔记" scheme="https://blog.k8s.li/tags/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
      <category term="书单" scheme="https://blog.k8s.li/tags/%E4%B9%A6%E5%8D%95/"/>
    
  </entry>
  
  <entry>
    <title>使用 CloudFlare Workers 搭建 telegram 频道镜像站</title>
    <link href="https://blog.k8s.li/cloudflare-worker-build-mirror-website.html"/>
    <id>https://blog.k8s.li/cloudflare-worker-build-mirror-website.html</id>
    <published>2020-03-25T16:00:00.000Z</published>
    <updated>2020-04-20T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h2><ul><li>2020-04-21：推荐食用  <a href="https://github.com/idealclover/Telegram-Channel-Mirror" target="_blank" rel="noopener">Telegram-Channel-Mirror</a> 进行反代 telegram 频道</li></ul><h2 id="一次偶遇"><a href="#一次偶遇" class="headerlink" title="一次偶遇"></a>一次偶遇</h2><p>昨天在咱的 <a href="https://blog.k8s.li/oh-my-webpsh.html">让图片飞起来 oh-my-webp.sh ！</a> 收到了 <a href="https://ichr.me/" target="_blank" rel="noopener">ChrAlpha</a> 大佬的回复，咱就拜访了一下大佬的博客😂，无意间发现 <a href="https://blog.ichr.me/post/cloudflare-worker-build-mirror-website/" target="_blank" rel="noopener">Cloudflare Worder 免费搭建镜像站</a> 这篇博客。于是呐，咱也想着能不能玩一玩这个 Workers 。虽然之前听说过有用 Workers 做很多好玩的事儿，比如加速网站、代理 Google 镜像站什么的。不过这些对于咱来说不是很刚需就没有折腾。刚好咱的 telegram 电报频道 <a href="https://t.me/rss_kubernetes" target="_blank" rel="noopener">RSS Kubernetes</a> 人也比较多了，为了提高一点影响力，咱就想着能不能把频道的预览界面 <a href="https://t.me/s/rss_kubernetes" target="_blank" rel="noopener">t.me/s/rss_kubernetes</a> 反代到咱域名上。虽然之前尝试使用 nginx 进行反代，但是效果不尽人意，于是当时就弃坑了。在春节的时候咱也看到过有人反代 <a href="https://t.me/nCoV2019" target="_blank" rel="noopener">2019-nCoV疫情实时播报🅥</a> ，比如 <a href="https://2019ncov.ga/" target="_blank" rel="noopener">2019ncov.ga</a>，不过当时那个项目折腾起来也是很麻烦，咱这种菜鸡还是溜了溜了😂。直到今天看到 <a href="https://blog.ichr.me/post/cloudflare-worker-build-mirror-website/" target="_blank" rel="noopener">Cloudflare Worder 免费搭建镜像站</a> 这篇博客后就心血来潮，就搞一搞吧😂</p><h2 id="劝退三一连"><a href="#劝退三一连" class="headerlink" title="劝退三一连"></a>劝退<del>三</del>一连</h2><p>首先你要有个 Cloudflare 账户，这是必须的。关于 Cloudflare 的注册咱就不多说啦，不过咱倒是建议大家伙把域名的 DNS 解析放到 Cloudflare 上来，好处多多：有把 https 小绿锁、免费的 <del>加速</del> 减速 CDN （墙内）、域名访问统计等等可玩性比较高😋。需要注意的是 Cloudflare 的 Worker 一天 10 万次免费额度，也够咱喝一壶的啦，不用担心不够用。</p><h2 id="新建-Worker"><a href="#新建-Worker" class="headerlink" title="新建 Worker"></a>新建 Worker</h2><p>登录到 <a href="https://dash.cloudflare.com" target="_blank" rel="noopener">Cloudflare</a>的<del>大盘</del>面板，点击左上角的 <code>Menu</code> —-&gt; <code>Workers</code> 进入到 Workers 页面。新注册的用户会提示设置一个 <code>workers.dev</code> 顶级域名下的二级子域名，这个子域名设置好之后是不可更改的，之后你新创建的 Worker 就会使以这个域名而二级子域名开始的，类似于  <code>WorkerName.yousetdomain.workers.dev</code> 。<code>yousetdomain</code> 就是你要设置的二级子域名，<code>WorkerName</code> 可以自定义，默认是随机生成的。也可以给自己的域名添加一条 CNAME 到 <code>WorkerName.yousetdomain.workers.dev</code> ，这样使用自己的域名就可以访问到 <code>Worker</code> 了。</p><p>设置好二级子域名之后选择 free 套餐计划，然后进入到 Worker 管理界面，创建一个新的 <code>Worker</code>  然后在 <code>Script</code> 输入框里填入以下代码。<strong>俗话说代码写得好，同行抄到老</strong>，咱的 <code>worker.js</code> 代码是参考自 <a href="https://github.com/Siujoeng-Lau/Workers-Proxy" target="_blank" rel="noopener">Workers-Proxy</a> ，不过咱去掉了一些无关紧要的代码，原代码是加入了辨别移动设备适配域名、屏蔽某些 IP 和国家的功能。对于咱的 telegram 频道镜像站来说，这都是多余的，于是就去掉了。</p><p><img src="https://cdn.jsdelivr.net/gh/muzi502/blog/sourchttps://cdn.jsdelivr.net/gh/muzi502/blog/sourchttps://cdn.jsdelivr.net/gh/muzi502/blog/sourchttps://cdn.jsdelivr.net/gh/muzi502/blog/sourchttps://cdn.jsdelivr.net/gh/muzi502/blog/source/img/image-20200326184802562.png" alt="image-20200326184802562"></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Website you intended to retrieve for users.</span></span><br><span class="line"><span class="keyword">const</span> upstream = <span class="string">'t.me'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Custom pathname for the upstream website.</span></span><br><span class="line"><span class="keyword">const</span> upstream_path = <span class="string">'/s/rss_kubernetes'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Whether to use HTTPS protocol for upstream address.</span></span><br><span class="line"><span class="keyword">const</span> https = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">addEventListener(<span class="string">'fetch'</span>, event =&gt; &#123;</span><br><span class="line">    event.respondWith(fetchAndApply(event.request));</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">fetchAndApply</span>(<span class="params">request</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> response = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">let</span> url = <span class="keyword">new</span> URL(request.url);</span><br><span class="line">    <span class="keyword">let</span> url_hostname = url.hostname;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (https == <span class="literal">true</span>) &#123;</span><br><span class="line">        url.protocol = <span class="string">'https:'</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        url.protocol = <span class="string">'http:'</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> upstream_domain = upstream;</span><br><span class="line">    url.host = upstream_domain;</span><br><span class="line">    <span class="keyword">if</span> (url.pathname == <span class="string">'/'</span>) &#123;</span><br><span class="line">        url.pathname = upstream_path;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        url.pathname = upstream_path + url.pathname;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> method = request.method;</span><br><span class="line">    <span class="keyword">let</span> request_headers = request.headers;</span><br><span class="line">    <span class="keyword">let</span> new_request_headers = <span class="keyword">new</span> Headers(request_headers);</span><br><span class="line"></span><br><span class="line">    new_request_headers.set(<span class="string">'Host'</span>, url.hostname);</span><br><span class="line">    new_request_headers.set(<span class="string">'Referer'</span>, url.hostname);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> original_response = <span class="keyword">await</span> fetch(url.href, &#123;</span><br><span class="line">        method: method,</span><br><span class="line">        headers: new_request_headers</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> original_response_clone = original_response.clone();</span><br><span class="line">    <span class="keyword">let</span> original_text = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">let</span> response_headers = original_response.headers;</span><br><span class="line">    <span class="keyword">let</span> new_response_headers = <span class="keyword">new</span> Headers(response_headers);</span><br><span class="line">    <span class="keyword">let</span> status = original_response.status;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> content_type = new_response_headers.get(<span class="string">'content-type'</span>);</span><br><span class="line">    <span class="keyword">if</span> (content_type.includes(<span class="string">'text/html'</span>) &amp;&amp; content_type.includes(<span class="string">'UTF-8'</span>)) &#123;</span><br><span class="line">        original_text = <span class="keyword">await</span> replace_response_text(original_response_clone, upstream_domain, url_hostname);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        original_text = original_response_clone.body</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    response = <span class="keyword">new</span> Response(original_text, &#123;</span><br><span class="line">        status,</span><br><span class="line">        headers: new_response_headers</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">let</span> text = <span class="keyword">await</span> response.text()</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> modified = text.replace(<span class="regexp">/telegram.org/g</span>, <span class="string">"telegram.k8srss.workers.dev"</span>)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Response(modified, &#123;</span><br><span class="line">        status: response.status,</span><br><span class="line">        statusText: response.statusText,</span><br><span class="line">        headers: response.headers</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> response;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>需要注意的是，像 <code>t.me</code> 域名下的站点，比如我的 <code>https://t.me/s/rss_kubernetes</code> ，它的 js 和 css 样式文件是使用的 telegram.org 域名。<del>所以我们需要在 <code>replace_dict</code> 那里定义好替换的正则表达式，</del>将  <code>https://t.me/s/rss_kubernetes</code>页面里的  <code>telegram.org</code> 同样进行反代才行，这需要为 telegram 建一个单独的 Worker 😑。这也是评论区  <a href="https://ichr.me/" target="_blank" rel="noopener">ChrAlpha</a> 小伙伴提到的办法。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">ubuntu@blog:~$ curl https://t.me/s/rss_kubernetes | grep "<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"</span></span></span><br><span class="line"><span class="tag"><span class="string">  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current</span></span></span><br><span class="line"><span class="tag"><span class="string">                                 Dload  Upload   Total   Spent    Left  Speed</span></span></span><br><span class="line"><span class="tag"><span class="string">100  141k  100  141k    0     0  85287      0  0:00:01  0:00:01 --:--:-- 85237</span></span></span><br><span class="line"><span class="tag"><span class="string">    &lt;script src="</span>//<span class="attr">telegram.org</span>/<span class="attr">js</span>/<span class="attr">jquery.min.js</span>"&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"//telegram.org/js/jquery-ui.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"//telegram.org/js/widget-frame.js?29"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"//telegram.org/js/telegram-web.js?8"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>修改下处代码为，将<code>https://t.me/s/rss_kubernetes</code>页面里的  <code>telegram.org</code> 同样进行一次反代。这样访问到 <code>https://t.me/s/rss_kubernetes</code>页面时，把的 telegram.org 替换为另一个 Worker 的域名，比如我的 <code>telegram.k8srss.workers.dev</code>  。不过像频道里的图片、文件、视频等资源 telegram 是使用的 CDN ，而且有好几个域名……这点很僵硬，暂时找不到合适的办法。貌似一个 Worker 只能反代一个域名？如果汝有合适的办法，欢迎与咱交流，咱感激不尽😋</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> modified = text.replace(<span class="regexp">/telegram.org/g</span>, <span class="string">"telegram.k8srss.workers.dev"</span>)</span><br></pre></td></tr></table></figure><p>这样再使用 curl 访问测试一下，原来的 telegram.org 已经全部替换成 telegram.k8srss.workers.dev 了😂。现在墙内用户也可以无痛访问啦。在此感谢  <a href="https://ichr.me/" target="_blank" rel="noopener">ChrAlpha</a>  小伙伴😂提出宝贵的建议。</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;/<span class="name">main</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"//telegram.k8srss.workers.dev/js/jquery.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"//telegram.k8srss.workers.dev/js/jquery-ui.min.js"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"//telegram.k8srss.workers.dev/js/widget-frame.js?29"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"//telegram.k8srss.workers.dev/js/telegram-web.js?8"</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">  </span><br><span class="line"><span class="comment">&lt;!-- page generated in 121.26ms --&gt;</span></span><br></pre></td></tr></table></figure><p>这个文本替换功能很好玩儿，在 Cloudflare 官方的博客里还有个 demo <a href="https://cloudflareworkers.com/#c62c6c0002cb236166b794c440870cca:https://blog.cloudflare.com/introducing-cloudflare-workers" target="_blank" rel="noopener">introducing-cloudflare-workers</a> 。使用这个功能咱有解锁了一个玩具，稍后再讲😂。</p><blockquote><p>Here is a worker which performs a site-wide search-and-replace, replacing the word “Worker” with “Minion”. <a href="https://cloudflareworkers.com/#c62c6c0002cb236166b794c440870cca:https://blog.cloudflare.com/introducing-cloudflare-workers" target="_blank" rel="noopener">Try it out on this blog post.</a></p></blockquote><p><del>剽窃</del>修改好代码之后点击左下角的 <code>Save and Deploy</code> 然后 Preview 看看页面是否显示正常，如果显示正常恭喜你成功啦。</p><p><img src="https://cdn.jsdelivr.net/gh/muzi502/blog/sourchttps://cdn.jsdelivr.net/gh/muzi502/blog/sourchttps://cdn.jsdelivr.net/gh/muzi502/blog/sourchttps://cdn.jsdelivr.net/gh/muzi502/blog/sourchttps://cdn.jsdelivr.net/gh/muzi502/blog/source/img/image-20200326190914520.png" alt="image-20200326190914520"></p><p>如果你想使用这种办法反代其他频道，只需要把 <code>const upstream_path = &#39;/s/rss_kubernetes&#39;</code> 后的  rss_kubernetes 替换为你想要代理的 telegram 频道 username 即可。之所以加上 <code>upstream_path</code>  而不反代整个 <code>t.me</code> 是为了防止别人滥用，毕竟 10W 次不经薅😂</p><h3 id="改进"><a href="#改进" class="headerlink" title="改进"></a>改进</h3><p>周四晚上睡觉前在推特上发了个推文，向大家请教了一下之前一个 Worker 里只能反代一个域名的问题。第二天 <a href="https://twitter.com/Echowxsy" target="_blank" rel="noopener">@Echowxsy</a> 就回复咱了，而且还特意注册了 CouldFare 账号使用 Workers 帮咱测试了一下。在此非常感谢 <a href="https://twitter.com/Echowxsy" target="_blank" rel="noopener">@Echowxsy</a>  帮咱。按照  <a href="https://twitter.com/Echowxsy" target="_blank" rel="noopener">@Echowxsy</a> 小伙伴所说的：</p><blockquote><p>我没用过 CloudFlare，不过我看了一下你的blog，貌似可以用两个upstream实现这个功能。 在modified那里替换为当前worker的地址，然后在后面加上一个不会重复的路径，例如xxx。 然后在fetchAndApply里面判断，如果当前请求的pathname=/xxx，使用upstream2，否则使用upstream1。 理论上是可以实现的。</p><p>就是一个 Workers 可以做很多事情，他实际上就是 Node.js 代码。 然后这里是将 <a href="https://t.co/wTGzY4U6sD?amp=1" target="_blank" rel="noopener">http://telegram.org/xxxx</a> 映射到 <a href="https://t.co/yQwEY2mzCP?amp=1" target="_blank" rel="noopener">http://tg.k8s.li/static/xxxx</a> 。 然后在 Workers 里面判断，如果有 <code>/static</code> 则从 <a href="https://t.co/VYm4zCfwPr?amp=1" target="_blank" rel="noopener">http://telegram.org</a> 获取，否则从 <a href="https://t.co/N4Ahg0VLN1?amp=1" target="_blank" rel="noopener">http://t.me</a> 获取。</p></blockquote><p><code>此处引用</code> <a href="https://twitter.com/Echowxsy" target="_blank" rel="noopener">@Echowxsy</a> 的 <a href="https://twitter.com/Echowxsy/status/1243407321989967874" target="_blank" rel="noopener">推文</a></p><p>Woerker 首先我们获取完要反代的 <code>https://t.me/s/rss_kubernetes</code> 页面 html 源码，然后使用 replace 函数把 telegram.org 以及cdn[1-5].telesco.pe 等域名进行替换，替换为 /static 、/cdn[1-5] 等不同的 url 路径。然后将修改后的 html 页面返回给客户端。客户端客户端在请求 <code>/static</code>  时 Worker 就会去 <a href="https://t.co/VYm4zCfwPr?amp=1" target="_blank" rel="noopener">http://telegram.org</a> 获取相应的资源返回给用户。这样就实现了一个 Worker 反代多个域名骚操作。修改后的代码如下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> upstream_me = <span class="string">'t.me'</span>;</span><br><span class="line"><span class="keyword">const</span> upstream_org = <span class="string">'telegram.org'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Custom pathname for the upstream website.</span></span><br><span class="line"><span class="keyword">const</span> upstream_path = <span class="string">'/s/rss_kubernetes'</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Whether to use HTTPS protocol for upstream address.</span></span><br><span class="line"><span class="keyword">const</span> https = <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Replace texts.</span></span><br><span class="line"><span class="keyword">const</span> replace_dict = &#123;</span><br><span class="line">  $upstream: <span class="string">'$custom_domain'</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">addEventListener(<span class="string">'fetch'</span>, event =&gt; &#123;</span><br><span class="line">  event.respondWith(fetchAndApply(event.request));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">fetchAndApply</span>(<span class="params">request</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">let</span> response = <span class="literal">null</span>;</span><br><span class="line">  <span class="keyword">let</span> url = <span class="keyword">new</span> URL(request.url);</span><br><span class="line">  <span class="keyword">let</span> url_hostname = url.hostname;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span> (https == <span class="literal">true</span>) &#123;</span><br><span class="line">    url.protocol = <span class="string">'https:'</span>;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    url.protocol = <span class="string">'http:'</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">var</span> upstream_domain = upstream_me;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Check telegram.org</span></span><br><span class="line">  <span class="keyword">let</span> pathname = url.pathname;</span><br><span class="line">  <span class="built_in">console</span>.log(pathname);</span><br><span class="line">  <span class="keyword">if</span> (pathname.startsWith(<span class="string">'/static'</span>)) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">'here'</span>);</span><br><span class="line">    upstream_domain = upstream_org;</span><br><span class="line">    url.pathname = pathname.replace(<span class="string">'/static'</span>, <span class="string">''</span>);</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (pathname == <span class="string">'/'</span>) &#123;</span><br><span class="line">      url.pathname = upstream_path;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      url.pathname = upstream_path + url.pathname;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  url.host = upstream_domain;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> method = request.method;</span><br><span class="line">  <span class="keyword">let</span> request_headers = request.headers;</span><br><span class="line">  <span class="keyword">let</span> new_request_headers = <span class="keyword">new</span> Headers(request_headers);</span><br><span class="line"></span><br><span class="line">  new_request_headers.set(<span class="string">'Host'</span>, url.hostname);</span><br><span class="line">  new_request_headers.set(<span class="string">'Referer'</span>, url.hostname);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> original_response = <span class="keyword">await</span> fetch(url.href, &#123;</span><br><span class="line">    method: method,</span><br><span class="line">    headers: new_request_headers</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> original_response_clone = original_response.clone();</span><br><span class="line">  <span class="keyword">let</span> original_text = <span class="literal">null</span>;</span><br><span class="line">  <span class="keyword">let</span> response_headers = original_response.headers;</span><br><span class="line">  <span class="keyword">let</span> new_response_headers = <span class="keyword">new</span> Headers(response_headers);</span><br><span class="line">  <span class="keyword">let</span> status = original_response.status;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">const</span> content_type = new_response_headers.get(<span class="string">'content-type'</span>);</span><br><span class="line">  <span class="keyword">if</span> (content_type.includes(<span class="string">'text/html'</span>) &amp;&amp; content_type.includes(<span class="string">'UTF-8'</span>)) &#123;</span><br><span class="line">    original_text = <span class="keyword">await</span> replace_response_text(</span><br><span class="line">      original_response_clone,</span><br><span class="line">      upstream_domain,</span><br><span class="line">      url_hostname</span><br><span class="line">    );</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    original_text = original_response_clone.body;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  response = <span class="keyword">new</span> Response(original_text, &#123;</span><br><span class="line">    status,</span><br><span class="line">    headers: new_response_headers</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="keyword">let</span> text = <span class="keyword">await</span> response.text();</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Modify it.</span></span><br><span class="line">  <span class="keyword">let</span> modified = text.replace(<span class="regexp">/telegram.org/g</span>,<span class="string">'tg.k8s.li/static'</span>);</span><br><span class="line"></span><br><span class="line">  <span class="comment">// Return modified response.</span></span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">new</span> Response(modified, &#123;</span><br><span class="line">    status: response.status,</span><br><span class="line">    statusText: response.statusText,</span><br><span class="line">    headers: response.headers</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="自定义域名"><a href="#自定义域名" class="headerlink" title="自定义域名"></a>自定义域名</h2><p>回到 Workers 的管理页面，点击 <code>rename</code> 即可修改 Worker 的三级子域名。不过咱还是不太喜欢 <code>WorkerName.yousetdomain.workers.dev</code> 这么长的域名，想使用咱自己的二级子域名访问。</p><p>首先回到域名管理的页面，进入到自己域名顶部那一栏里的 <code>Workers</code> ，在那里添加相应的路由即可。</p><p><img src="https://cdn.jsdelivr.net/gh/muzi502/blog/sourchttps://cdn.jsdelivr.net/gh/muzi502/blog/sourchttps://cdn.jsdelivr.net/gh/muzi502/blog/sourchttps://cdn.jsdelivr.net/gh/muzi502/blog/sourchttps://cdn.jsdelivr.net/gh/muzi502/blog/source/img/image-20200326191340166.png" alt="image-20200326191340166"></p><p>点击 <code>Add Route</code> ，在 Route 那一栏输入好自己的域名，注意最后的 <code>/*</code> 也要加上，然后 Worker 选择刚刚创建的那个即可。接着再添加 <code>CNAME</code> 记录到自己的 <code>WorkerName.yousetdomain.workers.dev</code> ，这样就能使用自己的域名访问啦😋</p><p><img src="https://cdn.jsdelivr.net/gh/muzi502/blog/sourchttps://cdn.jsdelivr.net/gh/muzi502/blog/sourchttps://cdn.jsdelivr.net/gh/muzi502/blog/sourchttps://cdn.jsdelivr.net/gh/muzi502/blog/sourchttps://cdn.jsdelivr.net/gh/muzi502/blog/source/img/image-20200326191435923.png" alt="image-20200326191435923"></p><h2 id="文本替换"><a href="#文本替换" class="headerlink" title="文本替换"></a>文本替换</h2><p>前文提到的文本替换功能帮咱解决了一个小问题。咱友链关注的一个博客 <a href="https://chanshiyu.com/#/" target="_blank" rel="noopener">chanshiyu.com</a> 没有提供 RSS ，他是将博客内容放在 GitHub issue 上，所以只能通过 RSSHUB 来订阅 GitHub 的 issue 来获取博客的更新。但 RSSHUB 获取的是 GitHub issue 的链接而非原博客的链接，于是咱想了想就用 <code>Worker</code> 进行替换不得了。</p><p>通过 RSSHUB 获取到的 RSS 数据如下：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">rss</span> <span class="attr">xmlns:atom</span>=<span class="string">"http://www.w3.org/2005/Atom"</span> <span class="attr">version</span>=<span class="string">"2.0"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">channel</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span></span><br><span class="line">&lt;![CDATA[ chanshiyucx/blog Issues ]]&gt;</span><br><span class="line"><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span>&gt;</span>https://github.com/chanshiyucx/blog/issues<span class="tag">&lt;/<span class="name">link</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">atom:link</span> <span class="attr">href</span>=<span class="string">"http://rsshub.app/github/issue/chanshiyucx/blog"</span> <span class="attr">rel</span>=<span class="string">"self"</span> <span class="attr">type</span>=<span class="string">"application/rss+xml"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">description</span>&gt;</span></span><br><span class="line">&lt;![CDATA[</span><br><span class="line">chanshiyucx/blog Issues - Made with love by RSSHub(https://github.com/DIYgod/RSSHub)</span><br><span class="line">]]&gt;</span><br><span class="line"><span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">generator</span>&gt;</span>RSSHub<span class="tag">&lt;/<span class="name">generator</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">webMaster</span>&gt;</span>i@diygod.me (DIYgod)<span class="tag">&lt;/<span class="name">webMaster</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">language</span>&gt;</span>zh-cn<span class="tag">&lt;/<span class="name">language</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">lastBuildDate</span>&gt;</span>Thu, 26 Mar 2020 11:00:06 GMT<span class="tag">&lt;/<span class="name">lastBuildDate</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ttl</span>&gt;</span>60<span class="tag">&lt;/<span class="name">ttl</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">item</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span></span><br><span class="line">&lt;![CDATA[ Telegram 电报机器人 ]]&gt;</span><br><span class="line"><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">description</span>&gt;</span></span><br><span class="line">&lt;![CDATA[</span><br><span class="line">]]&gt;</span><br><span class="line"><span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">pubDate</span>&gt;</span>Wed, 25 Mar 2020 03:54:04 GMT<span class="tag">&lt;/<span class="name">pubDate</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">guid</span> <span class="attr">isPermaLink</span>=<span class="string">"false"</span>&gt;</span>https://github.com/chanshiyucx/blog/issues/108<span class="tag">&lt;/<span class="name">guid</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">link</span>&gt;</span>https://github.com/chanshiyucx/blog/issues/108<span class="tag">&lt;/<span class="name">link</span>&gt;</span></span><br></pre></td></tr></table></figure><p>其中的 <code>&lt;guid isPermaLink=&quot;false&quot;&gt;</code> 和 <code>&lt;link&gt;</code> 中的链接 github.com/chanshiyucx/blog/issues/ 替换为 chanshiyu.com/#/post/ 即可。于是还是同样的方法新建一个 Worker，然后修改一下 <code>worker.js</code> 的代码就可以啦。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Website you intended to retrieve for users.</span></span><br><span class="line"><span class="keyword">const</span> upstream = <span class="string">'rsshub.app'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Custom pathname for the upstream website.</span></span><br><span class="line"><span class="keyword">const</span> upstream_path = <span class="string">'/github/issue/chanshiyucx/blog'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// Whether to use HTTPS protocol for upstream address.</span></span><br><span class="line"><span class="keyword">const</span> https = <span class="literal">true</span></span><br><span class="line"></span><br><span class="line">addEventListener(<span class="string">'fetch'</span>, event =&gt; &#123;</span><br><span class="line">    event.respondWith(fetchAndApply(event.request));</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">fetchAndApply</span>(<span class="params">request</span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> response = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">let</span> url = <span class="keyword">new</span> URL(request.url);</span><br><span class="line">    <span class="keyword">let</span> url_hostname = url.hostname;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (https == <span class="literal">true</span>) &#123;</span><br><span class="line">        url.protocol = <span class="string">'https:'</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        url.protocol = <span class="string">'http:'</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> upstream_domain = upstream;</span><br><span class="line">    url.host = upstream_domain;</span><br><span class="line">    <span class="keyword">if</span> (url.pathname == <span class="string">'/'</span>) &#123;</span><br><span class="line">        url.pathname = upstream_path;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        url.pathname = upstream_path + url.pathname;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> method = request.method;</span><br><span class="line">    <span class="keyword">let</span> request_headers = request.headers;</span><br><span class="line">    <span class="keyword">let</span> new_request_headers = <span class="keyword">new</span> Headers(request_headers);</span><br><span class="line"></span><br><span class="line">    new_request_headers.set(<span class="string">'Host'</span>, url.hostname);</span><br><span class="line">    new_request_headers.set(<span class="string">'Referer'</span>, url.hostname);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> original_response = <span class="keyword">await</span> fetch(url.href, &#123;</span><br><span class="line">        method: method,</span><br><span class="line">        headers: new_request_headers</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> original_response_clone = original_response.clone();</span><br><span class="line">    <span class="keyword">let</span> original_text = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">let</span> response_headers = original_response.headers;</span><br><span class="line">    <span class="keyword">let</span> new_response_headers = <span class="keyword">new</span> Headers(response_headers);</span><br><span class="line">    <span class="keyword">let</span> status = original_response.status;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">const</span> content_type = new_response_headers.get(<span class="string">'content-type'</span>);</span><br><span class="line">    <span class="keyword">if</span> (content_type.includes(<span class="string">'text/html'</span>) &amp;&amp; content_type.includes(<span class="string">'UTF-8'</span>)) &#123;</span><br><span class="line">        original_text = <span class="keyword">await</span> replace_response_text(original_response_clone, upstream_domain, url_hostname);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        original_text = original_response_clone.body</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    response = <span class="keyword">new</span> Response(original_text, &#123;</span><br><span class="line">        status,</span><br><span class="line">        headers: new_response_headers</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">let</span> text = <span class="keyword">await</span> response.text()</span><br><span class="line"></span><br><span class="line"><span class="comment">// Modify it.</span></span><br><span class="line">    <span class="keyword">let</span> modified = text.replace(<span class="regexp">/github.com\/chanshiyucx\/blog\/issues\//g</span>, <span class="string">"chanshiyu.com\/#\/post\/"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Return modified response.</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> Response(modified, &#123;</span><br><span class="line">        status: response.status,</span><br><span class="line">        statusText: response.statusText,</span><br><span class="line">        headers: response.headers</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">return</span> response;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>部署好 Worker 之后就可以使用 RSS 来订阅啦😋</p><p><img src="https://cdn.jsdelivr.net/gh/muzi502/blog/sourchttps://cdn.jsdelivr.net/gh/muzi502/blog/sourchttps://cdn.jsdelivr.net/gh/muzi502/blog/sourchttps://cdn.jsdelivr.net/gh/muzi502/blog/sourchttps://cdn.jsdelivr.net/gh/muzi502/blog/source/img/image-20200326193643610.png" alt="image-20200326193643610"></p><h2 id="解锁更多好玩儿的😋"><a href="#解锁更多好玩儿的😋" class="headerlink" title="解锁更多好玩儿的😋"></a>解锁更多好玩儿的😋</h2><p>关于 Cloudflare 的 Workers 还有更多好玩的等待你去发现，咱就推荐一下啦：</p><ul><li><a href="https://blog.ichr.me/post/cloudflare-worker-build-mirror-website/" target="_blank" rel="noopener">Cloudflare Worker 免费搭建镜像站</a></li><li><a href="https://blog.cloudflare.com/zh/cloudflare-workers-unleashed-zh/" target="_blank" rel="noopener">从现在起，任何人都可以在Cloudflare上使用Workers运行JavaScript！</a></li><li><a href="https://blog.cloudflare.com/zh/just-write-code-improving-developer-experience-for-cloudflare-workers-zh/" target="_blank" rel="noopener">尽情编写代码吧：改善开发人员使用Cloudflare Workers的体验</a></li><li><a href="https://blog.skk.moe/post/cloudflare-workers-cfga" target="_blank" rel="noopener">使用 Cloudflare Workers 加速 Google Analytics</a></li><li><a href="https://blog.meow.page/2019/09/24/free-personal-image-hosting-with-backblaze-b2-and-cloudflare-workers" target="_blank" rel="noopener">使用 Backblaze B2 和 Cloudflare Workers 搭建可以自定义域名的免费图床</a></li><li><a href="https://free.com.tw/cloudflare-workers-wordpress/" target="_blank" rel="noopener">使用 Cloudflare Workers 提高 WordPress 速度和效能教學</a></li><li><a href="https://yojigen.tech/archives/post19/" target="_blank" rel="noopener">使用Cloudflare Workers反带P站图片</a></li></ul><p>最后宣传一下咱的 <a href="https://t.me/rss_kubernetes" target="_blank" rel="noopener">@rss_kubernetes</a> 频道，国内用户可以访问 <a href="https://tg.k8s.li" target="_blank" rel="noopener">tg.k8s.li</a>，如果你对 docker 、K8s、云原生等感兴趣，就到咱碗里来吧😂。不订阅咱的频道也可以通过咱的 <a href="https://tg.k8s.li" target="_blank" rel="noopener">tg.k8s.li</a> 镜像站来查看 RSS 推送信息。</p><p><img src="https://cdn.jsdelivr.net/gh/muzi502/blog/sourchttps://cdn.jsdelivr.net/gh/muzi502/blog/sourchttps://cdn.jsdelivr.net/gh/muzi502/blog/sourchttps://cdn.jsdelivr.net/gh/muzi502/blog/sourchttps://cdn.jsdelivr.net/gh/muzi502/blog/source/img/image-20200327003346742.png" alt="image-20200327003346742"></p><p>GitHub page 又被墙一波，rsshub.app 也被墙掉了。墙越来越高了，这个社会也来越可笑了……不知道未来的互联网会变成什么样子，但我们作为一只屁民能做的就是<strong>不为墙添砖加瓦，不为极权专制独裁暴政唱赞歌</strong>。最后一张自己制作 kindle 电子书时喜欢使用的封面图片送给大家。</p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;h2 id=&quot;更新&quot;&gt;&lt;a href=&quot;#更新&quot;
        
      
    
    </summary>
    
    
      <category term="技术" scheme="https://blog.k8s.li/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="telegram" scheme="https://blog.k8s.li/tags/telegram/"/>
    
      <category term="GFW" scheme="https://blog.k8s.li/tags/GFW/"/>
    
      <category term="CloudFlare" scheme="https://blog.k8s.li/tags/CloudFlare/"/>
    
  </entry>
  
  <entry>
    <title>Linux 的小伙伴 systemd 详解</title>
    <link href="https://blog.k8s.li/systemd.html"/>
    <id>https://blog.k8s.li/systemd.html</id>
    <published>2020-03-18T16:00:00.000Z</published>
    <updated>2020-03-18T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="小插曲"><a href="#小插曲" class="headerlink" title="小插曲"></a>小插曲</h2><p>最近 <a href="https://www.bennythink.com/" target="_blank" rel="noopener">土豆哥</a> 在捣鼓 <a href="https://github.com/webp-sh/webp_server_go" target="_blank" rel="noopener">Webp Server Go</a> 的时候发咱一张 <code>systemctl status webp</code> 的信息：</p><p><img src="https://cdn.jsdelivr.net/gh/muzi502/blog/sourchttps://cdn.jsdelivr.net/gh/muzi502/blog/sourchttps://cdn.jsdelivr.net/gh/muzi502/blog/sourchttps://cdn.jsdelivr.net/gh/muzi502/blog/sourchttps://cdn.jsdelivr.net/gh/muzi502/blog/source/img/image-20200318080736564.png" alt="image-20200318080736564"></p><p>咦？咱的 <code>systemctl status webp</code> 为啥子没得 CPU 和 Memory 信息呐？</p><p><img src="https://cdn.jsdelivr.net/gh/muzi502/blog/sourchttps://cdn.jsdelivr.net/gh/muzi502/blog/sourchttps://cdn.jsdelivr.net/gh/muzi502/blog/sourchttps://cdn.jsdelivr.net/gh/muzi502/blog/sourchttps://cdn.jsdelivr.net/gh/muzi502/blog/source/img/image-20200318080903595.png" alt="image-20200318080903595"></p><p>然后和土豆哥请教了一下，咱也想要。于是土豆哥发咱一篇 <a href="https://www.bennythink.com/systemd-accounting.html" target="_blank" rel="noopener">systemd – systemctl 不显示内存 CPU 信息</a> 博客，于是拜师学艺就 get 到啦😋。只需要在 systemd 的配置文件中 <code>/etc/systemd/system.conf</code> 追加</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">DefaultCPUAccounting</span>=<span class="literal">yes</span></span><br><span class="line"><span class="attr">DefaultMemoryAccounting</span>=<span class="literal">yes</span></span><br><span class="line"><span class="attr">DefaultTasksAccounting</span>=<span class="literal">yes</span></span><br></pre></td></tr></table></figure><p>然后再 <code>systemctl daemon-reload</code> 一把梭就可以啦😂</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">╭─root@blog /home/ubuntu</span><br><span class="line">╰─# systemctl status webps</span><br><span class="line">● webps.service - WebP Server</span><br><span class="line">   Loaded: loaded (/opt/webps/webps.service; enabled; vendor preset: enabled)</span><br><span class="line">   Active: active (running) since Sat 2020-03-14 10:32:31 UTC; 4 days ago</span><br><span class="line">     Docs: https://github.com/n0vad3v/webp_server_go</span><br><span class="line"> Main PID: 20691 (webp-server)</span><br><span class="line">    Tasks: 36 (limit: 684)</span><br><span class="line">   Memory: 9.1M</span><br><span class="line">      CPU: 20.421s</span><br><span class="line">   CGroup: /system.slice/webps.service</span><br><span class="line">           └─20691 /opt/webps/webp-server --config /opt/webps/config.json</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/muzi502/blog/sourchttps://cdn.jsdelivr.net/gh/muzi502/blog/sourchttps://cdn.jsdelivr.net/gh/muzi502/blog/sourchttps://cdn.jsdelivr.net/gh/muzi502/blog/sourchttps://cdn.jsdelivr.net/gh/muzi502/blog/source/img/image-20200318211715509.png" alt="image-20200318211715509"></p><p>不过，咱还是要深入地学习一下 <code>systemd</code> ，于是就水了这篇博客😂</p><h2 id="Linux-启动流程"><a href="#Linux-启动流程" class="headerlink" title="Linux 启动流程"></a>Linux 启动流程</h2><p>提到 systemd 不得不提一下 Linux 的启动流程，这样才能清楚  systemd 在 Linux 系统中的地位和作用😋。所以就简明扼要第介绍一下 Linux 启动的流程。</p><p>Linux 从按下电源键到进入用户交互界面整个启动流程大致可以分为四个阶段：</p><ul><li><p>BIOS 阶段</p></li><li><p>BootLoader 阶段</p></li><li><p>kernel 加载阶段</p></li><li><p>init：systemd/sysvinit 初始化阶段</p></li></ul><h3 id="BIOS-EFI-阶段"><a href="#BIOS-EFI-阶段" class="headerlink" title="BIOS/EFI 阶段"></a>BIOS/EFI 阶段</h3><p>BIOS 想必大家都熟悉，也就是做一些基本的硬件自检准备以及加载 bootloader 程序。在按下电源电源键（冷启动）后， CPU 的程序计数器被初始化为一个特定的內存地址，存储在只读存储器（ROM）中的 BIOS 就是从这个特定的內存地址开始执行。<strong>所以没有 CPU 是无法启动主板上的 BIOS 的</strong> ，应该（小声。注意：对于嵌入式系统中的 CPU ，将会加载引导区去启动 flash/ROM 中已知地址的程序。</p><p>BIOS 启动后就开始执行硬件的基本初始化也称之为（POST: 上电自检），并根据引导设备的优先级将系统控制权交给硬件启动项（比如硬盘/网络/U盘等）。也就是我们 BIOS 上的启动菜单，这一步是可以被打断的。当我们按下 F12 或者 ESC 键（根据主板芯片组而异）就会弹出选择启动项的界面，而且这些按键高度依赖硬件。</p><p>BIOS 选择好硬件启动项之后就开始执行硬件设备上的初级引导程序代码，对于 MBR 硬盘来讲是最开始的一个扇区（512字节）將被加载到內存，並执行行其中的初始化代码来加载下一阶段的 Bootloader 。</p><p>PS：MBR <strong>主引导记录</strong>是一个 512 字节的扇区，位于硬盘的第一扇区（0道0柱1扇区）。对于 GPT/EFI 来讲~~，有点头大，暂且先不谈😂。</p><p>可以使用 dd 命令读取 MBR 里的内容 <code>dd if=/dev/sda of=mbr.bin bs=512 count=1</code></p><p>使用 od 命令来查看 <code>od -xa mbr.bin</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> od -xa mbr.bin</span></span><br><span class="line">0000000    63eb    0090    0000    0000    0000    0000    0000    0000</span><br><span class="line">          k   c dle nul nul nul nul nul nul nul nul nul nul nul nul nul</span><br><span class="line">0000020    0000    0000    0000    0000    0000    0000    0000    0000</span><br><span class="line">        nul nul nul nul nul nul nul nul nul nul nul nul nul nul nul nul</span><br><span class="line">*</span><br><span class="line">0000120    0000    0000    0000    0000    0000    8000    0800    0000</span><br><span class="line">        nul nul nul nul nul nul nul nul nul nul nul nul nul  bs nul nul</span><br><span class="line">0000140    0000    0000    faff    9090    c2f6    7480    f605    70c2</span><br><span class="line">        nul nul nul nul del   z dle dle   v   B nul   t enq   v   B   p</span><br><span class="line">0000160    0274    80b2    79ea    007c    3100    8ec0    8ed8    bcd0</span><br><span class="line">          t stx   2 nul   j   y   | nul nul   1   @  so   X  so   P   &lt;</span><br><span class="line">0000200    2000    a0fb    7c64    ff3c    0274    c288    bb52    0417</span><br><span class="line">        nul  sp   &#123;  sp   d   |   &lt; del   t stx  bs   B   R   ; etb eot</span><br><span class="line">0000220    07f6    7403    be06    7d88    17e8    be01    7c05    41b4</span><br><span class="line">          v bel etx   t ack   &gt;  bs   &#125;   h etb soh   &gt; enq   |   4   A</span><br><span class="line">0000240    aabb    cd55    5a13    7252    813d    55fb    75aa    8337</span><br><span class="line">……………………</span><br></pre></td></tr></table></figure><h3 id="BootLoader-阶段"><a href="#BootLoader-阶段" class="headerlink" title="BootLoader 阶段"></a>BootLoader 阶段</h3><p>主引导记录加载完 Bootloader（主要为GRUB）到 RAM 中之后，GRUB 会根据需求显示一个可用的内核列表（定义在/etc/grub.conf，以及/etc/grub/menu.lst和/etc/grub.conf的软连接）。根据 GRUB 的配置加载默认内核镜像和 initrd 镜像到内存中，当所有镜像准备好后，即跳转到内核镜像。</p><h3 id="kernel-阶段"><a href="#kernel-阶段" class="headerlink" title="kernel 阶段"></a>kernel 阶段</h3><p>BootLoader 阶段完成之后内核镜像加载到内存中，系统的控制权就交给内核镜像，由此内核阶段开始了。内核镜像不是一个可以执行的内核，而是一个被压缩的内核镜像 （zImage 或 bzImage）。在内核镜像的头部有一个小型程序 routine ，其做少量的硬件设置，然后自解压压缩的内核镜像并放到高端内存。如果存在初始磁盘镜像（initrd），routine 将拷贝 initrd 以供稍后安装使用，然后 routine 将调用内核开始内核启动。</p><blockquote><p>在内核引导过程中，初始 RAM 磁盘（initrd）是由 BootLoader 加载到内存中的，它会被复制到 RAM 中并挂载到系统上。这个 initrd 作为 RAM 中的临时根文件系统使用，并允许内核在没有挂载任何物理磁盘的情况下完整地实现引导。由于与外围设备进行交互所需要的模块可是 initrd 的一部分，因此内核可以非常小，但是仍然支持大量可能的硬件配置。在内核启动后，就可以正式装备根文件系统了（通过 pivot_root），此时会将 initrd 根文件系统卸载掉，并挂载真正的根文件系统。<br>initrd 函数让我们可以创建一个小型的 Linux 内核，其中包括作为可加载模块编译的驱动程序。这些可加载的模块为内核提供了访问磁盘和磁盘上的文件系统的方法，并为其他硬件提供了驱动程序。由于根文件系统是磁盘上的一个文件系统，因此 initrd 函数会提供一种启动方法来获得对磁盘的访问，并挂载真正的根文件系统。在没有硬盘的嵌入式目标中，initrd 可以是最终的根文件系统，或者也可以通过网络文件系统（NFS）来挂载最终的根文件系统。</p></blockquote><p>可以使用 dmesg 来查看从加载内核后的流程，下一篇博客会写从 dmesg 日志分析 Linux 内核启动流程（挖坑</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">╭─root@blog /home/ubuntu</span><br><span class="line">╰─# dmesg</span><br><span class="line">[    0.000000] Linux version 5.0.0-1031-gcp (buildd@lcy01-amd64-020) (gcc version 7.4.0 (Ubuntu 7.4.0-1ubuntu1~18.04.1)) #32-Ubuntu SMP Tue Feb 11 03:55:48 UTC 2020 (Ubuntu 5.0.0-1031.32-gcp 5.0.21)</span><br><span class="line">[    0.000000] Command line: BOOT_IMAGE=/boot/vmlinuz-5.0.0-1031-gcp root=PARTUUID=9b22aacc-c8b9-497a-9583-a20c1be968c4 ro scsi_mod.use_blk_mq=Y console=ttyS0</span><br><span class="line">[    0.000000] KERNEL supported cpus:</span><br><span class="line">[    0.000000]   Intel GenuineIntel</span><br><span class="line">[    0.000000]   AMD AuthenticAMD</span><br><span class="line">[    0.000000]   Hygon HygonGenuine</span><br><span class="line">[    0.000000]   Centaur CentaurHauls</span><br><span class="line">……………………………………………………………………………………………………</span><br><span class="line">[    2.486896] Write protecting the kernel read-only data: 22528k</span><br><span class="line">[    2.489395] Freeing unused kernel image memory: 2016K</span><br><span class="line">[    2.490937] Freeing unused kernel image memory: 1708K</span><br><span class="line">[    2.500867] x86/mm: Checked W+X mappings: passed, no W+X pages found.</span><br><span class="line">[    2.503126] x86/mm: Checking user space page tables</span><br><span class="line">[    2.513767] x86/mm: Checked W+X mappings: passed, no W+X pages found.</span><br><span class="line">[    2.516258] Run /sbin/init as init process</span><br><span class="line">[    3.992535] systemd[1]: systemd 237 running in system mode. (+PAM +AUDIT +SELINUX +IMA +APPARMOR +SMACK +SYSVINIT +UTMP +LIBCRYPTSETUP +GCRYPT +GNUTLS +ACL +XZ +LZ4 +SECCOMP +BLKID +ELFUTILS +KMOD -IDN2 +IDN -PCRE2 default-hierarchy=hybrid)</span><br><span class="line">[    4.002297] systemd[1]: Detected virtualization kvm.</span><br><span class="line">[    4.004593] systemd[1]: Detected architecture x86-64.</span><br><span class="line">[    4.031531] systemd[1]: Set hostname to &lt;blog&gt;.</span><br><span class="line">[    5.343604] systemd[1]: Reached target Swap.</span><br><span class="line">[    5.355156] systemd[1]: Started Dispatch Password Requests to Console Directory Watch.</span><br><span class="line">[    5.367360] systemd[1]: Created slice User and Session Slice.</span><br><span class="line">[    5.379321] systemd[1]: Set up automount Arbitrary Executable File Formats File System Automount Point.</span><br><span class="line">[    5.395189] systemd[1]: Started Forward Password Requests to Wall Directory Watch.</span><br><span class="line">[    5.411078] systemd[1]: Reached target Local Encrypted Volumes.</span><br><span class="line">[    5.644759] EXT4-fs (sda1): re-mounted. Opts: (null)</span><br><span class="line">[   11.663490] bpfilter: Loaded bpfilter_umh pid 456</span><br></pre></td></tr></table></figure><h3 id="init-初始化阶段"><a href="#init-初始化阶段" class="headerlink" title="init 初始化阶段"></a>init 初始化阶段</h3><p>一旦内核自解压完成，启动并初始化后，内核启动第一个<strong>用户空间应用程序</strong>，即 systemd 进程（其是老式 System V 系统的 init 程序的替代品)，并转移控制权到 systemd。这是调用的第一个使用标准 C 库编译的程序，在此进程之前，还没有执行任何标准的 C 应用程序。至此整个系统引导过程的结束，kernel和 systemd 处于运行状态，接下来就由 systemd 来启动各项程序。</p><p>从 dmesg 的输出日志我们可以看到，直到 2.516258 秒才开始执行 <code>/sbin/init</code> 命令，而对于采用 systemd 的发行版来说，<code>/sbin/init</code> 是指向 <code>/sbin/init -&gt; /lib/systemd/systemd</code> ，的链接文件，实际上就是在启动 systemd 😂</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[    2.516258] Run /sbin/init as init process</span><br><span class="line">[    3.992535] systemd[1]: systemd 237 running in system mode. (+PAM +AUDIT +SELINUX +IMA +APPARMOR +SMACK +SYSVINIT +UTMP +LIBCRYPTSETUP +GCRYPT +GNUTLS +ACL +XZ +LZ4 +SECCOMP +BLKID +ELFUTILS +KMOD -IDN2 +IDN -PCRE2 default-hierarchy=hybrid)</span><br></pre></td></tr></table></figure><h2 id="主角-systemd"><a href="#主角-systemd" class="headerlink" title="主角 systemd"></a>主角 systemd</h2><p>为什么文章题名为 <strong>Linux 的小伙伴 systemd</strong> 呐，其实广义上来讲 Linux 是众多 Linux 系统发行版的集合，但严格来讲 Linux 仅仅是一个 OS 的 kernel 而已，仅仅有一个内核是无法组成一个系统的，所以 Linux kernel 还需要他的几个兄弟比如 GNU 、 systemd 、X Window 、GNOME 、 KDE 、Xfce 等等其他用户层面的程序来构建出一套完整的操作系统出来。</p><p>还有如果你要是当着自由软件基金会主席 RMS <a href="https://zh.wikipedia.org/wiki/%E7%90%86%E6%9F%A5%E5%BE%B7%C2%B7%E6%96%AF%E6%89%98%E6%9B%BC" target="_blank" rel="noopener">理查德·斯托曼</a> 说 Linux 的话，他会给你发火哦，你要说 GNU/Linux 才行😂。</p><p>将 Debian 哲学与方法论，GNU 工具集、Linux 内核，以及其他重要的自由软件结合在一起所构成的独特的软件发行版称为 Debian GNU/Linux。当你将 Debian 的安装镜像刻录到 U 盘之后显示的名称就是 <code>Debian GNU/Linux</code> 。关于 GNU 和 Linux 的故事可以去看一哈 <a href="https://zh.wikipedia.org/zh-cn/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F%E9%9D%A9%E5%91%BD" target="_blank" rel="noopener">操作系统革命</a> 纪录片，以及 RMS 的自传《若为自由故：自由软件之父理查德·斯托曼传》以及 Linus 的自传《只是为了好玩儿》。</p><h3 id="systemd-简介"><a href="#systemd-简介" class="headerlink" title="systemd 简介"></a>systemd 简介</h3><p>讲完了 Linux 系统启动的流程，接下来就到了本文的主角 <code>systemd</code> 上场啦。剽窃一段 archlinux.org 上的文档来介绍一下 systemd 。（archlinux 的文档是做的最好的哦！</p><blockquote><p><em>systemd</em> 是一个 Linux 系统基础组件的集合，提供了一个系统和服务管理器，运行为 PID 1 并负责启动其它程序。功能包括：</p><ul><li>支持并行化任务；</li><li>同时采用 socket 式与 <a href="https://wiki.archlinux.org/index.php/D-Bus_(简体中文)" target="_blank" rel="noopener">D-Bus</a> 总线式激活服务；</li><li>按需启动守护进程（daemon）；</li><li>利用 Linux 的 <a href="https://wiki.archlinux.org/index.php/Cgroups" target="_blank" rel="noopener">cgroups</a> 监视进程； # 本文开篇讲到的 systemctl 显示 CPU 和  Mem 信息就是基于此哦。</li><li>支持快照和系统恢复；</li><li>维护挂载点和自动挂载点；</li><li>各服务间基于依赖关系进行精密控制。</li><li>systemd* 支持 SysV 和 LSB 初始脚本，可以替代 sysvinit。</li><li>除此之外，功能还包括日志进程、控制基础系统配置，维护登陆用户列表以及系统账户、运行时目录和设置，可以运行容器和虚拟机，可以简单的管理网络配置、网络时间同步、日志转发和名称解析等。</li></ul></blockquote><p>还有一段摘自 <a href="https://systemd.io/" target="_blank" rel="noopener">systemd.io</a></p><blockquote><p>systemd is a suite of basic building blocks for a Linux system. It provides a system and service manager that runs as PID 1 and starts the rest of the system.</p><p>systemd provides aggressive parallelization capabilities, uses socket and D-Bus activation for starting services, offers on-demand starting of daemons, keeps track of processes using Linux control groups, maintains mount and automount points, and implements an elaborate transactional dependency-based service control logic. systemd supports SysV and LSB init scripts and works as a replacement for sysvinit.</p><p>Other parts include a logging daemon, utilities to control basic system configuration like the hostname, date, locale, maintain a list of logged-in users and running containers and virtual machines, system accounts, runtime directories and settings, and daemons to manage simple network configuration, network time synchronization, log forwarding, and name resolution.</p></blockquote><h3 id="systemd-设计目标"><a href="#systemd-设计目标" class="headerlink" title="systemd 设计目标"></a>systemd 设计目标</h3><ul><li>改进效能。使用二进制代码替换松散的SYSV启动脚本，减少频繁的进程创建，库加载，内核/用户切换。</li><li>利用 Dbus 进程间通讯与 socket 激活机制，解决任务启动时的依赖问题，实现启动并行化。</li><li>实现任务（daemons）的精确控制。使用内核的 cgroup 机制，不依赖 pid 来追踪进程，即使是两次 fork之后生成的守护进程也不会脱离 systemd 的控制。</li><li>统一任务定义。用户不需要自行编写 shell 脚本，而仅依据 systemd 制定的 unit 规则。</li></ul><h3 id="systemd-体系架构"><a href="#systemd-体系架构" class="headerlink" title="systemd 体系架构"></a>systemd 体系架构</h3><p><img src="https://cdn.jsdelivr.net/gh/muzi502/blog/sourchttps://cdn.jsdelivr.net/gh/muzi502/blog/sourchttps://cdn.jsdelivr.net/gh/muzi502/blog/sourchttps://cdn.jsdelivr.net/gh/muzi502/blog/sourchttps://cdn.jsdelivr.net/gh/muzi502/blog/source/img/systemd_components-svg.png" alt="img"></p><ul><li>最底层：systemd 内核层面依赖 cgroup、autofs、kdbus</li><li>第二层：systemd libraries 是 systemd 依赖库</li><li>第三层：systemd Core 是 systemd 自己的库</li><li>第四层：systemd daemons 以及 targets 是自带的一些基本 unit、target，类似于 sysvinit 中自带的脚本</li><li>最上层就是和  systemd 交互的一些工具</li></ul><p><img src="https://cdn.jsdelivr.net/gh/muzi502/blog/sourchttps://cdn.jsdelivr.net/gh/muzi502/blog/sourchttps://cdn.jsdelivr.net/gh/muzi502/blog/sourchttps://cdn.jsdelivr.net/gh/muzi502/blog/sourchttps://cdn.jsdelivr.net/gh/muzi502/blog/source/img/linux_kernel_unified_hierarchy_cgroups_and_systemd-svg.png" alt="img"></p><h3 id="systemd-unit"><a href="#systemd-unit" class="headerlink" title="systemd unit"></a>systemd unit</h3><p>systemd 将各种系统启动和运行相关的对象， 表示为各种不同类型的单元<code>unit</code>， 并提供了 处理不同单元之间依赖关系的能力。</p><table><thead><tr><th align="center">type</th><th align="center">name</th><th align="left">作用</th></tr></thead><tbody><tr><td align="center">Service unit</td><td align="center">.service</td><td align="left">用于封装一个后台服务进程</td></tr><tr><td align="center">Target unit</td><td align="center">.target</td><td align="left">用于将多个单元在逻辑上组合在一起。</td></tr><tr><td align="center">Device unit</td><td align="center">.device</td><td align="left">用于定义内核识别的设备，在 sysfs(5) 里面作为 udev(7) 设备树展示</td></tr><tr><td align="center">Socket unit</td><td align="center">.socket</td><td align="left">用于标识进程间通信用到的socket文件</td></tr><tr><td align="center">Snapshot unit</td><td align="center">.snapshot</td><td align="left">管理系统快照</td></tr><tr><td align="center">Swap unit</td><td align="center">.swap</td><td align="left">用于标识swap 文件或设备</td></tr><tr><td align="center">Mount unit</td><td align="center">.mount</td><td align="left">用于封装一个文件系统挂载点(也向后兼容传统的 /etc/fstab 文件)</td></tr><tr><td align="center">Automount unit</td><td align="center">.automount</td><td align="left">用于封装一个文件系统自动挂载点</td></tr><tr><td align="center">Path unit</td><td align="center">.path</td><td align="left">用于根据文件系统上特定对象的变化来启动其他服务。</td></tr><tr><td align="center">Time unit</td><td align="center">.timer</td><td align="left">用于封装一个基于时间触发的动作。取代传统的 crond 等任务计划服务</td></tr><tr><td align="center">Slice unit</td><td align="center">*.slice</td><td align="left">用于控制特定 CGroup 内所有进程的总体资源占用。</td></tr></tbody></table><p>需要注意的是 systemd 只在内存中加载最小化的一组单元。 只有至少满足下列条件之一的单元，才会被加载到内存中：</p><ul><li><p>处于 活动(active)、启动中(activating)、停止中(deactivating)、失败(failed) 状态之一(也就是停止(inactive)之外的状态)</p></li><li><p>至少有一个作业正在作业队列中</p></li><li><p>至少有一个其他已经加载到内存中的单元依赖于它</p></li><li><p>仍然占有某些资源 (例如一个已停止的服务单元的进程忽略了终止请求，仍在逗留)</p></li><li><p>被 D-Bus 调用以程序化的方式固定到了内存中</p></li></ul><blockquote><p>只要有需要，systemd 就会自动从磁盘加载所需的单元。 因此实际上用户并不能显而易见的看到某个单元是否已被加载到内存。 使用 <strong>systemctl list-units –all</strong> 命令可以显示当前已加载到内存中的所有单元。 不满足加载条件(见上文)的单元会被立即从内存中卸载，并且它的记帐数据(accounting data)也会被清空。 不过，因为每当一个单元关闭时，都会生成一条日志记录声明该单元所消耗的资源， 所以这些数据通常不会彻底消失。</p></blockquote><h3 id="systemd-unit-配置文件"><a href="#systemd-unit-配置文件" class="headerlink" title="systemd unit 配置文件"></a>systemd unit 配置文件</h3><ul><li>在 CentOS/RedHat 发行版中 <code>man systemd.unit</code></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Table 1.  Load path when running in system mode (--system).</span><br><span class="line">┌────────────────────────┬─────────────────────────────┐</span><br><span class="line">│Path                    │ Description                 │</span><br><span class="line">├────────────────────────┼─────────────────────────────┤</span><br><span class="line">│&#x2F;etc&#x2F;systemd&#x2F;system     │ Local configuration         │</span><br><span class="line">├────────────────────────┼─────────────────────────────┤</span><br><span class="line">│&#x2F;run&#x2F;systemd&#x2F;system     │ Runtime units               │</span><br><span class="line">├────────────────────────┼─────────────────────────────┤</span><br><span class="line">│&#x2F;usr&#x2F;lib&#x2F;systemd&#x2F;system │ Units of installed packages │</span><br><span class="line">└────────────────────────┴─────────────────────────────┘</span><br></pre></td></tr></table></figure><ul><li>在 Ubuntu/Debian 发行版中 <code>man systemd.unit</code></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Table 1.  Load path when running in system mode (--system).</span><br><span class="line">┌────────────────────┬─────────────────────────────┐</span><br><span class="line">│Path                │ Description                 │</span><br><span class="line">├────────────────────┼─────────────────────────────┤</span><br><span class="line">│&#x2F;etc&#x2F;systemd&#x2F;system │ Local configuration         │</span><br><span class="line">├────────────────────┼─────────────────────────────┤</span><br><span class="line">│&#x2F;run&#x2F;systemd&#x2F;system │ Runtime units               │</span><br><span class="line">├────────────────────┼─────────────────────────────┤</span><br><span class="line">│&#x2F;lib&#x2F;systemd&#x2F;system │ Units of installed packages │</span><br><span class="line">└────────────────────┴─────────────────────────────┘</span><br></pre></td></tr></table></figure><p>不同的发行版 systemd unit 的 path 不一样哦，不过 systemd 的配置文件主要位于以下三个目录中</p><ul><li><p><code>/usr/lib/systemd/system</code> 或 <code>/lib/systemd</code> : 使用包管理器安装的软件的 systemd unit 件实际配置文件的存放位置</p></li><li><p><code>/run/systemd/system</code>：在运行时创建的s ystemd unit 文件。该目录优先于已安装服务单元文件的目录。</p><p>  <code>/etc/systemd/system</code>:  优先级最高，由 systemctl 命令创建的 systemd unit 文件以及为扩展服务而添加的 unit 文件都将启用。</p></li></ul><p>在使用 yum/apt 或其他包管理器，以及 rpm/deb 等软件包安装软件的时候，如果该软件支持 systemd 管理的话，就会自动在<code>/usr/lib/systemd/system</code>目录添加一个配置文件。可以用过  systemctl cat name 来查看该软件的  systemd 单元文件，比如查看一下 nginx 的 <code>nginx.service</code> 文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">╭─root@sg-02 ~</span><br><span class="line">╰─# systemctl cat nginx                                                                                         1 ↵</span><br><span class="line"><span class="meta">#</span><span class="bash"> /lib/systemd/system/nginx.service</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Stop dance <span class="keyword">for</span> nginx</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> =======================</span></span><br><span class="line"><span class="meta">#</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> ExecStop sends SIGSTOP (graceful stop) to the nginx process.</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> If, after 5s (--retry QUIT/5) nginx is still running, systemd takes control</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> and sends SIGTERM (fast shutdown) to the main process.</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> After another 5s (TimeoutStopSec=5), and <span class="keyword">if</span> nginx is alive, systemd sends</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> SIGKILL to all the remaining processes <span class="keyword">in</span> the process group (KillMode=mixed).</span></span><br><span class="line"><span class="meta">#</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> nginx signals reference doc:</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> http://nginx.org/en/docs/control.html</span></span><br><span class="line"><span class="meta">#</span></span><br><span class="line">[Unit]</span><br><span class="line">Description=A high performance web server and a reverse proxy server</span><br><span class="line">Documentation=man:nginx(8)</span><br><span class="line">After=network.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=forking</span><br><span class="line">PIDFile=/run/nginx.pid</span><br><span class="line">ExecStartPre=/usr/sbin/nginx -t -q -g 'daemon on; master_process on;'</span><br><span class="line">ExecStart=/usr/sbin/nginx -g 'daemon on; master_process on;'</span><br><span class="line">ExecReload=/usr/sbin/nginx -g 'daemon on; master_process on;' -s reload</span><br><span class="line">ExecStop=-/sbin/start-stop-daemon --quiet --stop --retry QUIT/5 --pidfile /run/nginx.pid</span><br><span class="line">TimeoutStopSec=5</span><br><span class="line">KillMode=mixed</span><br><span class="line"></span><br><span class="line">[Install]</span><br></pre></td></tr></table></figure><p>如果软件没有自带 systemd 配置文件的话，我们可以自己搓一个配置文件出来，并复制到相应的目录下即可。比我我们的 <a href="https://github.com/webp-sh/webp_server_go" target="_blank" rel="noopener">Webp Server Go</a> 的 <code>webps.service</code></p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[Unit]</span></span><br><span class="line"><span class="attr">Description</span>=WebP Server Go</span><br><span class="line"><span class="attr">Documentation</span>=https://github.com/webp-sh/webp_server_go</span><br><span class="line"><span class="attr">After</span>=nginx.target</span><br><span class="line"></span><br><span class="line"><span class="section">[Service]</span></span><br><span class="line"><span class="attr">Type</span>=simple</span><br><span class="line"><span class="attr">StandardError</span>=journal</span><br><span class="line"><span class="attr">WorkingDirectory</span>=/opt/webps</span><br><span class="line"><span class="attr">ExecStart</span>=/opt/webps/webp-server --config /opt/webps/config.json</span><br><span class="line"><span class="attr">Restart</span>=always</span><br><span class="line"><span class="attr">RestartSec</span>=<span class="number">3</span>s</span><br><span class="line"></span><br><span class="line"><span class="section">[Install]</span></span><br><span class="line"><span class="attr">WantedBy</span>=multi-user.target</span><br></pre></td></tr></table></figure><p>关于 systemd 的单元配置文件如何书写，因为根据不同的单元类型包含的配置项实在是巨多。不是三言两语就能讲清的，所以大家还是参考一下 systemd 的官方文档/社区翻译文档。比如 <a href="http://www.jinbuguo.com/systemd/systemd.index.html" target="_blank" rel="noopener">systemd (简体中文)</a>。</p><h3 id="链接文件"><a href="#链接文件" class="headerlink" title="链接文件"></a>链接文件</h3><p>当我们使用 reboot 、poweroff 、shutdown 等命令的时候，其实并不是执行该命令本身，背后是调用的 systemctl 命令。systemctl 命令会将 reboot 这些命令作为 $1 参数传递进去。所以执行 reboot 和 systemctl reboot 本质上是一样的。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">╭─root@gitlab /sbin</span><br><span class="line">╰─# ls -alh /usr/bin /sbin /bin /usr/local/bin  | grep systemctl</span><br><span class="line">-rwxr-xr-x  1 root root 179K Feb  5 01:07 systemctl</span><br><span class="line">lrwxrwxrwx  1 root root      14 Feb  5 01:07 halt -&gt; /bin/systemctl</span><br><span class="line">lrwxrwxrwx  1 root root      14 Feb  5 01:07 poweroff -&gt; /bin/systemctl</span><br><span class="line">lrwxrwxrwx  1 root root      14 Feb  5 01:07 reboot -&gt; /bin/systemctl</span><br><span class="line">lrwxrwxrwx  1 root root      14 Feb  5 01:07 runlevel -&gt; /bin/systemctl</span><br><span class="line">lrwxrwxrwx  1 root root      14 Feb  5 01:07 shutdown -&gt; /bin/systemctl</span><br><span class="line">lrwxrwxrwx  1 root root      14 Feb  5 01:07 telinit -&gt; /bin/systemctl</span><br></pre></td></tr></table></figure><p>还有前文提到的有一点就是绝大多数使用 systemd 的发行版都设置了一个软连接，由 <code>/sbin/init -&gt; /lib/systemd/systemd</code>。另外在 <code>/etc/systemd</code> 下也有很多链接文件，感兴趣的可以去分析一下。</p><h3 id="systemd-启动流程"><a href="#systemd-启动流程" class="headerlink" title="systemd 启动流程"></a>systemd 启动流程</h3><p>回到 Linux 启动流程，当内核加载到内存中后开始执行 systemd 。根据 dmesg 的日志我们可以了解到 systemd 启动后执行了哪一些操作。</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">[    <span class="number">2</span><span class="variable">.516258</span>] Run /sbin/init as init process</span><br><span class="line">[    <span class="number">3</span><span class="variable">.992535</span>] systemd[<span class="number">1</span>]: systemd <span class="number">237</span> running in system mode. (+PAM +AUDIT +SELINUX +IMA +APPARMOR +SMACK +SYSVINIT +UTMP +LIBCRYPTSETUP +GCRYPT +GNUTLS +ACL +XZ +LZ4 +SECCOMP +BLKID +ELFUTILS +KMOD -IDN2 +IDN -PCRE2 <span class="keyword">default</span>-hierarchy=hybrid)</span><br><span class="line">[    <span class="number">4</span><span class="variable">.002297</span>] systemd[<span class="number">1</span>]: Detected virtualization kvm.</span><br><span class="line">[    <span class="number">4</span><span class="variable">.004593</span>] systemd[<span class="number">1</span>]: Detected architecture x86-<span class="number">64</span>.</span><br><span class="line">[    <span class="number">4</span><span class="variable">.031531</span>] systemd[<span class="number">1</span>]: Set hostname to &lt;blog&gt;.</span><br><span class="line">[    <span class="number">5</span><span class="variable">.343604</span>] systemd[<span class="number">1</span>]: Reached target Swap.</span><br><span class="line">[    <span class="number">5</span><span class="variable">.355156</span>] systemd[<span class="number">1</span>]: Started Dispatch Password Requests to Console Directory Watch.</span><br><span class="line">[    <span class="number">5</span><span class="variable">.367360</span>] systemd[<span class="number">1</span>]: Created slice User <span class="keyword">and</span> Session Slice.</span><br><span class="line">[    <span class="number">5</span><span class="variable">.379321</span>] systemd[<span class="number">1</span>]: Set up automount Arbitrary Executable File Formats File System Automount Point.</span><br><span class="line">[    <span class="number">5</span><span class="variable">.395189</span>] systemd[<span class="number">1</span>]: Started Forward Password Requests to Wall Directory Watch.</span><br><span class="line">[    <span class="number">5</span><span class="variable">.411078</span>] systemd[<span class="number">1</span>]: Reached target Local Encrypted Volumes.</span><br><span class="line">[    <span class="number">5</span><span class="variable">.644759</span>] EXT4-fs (sda1): re-mounted. Opts: (<span class="literal">null</span>)</span><br><span class="line">[    <span class="number">5</span><span class="variable">.702603</span>] RPC: Registered named UNIX socket transport <span class="keyword">module</span>.</span><br><span class="line">[    <span class="number">5</span><span class="variable">.704115</span>] RPC: Registered udp transport <span class="keyword">module</span>.</span><br><span class="line">[    <span class="number">5</span><span class="variable">.705318</span>] RPC: Registered tcp transport <span class="keyword">module</span>.</span><br><span class="line">[    <span class="number">5</span><span class="variable">.706573</span>] RPC: Registered tcp NFSv4<span class="variable">.1</span> backchannel transport <span class="keyword">module</span>.</span><br><span class="line">[    <span class="number">5</span><span class="variable">.825727</span>] Loading iSCSI transport <span class="keyword">class</span> v2<span class="variable">.0</span>-<span class="number">870</span>.</span><br><span class="line">[    <span class="number">5</span><span class="variable">.912079</span>] iscsi: registered transport (tcp)</span><br><span class="line">[    <span class="number">5</span><span class="variable">.942499</span>] systemd-journald[<span class="number">196</span>]: Received request to flush runtime journal from PID <span class="number">1</span></span><br><span class="line">[    <span class="number">5</span><span class="variable">.973269</span>] systemd-journald[<span class="number">196</span>]: File /<span class="keyword">var</span>/log/journal/<span class="number">7</span>bc72ce3e0aa559e38159aa4fa0547f9/system<span class="variable">.journal</span> corrupted <span class="keyword">or</span> uncleanly shut down, renaming <span class="keyword">and</span> replacing.</span><br></pre></td></tr></table></figure><blockquote><p>下面的图表解释了 这些具有特定含义的 target 单元之间的依赖关系 以及各自在启动流程中的位置。图中的箭头表示了单元之间的依赖关系与先后顺序， 整个图表按照自上而下的时间顺序执行。</p></blockquote><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">local</span>-fs-pre<span class="variable">.target</span></span><br><span class="line">            |</span><br><span class="line">            v</span><br><span class="line">   (various mounts <span class="keyword">and</span>   (various swap   (various cryptsetup</span><br><span class="line">    fsck services...)     devices...)        devices...)       (various low-level   (various low-level</span><br><span class="line">            |                  |                  |             services: udevd,     API VFS mounts:</span><br><span class="line">            v                  v                  v             tmpfiles, random     mqueue, configfs,</span><br><span class="line">     <span class="keyword">local</span>-fs<span class="variable">.target</span>      swap<span class="variable">.target</span>     cryptsetup<span class="variable">.target</span>    seed, sysctl, ...)      debugfs, ...)</span><br><span class="line">            |                  |                  |                    |                    |</span><br><span class="line">            \<span class="number">__________________</span>|<span class="number">_________________</span> | <span class="meta">`_______________` |____________________/</span></span><br><span class="line">                                                 \|/</span><br><span class="line">                                                  v</span><br><span class="line">                                           sysinit<span class="variable">.target</span></span><br><span class="line">                                                  |</span><br><span class="line">             <span class="meta">`________________________________` /|\________________________________________</span></span><br><span class="line">            /                  |                  |                    |                    \</span><br><span class="line">            |                  |                  |                    |                    |</span><br><span class="line">            v                  v                  |                    v                    v</span><br><span class="line">        (various           (various               |                (various          rescue<span class="variable">.service</span></span><br><span class="line">       timers...)          paths...)              |               sockets...)               |</span><br><span class="line">            |                  |                  |                    |                    v</span><br><span class="line">            v                  v                  |                    v             *rescue<span class="variable">.target</span></span><br><span class="line">      timers<span class="variable">.target</span>      paths<span class="variable">.target</span>             |             sockets<span class="variable">.target</span></span><br><span class="line">            |                  |                  |                    |</span><br><span class="line">            v                  \<span class="number">_________________</span> | <span class="meta">`_______________` /</span></span><br><span class="line">                                                 \|/</span><br><span class="line">                                                  v</span><br><span class="line">                                            basic<span class="variable">.target</span></span><br><span class="line">                                                  |</span><br><span class="line">             <span class="meta">`________________________________` /|                                 emergency.service</span></span><br><span class="line">            /                  |                  |                                         |</span><br><span class="line">            |                  |                  |                                         v</span><br><span class="line">            v                  v                  v                                *emergency<span class="variable">.target</span></span><br><span class="line">        display-        (various system    (various system</span><br><span class="line">    manager<span class="variable">.service</span>         services           services)</span><br><span class="line">            |             required <span class="keyword">for</span>            |</span><br><span class="line">            |            graphical UIs)           v</span><br><span class="line">            |                  |          *multi-user<span class="variable">.target</span></span><br><span class="line">            |                  |                  |</span><br><span class="line">            \<span class="number">_________________</span> | <span class="meta">`_____________` /</span></span><br><span class="line">                              \|/</span><br><span class="line">                               v</span><br><span class="line">                  *graphical<span class="variable">.target</span></span><br></pre></td></tr></table></figure><ul><li>systemd 执行的第一个目标是 <strong>default.target</strong>。但实际上 default.target 是指向 <strong>graphical.target</strong> 的软链接。Graphical.target 的实际位置是<code>/usr/lib/systemd/system/graphical.target</code>。</li></ul><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">╭─root@ ~</span><br><span class="line">╰─# cat /usr/lib/systemd/system/graphical.target</span><br><span class="line"><span class="comment">#  This file is part of systemd.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#  systemd is free software; you can redistribute it and/or modify it</span></span><br><span class="line"><span class="comment">#  under the terms of the GNU Lesser General Public License as published by</span></span><br><span class="line"><span class="comment">#  the Free Software Foundation; either version 2.1 of the License, or</span></span><br><span class="line"><span class="comment">#  (at your option) any later version.</span></span><br><span class="line"></span><br><span class="line"><span class="section">[Unit]</span></span><br><span class="line"><span class="attr">Description</span>=Graphical Interface</span><br><span class="line"><span class="attr">Documentation</span>=man:systemd.special(<span class="number">7</span>)</span><br><span class="line"><span class="attr">Requires</span>=multi-user.target</span><br><span class="line"><span class="attr">Wants</span>=display-manager.service</span><br><span class="line"><span class="attr">Conflicts</span>=rescue.service rescue.target</span><br><span class="line"><span class="attr">After</span>=multi-user.target rescue.service rescue.target display-manager.service</span><br><span class="line"><span class="attr">AllowIsolate</span>=<span class="literal">yes</span></span><br></pre></td></tr></table></figure><ul><li>在<strong>default.target</strong>这个阶段，会启动<strong>multi-user.target</strong>而这个 target 将自己的子单元放在目录<code>/etc/systemd/system/multi-user.target.wants</code>里。这个 target 为多用户支持设定系统环境。非 root用户会在这个阶段的引导过程中启用。防火墙相关的服务也会在这个阶段启动。<strong>multi-user.target</strong>会将控制权交给另一层<strong>basic.target</strong>。</li></ul><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">╭─root@docker-230 ~</span><br><span class="line">╰─# cat /usr/lib/systemd/system/multi-user.target</span><br><span class="line"><span class="comment">#  This file is part of systemd.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#  systemd is free software; you can redistribute it and/or modify it</span></span><br><span class="line"><span class="comment">#  under the terms of the GNU Lesser General Public License as published by</span></span><br><span class="line"><span class="comment">#  the Free Software Foundation; either version 2.1 of the License, or</span></span><br><span class="line"><span class="comment">#  (at your option) any later version.</span></span><br><span class="line"></span><br><span class="line"><span class="section">[Unit]</span></span><br><span class="line"><span class="attr">Description</span>=Multi-User System</span><br><span class="line"><span class="attr">Documentation</span>=man:systemd.special(<span class="number">7</span>)</span><br><span class="line"><span class="attr">Requires</span>=basic.target</span><br><span class="line"><span class="attr">Conflicts</span>=rescue.service rescue.target</span><br><span class="line"><span class="attr">After</span>=basic.target rescue.service rescue.target</span><br><span class="line"><span class="attr">AllowIsolate</span>=<span class="literal">yes</span></span><br></pre></td></tr></table></figure><ul><li><strong>basic.target</strong>单元用于启动普通服务特别是图形管理服务。它通过<code>/etc/systemd/system/basic.target.wants</code>目录来决定哪些服务会被启动，<strong>basic.target</strong> 之后将控制权交给 <strong>sysinit.target</strong>.</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">╭─root@docker-230 ~</span><br><span class="line">╰─# tree /etc/systemd/system/multi-user.target.wants</span><br><span class="line">/etc/systemd/system/multi-user.target.wants</span><br><span class="line">├── auditd.service -&gt; /usr/lib/systemd/system/auditd.service</span><br><span class="line">├── chronyd.service -&gt; /usr/lib/systemd/system/chronyd.service</span><br><span class="line">├── crond.service -&gt; /usr/lib/systemd/system/crond.service</span><br><span class="line">├── docker.service -&gt; /usr/lib/systemd/system/docker.service</span><br><span class="line">├── firewalld.service -&gt; /usr/lib/systemd/system/firewalld.service</span><br><span class="line">├── gitlab-runsvdir.service -&gt; /usr/lib/systemd/system/gitlab-runsvdir.service</span><br><span class="line">├── irqbalance.service -&gt; /usr/lib/systemd/system/irqbalance.service</span><br><span class="line">├── kdump.service -&gt; /usr/lib/systemd/system/kdump.service</span><br><span class="line">├── NetworkManager.service -&gt; /usr/lib/systemd/system/NetworkManager.service</span><br><span class="line">├── remote-fs.target -&gt; /usr/lib/systemd/system/remote-fs.target</span><br><span class="line">├── rhel-configure.service -&gt; /usr/lib/systemd/system/rhel-configure.service</span><br><span class="line">├── rsyslog.service -&gt; /usr/lib/systemd/system/rsyslog.service</span><br><span class="line">├── sshd.service -&gt; /usr/lib/systemd/system/sshd.service</span><br><span class="line">└── tuned.service -&gt; /usr/lib/systemd/system/tuned.service</span><br></pre></td></tr></table></figure><ul><li><strong>sysinit.target</strong>会启动重要的系统服务例如系统挂载，内存交换空间和设备，内核补充选项等等。sysinit.target 在启动过程中会传递给<strong>local-fs.target</strong>。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">╭─root@docker-230 ~</span><br><span class="line">╰─<span class="comment"># tree /etc/systemd/system/basic.target.wants</span></span><br><span class="line">/etc/systemd/system/basic.target.wants</span><br><span class="line">├── microcode.service -&gt; /usr/lib/systemd/system/microcode.service</span><br><span class="line">└── rhel-dmesg.service -&gt; /usr/lib/systemd/system/rhel-dmesg.service</span><br><span class="line"></span><br><span class="line">0 directories, 2 files</span><br></pre></td></tr></table></figure><ul><li><code>local-fs.target</code>，这个 target 单元不会启动用户相关的服务，它只处理底层核心服务。这个 target 会根据 /etc/fstab 和 /etc/inittab 来执行相关操作。</li></ul><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">╭─root@docker-230 ~</span><br><span class="line">╰─# cat /usr/lib/systemd/system/sysinit.target</span><br><span class="line"><span class="comment">#  This file is part of systemd.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#  systemd is free software; you can redistribute it and/or modify it</span></span><br><span class="line"><span class="comment">#  under the terms of the GNU Lesser General Public License as published by</span></span><br><span class="line"><span class="comment">#  the Free Software Foundation; either version 2.1 of the License, or</span></span><br><span class="line"><span class="comment">#  (at your option) any later version.</span></span><br><span class="line"></span><br><span class="line"><span class="section">[Unit]</span></span><br><span class="line"><span class="attr">Description</span>=System Initialization</span><br><span class="line"><span class="attr">Documentation</span>=man:systemd.special(<span class="number">7</span>)</span><br><span class="line"><span class="attr">Conflicts</span>=emergency.service emergency.target</span><br><span class="line"><span class="attr">Wants</span>=local-fs.target swap.target</span><br><span class="line"><span class="attr">After</span>=local-fs.target swap.target emergency.service emergency.target</span><br></pre></td></tr></table></figure><h3 id="进程树"><a href="#进程树" class="headerlink" title="进程树"></a>进程树</h3><p>我们使用 pstree 命令来看一哈进程树的状态，用户空间的进程都挂在  PID 为 1 的 systemd 下。由 systemd 来管理进程优点多多 😂</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">╭─root@sg-02 ~</span><br><span class="line">╰─# pstree -p</span><br><span class="line">systemd(1)─┬─accounts-daemon(661)─┬─&#123;accounts-daemon&#125;(689)</span><br><span class="line">           │                      └─&#123;accounts-daemon&#125;(729)</span><br><span class="line">           ├─agetty(971)</span><br><span class="line">           ├─agetty(992)</span><br><span class="line">           ├─aria2c(1010)</span><br><span class="line">           ├─atd(653)</span><br><span class="line">           ├─containerd(2915)─┬─&#123;containerd&#125;(2928)</span><br><span class="line">           │                  ├─&#123;containerd&#125;(2929)</span><br><span class="line">           │                  ├─&#123;containerd&#125;(2930)</span><br><span class="line">           │                  ├─&#123;containerd&#125;(2934)</span><br><span class="line">           │                  ├─&#123;containerd&#125;(2935)</span><br><span class="line">           │                  ├─&#123;containerd&#125;(2950)</span><br><span class="line">           │                  ├─&#123;containerd&#125;(2951)</span><br><span class="line">           │                  ├─&#123;containerd&#125;(2978)</span><br><span class="line">           │                  ├─&#123;containerd&#125;(5360)</span><br><span class="line">           │                  └─&#123;containerd&#125;(8299)</span><br><span class="line">           ├─cron(639)───cron(20506)───sh(20507)───monitor.sh(20509)───ffmpeg(20514)</span><br><span class="line">           ├─dbus-daemon(664)</span><br><span class="line">           ├─dockerd(17771)─┬─&#123;dockerd&#125;(17783)</span><br><span class="line">           │                ├─&#123;dockerd&#125;(17784)</span><br><span class="line">           │                ├─&#123;dockerd&#125;(17785)</span><br><span class="line">           │                ├─&#123;dockerd&#125;(17791)</span><br><span class="line">           │                ├─&#123;dockerd&#125;(17793)</span><br><span class="line">           │                ├─&#123;dockerd&#125;(17800)</span><br><span class="line">           │                ├─&#123;dockerd&#125;(17803)</span><br><span class="line">           │                ├─&#123;dockerd&#125;(3030)</span><br><span class="line">           │                └─&#123;dockerd&#125;(3031)</span><br><span class="line">           ├─fail2ban-server(755)─┬─&#123;fail2ban-server&#125;(1059)</span><br><span class="line">           │                      └─&#123;fail2ban-server&#125;(1060)</span><br><span class="line">           ├─iscsid(896)</span><br><span class="line">           ├─iscsid(897)</span><br><span class="line">           ├─lvmetad(392)</span><br><span class="line">           ├─networkd-dispat(622)───&#123;networkd-dispat&#125;(982)</span><br><span class="line">           ├─nginx(3305)───nginx(17700)</span><br><span class="line">           ├─php-fpm7.2(7497)─┬─php-fpm7.2(1295)</span><br><span class="line">           │                  ├─php-fpm7.2(1296)</span><br><span class="line">           │                  └─php-fpm7.2(5611)</span><br><span class="line">           ├─polkitd(808)─┬─&#123;polkitd&#125;(820)</span><br><span class="line">           │              └─&#123;polkitd&#125;(822)</span><br><span class="line">           ├─rngd(981)</span><br><span class="line">           ├─rpcbind(7125)</span><br><span class="line">           ├─rsyslogd(11567)─┬─&#123;rsyslogd&#125;(11598)</span><br><span class="line">           │                 ├─&#123;rsyslogd&#125;(11599)</span><br><span class="line">           │                 └─&#123;rsyslogd&#125;(11600)</span><br><span class="line">           ├─ss-server(17126)───obfs-server(17138)</span><br><span class="line">             ├─sshd(5357)─┬─sshd(15490)───sshd(15598)───zsh(15619)───pstree(20539)</span><br><span class="line">           │            ├─sshd(20413)───sshd(20414)</span><br><span class="line">           │            └─sshd(20517)</span><br><span class="line">           ├─systemd(5715)───(sd-pam)(5718)</span><br><span class="line">           ├─systemd-journal(12866)</span><br><span class="line">           ├─systemd-logind(652)</span><br><span class="line">           ├─systemd-network(12827)</span><br><span class="line">           ├─systemd-resolve(12839)</span><br><span class="line">           ├─systemd-timesyn(12852)───&#123;systemd-timesyn&#125;(12861)</span><br><span class="line">           └─systemd-udevd(8171)</span><br></pre></td></tr></table></figure><h2 id="管理-systemd"><a href="#管理-systemd" class="headerlink" title="管理 systemd"></a>管理 systemd</h2><p>讲完了 systemd 的基础知识，接下来就开始动手实践，控制 systemd 的主要命令主要有以下几种：</p><ul><li>systemctl 命令控制 <code>systemd</code> 的管理系统和服务的命令行工具</li><li>systemsdm 命令控制 <code>systemd</code> 的管理和服务的图形化工具</li><li>journalctl 命令查詢 <code>systemd</code> 日志系统</li><li>loginctl 命令控制 <code>systemd</code> 登入管理器</li><li>systemd-analyze 分析系统启动效能（类似开机时间？</li></ul><h3 id="systemctl-基本用法"><a href="#systemctl-基本用法" class="headerlink" title="systemctl 基本用法"></a>systemctl 基本用法</h3><h4 id="启动-重启-停止服务"><a href="#启动-重启-停止服务" class="headerlink" title="启动/重启/停止服务"></a>启动/重启/停止服务</h4><ul><li><code>systemctl start NAME</code></li><li><code>systemctl restart NAME</code></li><li><code>systemctl stop NAME</code></li></ul><h4 id="查看服务状态"><a href="#查看服务状态" class="headerlink" title="查看服务状态"></a>查看服务状态</h4><p>就如文章开头所提到的，需要注意的是最下面那种带时间戳的是输出的日志</p><ul><li><code>systemctl status NAME</code></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">╭─root@blog /home/ubuntu</span><br><span class="line">╰─# systemctl status webps                                                                                    130 ↵</span><br><span class="line">● webps.service - WebP Server</span><br><span class="line">   Loaded: loaded (/opt/webps/webps.service; enabled; vendor preset: enabled)</span><br><span class="line">   Active: active (running) since Wed 2020-03-18 13:58:00 UTC; 22h ago</span><br><span class="line">     Docs: https://github.com/n0vad3v/webp_server_go</span><br><span class="line"> Main PID: 5732 (webp-server)</span><br><span class="line">    Tasks: 52 (limit: 684)</span><br><span class="line">   Memory: 185.2M</span><br><span class="line">      CPU: 1min 30.092s</span><br><span class="line">   CGroup: /system.slice/webps.service</span><br><span class="line">           └─5732 /opt/webps/webp-server --config /opt/webps/config.json</span><br><span class="line"></span><br><span class="line">Mar 19 05:23:20 blog webp-server[5732]: Save to exhaushttps://cdn.jsdelivr.net/gh/muzi502/blog/sourchttps://cdn.jsdelivr.net/gh/muzi502/blog/sourchttps://cdn.jsdelivr.net/gh/muzi502/blog/sourchttps://cdn.jsdelivr.net/gh/muzi502/blog/sourchttps://cdn.jsdelivr.net/gh/muzi502/blog/source/img/image-20200109192923891.png.1584538399.webp ok</span><br></pre></td></tr></table></figure><h4 id="列出所有单元："><a href="#列出所有单元：" class="headerlink" title="列出所有单元："></a>列出所有单元：</h4><ul><li><code>systemctl list-unit-files</code></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">╭─root@docker-230 ~</span><br><span class="line">╰─<span class="comment"># systemctl list-unit-files</span></span><br><span class="line">UNIT FILE                                     STATE</span><br><span class="line">proc-sys-fs-binfmt_misc.automount             static</span><br><span class="line">dev-hugepages.mount                           static</span><br><span class="line">dev-mqueue.mount                              static</span><br></pre></td></tr></table></figure><h4 id="列出激活的单元"><a href="#列出激活的单元" class="headerlink" title="列出激活的单元"></a>列出激活的单元</h4><ul><li><code>systemctl list-units</code> 等同于 <code>systemctl</code></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">╭─root@docker-230 ~</span><br><span class="line">╰─# systemctl list-units                                                                                      127 ↵</span><br><span class="line">  UNIT                                         LOAD   ACTIVE SUB       DESCRIPTION</span><br><span class="line">  proc-sys-fs-binfmt_misc.automount            loaded active waiting   Arbitrary Executable File Formats File System</span><br><span class="line">  sys-devices-pci0000:00-0000:00:15.0-0000:03:00.0-host2-target2:0:0-2:0:0:0-block-sda-sda1.device loaded active plu</span><br><span class="line">  sys-devices-pci0000:00-0000:00:15.0-0000:03:00.0-host2-target2:0:0-2:0:0:0-block-sda-sda2.device loaded active plu</span><br></pre></td></tr></table></figure><h4 id="重新载入-systemd，扫描新的或有变动的单元："><a href="#重新载入-systemd，扫描新的或有变动的单元：" class="headerlink" title="重新载入 systemd，扫描新的或有变动的单元："></a>重新载入 systemd，扫描新的或有变动的单元：</h4><p>当向 systemd 的目录中添加显得 unit 文件后需要 reload 一下才能生效</p><ul><li><code>systemctl daemon-reload</code></li></ul><h4 id="查询服务是否开机启动"><a href="#查询服务是否开机启动" class="headerlink" title="查询服务是否开机启动"></a>查询服务是否开机启动</h4><ul><li><code>systemctl is-enabled crond</code></li></ul><h4 id="设置-取消服务开机自启"><a href="#设置-取消服务开机自启" class="headerlink" title="设置/取消服务开机自启"></a>设置/取消服务开机自启</h4><ul><li><code>systemctl enable NAME</code></li><li><code>systemctl disable NAME</code></li></ul><h4 id="远程控制其他服务器的-systemd"><a href="#远程控制其他服务器的-systemd" class="headerlink" title="远程控制其他服务器的 systemd"></a>远程控制其他服务器的 systemd</h4><p> <code>systemctl</code> 参数中添加 <code>-H &lt;用户名&gt;@&lt;主机名&gt;</code> 可以实现对其他机器的远程控制，该功能使用 <a href="https://wiki.archlinux.org/index.php/SSH_(简体中文)" target="_blank" rel="noopener">SSH</a> 连接。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">╭─root@blog /home/ubuntu</span><br><span class="line">╰─# systemctl status nginx -H sg2</span><br><span class="line">● nginx.service - A high performance web server and a reverse proxy server</span><br><span class="line">   Loaded: loaded (/lib/systemd/system/nginx.service; enabled; vendor preset: enabled)</span><br><span class="line">   Active: active (running) since Mon 2020-02-17 08:41:11 UTC; 1 months 0 days ago</span><br><span class="line">     Docs: man:nginx(8)</span><br><span class="line"> Main PID: 3305</span><br><span class="line">    Tasks: 2 (limit: 1152)</span><br><span class="line">   CGroup: /system.slice/nginx.service</span><br><span class="line">           ├─ 3305 nginx: master process /usr/sbin/nginx -g daemon on; master_process on;</span><br><span class="line">           └─17700 nginx: worker process</span><br></pre></td></tr></table></figure><h4 id="使用systemctl命令杀死服务"><a href="#使用systemctl命令杀死服务" class="headerlink" title="使用systemctl命令杀死服务"></a>使用systemctl命令杀死服务</h4><ul><li><code>systemctl kill NAME</code></li></ul><h3 id="journal"><a href="#journal" class="headerlink" title="journal"></a>journal</h3><p>systemd 的第二个主要部分是 journal 日志系统，类似于 syslog 但也有些显著区别。如果你喜欢用 <code>sed 、grep 、awk</code> 三剑客来处理日志，那么当你面对 journal 日志系统的时候你就准备<strong>掀桌儿</strong>吧！因为这是个二进制日志，无法使用常规的命令行文本处理工具来解析它😂</p><h3 id="systemd-analyze"><a href="#systemd-analyze" class="headerlink" title="systemd-analyze"></a>systemd-analyze</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">╭─root@docker-230 ~</span><br><span class="line">╰─<span class="comment"># systemd-analyze</span></span><br><span class="line">Startup finished <span class="keyword">in</span> 489ms (kernel) + 1.547s (initrd) + 10.333s (userspace) = 12.369s</span><br></pre></td></tr></table></figure><h2 id="推荐-参考"><a href="#推荐-参考" class="headerlink" title="推荐/参考"></a>推荐/参考</h2><h3 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h3><ul><li><a href="https://github.com/systemd/systemd" target="_blank" rel="noopener">github.com/systemd/systemd</a></li><li><a href="https://systemd.io/" target="_blank" rel="noopener">systemd.io</a></li></ul><h3 id="文档"><a href="#文档" class="headerlink" title="文档"></a>文档</h3><ul><li><p><a href="http://www.jinbuguo.com/systemd/systemd.exec.html" target="_blank" rel="noopener">systemd.exec 中文手册</a></p></li><li><p><a href="https://wiki.archlinux.org/index.php/systemd_(%E7%AE%80%E4%BD%93%E4%B8%AD%E6%96%87)" target="_blank" rel="noopener">systemd (简体中文)</a></p></li><li><p><a href="https://wiki.debian.org/systemd" target="_blank" rel="noopener">wiki.debian.org/systemd</a></p></li><li><p><a href="https://www.debian.org/doc/manuals/debian-reference/ch03.zh-tw.html" target="_blank" rel="noopener">第 3 章 系統初始化</a></p></li><li><p><a href="https://openwrt.org/docs/techref/architecture" target="_blank" rel="noopener">OpenWrt – operating system architecture</a></p></li><li><p><a href="http://manpages.ubuntu.com/manpages/cosmic/zh_CN/man7/bootup.7.html" target="_blank" rel="noopener">bootup - 系统启动流程</a></p></li><li><p><a href="https://access.redhat.com/documentation/en-us/red_hat_enterprise_linux/7/html/system_administrators_guide/chap-managing_services_with_systemd" target="_blank" rel="noopener">CHAPTER 10. MANAGING SERVICES WITH SYSTEMD</a></p></li></ul><h3 id="博客"><a href="#博客" class="headerlink" title="博客"></a>博客</h3><ul><li><p><a href="https://coolshell.cn/articles/17998.html" target="_blank" rel="noopener">LINUX PID 1 和 SYSTEMD</a> 耗子的博客，必须墙裂推荐阅读哈，其他的可以不读，但这一篇博客必须要读哦 ：）</p></li><li><p><a href="https://lp007819.wordpress.com/2015/01/11/systemd%E7%9A%84%E4%B8%80%E4%BA%9B%E6%80%BB%E7%BB%93/" target="_blank" rel="noopener">systemd的一些总结</a></p></li><li><p><a href="https://linux.cn/article-5457-1.html" target="_blank" rel="noopener">走进Linux之systemd启动过程</a></p></li><li><p><a href="https://hotttao.github.io/2018/08/03/linux_mt/14-Linux%E7%B3%BB%E7%BB%9F%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B%E5%8F%8A%E5%86%85%E6%A0%B8%E6%A8%A1%E5%9D%97%E7%AE%A1%E7%90%86/CentOS7-Systemd%E5%90%AF%E5%8A%A8%E6%B5%81%E7%A8%8B/" target="_blank" rel="noopener">13.3 Centos7 Systemd 启动流程</a></p></li><li><p><a href="https://www.itwire.com/business-it-news/open-source/65402-torvalds-says-he-has-no-strong-opinions-on-systemd" target="_blank" rel="noopener">Torvalds says he has no strong opinions on systemd</a></p></li><li><p><a href="http://0pointer.de/blog/projects/systemd.html" target="_blank" rel="noopener">Rethinking PID 1</a></p></li><li><p><a href="http://0pointer.de/blog/projects/the-biggest-myths.html" target="_blank" rel="noopener">The Biggest Myths</a></p></li><li><p><a href="https://www.bennythink.com/linux-keep-running.html" target="_blank" rel="noopener">Linux 怎么让程序持续运行：简单说说几种好玩的办法</a></p></li><li><p><a href="https://www.bennythink.com/systemd-accounting.html" target="_blank" rel="noopener">systemd – systemctl 不显示内存 CPU 信息</a></p></li><li><p><a href="https://lp007819.wordpress.com/2015/01/17/systemd-journal-%e4%bb%8b%e7%bb%8d/" target="_blank" rel="noopener">systemd journal 介绍</a></p></li><li><p><a href="http://blog.lujun9972.win/blog/2018/08/08/%E4%BD%BF%E7%94%A8journalctl%E6%9F%A5%E7%9C%8Bsystemd%E6%97%A5%E5%BF%97/index.html" target="_blank" rel="noopener">使用journalctl查看systemd日志</a></p></li><li><p><a href="http://blog.lujun9972.win/blog/2019/11/30/%E5%A6%82%E4%BD%95%E9%98%B2%E6%AD%A2%E6%84%8F%E5%A4%96%E9%87%8D%E5%90%AFlinux(%E5%9F%BA%E4%BA%8Esystemd)/index.html" target="_blank" rel="noopener">如何防止意外重启Linux(基于systemd)</a></p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;h2 id=&quot;小插曲&quot;&gt;&lt;a href=&quot;#小插曲&quot;
        
      
    
    </summary>
    
    
      <category term="技术" scheme="https://blog.k8s.li/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="blog" scheme="https://blog.k8s.li/tags/blog/"/>
    
      <category term="Linux" scheme="https://blog.k8s.li/tags/Linux/"/>
    
      <category term="笔记" scheme="https://blog.k8s.li/tags/%E7%AC%94%E8%AE%B0/"/>
    
  </entry>
  
  <entry>
    <title>N1 盒子刷入 OpenWrt 并部署 K3s</title>
    <link href="https://blog.k8s.li/N1-openwrt.html"/>
    <id>https://blog.k8s.li/N1-openwrt.html</id>
    <published>2020-03-07T16:00:00.000Z</published>
    <updated>2020-03-07T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="K3s"><a href="#K3s" class="headerlink" title="K3s"></a>K3s</h2><p>去年的时候听了 Rancher 的直播分享讲  <a href="http://dockone.io/article/9384" target="_blank" rel="noopener">k3s在边缘计算中的应用实践</a>，就感觉很好玩儿，当时对 K3s 还是很感兴趣，无奈当时手头没有合适的开发板可玩，就没愿意花钱再买块树莓派吃灰😂。直到上周末的时候一次机会得以重新认识了一下 <a href="https://github.com/rancher/k3s" target="_blank" rel="noopener">K3s</a> 所以就想找个设备来玩玩 K3s。于是东挑西选就选定了斐讯 N1 ，优点多多，不仅可以做路由器还能跑 docker 、还能做 NAS 等等，两个字真香😂。之前我一直使用 <code>R6300V2</code> 刷了梅林以及另一台 <code>WNDR3700V4</code> 刷了 <code>OpenWrt</code> 做透明代理，在 <code>ESXi</code> 上也装了个 <code>OpenWrt</code> 软路由给内网的虚拟机做透明代理，但还是心有不甘想找一台性能更好一点的设备来做旁路网关。综上就种草买了早已经被大家玩烂了的 <a href="https://pockies.github.io/2019/03/07/phicomm-n1/" target="_blank" rel="noopener">N1盒子</a>。</p><h2 id="开箱"><a href="#开箱" class="headerlink" title="开箱"></a>开箱</h2><h3 id="外包装"><a href="#外包装" class="headerlink" title="外包装"></a>外包装</h3><p><img src="https://cdn.jsdelivr.net/gh/muzi502/blog/sourchttps://cdn.jsdelivr.net/gh/muzi502/blog/sourchttps://cdn.jsdelivr.net/gh/muzi502/blog/sourchttps://cdn.jsdelivr.net/gh/muzi502/blog/sourchttps://cdn.jsdelivr.net/gh/muzi502/blog/source/img/image-20200308170852893.png" alt="image-20200308170852893"></p><h3 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h3><p><img src="https://cdn.jsdelivr.net/gh/muzi502/blog/sourchttps://cdn.jsdelivr.net/gh/muzi502/blog/sourchttps://cdn.jsdelivr.net/gh/muzi502/blog/sourchttps://cdn.jsdelivr.net/gh/muzi502/blog/sourchttps://cdn.jsdelivr.net/gh/muzi502/blog/source/img/image-20200308170909549.png" alt="image-20200308170909549"></p><h3 id="开机画面"><a href="#开机画面" class="headerlink" title="开机画面"></a>开机画面</h3><p><img src="https://cdn.jsdelivr.net/gh/muzi502/blog/sourchttps://cdn.jsdelivr.net/gh/muzi502/blog/sourchttps://cdn.jsdelivr.net/gh/muzi502/blog/sourchttps://cdn.jsdelivr.net/gh/muzi502/blog/sourchttps://cdn.jsdelivr.net/gh/muzi502/blog/source/img/image-20200308170935704.png" alt="image-20200308170935704"></p><h3 id="电视系统"><a href="#电视系统" class="headerlink" title="电视系统"></a>电视系统</h3><p><img src="https://cdn.jsdelivr.net/gh/muzi502/blog/sourchttps://cdn.jsdelivr.net/gh/muzi502/blog/sourchttps://cdn.jsdelivr.net/gh/muzi502/blog/sourchttps://cdn.jsdelivr.net/gh/muzi502/blog/sourchttps://cdn.jsdelivr.net/gh/muzi502/blog/source/img/image-20200308171000114.png" alt="image-20200308171000114"></p><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><h4 id="拆机"><a href="#拆机" class="headerlink" title="拆机"></a>拆机</h4><p><img src="https://cdn.jsdelivr.net/gh/muzi502/blog/sourchttps://cdn.jsdelivr.net/gh/muzi502/blog/sourchttps://cdn.jsdelivr.net/gh/muzi502/blog/sourchttps://cdn.jsdelivr.net/gh/muzi502/blog/sourchttps://cdn.jsdelivr.net/gh/muzi502/blog/source/img/image-20200309141919253.png" alt="image-20200309141919253"></p><h4 id="CPU"><a href="#CPU" class="headerlink" title="CPU"></a>CPU</h4><ul><li>Amlogic S905，ARM Cortex-A53，四核 2GHz，GPU 是 ARM Mali™-450，支持 4K@60fps 硬件解码，HDMI 2.0。</li><li>另外支持 AES 加密解密，所以在上面跑的 SS/SSR 的加密算法适合选择 AES 喽。</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">╭─root@OpenWrt ~</span><br><span class="line">╰─# cat /proc/cpuinfo</span><br><span class="line">processor       : 0</span><br><span class="line">model name      : ARMv8 Processor rev 4 (v8l)</span><br><span class="line">BogoMIPS        : 48.00</span><br><span class="line">Features        : fp asimd evtstrm aes pmull sha1 sha2 crc32 cpuid</span><br><span class="line">CPU implementer : 0x41</span><br><span class="line">CPU architecture: 8</span><br><span class="line">CPU variant     : 0x0</span><br><span class="line">CPU part        : 0xd03</span><br><span class="line">CPU revision    : 4</span><br><span class="line"></span><br><span class="line">processor       : 1</span><br><span class="line">model name      : ARMv8 Processor rev 4 (v8l)</span><br><span class="line">BogoMIPS        : 48.00</span><br><span class="line">Features        : fp asimd evtstrm aes pmull sha1 sha2 crc32 cpuid</span><br><span class="line">CPU implementer : 0x41</span><br><span class="line">CPU architecture: 8</span><br><span class="line">CPU variant     : 0x0</span><br><span class="line">CPU part        : 0xd03</span><br><span class="line">CPU revision    : 4</span><br><span class="line"></span><br><span class="line">processor       : 2</span><br><span class="line">model name      : ARMv8 Processor rev 4 (v8l)</span><br><span class="line">BogoMIPS        : 48.00</span><br><span class="line">Features        : fp asimd evtstrm aes pmull sha1 sha2 crc32 cpuid</span><br><span class="line">CPU implementer : 0x41</span><br><span class="line">CPU architecture: 8</span><br><span class="line">CPU variant     : 0x0</span><br><span class="line">CPU part        : 0xd03</span><br><span class="line">CPU revision    : 4</span><br><span class="line"></span><br><span class="line">processor       : 3</span><br><span class="line">model name      : ARMv8 Processor rev 4 (v8l)</span><br><span class="line">BogoMIPS        : 48.00</span><br><span class="line">Features        : fp asimd evtstrm aes pmull sha1 sha2 crc32 cpuid</span><br><span class="line">CPU implementer : 0x41</span><br><span class="line">CPU architecture: 8</span><br><span class="line">CPU variant     : 0x0</span><br><span class="line">CPU part        : 0xd03</span><br><span class="line">CPU revision    : 4</span><br></pre></td></tr></table></figure><h4 id="RAM"><a href="#RAM" class="headerlink" title="RAM"></a>RAM</h4><ul><li>内存芯片 RAM：K4B4G1646E ，DDR3-1866MHz，内存容量 512MB；前后一共有 4 颗，总内存 2GB。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">╭─root@OpenWrt ~</span><br><span class="line">╰─<span class="comment"># cat /proc/meminfo</span></span><br><span class="line">MemTotal:        1851688 kB</span><br><span class="line">MemFree:         1278128 kB</span><br><span class="line">MemAvailable:    1639036 kB</span><br><span class="line">╭─root@OpenWrt ~</span><br><span class="line">╰─<span class="comment"># dmesg | grep Memory</span></span><br><span class="line">[    0.000000] Memory: 924744K/1911808K available (12926K kernel code, 1108K rwdata, 5116K rodata, 640K init, 748K bss, 69560K reserved, 917504K cma-reserved)</span><br></pre></td></tr></table></figure><h4 id="ROM"><a href="#ROM" class="headerlink" title="ROM"></a>ROM</h4><ul><li>KLM8G1GEME，8GB eMMC。</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">╭─root@OpenWrt ~</span><br><span class="line">╰─<span class="comment"># fdisk -l /dev/mmcblk1</span></span><br><span class="line">Disk /dev/mmcblk1: 7.3 GiB, 7818182656 bytes, 15269888 sectors</span><br><span class="line">Units: sectors of 1 * 512 = 512 bytes</span><br><span class="line">Sector size (logical/physical): 512 bytes / 512 bytes</span><br><span class="line">I/O size (minimum/optimal): 512 bytes / 512 bytes</span><br><span class="line">Disklabel <span class="built_in">type</span>: dos</span><br><span class="line">Disk identifier: 0x7db7c786</span><br><span class="line"></span><br><span class="line">Device         Boot   Start      End  Sectors  Size Id Type</span><br><span class="line">/dev/mmcblk1p1      1433600  1695743   262144  128M  c W95 FAT32 (LBA)</span><br><span class="line">/dev/mmcblk1p2      1695744  2744319  1048576  512M 83 Linux</span><br><span class="line">/dev/mmcblk1p3      2744320 15269887 12525568    6G 83 Linux</span><br><span class="line">╭─root@OpenWrt ~</span><br><span class="line">╰─<span class="comment"># lsblk</span></span><br><span class="line">NAME         MAJ:MIN RM  SIZE RO TYPE MOUNTPOINT</span><br><span class="line">mmcblk1      179:0    0  7.3G  0 disk</span><br><span class="line">├─mmcblk1p1  179:1    0  128M  0 part /boot</span><br><span class="line">├─mmcblk1p2  179:2    0  512M  0 part /</span><br><span class="line">└─mmcblk1p3  179:3    0    6G  0 part /mnt/mmcblk1p3</span><br><span class="line">mmcblk1boot0 179:32   0    4M  1 disk</span><br><span class="line">mmcblk1boot1 179:64   0    4M  1 disk</span><br></pre></td></tr></table></figure><h4 id="net"><a href="#net" class="headerlink" title="net"></a>net</h4><ul><li>千兆 <code>1Gbps/Full</code> 网卡以及 2.4GHz/5GHz 的无线网卡</li><li>看到 <code>RTL8211F</code> 我哭了，竟然是螃蟹卡，掀桌儿😡</li><li>WIFI 芯片：屏蔽罩是焊死的，所以不清楚。只知道是双频 1x1mimo 用支持 5G ac，2.4G 连接速率 65Mbps，5G 连接速率 390Mbps。为什么不是 72m 和 433m，因为 No SGI。</li></ul><blockquote><p>（N1不支持 RTL8153，是因为硬件供电的原因，不是驱动的原因，也有个别网友说能支持的，可能因为 rtl8153 也有不同版本，但支 持AX88179，速率 200m 左右, 因此从性能上考虑，N1不建议外接任何网卡，直接用单网卡做旁路由也能达到 750m 左右）</p></blockquote><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">╭─root@OpenWrt ~</span><br><span class="line">╰─# dmesg | grep net</span><br><span class="line">[    0.000000] Kernel command line: root=UUID=69fd696a-85a4-4ec8-b604-4cefd053cbc1 rootfstype=btrfs rootflags=compress=zstd console=ttyAML0,115200n8 console=tty0 no_console_suspend consoleblank=0 fsck.fix=yes fsck.repair=yes net.ifnames=0 cgroup_enable=cpuset cgroup_memory=1 cgroup_enable=memory swapaccount=1</span><br><span class="line">[    0.691325] audit: initializing netlink subsys (disabled)</span><br><span class="line">[    5.131043] meson8b-dwmac c9410000.ethernet: IRQ eth_wake_irq not found</span><br><span class="line">[    5.136694] meson8b-dwmac c9410000.ethernet: IRQ eth_lpi not found</span><br><span class="line">[    5.142854] meson8b-dwmac c9410000.ethernet: PTP uses main clock</span><br><span class="line">[    5.148731] meson8b-dwmac c9410000.ethernet: no reset control found</span><br><span class="line">[    5.155366] meson8b-dwmac c9410000.ethernet: User ID: 0x11, Synopsys ID: 0x37</span><br><span class="line">[    5.162029] meson8b-dwmac c9410000.ethernet:         DWMAC1000</span><br><span class="line">[    5.167192] meson8b-dwmac c9410000.ethernet: DMA HW capability register supported</span><br><span class="line">[    5.174594] meson8b-dwmac c9410000.ethernet: RX Checksum Offload Engine supported</span><br><span class="line">[    5.182017] meson8b-dwmac c9410000.ethernet: COE Type 2</span><br><span class="line">[    5.187192] meson8b-dwmac c9410000.ethernet: TX Checksum insertion supported</span><br><span class="line">[    5.194171] meson8b-dwmac c9410000.ethernet: Wake-Up On Lan supported</span><br><span class="line">[    5.200586] meson8b-dwmac c9410000.ethernet: Normal descriptors</span><br><span class="line">[    5.206426] meson8b-dwmac c9410000.ethernet: Ring mode enabled</span><br><span class="line">[    5.212198] meson8b-dwmac c9410000.ethernet: Enable RX Mitigation via HW Watchdog Timer</span><br><span class="line">[    5.428271] Initializing XFRM netlink socket</span><br><span class="line">[    5.521946] bridge: filtering via arp/ip/ip6tables is no longer available by default. Update your scripts to load br_netfilter if you need this.</span><br><span class="line">[   11.076508] meson8b-dwmac c9410000.ethernet eth0: PHY [0.2009087f:00] driver [RTL8211F Gigabit Ethernet]</span><br><span class="line">[   11.083720] meson8b-dwmac c9410000.ethernet eth0: No Safety Features support found</span><br><span class="line">[   11.088006] meson8b-dwmac c9410000.ethernet eth0: PTP not supported by HW</span><br><span class="line">[   11.094588] meson8b-dwmac c9410000.ethernet eth0: configuring for phy/rgmii link mode</span><br><span class="line">[   19.250095] meson8b-dwmac c9410000.ethernet eth0: PHY [0.2009087f:00] driver [RTL8211F Gigabit Ethernet]</span><br><span class="line">[   19.265579] meson8b-dwmac c9410000.ethernet eth0: No Safety Features support found</span><br><span class="line">[   19.267519] meson8b-dwmac c9410000.ethernet eth0: PTP not supported by HW</span><br><span class="line">[   19.274244] meson8b-dwmac c9410000.ethernet eth0: configuring for phy/rgmii link mode</span><br><span class="line">[   19.411257] netlink: 4 bytes leftover after parsing attributes in process `iw'.</span><br><span class="line">[   19.595853] ieee80211 phy0: brcmf_net_attach: couldn't register the net device</span><br><span class="line">[   19.597447] ieee80211 phy0: brcmf_ap_add_vif: Registering netdevice failed</span><br><span class="line">[   21.019546] meson8b-dwmac c9410000.ethernet eth0: Link is Up - 1Gbps/Full - flow control rx/tx</span><br><span class="line">[ 1047.556475] meson8b-dwmac c9410000.ethernet eth0: Link is Down</span><br><span class="line">[ 1047.772626] meson8b-dwmac c9410000.ethernet eth0: PHY [0.2009087f:00] driver [RTL8211F Gigabit Ethernet]</span><br><span class="line">[ 1047.785569] meson8b-dwmac c9410000.ethernet eth0: No Safety Features support found</span><br><span class="line">[ 1047.787510] meson8b-dwmac c9410000.ethernet eth0: PTP not supported by HW</span><br><span class="line">[ 1047.794242] meson8b-dwmac c9410000.ethernet eth0: configuring for phy/rgmii link mode</span><br><span class="line">[ 1051.459018] meson8b-dwmac c9410000.ethernet eth0: Link is Up - 1Gbps/Full - flow control rx/tx</span><br><span class="line">[ 1241.984013] netlink: 4 bytes leftover after parsing attributes in process `iw'.</span><br><span class="line">[ 1346.112897] meson8b-dwmac c9410000.ethernet eth0: Link is Down</span><br><span class="line">[ 1346.295582] meson8b-dwmac c9410000.ethernet eth0: PHY [0.2009087f:00] driver [RTL8211F Gigabit Ethernet]</span><br><span class="line">[ 1346.312202] meson8b-dwmac c9410000.ethernet eth0: No Safety Features support found</span><br><span class="line">[ 1346.314172] meson8b-dwmac c9410000.ethernet eth0: PTP not supported by HW</span><br><span class="line">[ 1346.320888] meson8b-dwmac c9410000.ethernet eth0: configuring for phy/rgmii link mode</span><br><span class="line">[ 1349.769672] meson8b-dwmac c9410000.ethernet eth0: Link is Up - 1Gbps/Full - flow control rx/tx</span><br></pre></td></tr></table></figure><h4 id="htop"><a href="#htop" class="headerlink" title="htop"></a>htop</h4><p>吼吼吼，居然还能跑 Docker ，那 K3s 也肯定没问题啦（</p><p><img src="https://cdn.jsdelivr.net/gh/muzi502/blog/sourchttps://cdn.jsdelivr.net/gh/muzi502/blog/sourchttps://cdn.jsdelivr.net/gh/muzi502/blog/sourchttps://cdn.jsdelivr.net/gh/muzi502/blog/sourchttps://cdn.jsdelivr.net/gh/muzi502/blog/source/img/image-20200308180733757.png" alt="image-20200308180733757"></p><h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><p>首先准备个刷机过程中需要的清单 <del>别看你今天闹得欢，小心今后拉清单</del></p><ul><li>USB 公对公数据线（卖家赠送了线</li><li>网线或 WiFi，网线有时获取不到正确的 IP ，可以借助 WiFi</li><li>HDMI 线以及显示器，需要进入盒子系统手动开启 adb</li><li>Android SDK 平台工具 <a href="https://developer.android.com/studio/releases/platform-tools" target="_blank" rel="noopener">Platform-tools</a></li><li>镜像写入工具 <a href="https://github.com/pbatard/rufus" target="_blank" rel="noopener">Rufus</a> 或 <a href="https://www.roadkil.net/program.php?ProgramID=12" target="_blank" rel="noopener">Roadkils DiskImage</a></li><li>OpenWrt 镜像 <a href="https://disk.longe.xyz/N1/Openwrt/28%2Bo%E7%89%88N1_OP_U%E7%9B%98%E7%9B%B4%E5%88%B7%E5%8C%85/N1_Openwrt_R20.2.15_k5.4.23-amlogic-flippy-28%2Bo.7z" target="_blank" rel="noopener">N1_Openwrt_R20.2.15_k5.4.23-amlogic-flippy-28+o.7z</a></li></ul><blockquote><p>Openwrt_U 盘直刷包：链接：<a href="https://pan.baidu.com/s/1K0bNItsY1-Br4o1EsRokkg" target="_blank" rel="noopener">https://pan.baidu.com/s/1K0bNItsY1-Br4o1EsRokkg</a> 提取码：lidf</p></blockquote><h3 id="推荐资源"><a href="#推荐资源" class="headerlink" title="推荐资源"></a>推荐资源</h3><p>刷机过程中的资源来自以下，可以去这里找更多你想要的，他们的教程也会比我更优秀一些，而且 B 站上也有视频，视频讲解的要更好。写这篇博客也只是为了记录一下😂</p><ul><li><a href="https://drive.google.com/drive/folders/1XvhPCwodZzCfV83oW3DXegAvDOrHW7iV" target="_blank" rel="noopener">Pi&amp;N1 Google Drive</a></li><li><a href="https://github.com/real-pin1group/3000web/wiki" target="_blank" rel="noopener">三千问</a></li><li><a href="https://t.me/PIN1Group" target="_blank" rel="noopener">t.me/PIN1Group</a></li><li><a href="https://t.me/NewPiN1Channel" target="_blank" rel="noopener">Pi&amp;N1交流群通知频道</a></li><li><a href="https://disk.longe.xyz/" target="_blank" rel="noopener">山小炮网盘</a></li><li><a href="https://disk.longe.xyz/N1/OpenWrt/%E3%80%902019-6-20%E3%80%91Phicomm%20N1%E5%88%B7openwrt%E8%B7%AF%E7%94%B1%E5%9B%BA%E4%BB%B6%E8%AF%A6%E7%BB%86%E7%AC%94%E8%AE%B0.pdf" target="_blank" rel="noopener">Phicomm N1刷openwrt路由固件详细笔记.pdf</a></li><li><a href="https://disk.longe.xyz/N1/OpenWrt/28%2Bo版N1_OP_U盘直刷包/" target="_blank" rel="noopener">28+o版N1_OP_U盘直刷包</a></li><li><a href="https://www.right.com.cn/forum/thread-981406-1-1.html" target="_blank" rel="noopener">[2020-3-8]★29+版N1_OP_U盘直刷包，及贝壳云_OP_线刷包，内核5.4</a></li></ul><h2 id="刷机"><a href="#刷机" class="headerlink" title="刷机"></a>刷机</h2><h3 id="开启-ADB"><a href="#开启-ADB" class="headerlink" title="开启 ADB"></a>开启 ADB</h3><p><img src="https://cdn.jsdelivr.net/gh/muzi502/blog/sourchttps://cdn.jsdelivr.net/gh/muzi502/blog/sourchttps://cdn.jsdelivr.net/gh/muzi502/blog/sourchttps://cdn.jsdelivr.net/gh/muzi502/blog/sourchttps://cdn.jsdelivr.net/gh/muzi502/blog/source/img/image-20200309085941030.png" alt="image-20200309085941030"></p><p>将 HDMI 线连接到盒子的 HDMI 口，将 USB 公对公的数据线分别插在盒子的靠近 HDMI 口的 USB ，另一头插在 PC 的 USB 口，再将鼠标连接到盒子的另一个 USB 口。插好上述的线缆之后插上电源开机，由于盒子没有电源开关所以只能通过插拔电源的方式开关机。开机之后会自动进入到电视盒子系统的页面，然后挪动鼠标，在 <code>固件版本</code>  那里狂点鼠标四下开启 <code>ADB</code> 调试模式。屏幕中间会弹出个灰色的方框提示<code>打开 adb</code></p><blockquote><p>PS：提到 adb 咱就不由自主地想起了去年世界五百强他家的号称要取代 Android 、自主研发、微内核、面向确定<a href="https://zh.wikipedia.org/wiki/时延" target="_blank" rel="noopener">时延</a>、分布式、形式化验证、多场景；大名鼎鼎的哄懵（PPT）操作系统竟然也有 ADB （偷笑</p></blockquote><p>在这里需要注意的是，我使用网线连接盒子和路由器后，屏幕上显示的 IP 并不是我本地内网的 IP ，这一点很奇怪，而使用无线连接到我的无线路由器后去能获取到正常的内网 IP ，所以如果你使用网线连接时也遇到这样的情况，不妨尝试一下使用无线连接。</p><p><img src="https://cdn.jsdelivr.net/gh/muzi502/blog/sourchttps://cdn.jsdelivr.net/gh/muzi502/blog/sourchttps://cdn.jsdelivr.net/gh/muzi502/blog/sourchttps://cdn.jsdelivr.net/gh/muzi502/blog/sourchttps://cdn.jsdelivr.net/gh/muzi502/blog/source/img/image-20200308171341327.png" alt="image-20200308171341327"></p><h3 id="PC-上连接-ADB-进入-fastboot-模式"><a href="#PC-上连接-ADB-进入-fastboot-模式" class="headerlink" title="PC 上连接 ADB 进入 fastboot 模式"></a>PC 上连接 ADB 进入 fastboot 模式</h3><p>上述要将盒子的 HMDI 接入显示器并插上鼠标，就是为了在 ADB 模式下进入 fastboot 模式，而 fastboot 模式和我们普通的 Android 刷机时的 fastboot 一样，何况这个盒子也是基于 Android 的，所以嘛，和 Android 刷机大同小异。然后下载好 Android SDK 平台工具 <a href="https://developer.android.com/studio/releases/platform-tools" target="_blank" rel="noopener">Platform-tools</a> 并解压到合适的位置，按住 <code>shift</code> 键之后鼠标右键点击<code>在此处打开 Powershell 窗口</code> ，接着在该命令行下输入 <code>adb.exe connect IP</code> ，这里的 IP 即为屏幕上显示的 IP ，连接成功之后会有提示已经连接。然后再运行 <code>adb.exe shell reboot fastboot</code> 进入 fastboot 模式。这一步和我们给 Android 手机刷机时俺电源键+音量键，进入 fastboot 模式一样的道理，只不过盒子没有音量键和开机键，所以要使用 adb 的方式进入到 fastboot 。</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">PS D:\Desktop&gt; adb.exe connect <span class="number">192.168</span>.<span class="number">0.105</span></span><br><span class="line">connected to <span class="number">192.168</span>.<span class="number">0.105</span>:<span class="number">5555</span></span><br><span class="line">PS D:\Desktop\N1&gt; adb.exe shell reboot fastboot</span><br></pre></td></tr></table></figure><h3 id="刷入降级镜像"><a href="#刷入降级镜像" class="headerlink" title="刷入降级镜像"></a>刷入降级镜像</h3><p>盒子重启进入 fastboot 模式之后，PC 上会提示插入新设备，并叮咚响一下，之后会自动安装上驱动程序。</p><p>右键计算机–&gt;管理–&gt; 设备管理器 <code>LeMobile Android Device</code> 下的 <code>Android ADB Interface</code> 。如果没有出现该设备的话，可以下载个驱动安装程序来给你装上该设备的驱动。使用 <code>fastboot devices -l</code> 命令来查看该设备是否正常连接上。</p><p><img src="https://cdn.jsdelivr.net/gh/muzi502/blog/sourchttps://cdn.jsdelivr.net/gh/muzi502/blog/sourchttps://cdn.jsdelivr.net/gh/muzi502/blog/sourchttps://cdn.jsdelivr.net/gh/muzi502/blog/sourchttps://cdn.jsdelivr.net/gh/muzi502/blog/source/img/image-20200308152333262.png" alt="image-20200308152333262"></p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">PS D:\Desktop\N1&gt; fastboot devices <span class="literal">-l</span></span><br><span class="line"><span class="number">1234567890</span>             fastboot</span><br></pre></td></tr></table></figure><h4 id="校验镜像"><a href="#校验镜像" class="headerlink" title="校验镜像"></a>校验镜像</h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">Mode                LastWriteTime         Length Name</span><br><span class="line">----          -------------   ------ ----</span><br><span class="line">-a----   2020/3/7     17:53       14191104 boot.img</span><br><span class="line">-a----   2020/3/7     17:53         672256 bootloader.img</span><br><span class="line">-a----   2020/3/7     17:53            605 hash.txt</span><br><span class="line">-a----   2020/3/7     17:53       18295296 recovery.img</span><br><span class="line"><span class="comment"># 刷机之前要先校验镜像是否完整或者被篡改，养成好习惯😋</span></span><br><span class="line">PS D:\Desktop\N1&gt; cat .\hash.txt</span><br><span class="line">文件: N1_V2.19_imgs\bootloader.img</span><br><span class="line">大小: 672256 字节</span><br><span class="line">修改时间: 2018年5月25日 星期五, 23:09:08</span><br><span class="line">MD5: 80BD2EFED2F76B6ECA56F7E026549E1A</span><br><span class="line">SHA1: 3A1FFCADF062748CA1D00EB80E73F2175B160A0D</span><br><span class="line">CRC32: 34BA154A</span><br><span class="line"></span><br><span class="line">文件: N1_V2.19_imgs\recovery.img</span><br><span class="line">大小: 18295296 字节</span><br><span class="line">修改时间: 2018年5月25日 星期五, 23:09:19</span><br><span class="line">MD5: CAC6ED1DED5BB1D9CFAD39B2B1C6CD8A</span><br><span class="line">SHA1: B468A3134B376A5295C1FD5857343128D0AC056C</span><br><span class="line">CRC32: AA11C424</span><br><span class="line"></span><br><span class="line">文件: N1_V2.19_imgs\boot.img</span><br><span class="line">大小: 14191104 字节</span><br><span class="line">修改时间: 2018年5月25日 星期五, 23:09:46</span><br><span class="line">MD5: 75DA954D0C4CBCD4A86CEE501B40C5AA</span><br><span class="line">SHA1: 1A0D04DB8FB57F252C72C909A3268B6B2C3BD241</span><br><span class="line">CRC32: 547D7823</span><br><span class="line"></span><br><span class="line"><span class="comment"># Windows CMD 下可使用 certUtil 来计算文件的 HASH 值</span></span><br><span class="line">PS D:\Desktop\N1&gt; certUtil -hashfile .\recovery.img</span><br><span class="line">SHA1 hash of .\recovery.img:</span><br><span class="line">b468a3134b376a5295c1fd5857343128d0ac056c</span><br><span class="line">CertUtil: -hashfile command completed successfully.</span><br><span class="line">PS D:\Desktop\N1&gt; certUtil -hashfile .\boot.img</span><br><span class="line">SHA1 hash of .\boot.img:</span><br><span class="line">1a0d04db8fb57f252c72c909a3268b6b2c3bd241</span><br><span class="line">CertUtil: -hashfile command completed successfully.</span><br><span class="line">PS D:\Desktop\N1&gt; certUtil -hashfile .\bootloader.img</span><br><span class="line">SHA1 hash of .\bootloader.img:</span><br><span class="line">3a1ffcadf062748ca1d00eb80e73f2175b160a0d</span><br><span class="line">CertUtil: -hashfile command completed successfully.</span><br></pre></td></tr></table></figure><h4 id="输入降级包镜像"><a href="#输入降级包镜像" class="headerlink" title="输入降级包镜像"></a>输入降级包镜像</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 然后根据对应的分区刷入对应的镜像，这点不要搞混，不然会变砖的</span></span><br><span class="line">PS D:\Desktop\N1&gt; fastboot flash bootloader bootloader.img</span><br><span class="line">Sending <span class="string">'bootloader'</span> (656 KB)                      OKAY [  0.037s]</span><br><span class="line">Writing <span class="string">'bootloader'</span>                               OKAY [  0.075s]</span><br><span class="line">Finished. Total time: 0.118s</span><br><span class="line">PS D:\Desktop\N1&gt; fastboot flash boot boot.img</span><br><span class="line">Sending <span class="string">'boot'</span> (13858 KB)                          OKAY [  0.620s]</span><br><span class="line">Writing <span class="string">'boot'</span>                                     OKAY [  0.666s]</span><br><span class="line">Finished. Total time: 1.290s</span><br><span class="line">PS D:\Desktop\N1&gt; fastboot flash recovery recovery.img</span><br><span class="line">Sending <span class="string">'recovery'</span> (17866 KB)                      OKAY [  0.802s]</span><br><span class="line">Writing <span class="string">'recovery'</span>                                 OKAY [  0.869s]</span><br><span class="line">Finished. Total time: 1.684s</span><br><span class="line">PS D:\Desktop\N1&gt;</span><br></pre></td></tr></table></figure><h3 id="将-OpenWrt-刷入-EMMC"><a href="#将-OpenWrt-刷入-EMMC" class="headerlink" title="将 OpenWrt 刷入 EMMC"></a>将 OpenWrt 刷入 EMMC</h3><p>降级成功之后我们就可以开机进入线刷模式，从而可以选择从 U 盘设备启动，之所以降级也是因为这，高版本的固件屏蔽了这一功能。我们无法直接将 OpenWrt 的镜像写入到盒子的 EMMC 存储中，要进入到一个叫 Armbian 的嵌入式系统中，在 Armbian 系统里将 OpenWrt 镜像写入到 EMMC 存储设备中。而也有一些大佬将二者的镜像结合在一起，也就是可以使用该镜像在 U 盘模式下将 OpenWrt 镜像写入到 EMMC 中，并且准备好了自动写入的脚本，比较方便。该镜像可以从 <a href="https://www.right.com.cn/forum/thread-981406-1-1.html" target="_blank" rel="noopener">29+版N1_OP_U盘直刷包，及贝壳云_OP_线刷包，内核5.4</a> 找到。</p><h4 id="写入-U-盘镜像"><a href="#写入-U-盘镜像" class="headerlink" title="写入 U 盘镜像"></a>写入 U 盘镜像</h4><p>我写入 U 盘的镜像是 N1_<strong>Openwrt_R20.2.15_k5.4.23-amlogic-flippy-28+.img</strong> 也就是 <code>N1-Openwrt_U盘直刷包</code> ，写入工具使用  <a href="https://github.com/pbatard/rufus" target="_blank" rel="noopener">Rufus</a> 或 <a href="https://www.roadkil.net/program.php?ProgramID=12" target="_blank" rel="noopener">Roadkils DiskImage</a> 都可以，就和我们平时制作启动盘一样。</p><h4 id="从-update-模式启动-Armbian"><a href="#从-update-模式启动-Armbian" class="headerlink" title="从 update 模式启动 Armbian"></a>从 update 模式启动 Armbian</h4><p>要拔掉 USB 公对公的线，盒子开机后使用 bat 脚本进入线刷模式，在 update 模式下才可以从我们刚刚写入的镜像 U 盘中启动。如果你下载好 Google Drive 上的资源的话，工具在 <code>/玩法0--各种玩法必备工具/2---进线刷模式工具---启动U盘系统前要先进线刷模式/进线刷模式工具</code> 下的</p><figure class="highlight powershell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">@echo off</span><br><span class="line">echo 本工具通过adb连接使N1重启进入线刷模式!</span><br><span class="line">echo 请先用usb双公头线连接盒子和电脑!</span><br><span class="line">echo made by webpad</span><br><span class="line">set /p ip=请输入盒子的内网IP地址：</span><br><span class="line">adb kill<span class="literal">-server</span></span><br><span class="line"><span class="keyword">if</span> <span class="string">"%ip%"</span> == <span class="string">""</span> echo 提示：请输入正确的IP地址 &amp;&amp; goto <span class="keyword">end</span></span><br><span class="line">echo 开始通过网络进行ADB连接……</span><br><span class="line">adb connect %ip%</span><br><span class="line">adb devices <span class="literal">-l</span> | findstr <span class="string">"p230"</span></span><br><span class="line"><span class="keyword">if</span> %ERRORLEVEL% NEQ <span class="number">0</span> echo 连接测试失败！请确保已开启远程调试！&amp;&amp;goto <span class="keyword">end</span></span><br><span class="line">echo *</span><br><span class="line">echo *</span><br><span class="line">echo *</span><br><span class="line">echo 盒子已重启进入线刷模式，若windows发现了新设备，请在设备管理器中手动安装驱动，此窗口可以关闭...</span><br><span class="line">adb shell reboot update</span><br><span class="line">del adbshell.txt &gt;nul <span class="number">2</span>&gt;nul</span><br><span class="line"></span><br><span class="line">:<span class="keyword">end</span></span><br><span class="line">echo 按任意键退出...</span><br><span class="line">pause &gt; nul</span><br></pre></td></tr></table></figure><p>执行完该脚本后<strong>提示成功进入线刷模式时就马上插刷好镜像的 U 盘</strong> 不要错过时机(。・∀・)ノ</p><p>其实这个工具也就是一条 <code>adb shell reboot update</code> 指令而已，<code>abd connect  IP</code> 连接到盒子之后，然后再执行 <code>adb shell reboot update</code> ，然后再插入刚刚写好镜像的 U 盘。插上 HMDI 线连接显示器就会看到控制终端输出着启动流程的画面，上面还有四只小企鹅，这就说明我们成功进入了 Armbian 系统</p><h4 id="将-OpenWrt-写入到-EMMC-存储中"><a href="#将-OpenWrt-写入到-EMMC-存储中" class="headerlink" title="将 OpenWrt 写入到 EMMC 存储中"></a>将 OpenWrt 写入到 EMMC 存储中</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /root</span><br><span class="line">./inst-to-emmc.sh</span><br></pre></td></tr></table></figure><p>该脚本成功执行后，重启拔掉 U 盘就可以直接进入到 OpenWrt 系统中了：）</p><h2 id="OpenWrt-上的一些小优化"><a href="#OpenWrt-上的一些小优化" class="headerlink" title="OpenWrt 上的一些小优化"></a>OpenWrt 上的一些小优化</h2><p>使用  <code>ifconfig eth0 192.168.0.211 netmask 255.255.255.0</code> 修改 eth0 的 IP ，但依旧无法 ping 通 192.168.0.1 网关，还需要修改一下 LAN 口的配置。</p><h3 id="修改-IP"><a href="#修改-IP" class="headerlink" title="修改 IP"></a>修改 IP</h3><p>由于 LAN 口默认的是 <code>192.168.1.1</code> ，如果你的网络不是在该网段下的话就连不上该设备，所以如果不是采用直连网线的话，而是将盒子连接在路由器，这时就需要手动修改一下默认的配置才能连接到盒子。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">config</span> <span class="string">interface</span> <span class="string">'lan'</span></span><br><span class="line">        <span class="string">option</span> <span class="string">type</span> <span class="string">'bridge'</span></span><br><span class="line">        <span class="string">option</span> <span class="string">ifname</span> <span class="string">'eth0'</span></span><br><span class="line">        <span class="string">option</span> <span class="string">proto</span> <span class="string">'static'</span></span><br><span class="line">        <span class="string">option</span> <span class="string">netmask</span> <span class="string">'255.255.255.0'</span></span><br><span class="line">        <span class="string">option</span> <span class="string">dns</span> <span class="string">'119.29.29.29'</span></span><br><span class="line">        <span class="string">option</span> <span class="string">gateway</span> <span class="string">'192.168.0.1'</span></span><br><span class="line">        <span class="string">option</span> <span class="string">delegate</span> <span class="string">'0'</span></span><br><span class="line">        <span class="string">option</span> <span class="string">ipaddr</span> <span class="string">'192.168.0.211'</span></span><br></pre></td></tr></table></figure><p>修改一下 lan 网口的 IP 为你内网可访问到的 IP 即可，这样我们就可以使用该 IP 访问 OpenWrt 系统了</p><h3 id="安装必备工具"><a href="#安装必备工具" class="headerlink" title="安装必备工具"></a>安装必备工具</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 首先修改一下 opkg 源，默认给修改为中科大的代理镜像站了，这点不错</span></span><br><span class="line">╭─root@OpenWrt /mnt</span><br><span class="line">╰─<span class="comment"># opkg update</span></span><br><span class="line">Downloading https://openwrt.proxy.ustclug.org/snapshots/targets/armvirt/64/packages/Packages.gz</span><br><span class="line">Updated list of available packages <span class="keyword">in</span> /var/opkg-lists/openwrt_core</span><br><span class="line">Downloading</span><br></pre></td></tr></table></figure><ul><li>git  这是必须的呀</li><li>ca-bundle 和 ca-certificates，https 必须要用到的</li><li>git-http 如果不装的话在 git clone https 的 repo 时会提示 <a href="https://stackoverflow.com/questions/8329485/unable-to-find-remote-helper-for-https-during-git-clone" target="_blank" rel="noopener">“Unable to find remote helper for ‘https’” during git clone</a></li><li>zsh 和 oh-my-zsh，强大的 shell 不用废话😋</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">╭─root@OpenWrt /mnt</span><br><span class="line">╰─<span class="comment"># opkg install git zsh git-http ca-bundle ca-certificates wget curl</span></span><br><span class="line">Package git (2.25.1-1) installed <span class="keyword">in</span> root is up to date.</span><br><span class="line">Package zsh (5.7.1-1) installed <span class="keyword">in</span> root is up to date.</span><br><span class="line">Package git-http (2.25.1-1) installed <span class="keyword">in</span> root is up to date.</span><br><span class="line">Package ca-bundle (20190110-2) installed <span class="keyword">in</span> root is up to date.</span><br><span class="line">Package ca-certificates (20190110-2) installed <span class="keyword">in</span> root is up to date.</span><br><span class="line">Upgrading wget on root from 1.20.3-2 to 1.20.3-3...</span><br><span class="line">Downloading https://openwrt.proxy.ustclug.org/snapshots/packages/aarch64_generic/packages/wget_1.20.3-3_aarch64_generic.ipk</span><br><span class="line">Multiple packages (librt and librt) providing same name marked HOLD or PREFER. Using latest.</span><br><span class="line">Upgrading curl on root from 7.66.0-1 to 7.68.0-1...</span><br><span class="line">Downloading https://openwrt.proxy.ustclug.org/snapshots/packages/aarch64_generic/base/curl_7.68.0-1_aarch64_generic.ipk</span><br><span class="line">Configuring curl.</span><br><span class="line">Configuring wget.</span><br></pre></td></tr></table></figure><h4 id="zsh-踩坑"><a href="#zsh-踩坑" class="headerlink" title="zsh 踩坑"></a>zsh 踩坑</h4><p>安装完 oh-my-zsh 之后，不会帮你修改 <code>/etc/passwd</code> 中的配置，需要手动修改，然后我还是按照往常的修改方法：</p><p><code>root:x:0:0:root:/root:/bin/zsh</code></p><p>第二天我开开心心地 ssh 登录时，当场翻车了，它会提示<code>Permission denied, please try again.</code> ，咦我密码就是这个呀。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">debug1: Next authentication method: password</span><br><span class="line">root@192.168.0.211<span class="string">'s password:</span></span><br><span class="line"><span class="string">debug1: Authentications that can continue: publickey,password,keyboard-interactive</span></span><br><span class="line"><span class="string">Permission denied, please try again.</span></span><br><span class="line"><span class="string">root@192.168.0.211'</span>s password:</span><br></pre></td></tr></table></figure><p>然后我通过 OpenWrt 的 web 管理页面能正常登录，在 web 管理中的 <code>TTYD 终端</code>中尝试登录，然后就会提示你 <code>connection closed</code> ，看来找到问题的原因了，用户登录时无法执行它的 shell 所致。比较好的解决办法就是在 web 管理页面 <code>系统 –&gt; 备份/升级</code>那里备份配置文件 –&gt;把备份下载下来 –&gt; <del>然后解包后修改配置文件再打包</del> 直接使用 vim 打开 tar 包修改 <code>/etc/passwd</code> –&gt; 再上传恢复配置文件即可。曲线救国 つ﹏⊂ 不过在此需要注意一下备份文件的目录结构，解包前目录结构是什么样，重新打包之后的目录结构也是什么样。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">OpenWrt login: root</span><br><span class="line">Password:</span><br><span class="line">login: can<span class="string">'t execute '</span>/bin/zsh<span class="string">': No such file or directory</span></span><br></pre></td></tr></table></figure><p>在 Debian 和 Ubuntu 发行版中 zsh 会默认安装在 <code>/bin/zsh</code> 下，并创建一个 <code>/usr/bin/zsh</code> 的一个软链接。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">╭─debian@debian /mnt/d/Desktop</span><br><span class="line">╰─$ ls -alh /bin/zsh</span><br><span class="line">-rwxr-xr-x 1 root root 842K Feb  5  2019 /bin/zsh</span><br><span class="line">╭─debian@debian /mnt/d/Desktop</span><br><span class="line">╰─$ ls -alh /usr/bin/zsh</span><br><span class="line">lrwxrwxrwx 1 root root 8 Aug 31  2019 /usr/bin/zsh -&gt; /bin/zsh</span><br></pre></td></tr></table></figure><p>而在 OpenWrt 中却默认安装在了 <code>/usr/bin/zsh</code> 下，也没有为 <code>/bin/zsh</code> 创建一个软链接，也尝试过使用scp 的方式将 <code>/usr/bin/zsh</code> 复制到 <code>/bin/zsh</code> ，没想到 scp 也需要用户的 shell 程序来执行😐</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># OpenWrt 下 zsh 的安装路径为 /usr/bin/zsh 而不是传统发相版中的 /bin/zsh</span></span><br><span class="line">╭─root@OpenWrt ~</span><br><span class="line">╰─<span class="comment"># where zsh</span></span><br><span class="line">/usr/bin/zsh</span><br><span class="line"></span><br><span class="line"><span class="comment"># 尝试使用 scp 复制一份 zsh 到 /bin/zsh ，不得行！😂</span></span><br><span class="line">╭─debian@debian ~</span><br><span class="line">╰─$ scp root@192.168.0.211:/usr/bin/zsh root@192.168.0.211:/bin/zsh</span><br><span class="line">root@192.168.0.211<span class="string">'s password:</span></span><br><span class="line"><span class="string">Permission denied, please try again.</span></span><br></pre></td></tr></table></figure><h3 id="部署一下-K3s"><a href="#部署一下-K3s" class="headerlink" title="部署一下 K3s"></a>部署一下 K3s</h3><p>这里只是简单的部署试用一下，后期我会详细讲一下关于 K3s 的内容。</p><h4 id="官方脚本"><a href="#官方脚本" class="headerlink" title="官方脚本"></a>官方脚本</h4><p>根据官方的脚本一句命令行<code>curl -sfL https://get.k3s.io | sh -</code>就能跑起 K3s 出来，比起隔壁的 K8s 要简单很多很多。但是脚本一执行就翻车了😂</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">╭─root@OpenWrt ~</span><br><span class="line">╰─<span class="comment"># curl -sfL https://get.k3s.io | sh -</span></span><br><span class="line">[ERROR]  Can not find systemd or openrc to use as a process supervisor <span class="keyword">for</span> k3s</span><br></pre></td></tr></table></figure><p>由于 OpenWrt 没有 systemd 和 OpenRC 来管理进程，所以无法通过脚本的方式一键部署，只能二进制部署啦。因为 systemd 对于 OpenWrt 来讲过于复杂臃肿，对于几十 MB 甚至几 MB 存储空间的路由器来说实在是装不下。所以 OpenWrt 使用的 init 系统是 <code>procd</code></p><blockquote><p>Whereas desktop distributions use <a href="https://en.wikipedia.org/wiki/GLib" target="_blank" rel="noopener">glib</a>+<a href="https://en.wikipedia.org/wiki/D-Bus" target="_blank" rel="noopener">dbus</a>+<a href="https://en.wikipedia.org/wiki/udev" target="_blank" rel="noopener">udev(part of systemd)</a>, OpenWrt uses <a href="https://openwrt.org/docs/techref/libubox" target="_blank" rel="noopener">libubox</a>+<a href="https://openwrt.org/docs/techref/ubus" target="_blank" rel="noopener">ubus</a>+<a href="https://openwrt.org/docs/techref/hotplug_legacy" target="_blank" rel="noopener">hotplug2</a>. This provides some pretty awesome functionality without requiring huge libraries with huge dependencies (<em>cough</em> glib).</p></blockquote><h4 id="二进制部署"><a href="#二进制部署" class="headerlink" title="二进制部署"></a>二进制部署</h4><p>在 K3s 的 release 页面下载到 <a href="https://github.com/rancher/k3s/releases/download/v1.17.3%2Bk3s1/k3s-arm64" target="_blank" rel="noopener">k3s-arm64</a> 二进制文件。我放在了 <code>/opt/bin/</code> 目录下，并在 <code>.zshrc</code> 追加 <code>export PATH=/opt/bin:$PATH</code> 环境变量。</p><h4 id="usage"><a href="#usage" class="headerlink" title="usage"></a>usage</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">╭─root@OpenWrt ~</span><br><span class="line">╰─<span class="comment"># k3s</span></span><br><span class="line">NAME:</span><br><span class="line">   k3s - Kubernetes, but small and simple</span><br><span class="line"></span><br><span class="line">USAGE:</span><br><span class="line">   k3s [global options] <span class="built_in">command</span> [<span class="built_in">command</span> options] [arguments...]</span><br><span class="line"></span><br><span class="line">VERSION:</span><br><span class="line">   v1.17.3+k3s1 (5b17a175)</span><br><span class="line"></span><br><span class="line">COMMANDS:</span><br><span class="line">   server        Run management server</span><br><span class="line">   agent         Run node agent</span><br><span class="line">   kubectl       Run kubectl</span><br><span class="line">   crictl        Run crictl</span><br><span class="line">   ctr           Run ctr</span><br><span class="line">   check-config  Run config check</span><br><span class="line">   <span class="built_in">help</span>, h       Shows a list of commands or <span class="built_in">help</span> <span class="keyword">for</span> one <span class="built_in">command</span></span><br><span class="line"></span><br><span class="line">GLOBAL OPTIONS:</span><br><span class="line">   --debug        Turn on debug logs [<span class="variable">$K3S_DEBUG</span>]</span><br><span class="line">   --<span class="built_in">help</span>, -h     show <span class="built_in">help</span></span><br><span class="line">   --version, -v  <span class="built_in">print</span> the version</span><br></pre></td></tr></table></figure><h4 id="check-config"><a href="#check-config" class="headerlink" title="check-config"></a>check-config</h4><p>启动一个 K3s 集群之前线 check config 一下下😋</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">╭─root@OpenWrt</span> <span class="string">~</span></span><br><span class="line"><span class="string">╰─#</span> <span class="string">k3s</span> <span class="string">check-config</span></span><br><span class="line"><span class="string">INFO[0000]</span> <span class="string">Preparing</span> <span class="string">data</span> <span class="string">dir</span> <span class="string">/var/lib/rancher/k3s/data/a61d93bc56bb3dd34b5ca93517164f5b503e16b6c7414e87b11cf336eeb8ebd7</span></span><br><span class="line"></span><br><span class="line"><span class="attr">Verifying binaries in /var/lib/rancher/k3s/data/a61d93bc56bb3dd34b5ca93517164f5b503e16b6c7414e87b11cf336eeb8ebd7/bin:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">sha256sum:</span> <span class="string">good</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">links:</span> <span class="string">good</span></span><br><span class="line"></span><br><span class="line"><span class="attr">System:</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">/usr/sbin</span> <span class="string">iptables</span> <span class="string">v1.8.3</span> <span class="string">(legacy):</span> <span class="string">ok</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">swap:</span> <span class="string">disabled</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">routes:</span> <span class="string">ok</span></span><br><span class="line"></span><br><span class="line"><span class="attr">Limits:</span></span><br><span class="line"><span class="bullet">-</span> <span class="string">/proc/sys/kernel/keys/root_maxkeys:</span> <span class="number">1000000</span></span><br><span class="line"></span><br><span class="line"><span class="attr">modprobe:</span> <span class="string">module</span> <span class="string">configs</span> <span class="string">not</span> <span class="string">found</span> <span class="string">in</span> <span class="string">modules.dep</span></span><br><span class="line"><span class="attr">info:</span> <span class="string">reading</span> <span class="string">kernel</span> <span class="string">config</span> <span class="string">from</span> <span class="string">/proc/config.gz</span> <span class="string">...</span></span><br><span class="line"></span><br><span class="line"><span class="attr">Generally Necessary:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">cgroup hierarchy:</span> <span class="string">properly</span> <span class="string">mounted</span> <span class="string">[/sys/fs/cgroup]</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">CONFIG_NAMESPACES:</span> <span class="string">enabled</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">CONFIG_NET_NS:</span> <span class="string">enabled</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">CONFIG_PID_NS:</span> <span class="string">enabled</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">CONFIG_IPC_NS:</span> <span class="string">enabled</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">CONFIG_UTS_NS:</span> <span class="string">enabled</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">CONFIG_CGROUPS:</span> <span class="string">enabled</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">CONFIG_CGROUP_CPUACCT:</span> <span class="string">enabled</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">CONFIG_CGROUP_DEVICE:</span> <span class="string">enabled</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">CONFIG_CGROUP_FREEZER:</span> <span class="string">enabled</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">CONFIG_CGROUP_SCHED:</span> <span class="string">enabled</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">CONFIG_CPUSETS:</span> <span class="string">enabled</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">CONFIG_MEMCG:</span> <span class="string">enabled</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">CONFIG_KEYS:</span> <span class="string">enabled</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">CONFIG_VETH:</span> <span class="string">enabled</span> <span class="string">(as</span> <span class="string">module)</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">CONFIG_BRIDGE:</span> <span class="string">enabled</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">CONFIG_BRIDGE_NETFILTER:</span> <span class="string">enabled</span> <span class="string">(as</span> <span class="string">module)</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">CONFIG_NF_NAT_IPV4:</span> <span class="string">missing</span> <span class="string">(fail)</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">CONFIG_IP_NF_FILTER:</span> <span class="string">enabled</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">CONFIG_IP_NF_TARGET_MASQUERADE:</span> <span class="string">enabled</span> <span class="string">(as</span> <span class="string">module)</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">CONFIG_NETFILTER_XT_MATCH_ADDRTYPE:</span> <span class="string">enabled</span> <span class="string">(as</span> <span class="string">module)</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">CONFIG_NETFILTER_XT_MATCH_CONNTRACK:</span> <span class="string">enabled</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">CONFIG_NETFILTER_XT_MATCH_IPVS:</span> <span class="string">enabled</span> <span class="string">(as</span> <span class="string">module)</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">CONFIG_IP_NF_NAT:</span> <span class="string">enabled</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">CONFIG_NF_NAT:</span> <span class="string">enabled</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">CONFIG_NF_NAT_NEEDED:</span> <span class="string">missing</span> <span class="string">(fail)</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">CONFIG_POSIX_MQUEUE:</span> <span class="string">enabled</span></span><br><span class="line"></span><br><span class="line"><span class="attr">Optional Features:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">CONFIG_USER_NS:</span> <span class="string">enabled</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">CONFIG_SECCOMP:</span> <span class="string">enabled</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">CONFIG_CGROUP_PIDS:</span> <span class="string">enabled</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">CONFIG_BLK_CGROUP:</span> <span class="string">enabled</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">CONFIG_BLK_DEV_THROTTLING:</span> <span class="string">enabled</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">CONFIG_CGROUP_PERF:</span> <span class="string">enabled</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">CONFIG_CGROUP_HUGETLB:</span> <span class="string">enabled</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">CONFIG_NET_CLS_CGROUP:</span> <span class="string">enabled</span> <span class="string">(as</span> <span class="string">module)</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">CONFIG_CGROUP_NET_PRIO:</span> <span class="string">enabled</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">CONFIG_CFS_BANDWIDTH:</span> <span class="string">enabled</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">CONFIG_FAIR_GROUP_SCHED:</span> <span class="string">enabled</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">CONFIG_RT_GROUP_SCHED:</span> <span class="string">enabled</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">CONFIG_IP_NF_TARGET_REDIRECT:</span> <span class="string">enabled</span> <span class="string">(as</span> <span class="string">module)</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">CONFIG_IP_SET:</span> <span class="string">enabled</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">CONFIG_IP_VS:</span> <span class="string">enabled</span> <span class="string">(as</span> <span class="string">module)</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">CONFIG_IP_VS_NFCT:</span> <span class="string">enabled</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">CONFIG_IP_VS_PROTO_TCP:</span> <span class="string">enabled</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">CONFIG_IP_VS_PROTO_UDP:</span> <span class="string">enabled</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">CONFIG_IP_VS_RR:</span> <span class="string">enabled</span> <span class="string">(as</span> <span class="string">module)</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">CONFIG_EXT4_FS:</span> <span class="string">enabled</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">CONFIG_EXT4_FS_POSIX_ACL:</span> <span class="string">enabled</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">CONFIG_EXT4_FS_SECURITY:</span> <span class="string">enabled</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">Network Drivers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">"overlay":</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">CONFIG_VXLAN:</span> <span class="string">enabled</span> <span class="string">(as</span> <span class="string">module)</span></span><br><span class="line">      <span class="string">Optional</span> <span class="string">(for</span> <span class="string">encrypted</span> <span class="string">networks):</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">CONFIG_CRYPTO:</span> <span class="string">enabled</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">CONFIG_CRYPTO_AEAD:</span> <span class="string">enabled</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">CONFIG_CRYPTO_GCM:</span> <span class="string">enabled</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">CONFIG_CRYPTO_SEQIV:</span> <span class="string">enabled</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">CONFIG_CRYPTO_GHASH:</span> <span class="string">enabled</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">CONFIG_XFRM:</span> <span class="string">enabled</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">CONFIG_XFRM_USER:</span> <span class="string">enabled</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">CONFIG_XFRM_ALGO:</span> <span class="string">enabled</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">CONFIG_INET_ESP:</span> <span class="string">enabled</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">CONFIG_INET_XFRM_MODE_TRANSPORT:</span> <span class="string">missing</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">Storage Drivers:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">"overlay":</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">CONFIG_OVERLAY_FS:</span> <span class="string">enabled</span></span><br><span class="line"></span><br><span class="line"><span class="attr">STATUS:</span> <span class="number">2</span> <span class="string">(fail)</span></span><br></pre></td></tr></table></figure><p>发现 <code>ONFIG_NF_NAT_IPV4: missing (fail)</code> 和 <code>CONFIG_NF_NAT_NEEDED: missing (fail)</code> 失败了🙃，先不管看看能不能跑起来再说。</p><h4 id="创建-K3s-集群"><a href="#创建-K3s-集群" class="headerlink" title="创建 K3s 集群"></a>创建 K3s 集群</h4><p>根据 K3s 的文档，使用 <code>k3s server</code>  选项就能创建一个 K3s 集群</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line">╭─root@OpenWrt ~</span><br><span class="line">╰─<span class="comment"># k3s server</span></span><br><span class="line">INFO[2020-03-08T20:17:00.103499172+08:00] Starting k3s v1.17.3+k3s1 (5b17a175)</span><br><span class="line">INFO[2020-03-08T20:17:00.112443368+08:00] Kine listening on unix://kine.sock</span><br><span class="line">INFO[2020-03-08T20:17:01.572347551+08:00] Active TLS secret  (ver=) (count 7): map[listener.cattle.io/cn-10.43.0.1:10.43.0.1 listener.cattle.io/cn-127.0.0.1:127.0.0.1 listener.cattle.io/cn-192.168.0.212:192.168.0.212 listener.cattle.io/cn-kubernetes:kubernetes listener.cattle.io/cn-kubernetes.default:kubernetes.default listener.cattle.io/cn-kubernetes.default.svc.cluster.local:kubernetes.default.svc.cluster.local listener.cattle.io/cn-localhost:localhost listener.cattle.io/<span class="built_in">hash</span>:089b0c6a0b78e5f9d3a33b154e97185f644ed693bee80d4559c47e00f19af2f8]</span><br><span class="line">INFO[2020-03-08T20:17:01.591244044+08:00] Running kube-apiserver --advertise-port=6443 --allow-privileged=<span class="literal">true</span> --anonymous-auth=<span class="literal">false</span> --api-audiences=unknown --authorization-mode=Node,RBAC --basic-auth-file=/var/lib/rancher/k3s/server/cred/passwd --<span class="built_in">bind</span>-address=127.0.0.1 --cert-dir=/var/lib/rancher/k3s/server/tls/temporary-certs --client-ca-file=/var/lib/rancher/k3s/server/tls/client-ca.crt --<span class="built_in">enable</span>-admission-plugins=NodeRestriction --etcd-servers=unix://kine.sock --insecure-port=0 --kubelet-certificate-authority=/var/lib/rancher/k3s/server/tls/server-ca.crt --kubelet-client-certificate=/var/lib/rancher/k3s/server/tls/client-kube-apiserver.crt --kubelet-client-key=/var/lib/rancher/k3s/server/tls/client-kube-apiserver.key --proxy-client-cert-file=/var/lib/rancher/k3s/server/tls/client-auth-proxy.crt --proxy-client-key-file=/var/lib/rancher/k3s/server/tls/client-auth-proxy.key --requestheader-allowed-names=system:auth-proxy --requestheader-client-ca-file=/var/lib/rancher/k3s/server/tls/request-header-ca.crt --requestheader-extra-headers-prefix=X-Remote-Extra- --requestheader-group-headers=X-Remote-Group --requestheader-username-headers=X-Remote-User --secure-port=6444 --service-account-issuer=k3s --service-account-key-file=/var/lib/rancher/k3s/server/tls/service.key --service-account-signing-key-file=/var/lib/rancher/k3s/server/tls/service.key --service-cluster-ip-range=10.43.0.0/16 --storage-backend=etcd3 --tls-cert-file=/var/lib/rancher/k3s/server/tls/serving-kube-apiserver.crt --tls-private-key-file=/var/lib/rancher/k3s/server/tls/serving-kube-apiserver.key</span><br><span class="line">Flag --basic-auth-file has been deprecated, Basic authentication mode is deprecated and will be removed <span class="keyword">in</span> a future release. It is not recommended <span class="keyword">for</span> production environments.</span><br><span class="line">I0308 20:17:01.593861    9319 server.go:622] external host was not specified, using 192.168.0.212</span><br><span class="line">I0308 20:17:01.594884    9319 server.go:163] Version: v1.17.3+k3s1</span><br><span class="line">I0308 20:17:04.485872    9319 plugins.go:158] Loaded 11 mutating admission controller(s) successfully <span class="keyword">in</span> the following order: NamespaceLifecycle,LimitRanger,ServiceAccount,NodeRestriction,TaintNodesByCondition,Priority,DefaultTolerationSeconds,DefaultStorageClass,StorageObjectInUseProtection,MutatingAdmissionWebhook,RuntimeClass.</span><br><span class="line">I0308 20:17:04.485954    9319 plugins.go:161] Loaded 7 validating admission controller(s) successfully <span class="keyword">in</span> the following order: LimitRanger,ServiceAccount,Priority,PersistentVolumeClaimResize,ValidatingAdmissionWebhook,RuntimeClass,ResourceQuota.</span><br><span class="line">I0308 20:17:04.491004    9319 plugins.go:158] Loaded 11 mutating admission controller(s) successfully <span class="keyword">in</span> the following order: NamespaceLifecycle,LimitRanger,ServiceAccount,NodeRestriction,TaintNodesByCondition,Priority,DefaultTolerationSeconds,DefaultStorageClass,StorageObjectInUseProtection,MutatingAdmissionWebhook,RuntimeClass.</span><br><span class="line">I0308 20:17:04.491084    9319 plugins.go:161] Loaded 7 validating admission controller(s) successfully <span class="keyword">in</span> the following order: LimitRanger,ServiceAccount,Priority,PersistentVolumeClaimResize,ValidatingAdmissionWebhook,RuntimeClass,ResourceQuota.</span><br><span class="line">I0308 20:17:04.592193    9319 master.go:267] Using reconciler: lease</span><br><span class="line">I0308 20:17:04.699310    9319 rest.go:115] the default service ipfamily <span class="keyword">for</span> this cluster is: IPv4</span><br><span class="line">W0308 20:17:06.161374    9319 genericapiserver.go:404] Skipping API batch/v2alpha1 because it has no resources.</span><br><span class="line">W0308 20:17:06.212135    9319 genericapiserver.go:404] Skipping API discovery.k8s.io/v1alpha1 because it has no resources.</span><br><span class="line">W0308 20:17:06.264606    9319 genericapiserver.go:404] Skipping API node.k8s.io/v1alpha1 because it has no resources.</span><br><span class="line">W0308 20:17:06.361403    9319 genericapiserver.go:404] Skipping API rbac.authorization.k8s.io/v1alpha1 because it has no resources.</span><br><span class="line">W0308 20:17:06.379432    9319 genericapiserver.go:404] Skipping API scheduling.k8s.io/v1alpha1 because it has no resources.</span><br><span class="line">W0308 20:17:06.447661    9319 genericapiserver.go:404] Skipping API storage.k8s.io/v1alpha1 because it has no resources.</span><br><span class="line">W0308 20:17:06.550084    9319 genericapiserver.go:404] Skipping API apps/v1beta2 because it has no resources.</span><br><span class="line">W0308 20:17:06.550168    9319 genericapiserver.go:404] Skipping API apps/v1beta1 because it has no resources.</span><br><span class="line">I0308 20:17:06.599929    9319 plugins.go:158] Loaded 11 mutating admission controller(s) successfully <span class="keyword">in</span> the following order: NamespaceLifecycle,LimitRanger,ServiceAccount,NodeRestriction,TaintNodesByCondition,Priority,DefaultTolerationSeconds,DefaultStorageClass,StorageObjectInUseProtection,MutatingAdmissionWebhook,RuntimeClass.</span><br><span class="line">I0308 20:17:06.600017    9319 plugins.go:161] Loaded 7 validating admission controller(s) successfully <span class="keyword">in</span> the following order: LimitRanger,ServiceAccount,Priority,PersistentVolumeClaimResize,ValidatingAdmissionWebhook,RuntimeClass,ResourceQuota.</span><br><span class="line">I0308 20:17:16.394308    9319 dynamic_cafile_content.go:166] Starting client-ca-bundle::/var/lib/rancher/k3s/server/tls/client-ca.crt</span><br><span class="line">I0308 20:17:16.394308    9319 dynamic_cafile_content.go:166] Starting request-header::/var/lib/rancher/k3s/server/tls/request-header-ca.crt</span><br><span class="line">I0308 20:17:16.395251    9319 dynamic_serving_content.go:129] Starting serving-cert::/var/lib/rancher/k3s/server/tls/serving-kube-apiserver.crt::/var/lib/rancher/k3s/server/tls/serving-kube-apiserver.key</span><br><span class="line">I0308 20:17:16.397910    9319 secure_serving.go:178] Serving securely on 127.0.0.1:6444</span><br><span class="line">I0308 20:17:16.398017    9319 tlsconfig.go:219] Starting DynamicServingCertificateController</span><br><span class="line">I0308 20:17:16.398379    9319 autoregister_controller.go:140] Starting autoregister controller</span><br><span class="line">I0308 20:17:16.398459    9319 cache.go:32] Waiting <span class="keyword">for</span> caches to sync <span class="keyword">for</span> autoregister controller</span><br><span class="line">I0308 20:17:16.398723    9319 available_controller.go:386] Starting AvailableConditionController</span><br><span class="line">I0308 20:17:16.398794    9319 cache.go:32] Waiting <span class="keyword">for</span> caches to sync <span class="keyword">for</span> AvailableConditionController controller</span><br><span class="line">I0308 20:17:16.399089    9319 crdregistration_controller.go:111] Starting crd-autoregister controller</span><br><span class="line">I0308 20:17:16.399288    9319 shared_informer.go:197] Waiting <span class="keyword">for</span> caches to sync <span class="keyword">for</span> crd-autoregister</span><br><span class="line">I0308 20:17:16.399546    9319 crd_finalizer.go:263] Starting CRDFinalizer</span><br><span class="line">I0308 20:17:16.399790    9319 controller.go:85] Starting OpenAPI controller</span><br><span class="line">I0308 20:17:16.400002    9319 customresource_discovery_controller.go:208] Starting DiscoveryController</span><br><span class="line">I0308 20:17:16.400341    9319 naming_controller.go:288] Starting NamingConditionController</span><br><span class="line">I0308 20:17:16.400638    9319 establishing_controller.go:73] Starting EstablishingController</span><br><span class="line">I0308 20:17:16.400854    9319 nonstructuralschema_controller.go:191] Starting NonStructuralSchemaConditionController</span><br><span class="line">I0308 20:17:16.401201    9319 apiapproval_controller.go:185] Starting KubernetesAPIApprovalPolicyConformantConditionController</span><br><span class="line">I0308 20:17:16.402017    9319 cluster_authentication_trust_controller.go:440] Starting cluster_authentication_trust_controller controller</span><br><span class="line">I0308 20:17:16.402094    9319 shared_informer.go:197] Waiting <span class="keyword">for</span> caches to sync <span class="keyword">for</span> cluster_authentication_trust_controller</span><br><span class="line">I0308 20:17:16.403447    9319 apiservice_controller.go:94] Starting APIServiceRegistrationController</span><br><span class="line">I0308 20:17:16.403537    9319 cache.go:32] Waiting <span class="keyword">for</span> caches to sync <span class="keyword">for</span> APIServiceRegistrationController controller</span><br><span class="line">I0308 20:17:16.403681    9319 controller.go:81] Starting OpenAPI AggregationController</span><br><span class="line">I0308 20:17:16.418176    9319 dynamic_cafile_content.go:166] Starting client-ca-bundle::/var/lib/rancher/k3s/server/tls/client-ca.crt</span><br><span class="line">I0308 20:17:16.419045    9319 dynamic_cafile_content.go:166] Starting request-header::/var/lib/rancher/k3s/server/tls/request-header-ca.crt</span><br><span class="line">I0308 20:17:16.606683    9319 shared_informer.go:204] Caches are synced <span class="keyword">for</span> cluster_authentication_trust_controller</span><br><span class="line">I0308 20:17:16.613199    9319 cache.go:39] Caches are synced <span class="keyword">for</span> autoregister controller</span><br><span class="line">I0308 20:17:16.614373    9319 cache.go:39] Caches are synced <span class="keyword">for</span> AvailableConditionController controller</span><br><span class="line">I0308 20:17:16.614504    9319 shared_informer.go:204] Caches are synced <span class="keyword">for</span> crd-autoregister</span><br><span class="line">I0308 20:17:16.616912    9319 cache.go:39] Caches are synced <span class="keyword">for</span> APIServiceRegistrationController controller</span><br><span class="line">E0308 20:17:16.633217    9319 controller.go:150] Unable to perform initial Kubernetes service initialization: Service <span class="string">"kubernetes"</span> is invalid: spec.clusterIP: Invalid value: <span class="string">"10.43.0.1"</span>: cannot allocate resources of <span class="built_in">type</span> serviceipallocations at this time</span><br><span class="line">E0308 20:17:16.639707    9319 controller.go:155] Unable to remove old endpoints from kubernetes service: StorageError: key not found, Code: 1, Key: /registry/masterleases/192.168.0.212, ResourceVersion: 0, AdditionalErrorMsg:</span><br><span class="line">I0308 20:17:17.394171    9319 controller.go:107] OpenAPI AggregationController: Processing item</span><br><span class="line">I0308 20:17:17.394300    9319 controller.go:130] OpenAPI AggregationController: action <span class="keyword">for</span> item : Nothing (removed from the queue).</span><br><span class="line">I0308 20:17:17.394391    9319 controller.go:130] OpenAPI AggregationController: action <span class="keyword">for</span> item k8s_internal_local_delegation_chain_0000000000: Nothing (removed from the queue).</span><br><span class="line">I0308 20:17:17.431078    9319 storage_scheduling.go:133] created PriorityClass system-node-critical with value 2000001000</span><br><span class="line">I0308 20:17:17.445315    9319 storage_scheduling.go:133] created PriorityClass system-cluster-critical with value 2000000000</span><br><span class="line">I0308 20:17:17.445429    9319 storage_scheduling.go:142] all system priority classes are created successfully or already exist.</span><br><span class="line">I0308 20:17:18.939225    9319 controller.go:606] quota admission added evaluator <span class="keyword">for</span>: roles.rbac.authorization.k8s.io</span><br><span class="line">I0308 20:17:19.103599    9319 controller.go:606] quota admission added evaluator <span class="keyword">for</span>: rolebindings.rbac.authorization.k8s.io</span><br><span class="line">W0308 20:17:19.434785    9319 lease.go:224] Resetting endpoints <span class="keyword">for</span> master service <span class="string">"kubernetes"</span> to [192.168.0.212]</span><br><span class="line">I0308 20:17:19.438264    9319 controller.go:606] quota admission added evaluator <span class="keyword">for</span>: endpoints</span><br><span class="line">INFO[2020-03-08T20:17:19.626006745+08:00] Running kube-scheduler --<span class="built_in">bind</span>-address=127.0.0.1 --kubeconfig=/var/lib/rancher/k3s/server/cred/scheduler.kubeconfig --leader-elect=<span class="literal">false</span> --port=10251 --secure-port=0</span><br><span class="line">INFO[2020-03-08T20:17:19.629360634+08:00] Running kube-controller-manager --allocate-node-cidrs=<span class="literal">true</span> --<span class="built_in">bind</span>-address=127.0.0.1 --cluster-cidr=10.42.0.0/16 --cluster-signing-cert-file=/var/lib/rancher/k3s/server/tls/server-ca.crt --cluster-signing-key-file=/var/lib/rancher/k3s/server/tls/server-ca.key --kubeconfig=/var/lib/rancher/k3s/server/cred/controller.kubeconfig --leader-elect=<span class="literal">false</span> --port=10252 --root-ca-file=/var/lib/rancher/k3s/server/tls/server-ca.crt --secure-port=0 --service-account-private-key-file=/var/lib/rancher/k3s/server/tls/service.key --use-service-account-credentials=<span class="literal">true</span></span><br><span class="line">I0308 20:17:19.655674    9319 controllermanager.go:161] Version: v1.17.3+k3s1</span><br><span class="line">I0308 20:17:19.657868    9319 deprecated_insecure_serving.go:53] Serving insecurely on [::]:10252</span><br><span class="line">INFO[2020-03-08T20:17:19.658915754+08:00] Waiting <span class="keyword">for</span> cloudcontroller rbac role to be created</span><br><span class="line">INFO[2020-03-08T20:17:19.664219593+08:00] Creating CRD addons.k3s.cattle.io</span><br><span class="line">INFO[2020-03-08T20:17:19.686759095+08:00] Creating CRD helmcharts.helm.cattle.io</span><br><span class="line">W0308 20:17:19.691464    9319 authorization.go:47] Authorization is disabled</span><br><span class="line">W0308 20:17:19.691548    9319 authentication.go:92] Authentication is disabled</span><br><span class="line">I0308 20:17:19.691602    9319 deprecated_insecure_serving.go:51] Serving healthz insecurely on [::]:10251</span><br><span class="line">INFO[2020-03-08T20:17:19.762954369+08:00] Waiting <span class="keyword">for</span> CRD helmcharts.helm.cattle.io to become available</span><br><span class="line">INFO[2020-03-08T20:17:20.280122513+08:00] Done waiting <span class="keyword">for</span> CRD helmcharts.helm.cattle.io to become available</span><br><span class="line">INFO[2020-03-08T20:17:20.320314726+08:00] Writing static file: /var/lib/rancher/k3s/server/static/charts/traefik-1.81.0.tgz</span><br><span class="line">INFO[2020-03-08T20:17:20.321243908+08:00] Writing manifest: /var/lib/rancher/k3s/server/manifests/coredns.yaml</span><br><span class="line">INFO[2020-03-08T20:17:20.321700333+08:00] Writing manifest: /var/lib/rancher/k3s/server/manifests/metrics-server/aggregated-metrics-reader.yaml</span><br><span class="line">INFO[2020-03-08T20:17:20.322113756+08:00] Writing manifest: /var/lib/rancher/k3s/server/manifests/metrics-server/metrics-apiservice.yaml</span><br><span class="line">INFO[2020-03-08T20:17:20.322546305+08:00] Writing manifest: /var/lib/rancher/k3s/server/manifests/metrics-server/metrics-server-deployment.yaml</span><br><span class="line">INFO[2020-03-08T20:17:20.322947895+08:00] Writing manifest: /var/lib/rancher/k3s/server/manifests/metrics-server/metrics-server-service.yaml</span><br><span class="line">INFO[2020-03-08T20:17:20.323365277+08:00] Writing manifest: /var/lib/rancher/k3s/server/manifests/metrics-server/resource-reader.yaml</span><br><span class="line">INFO[2020-03-08T20:17:20.323768992+08:00] Writing manifest: /var/lib/rancher/k3s/server/manifests/traefik.yaml</span><br><span class="line">INFO[2020-03-08T20:17:20.324187832+08:00] Writing manifest: /var/lib/rancher/k3s/server/manifests/ccm.yaml</span><br><span class="line">INFO[2020-03-08T20:17:20.324764300+08:00] Writing manifest: /var/lib/rancher/k3s/server/manifests/<span class="built_in">local</span>-storage.yaml</span><br><span class="line">INFO[2020-03-08T20:17:20.325164932+08:00] Writing manifest: /var/lib/rancher/k3s/server/manifests/metrics-server/auth-delegator.yaml</span><br><span class="line">INFO[2020-03-08T20:17:20.325563897+08:00] Writing manifest: /var/lib/rancher/k3s/server/manifests/metrics-server/auth-reader.yaml</span><br><span class="line">INFO[2020-03-08T20:17:20.325996113+08:00] Writing manifest: /var/lib/rancher/k3s/server/manifests/rolebindings.yaml</span><br><span class="line">INFO[2020-03-08T20:17:20.527152139+08:00] Starting k3s.cattle.io/v1, Kind=Addon controller</span><br><span class="line">INFO[2020-03-08T20:17:20.529057920+08:00] Node token is available at /var/lib/rancher/k3s/server/token</span><br><span class="line">INFO[2020-03-08T20:17:20.529286008+08:00] To join node to cluster: k3s agent -s https://192.168.0.212:6443 -t <span class="variable">$&#123;NODE_TOKEN&#125;</span></span><br><span class="line">INFO[2020-03-08T20:17:20.527299933+08:00] Waiting <span class="keyword">for</span> master node  startup: resource name may not be empty</span><br><span class="line">INFO[2020-03-08T20:17:20.725057527+08:00] Waiting <span class="keyword">for</span> cloudcontroller rbac role to be created</span><br><span class="line">I0308 20:17:20.810135    9319 controller.go:606] quota admission added evaluator <span class="keyword">for</span>: addons.k3s.cattle.io</span><br><span class="line">INFO[2020-03-08T20:17:20.830872877+08:00] Starting helm.cattle.io/v1, Kind=HelmChart controller</span><br><span class="line">INFO[2020-03-08T20:17:20.831652182+08:00] Starting batch/v1, Kind=Job controller</span><br><span class="line">INFO[2020-03-08T20:17:20.832798326+08:00] Starting /v1, Kind=Service controller</span><br><span class="line">INFO[2020-03-08T20:17:20.833998971+08:00] Starting /v1, Kind=Pod controller</span><br><span class="line">INFO[2020-03-08T20:17:20.835217450+08:00] Starting /v1, Kind=Endpoints controller</span><br><span class="line">INFO[2020-03-08T20:17:20.836690891+08:00] Starting /v1, Kind=Secret controller</span><br><span class="line">INFO[2020-03-08T20:17:20.838569298+08:00] Starting /v1, Kind=Node controller</span><br></pre></td></tr></table></figure><h4 id="集群状态"><a href="#集群状态" class="headerlink" title="集群状态"></a>集群状态</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">╭─root@OpenWrt ~</span><br><span class="line">╰─<span class="comment"># ks cluster-info</span></span><br><span class="line">Kubernetes master is running at https://127.0.0.1:6443</span><br><span class="line">CoreDNS is running at https://127.0.0.1:6443/api/v1/namespaces/kube-system/services/kube-dns:dns/proxy</span><br><span class="line">Metrics-server is running at https://127.0.0.1:6443/api/v1/namespaces/kube-system/services/https:metrics-server:/proxy</span><br><span class="line"></span><br><span class="line">To further debug and diagnose cluster problems, use <span class="string">'kubectl cluster-info dump'</span>.</span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line">╭─root@OpenWrt ~</span><br><span class="line">╰─<span class="comment"># ks get node</span></span><br><span class="line">NAME      STATUS   ROLES    AGE     VERSION</span><br><span class="line">openwrt   Ready    master   5m26s   v1.17.3+k3s1</span><br><span class="line">╭─root@OpenWrt ~</span><br><span class="line">╰─<span class="comment"># ks get pod -n kube-system</span></span><br><span class="line">NAME                                      READY   STATUS              RESTARTS   AGE</span><br><span class="line">metrics-server-6d684c7b5-8gv8j            1/1     Running             0          5m20s</span><br><span class="line"><span class="built_in">local</span>-path-provisioner-58fb86bdfd-h8jkk   1/1     Running             0          5m20s</span><br><span class="line">svclb-traefik-9kwxx                       0/2     ContainerCreating   0          3m29s</span><br><span class="line">helm-install-traefik-nw9td                0/1     Completed           2          5m20s</span><br><span class="line">coredns-d798c9dd-62sb9                    1/1     Running             0          5m20s</span><br><span class="line">traefik-6787cddb4b-p6hs9                  1/1     Running             0          3m30s</span><br><span class="line">╭─root@OpenWrt ~</span><br><span class="line">╰─<span class="comment"># ks describe node</span></span><br><span class="line">Name:               openwrt</span><br><span class="line">Roles:              master</span><br><span class="line">Labels:             beta.kubernetes.io/arch=arm64</span><br><span class="line">                    beta.kubernetes.io/instance-type=k3s</span><br><span class="line">                    beta.kubernetes.io/os=linux</span><br><span class="line">                    k3s.io/hostname=openwrt</span><br><span class="line">                    k3s.io/internal-ip=192.168.0.212</span><br><span class="line">                    kubernetes.io/arch=arm64</span><br><span class="line">                    kubernetes.io/hostname=openwrt</span><br><span class="line">                    kubernetes.io/os=linux</span><br><span class="line">                    node-role.kubernetes.io/master=<span class="literal">true</span></span><br><span class="line">                    node.kubernetes.io/instance-type=k3s</span><br><span class="line">Annotations:        flannel.alpha.coreos.com/backend-data: &#123;<span class="string">"VtepMAC"</span>:<span class="string">"ca:8f:da:03:f3:e5"</span>&#125;</span><br><span class="line">                    flannel.alpha.coreos.com/backend-type: vxlan</span><br><span class="line">                    flannel.alpha.coreos.com/kube-subnet-manager: <span class="literal">true</span></span><br><span class="line">                    flannel.alpha.coreos.com/public-ip: 192.168.0.212</span><br><span class="line">                    node.alpha.kubernetes.io/ttl: 0</span><br><span class="line">                    volumes.kubernetes.io/controller-managed-attach-detach: <span class="literal">true</span></span><br><span class="line">CreationTimestamp:  Sun, 08 Mar 2020 20:17:23 +0800</span><br><span class="line">Taints:             &lt;none&gt;</span><br><span class="line">Unschedulable:      <span class="literal">false</span></span><br><span class="line">Lease:</span><br><span class="line">  HolderIdentity:  openwrt</span><br><span class="line">  AcquireTime:     &lt;<span class="built_in">unset</span>&gt;</span><br><span class="line">  RenewTime:       Sun, 08 Mar 2020 20:23:44 +0800</span><br><span class="line">Conditions:</span><br><span class="line">  Type                 Status  LastHeartbeatTime                 LastTransitionTime                Reason                       Message</span><br><span class="line">  ----               ------  -----------------               ------------------              ------                     -------</span><br><span class="line">  NetworkUnavailable   False   Sun, 08 Mar 2020 20:17:38 +0800   Sun, 08 Mar 2020 20:17:38 +0800   FlannelIsUp                  Flannel is running on this node</span><br><span class="line">  MemoryPressure       False   Sun, 08 Mar 2020 20:19:54 +0800   Sun, 08 Mar 2020 20:17:23 +0800   KubeletHasSufficientMemory   kubelet has sufficient memory available</span><br><span class="line">  DiskPressure         False   Sun, 08 Mar 2020 20:19:54 +0800   Sun, 08 Mar 2020 20:17:23 +0800   KubeletHasNoDiskPressure     kubelet has no disk pressure</span><br><span class="line">  PIDPressure          False   Sun, 08 Mar 2020 20:19:54 +0800   Sun, 08 Mar 2020 20:17:23 +0800   KubeletHasSufficientPID      kubelet has sufficient PID available</span><br><span class="line">  Ready                True    Sun, 08 Mar 2020 20:19:54 +0800   Sun, 08 Mar 2020 20:17:34 +0800   KubeletReady                 kubelet is posting ready status</span><br><span class="line">Addresses:</span><br><span class="line">  InternalIP:  192.168.0.212</span><br><span class="line">  Hostname:    openwrt</span><br><span class="line">Capacity:</span><br><span class="line">  cpu:                4</span><br><span class="line">  ephemeral-storage:  925844Ki</span><br><span class="line">  hugepages-1Gi:      0</span><br><span class="line">  hugepages-2Mi:      0</span><br><span class="line">  hugepages-32Mi:     0</span><br><span class="line">  hugepages-64Ki:     0</span><br><span class="line">  memory:             1851688Ki</span><br><span class="line">  pods:               110</span><br><span class="line">Allocatable:</span><br><span class="line">  cpu:                4</span><br><span class="line">  ephemeral-storage:  900661043</span><br><span class="line">  hugepages-1Gi:      0</span><br><span class="line">  hugepages-2Mi:      0</span><br><span class="line">  hugepages-32Mi:     0</span><br><span class="line">  hugepages-64Ki:     0</span><br><span class="line">  memory:             1851688Ki</span><br><span class="line">  pods:               110</span><br><span class="line">System Info:</span><br><span class="line">  Machine ID:                 96581db4e82a9fb36b0553115e64de1a</span><br><span class="line">  System UUID:</span><br><span class="line">  Boot ID:                    87856a60-0482-4ca3-a144-2ec073e1d2c7</span><br><span class="line">  Kernel Version:             5.4.23-amlogic-flippy-28+</span><br><span class="line">  OS Image:                   OpenWrt SNAPSHOT</span><br><span class="line">  Operating System:           linux</span><br><span class="line">  Architecture:               arm64</span><br><span class="line">  Container Runtime Version:  containerd://1.3.3-k3s1</span><br><span class="line">  Kubelet Version:            v1.17.3+k3s1</span><br><span class="line">  Kube-Proxy Version:         v1.17.3+k3s1</span><br><span class="line">PodCIDR:                      10.42.0.0/24</span><br><span class="line">PodCIDRs:                     10.42.0.0/24</span><br><span class="line">ProviderID:                   k3s://openwrt</span><br><span class="line">Non-terminated Pods:          (5 <span class="keyword">in</span> total)</span><br><span class="line">  Namespace                   Name                                       CPU Requests  CPU Limits  Memory Requests  Memory Limits  AGE</span><br><span class="line">  ---------                 ----                                     ------------  ----------  ---------------  -------------  ---</span><br><span class="line">  kube-system                 metrics-server-6d684c7b5-8gv8j             0 (0%)        0 (0%)      0 (0%)           0 (0%)         6m10s</span><br><span class="line">  kube-system                 <span class="built_in">local</span>-path-provisioner-58fb86bdfd-h8jkk    0 (0%)        0 (0%)      0 (0%)           0 (0%)         6m10s</span><br><span class="line">  kube-system                 svclb-traefik-9kwxx                        0 (0%)        0 (0%)      0 (0%)           0 (0%)         4m19s</span><br><span class="line">  kube-system                 coredns-d798c9dd-62sb9                     100m (2%)     0 (0%)      70Mi (3%)        170Mi (9%)     6m10s</span><br><span class="line">  kube-system                 traefik-6787cddb4b-p6hs9                   0 (0%)        0 (0%)      0 (0%)           0 (0%)         4m20s</span><br><span class="line">Allocated resources:</span><br><span class="line">  (Total limits may be over 100 percent, i.e., overcommitted.)</span><br><span class="line">  Resource           Requests   Limits</span><br><span class="line">  --------         -------- ------</span><br><span class="line">  cpu                100m (2%)  0 (0%)</span><br><span class="line">  memory             70Mi (3%)  170Mi (9%)</span><br><span class="line">  ephemeral-storage  0 (0%)     0 (0%)</span><br><span class="line">Events:</span><br><span class="line">  Type     Reason                   Age                    From                 Message</span><br><span class="line">  ----   ------                 ----                 ----               -------</span><br><span class="line">  Normal   Starting                 6m24s                  kubelet, openwrt     Starting kubelet.</span><br><span class="line">  Warning  InvalidDiskCapacity      6m24s                  kubelet, openwrt     invalid capacity 0 on image filesystem</span><br><span class="line">  Normal   NodeHasSufficientPID     6m23s (x2 over 6m24s)  kubelet, openwrt     Node openwrt status is now: NodeHasSufficientPID</span><br><span class="line">  Normal   NodeHasSufficientMemory  6m23s (x2 over 6m24s)  kubelet, openwrt     Node openwrt status is now: NodeHasSufficientMemory</span><br><span class="line">  Normal   NodeHasNoDiskPressure    6m23s (x2 over 6m24s)  kubelet, openwrt     Node openwrt status is now: NodeHasNoDiskPressure</span><br><span class="line">  Normal   NodeAllocatableEnforced  6m23s                  kubelet, openwrt     Updated Node Allocatable <span class="built_in">limit</span> across pods</span><br><span class="line">  Normal   Starting                 6m23s                  kube-proxy, openwrt  Starting kube-proxy.</span><br><span class="line">  Normal   NodeReady                6m13s                  kubelet, openwrt     Node openwrt status is now: NodeReady</span><br></pre></td></tr></table></figure><h2 id="结束啦"><a href="#结束啦" class="headerlink" title="结束啦"></a>结束啦</h2><p>关于 OpenWrt 最重要的<code>透明代理旁路网关</code> 还没有讲到，稍后再更新一下，毕竟我买了是玩儿 K3s 的😂。总之这个垃圾还是值得捡的，准备再捡几台？部署个 K3s 集群？高可用？五节点？仨 master 俩 node？（逃</p><p>不过意外发现该盒子的 USB 口竟然支持使用 echo 命令来修改 <code>/sys/bus/usb/devices/usb1/power/level</code> 的值来控制 USB 的电源状态，这样从USB 口引出正负极接在继电器上，这就是一个通过网络控制的开关。我在 <code>R6300V2</code> 和 <code>WNDR3700V4</code> 上梦寐以求没有的功能居然在这个破盒子上有。意外收获！</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">╭─root@OpenWrt ~</span><br><span class="line">╰─<span class="comment"># tree /sys/bus/usb/devices/usb1/power/</span></span><br><span class="line">/sys/bus/usb/devices/usb1/power/</span><br><span class="line">├── active_duration</span><br><span class="line">├── autosuspend</span><br><span class="line">├── autosuspend_delay_ms</span><br><span class="line">├── connected_duration</span><br><span class="line">├── control</span><br><span class="line">├── level</span><br><span class="line">├── runtime_active_time</span><br><span class="line">├── runtime_status</span><br><span class="line">├── runtime_suspended_time</span><br><span class="line">├── wakeup</span><br><span class="line">├── wakeup_abort_count</span><br><span class="line">├── wakeup_active</span><br><span class="line">├── wakeup_active_count</span><br><span class="line">├── wakeup_count</span><br><span class="line">├── wakeup_expire_count</span><br><span class="line">├── wakeup_last_time_ms</span><br><span class="line">├── wakeup_max_time_ms</span><br><span class="line">└── wakeup_total_time_ms</span><br></pre></td></tr></table></figure><p>最后祝大家 <strong>Happy Hacking</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;h2 id=&quot;K3s&quot;&gt;&lt;a href=&quot;#K3s&quot;
        
      
    
    </summary>
    
    
      <category term="刷机" scheme="https://blog.k8s.li/categories/%E5%88%B7%E6%9C%BA/"/>
    
    
      <category term="软路由" scheme="https://blog.k8s.li/tags/%E8%BD%AF%E8%B7%AF%E7%94%B1/"/>
    
      <category term="OpenWrt" scheme="https://blog.k8s.li/tags/OpenWrt/"/>
    
      <category term="K3s" scheme="https://blog.k8s.li/tags/K3s/"/>
    
  </entry>
  
</feed>
