<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>木子</title>
  <icon>https://blog.k8s.li/icon.png</icon>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://blog.k8s.li/"/>
  <updated>2020-09-24T16:00:00.000Z</updated>
  <id>https://blog.k8s.li/</id>
  
  <author>
    <name>木子</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>轻量级容器优化型 Linux 发行版 Photon OS</title>
    <link href="https://blog.k8s.li/Photon-OS.html"/>
    <id>https://blog.k8s.li/Photon-OS.html</id>
    <published>2020-09-24T16:00:00.000Z</published>
    <updated>2020-09-24T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>前段时间捡垃圾东拼西凑搞了台 Homelab 👇玩玩 👉<a href="https://blog.k8s.li/homelab.html">《垃圾佬的 Homelab 折腾记录》</a> 。</p><p><img src="img/20200913_esxi_01.png" alt=""></p><p>总体来讲性价比高，Intel i5-6600T 的性能和 i5-6600 持平，比那种 8250U 之类的低压 U 要高很多，跑一堆虚拟机也不成问题，甚至跑个三 master + 两 node 的 kubernetes 集群也是可以😂。至于功耗，整机待机时不到 30W ，一天不到 1 度电，不用担心电费爆表了；至于价格，一颗 Intel i5-6600T  不到 450 块钱，还不香嘛🙃。</p><p>在 ESXi 运行着一些虚拟机，比如用 WireGuard 打通 VPS 之间的网络，运行在一个 alpine 虚拟机里作为网关机使用；比如使用 <a href="https://pi-hole.net/" target="_blank" rel="noopener">Pi-hole®</a> 来构建自己的 DNS 服务器，用来拦截屏蔽域名；比如运行 time-machine 服务用来定时备份 MacBook ；比如 Windows 虚拟机里运行着一些国产毒瘤软件😡；比如使用 <a href="https://docs.drone.io/" target="_blank" rel="noopener">Drone</a> 跑一套轻量级的 CI 流水线系统，总之可玩性非常高哦，只要你又时间瞎折腾，总能找点乐子玩😂。</p><h2 id="Linux-Container-OS"><a href="#Linux-Container-OS" class="headerlink" title="Linux Container OS ?"></a>Linux Container OS ?</h2><p>有了一台运行着 ESXi 的 Homelab ，今天就玩一下 Linux container OS ，即 Linux 容器  OS 、容器优化型 OS，这是一类专门针对运行容器定制化开发的 Linux 发行版，裁剪掉一些不必要的软件和内核模块，使系统更加轻量一些。虽然来说民用级的 Intel i5-6600T 性能也不算太差，但和 E3  小王子，E5 老大哥比还是差个十万八千里。因此为了节省一些 CPU 资源，减少虚拟化带来的开销，就选择了容器化运行一些应用，同时再为这些容器找一个轻量级的宿主机 OS ，这就是为什么想要使用 Linux container OS 的原因。</p><h3 id="GKE-的-Container-Optimized-OS"><a href="#GKE-的-Container-Optimized-OS" class="headerlink" title="GKE 的 Container-Optimized OS"></a>GKE 的 <a href="https://cloud.google.com/container-optimized-os/docs/" target="_blank" rel="noopener">Container-Optimized OS</a></h3><p>Kubernetes 的亲爸爸 Google 家的 <a href="https://cloud.google.com/kubernetes-engine" target="_blank" rel="noopener">Google Kubernetes Engine</a> 即 GKE 集群中的每个节点都是使用 <a href="https://cloud.google.com/container-optimized-os/docs/" target="_blank" rel="noopener">Container-Optimized OS</a> 来运行工作负载，不过仅仅是针对 GCE 来进行优化的，可能在 OpenStack 或者 vSphere 上运行不起来，(瞎猜😂。</p><blockquote><p>  Container-Optimized OS 是适用于 <a href="https://cloud.google.com/compute" target="_blank" rel="noopener">Compute Engine</a> 虚拟机的操作系统映像，专为运行 Docker 容器而优化。借助 Container-Optimized OS，您可以快速、高效、安全地在 Google Cloud Platform 上启动 Docker 容器。Container-Optimized OS 由 Google 维护，基于 <a href="https://www.chromium.org/chromium-os" target="_blank" rel="noopener">Chromium OS</a> 开放源代码项目。</p></blockquote><p>特点就是不同于其他的 Linux 发行版，这个是基于 <a href="https://www.chromium.org/chromium-os" target="_blank" rel="noopener">Chromium OS</a> 定制化开发的，对内核版本选用的也比较激进，一般是 <code>4.19.112+</code> 或者 <code>5.x</code> 版本，这样你就不用再担心像 CentOS 7.x 系列那样各种内核 bug 了。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">items:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line">  <span class="attr">kind:</span> <span class="string">Node</span></span><br><span class="line">  <span class="attr">metadata:</span></span><br><span class="line">    <span class="attr">nodeInfo:</span></span><br><span class="line">      <span class="attr">architecture:</span> <span class="string">amd64</span></span><br><span class="line">      <span class="attr">bootID:</span> <span class="string">0c517083-aaf6-75fc4b2204ba</span></span><br><span class="line">      <span class="attr">containerRuntimeVersion:</span> <span class="string">docker://19.3.1</span></span><br><span class="line">      <span class="attr">kernelVersion:</span> <span class="number">4.19</span><span class="number">.112</span><span class="string">+</span></span><br><span class="line">      <span class="attr">kubeProxyVersion:</span> <span class="string">v1.16.13-gke.1</span></span><br><span class="line">      <span class="attr">kubeletVersion:</span> <span class="string">v1.16.13-gke.1</span></span><br><span class="line">      <span class="attr">machineID:</span> <span class="string">33a96ff3203d88c0a542</span></span><br><span class="line">      <span class="attr">operatingSystem:</span> <span class="string">linux</span></span><br><span class="line">      <span class="attr">osImage:</span> <span class="string">Container-Optimized</span> <span class="string">OS</span> <span class="string">from</span> <span class="string">Google</span></span><br><span class="line">      <span class="attr">systemUUID:</span> <span class="string">33a96ff33d88c0a542</span></span><br></pre></td></tr></table></figure><p>Chromium OS 就是 Google 基于 Linux 内核开发的操作系统，所以 Google 也有这个实力针对自家的 GCP 云平台进行定制化开发个 OS 出来，专门给 kubernetes 集群运行使用，定制化开发的好处就是可以带来更多的新特性，二不受制于上游的 Linux 发行版的限制。比如不久前 Google 宣布将使用 <a href="https://cilium.io/" target="_blank" rel="noopener">Cilium</a> 作为 GKE 的下一代数据面，<a href="https://cloud.google.com/blog/products/containers-kubernetes/bringing-ebpf-and-cilium-to-google-kubernetes-engine" target="_blank" rel="noopener">New GKE Dataplane V2 increases security and visibility for containers</a> ，而 Cilium 这项技术是依赖于对 eBPF 技术，而 eBPF 又依赖于内核特性的支持。</p><h3 id="AWS-的-Bottlerocket-OS"><a href="#AWS-的-Bottlerocket-OS" class="headerlink" title="AWS 的 Bottlerocket OS"></a>AWS 的 <a href="https://github.com/bottlerocket-os/bottlerocket" target="_blank" rel="noopener">Bottlerocket OS</a></h3><p>这个是 AWS 最近开源专门针对  EC2 进行优化的 Linux Container OS，和 GKE 一样，只是针对于自家的 AWS 公有云，由于是最近刚刚推出的，还没来得及关注，所以就不介绍了。同 GKE 的 Container-Optimized OS 一样，一般公有云定制化开发的 Container OS 仅仅只针对自家的云平台。</p><blockquote><h3 id="Optimized-performance-through-AWS-integrations"><a href="#Optimized-performance-through-AWS-integrations" class="headerlink" title="Optimized performance through AWS integrations"></a>Optimized performance through AWS integrations</h3><p>  AWS provided builds of Bottlerocket are optimized to run on Amazon EC2 and include support for the latest Amazon EC2 instance capabilities. They also have built-in integrations with AWS services for container orchestration, registries, and observability.</p></blockquote><h3 id="CoreOS-Container-Linux"><a href="#CoreOS-Container-Linux" class="headerlink" title="CoreOS Container Linux"></a>CoreOS Container Linux</h3><p>来自 CoreOS 团队的 CoreOS Container Linux ，它应该是最古老的 Linux Container OS ，早在 2013 年 10 月就已经 release 第一个版本，那时候的 docker 还没有在 0.x.x 版本。</p><blockquote><p>  <a href="https://github.com/coreos/manifest/releases/tag/v94.0.0" target="_blank" rel="noopener">v94.0.0</a></p><ul><li>Git is now included by default as a number of people use it for shipping around assets, code, etc like a distributed rsync</li><li>Docker is upgraded to 0.6.3</li><li>xz is included to support new compression types</li><li>Custom OEMs can be provided via the cpio on PXE images</li></ul></blockquote><p>它没有像 yum 或 apt 这样的包管理器来安装软件，在 CoreOS 中你不需要安装软件，因为所有的应用程序都要使用 docker 来打包。</p><ul><li>最小化的操作系统： 占用内存很少，比典型的服务器版本 Linux 少占 40%的内存。</li><li>易于升级： CoreOS 采用双系统分区（主动分区/被动分区）设计而不是采用传统的通过升级包来升级系统，这使得每次升级更加快速，可靠和易于回滚。这一点有点像 Android 的 A/B 分区？</li><li>集成 Docker： CoreOS 默认集成 Docker 并作了很好的支持和优化，省去用户安装，配置，优化 Docker 的时间，极大地方便了用户。</li><li>易于集群化： CoreOS 本身提供了大型 Docker 容器集群的整体解决方案，通过内置的 fleet 工具在多台系统中部署容器并进行集群化管理。同时通过提供 Discovery Service，便于动态部署和管理集群，解决方案比较成熟。</li><li>自动化的大规模部署： CoreOS 自身提供的解决方案能够自动地大规模批量部署并操作系统，极大地减少用户工作量。</li><li>使用 systemd 做为系统服务管理工具，性能比较好，systemd 有现代化的日志功能，同时采用 socket 式与 D-Bus 总线式激活服务.</li></ul><p>不过 CoreOS 早在今年四月份就已经 EOF 了，<a href="https://getfedora.org/coreos/" target="_blank" rel="noopener">Fedora CoreOS</a> 成为 CoreOS 的继任者：</p><blockquote><p>  As we’ve <a href="https://groups.google.com/d/msg/coreos-user/zgqkG88DS3U/PFP9yrKbAgAJ" target="_blank" rel="noopener">previously announced</a>, <a href="https://getfedora.org/coreos/" target="_blank" rel="noopener">Fedora CoreOS</a> is the official successor to CoreOS Container Linux. Fedora CoreOS is a <a href="https://fedoramagazine.org/fedora-coreos-out-of-preview/" target="_blank" rel="noopener">new Fedora Edition</a> built specifically for running containerized workloads securely and at scale. It combines the provisioning tools and automatic update model of Container Linux with the packaging technology, OCI support, and SELinux security of Atomic Host. For more on the Fedora CoreOS philosophy, goals, and design, see the <a href="https://fedoramagazine.org/introducing-fedora-coreos/" target="_blank" rel="noopener">announcement of the preview release</a> and the <a href="https://docs.fedoraproject.org/en-US/fedora-coreos/" target="_blank" rel="noopener">Fedora CoreOS documentation</a>.</p></blockquote><h3 id="红帽的-RHCOS"><a href="#红帽的-RHCOS" class="headerlink" title="红帽的 RHCOS"></a>红帽的 <a href="https://docs.openshift.com/container-platform/4.1/architecture/architecture-rhcos.html" target="_blank" rel="noopener">RHCOS</a></h3><p>来自红帽子家的 <a href="https://docs.openshift.com/container-platform/4.1/architecture/architecture-rhcos.html" target="_blank" rel="noopener">Red Hat Enterprise Linux CoreOS (RHCOS)</a>，是基于不过这个 OS 仅仅适用于它自家的 <a href="https://docs.openshift.com/" target="_blank" rel="noopener">OpenShift</a>，而且容器运行时仅支持 CRI-O。</p><blockquote><p>  At the moment, CRI-O is only available as a container engine within OpenShift Container Platform clusters.</p></blockquote><p>因为 CoreOS 团队现如今已经被 Red Hat® 收购了，正如在 <a href="https://access.redhat.com/documentation/zh-cn/openshift_container_platform/4.2/html/architecture/architecture-rhcos" target="_blank" rel="noopener">OpenShift 文档</a> 中提到的： Red Hat Enterprise Linux CoreOS (RHCOS) 代表了下一代单用途容器操作系统技术。RHCOS 由创建了 Red Hat Enterprise Linux Atomic Host 和 CoreOS Container Linux 的同一开发团队打造，它将 Red Hat Enterprise Linux (RHEL) 的质量标准与 Container Linux 的自动化远程升级功能结合在一起。</p><h3 id="RancherOS"><a href="#RancherOS" class="headerlink" title="RancherOS"></a>RancherOS</h3><p>RancherOS 是 Rancher 团队所维护的开源项目，也是对标 CoreOS 一样，专门用来运行容器，并且可以运行在生产环境（至少官方做了这么样的承诺，咱也没在生产用过，不好说。在 RancherOS 中所有的进程（包括系统所有的服务，比如 udev 和 syslog）都是用 docker 来管理，这一点要比 CoreOS 更加激进一些，而 CoreOS 还是使用传统 Linux 发行版中的 systemd 来管理系统中的服务。RancherOS 通过移除传统 Linux 发行版中不必要的服务和库来最小化系统，使他专注单一的功能，即运行 docker 容器。不过之前体验了一番，占用资源比较多😂，好像并没有太大的优势（</p><p><code>Everything in RancherOS is a Docker container.</code> 感觉这个要比 CoreOS 更加容器化，甚至使用 docker 取代了 systemd 来管理系统的各种服务。系统启动后运行两个 docker 服务进程，一个是系统 docker ，在此之上在运行系统服务容器，和用户层面的 docker 。不过看一下下面的这张图你就会明白。总的来讲 RancherOS 是使用 docker 来管理整个系统的服务的，包括用户层面的 docker 。</p><p><img src="img/rancheroshowitworks.png" alt="How it works"></p><h3 id="VMware-的-Photon-OS"><a href="#VMware-的-Photon-OS" class="headerlink" title="VMware 的 Photon OS"></a>VMware 的 <a href="https://vmware.github.io/photon/" target="_blank" rel="noopener">Photon OS</a></h3><p>今天的主角，VMware  开源的 Photon OS，这个 OS 你可能没听说过，但 VMware 开源的 Harbor 想必很熟悉，而 Harbor 的基础镜像使用的就是他家的 Photon OS😂。</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">root [ /harbor ]# cat /etc/os-release</span><br><span class="line"><span class="attr">NAME</span>=<span class="string">"VMware Photon OS"</span></span><br><span class="line"><span class="attr">VERSION</span>=<span class="string">"2.0"</span></span><br><span class="line"><span class="attr">ID</span>=photon</span><br><span class="line"><span class="attr">VERSION_ID</span>=<span class="number">2.0</span></span><br><span class="line"><span class="attr">PRETTY_NAME</span>=<span class="string">"VMware Photon OS/Linux"</span></span><br><span class="line"><span class="attr">ANSI_COLOR</span>=<span class="string">"1;34"</span></span><br><span class="line"><span class="attr">HOME_URL</span>=<span class="string">"https://vmware.github.io/photon/"</span></span><br><span class="line"><span class="attr">BUG_REPORT_URL</span>=<span class="string">"https://github.com/vmware/photon/issues"</span></span><br></pre></td></tr></table></figure><p>在 Photon OS 的构建脚本 <a href="https://github.com/vmware/photon/blob/master/build.py" target="_blank" rel="noopener">build.py</a> 中可以看到它构建的产物支持 ISO 和 docker 镜像，以及众多公有云的虚拟机格式，两者都是来自相同的源码，根据构建出来的是形式不同，所包含的软件也不同。因为裁剪掉了一些不必要的系统服务， docker 镜像格式的要更精简一些。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">targetList = &#123;</span><br><span class="line">        "image":["iso", "ami", "gce", "azure", "rpi3", "ova", "ova_uefi", "all", "src-iso",</span><br><span class="line">                "photon-docker-image", "k8s-docker-images", "all-images", "minimal-iso", "rt-iso"],</span><br><span class="line"></span><br><span class="line">        "rpmBuild": ["packages", "packages-minimal", "packages-initrd", "packages-docker",</span><br><span class="line">                "updated-packages", "tool-chain-stage1", "tool-chain-stage2", "check",</span><br><span class="line">                "ostree-repo", "generate-yaml-files", "create-repo", "distributed-build"],</span><br><span class="line"></span><br><span class="line">        "buildEnvironment": ["packages-cached", "sources", "sources-cached", "publish-rpms",</span><br><span class="line">                "publish-x-rpms", "publish-rpms-cached", "publish-x-rpms-cached", "photon-stage"]</span><br></pre></td></tr></table></figure><p>总的来讲，上面提到的几种容器优化型 OS 中 ，Photon OS 比较开放一些，虽然来说是针对于自家 vSphere 进行优化的，但其他公有云和私有云也是支持，甚至还支持树莓派🍓！所以个人用户想拿来玩玩，还是不错滴。尤其是针对咱这种玩 ESXi 软路由的垃圾佬，在 Photon OS 上跑一些容器应用，再适合不过了。</p><h2 id="对比"><a href="#对比" class="headerlink" title="对比"></a>对比</h2><table><thead><tr><th align="center">Providers</th><th align="center">Name</th><th align="center">START</th><th align="center">FORK</th></tr></thead><tbody><tr><td align="center">Google</td><td align="center"><a href="https://github.com/GoogleCloudPlatform/cos-customizer" target="_blank" rel="noopener">Container-Optimized OS</a></td><td align="center">-</td><td align="center">-</td></tr><tr><td align="center">Amazon</td><td align="center"><a href="https://github.com/bottlerocket-os/bottlerocket" target="_blank" rel="noopener">Bottlerocket OS</a></td><td align="center">4.8K</td><td align="center">185</td></tr><tr><td align="center">CoreOS</td><td align="center">CoreOS Container Linux</td><td align="center">-</td><td align="center">-</td></tr><tr><td align="center">Red Hat</td><td align="center">RHCOS</td><td align="center">-</td><td align="center">-</td></tr><tr><td align="center">Rancher</td><td align="center"><a href="https://github.com/rancher/os" target="_blank" rel="noopener">Rancher OS</a></td><td align="center">6k</td><td align="center">625</td></tr><tr><td align="center">Flatcar</td><td align="center"><a href="https://github.com/flatcar-linux/Flatcar" target="_blank" rel="noopener">Flatcar Linux</a></td><td align="center">117</td><td align="center">3</td></tr><tr><td align="center">VMware</td><td align="center"><a href="https://github.com/vmware/photon" target="_blank" rel="noopener">Photon OS</a></td><td align="center">2.1k</td><td align="center">591</td></tr></tbody></table><table><thead><tr><th align="center">Providers</th><th align="center">Name</th><th align="center">Runtime</th><th align="center">Support Platform</th></tr></thead><tbody><tr><td align="center">Google</td><td align="center">Container-Optimized OS</td><td align="center">docker</td><td align="center">GCP</td></tr><tr><td align="center">Amazon</td><td align="center">Bottlerocket OS</td><td align="center">docker</td><td align="center">AWS</td></tr><tr><td align="center">CoreOS</td><td align="center">CoreOS Container Linux</td><td align="center">docker</td><td align="center">AWS/GCP/OpenStack/VMware<BR>Alibaba Cloud/Azure/DigitalOcean</td></tr><tr><td align="center">Red Hat</td><td align="center">RHCOS</td><td align="center">CRI-O</td><td align="center">AWS/vSphere/Bare Metal</td></tr><tr><td align="center">Rancher</td><td align="center">Rancher OS</td><td align="center">docker</td><td align="center">AWS/GCP/OpenStack/VMware<BR>Alibaba Cloud/Azure/DigitalOcean</td></tr><tr><td align="center">Flatcar</td><td align="center">Flatcar Linux</td><td align="center">docker</td><td align="center">AWS/GCP/OpenStack/VMware<BR>Alibaba Cloud/Azure/DigitalOcean</td></tr><tr><td align="center">VMware</td><td align="center">Photon OS</td><td align="center">docker</td><td align="center">AWS/GCE/Azure/OpenStack<br>vSphere/bare metal/Raspberry Pi 3</td></tr></tbody></table><p>目前来讲 Photon OS 作为 Harbor 的基础镜像，在容器方面比较突出一些，但作为容器的宿主机 OS ，还有很长的路要走。由于我是使用的 VMware 家的 ESXi 虚拟化，那么选择他家的 Photon OS 是最好的喽，而且 Photon OS 是针对 ESXi 做过优化的，内核都是针对 ESXi 虚拟化进行了定制化的开发，所以理论上选择 Photon OS 应该是最合适的。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><h3 id="Download-Format"><a href="#Download-Format" class="headerlink" title="Download Format"></a><a href="https://github.com/vmware/photon/wiki/Downloading-Photon-OS" target="_blank" rel="noopener">Download Format</a></h3><table><thead><tr><th>Format</th><th>Description</th></tr></thead><tbody><tr><td>ISO Image</td><td>Contains everything needed to install either the minimal or full installation of Photon OS. The bootable ISO has a manual installer or can be used with PXE/kickstart environments for automated installations.</td></tr><tr><td>OVA</td><td>Pre-installed minimal environment, customized for VMware hypervisor environments. These customizations include a highly sanitized and optimized kernel to give improved boot and runtime performance for containers and Linux applications. Since an OVA is a complete virtual machine definition, we’ve made available a Photon OS OVA that has virtual hardware version 11; this will allow for compatibility with several versions of VMware platforms or allow for the latest and greatest virtual hardware enhancements.</td></tr><tr><td>Amazon AMI</td><td>Pre-packaged and tested version of Photon OS made ready to deploy in your Amazon EC2 cloud environment. Previously, we’d published documentation on how to create an Amazon compatible instance, but, now we’ve done the work for you.</td></tr><tr><td>Google GCE Image</td><td>Pre-packaged and tested Google GCE image that is ready to deploy in your Google Compute Engine Environment, with all modifications and package requirements for running Photon OS in GCE.</td></tr><tr><td>Azure VHD</td><td>Pre-packaged and tested Azure HD image that is ready to deploy in your Microsoft Azure Cloud, with all modifications and package requirements for running Photon OS in Azure.</td></tr><tr><td>Raspberry Pi3 Image</td><td>Pre-packaged and tested Raspberry Pi3 Image (Version 3.0 onwards) on ARM64 architecture.</td></tr></tbody></table><p>Photon OS 提供了多种安装方式，其中 ISO 是通用性的，就和安装其他 Linux 发行版的过程差不多，OVA 是虚拟机模板，可以导入到 VMware 虚拟化平台上使用，省区安装的步骤，比较方便。OVA 虚拟机模板的版本为 11 ，根据 <a href="https://kb.vmware.com/s/article/1003746" target="_blank" rel="noopener">Virtual machine hardware versions</a> 中的定义，需要 ESXi 6.0 Fusion 7.x Workstation 11.x Player 7.x 版本以上的虚拟化支持。</p><table><thead><tr><th><strong>Virtual Hardware Version</strong></th><th><strong>Products</strong></th></tr></thead><tbody><tr><td>18</td><td>ESXi 7.0.1</td></tr><tr><td>17</td><td>ESXi 7.0.0</td></tr><tr><td>16</td><td>Fusion 11.x Workstation Pro 15.x Workstation Player 15.x</td></tr><tr><td>15</td><td>VMware Cloud on AWS ESXi 6.7 U2</td></tr><tr><td>14</td><td>ESXi 6.7 Fusion 10.x Workstation Pro 14.x Workstation Player 14.x</td></tr><tr><td>13</td><td>ESXi 6.5</td></tr><tr><td>12</td><td>Fusion 8.x Workstation Pro 12.x Workstation Player 12.x</td></tr><tr><td>11</td><td>ESXi 6.0 Fusion 7.x Workstation 11.x Player 7.x</td></tr><tr><td>10</td><td>ESXi 5.5 Fusion 6.x Workstation 10.x Player 6.x</td></tr></tbody></table><p>另外还支持 <code>Raspberry Pi 3</code> ，不过需要拿源码自行编译镜像，然后刷到树莓派上，你吃灰的树莓派又有用途啦😂。</p><p><a href="https://github.com/vmware/photon/wiki/Downloading-Photon-OS" target="_blank" rel="noopener">下载方式</a> 👇</p><h3 id="Photon-OS-3-0-Revision-2-Update3-Binaries"><a href="#Photon-OS-3-0-Revision-2-Update3-Binaries" class="headerlink" title="Photon OS 3.0 Revision 2 Update3 Binaries"></a>Photon OS 3.0 Revision 2 Update3 Binaries</h3><p>Aug 14, 2020 An update to 3.0 revision 2 Update3 binaries are now available.</p><table><thead><tr><th>Download</th><th>Size</th><th>md5 checksum</th></tr></thead><tbody><tr><td><a href="https://packages.vmware.com/photon/3.0/Rev3/iso/photon-3.0-a383732.iso" target="_blank" rel="noopener">Full ISO x86_64</a></td><td>5.2G</td><td>2dd9f18c5162a7367f2463f4a9bb4890</td></tr><tr><td><a href="https://packages.vmware.com/photon/3.0/Rev3/iso/photon-minimal-3.0-a383732.iso" target="_blank" rel="noopener">Minimal ISO x86_64</a></td><td>299M</td><td>0119f0f275f246fd382d419ff41898a4</td></tr><tr><td><a href="https://packages.vmware.com/photon/3.0/Rev3/iso/photon-rt-3.0-a383732.iso" target="_blank" rel="noopener">ISO x86_64 Real-Time flavour</a></td><td>489M</td><td>d2bfce95b54a29174b5beaef9962dbc1</td></tr><tr><td><a href="https://packages.vmware.com/photon/3.0/Rev3/ova/photon-hw11-3.0-a383732.ova" target="_blank" rel="noopener">OVA-hw11</a></td><td>188M</td><td>ba52abd88c5b22cd4498cf0e88457f28</td></tr><tr><td><a href="https://packages.vmware.com/photon/3.0/Rev3/ova/photon-hw13_uefi-3.0-a383732.ova" target="_blank" rel="noopener">OVA-hw13_uefi</a></td><td>214M</td><td>95614f3b08c1a93306ababcc826572df</td></tr></tbody></table><p>在此使用 OVA-hw11 格式的 OVA 虚拟机模板，后面那个带 uefi 的需要设置虚拟机为 EFI 模式启动，比较麻烦。</p><ul><li>创建虚拟机的时候使用 OVA 文件导入</li></ul><p><img src="img/20200922-esxi_ova_01.png" alt=""></p><ul><li>默认的用户名为 <code>root</code> ，密码为 <code>changeme</code>，登录之后再输入一遍 <code>changeme</code>，然后修改为新的密码。</li></ul><p><img src="img/20200922-esxi_photonos-01.png" alt=""></p><h2 id="系统信息"><a href="#系统信息" class="headerlink" title="系统信息"></a>系统信息</h2><ul><li>内核版本为 <code>4.19.132-5.ph3-esx</code>，4.19 是个 LTS 版本的内核，结尾的 <code>esx</code> 则代表着为 <code>ESXi</code> 虚拟化定制的内核。</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Linux photon-machine 4.19.132-5.ph3-esx #1-photon SMP Wed Aug 12 21:02:13 UTC 2020 x86_64 GNU/Linux</span><br></pre></td></tr></table></figure><ul><li>rpm 包数量仅仅为 146 个，一般的 CentOS 发行版自带的 rpm 包数量为 300 个左右。</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root@photon-machine [ ~ ]# rpm -qa | wc</span><br><span class="line">    146     146    4307</span><br></pre></td></tr></table></figure><ul><li>系统进程信息，还是采用 systemd 来管理进程</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">root@photon-machine [ ~ ]# systemctl status</span><br><span class="line">● photon-machine</span><br><span class="line">    State: running</span><br><span class="line">     Jobs: 0 queued</span><br><span class="line">   Failed: 0 units</span><br><span class="line">    Since: Tue 2020-09-22 08:07:29 UTC; 10min ago</span><br><span class="line">   CGroup: /</span><br><span class="line">           ├─user.slice</span><br><span class="line">           │   ├─session-c2.scope</span><br><span class="line">           │   │ ├─413 sshd: root@pts/0</span><br><span class="line">           │   │ ├─420 -bash</span><br><span class="line">           │   │ ├─443 systemctl status</span><br><span class="line">           │   │ └─444 systemctl status</span><br><span class="line">           │   └─user@0.service</span><br><span class="line">           │     └─init.scope</span><br><span class="line">           │       ├─393 /lib/systemd/systemd --user</span><br><span class="line">           │       └─394 (sd-pam)</span><br><span class="line">           ├─init.scope</span><br><span class="line">           │ └─1 /lib/systemd/systemd</span><br><span class="line">           └─system.slice</span><br><span class="line">             ├─systemd-networkd.service</span><br><span class="line">             │ └─245 /lib/systemd/systemd-networkd</span><br><span class="line">             ├─systemd-udevd.service</span><br><span class="line">             │ └─124 /lib/systemd/systemd-udevd</span><br><span class="line">             ├─vgauthd.service</span><br><span class="line">             │ └─159 /usr/bin/VGAuthService -s</span><br><span class="line">             ├─systemd-journald.service</span><br><span class="line">             │ └─97 /lib/systemd/systemd-journald</span><br><span class="line">             ├─sshd.service</span><br><span class="line">             │ └─352 /usr/sbin/sshd -D</span><br><span class="line">             ├─vmtoolsd.service</span><br><span class="line">             │ └─161 /usr/bin/vmtoolsd</span><br><span class="line">             ├─systemd-resolved.service</span><br><span class="line">             │ └─247 /lib/systemd/systemd-resolved</span><br><span class="line">             ├─dbus.service</span><br><span class="line">             │ └─157 /usr/bin/dbus-daemon --system --address=systemd: --nofork --nopidfile --systemd-activation --syslog-only</span><br><span class="line">             ├─systemd-timesyncd.service</span><br><span class="line">             │ └─151 /lib/systemd/systemd-timesyncd</span><br><span class="line">             └─systemd-logind.service</span><br><span class="line">               └─158 /lib/systemd/systemd-logind</span><br></pre></td></tr></table></figure><ul><li>磁盘根目录只使用了不到 600M</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">root@photon-machine [ ~ ]# df -h</span><br><span class="line">Filesystem      Size  Used Avail Use% Mounted on</span><br><span class="line">&#x2F;dev&#x2F;root        16G  577M   15G   4% &#x2F;</span><br></pre></td></tr></table></figure><ul><li>内存也只使用了 43Mi，启动 dockerd 之后内存占用 108Mi，换成 containerd 将会小一些。</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">root@photon-machine [ ~ ]# free -h</span><br><span class="line">              total        used        free      shared  buff/cache   available</span><br><span class="line">Mem:          2.0Gi        43Mi       1.8Gi       0.0Ki       103Mi       1.8Gi</span><br><span class="line"><span class="meta">#</span><span class="bash"> 启动 dockerd 守护进程之后内存占用 108Mi</span></span><br><span class="line">root@photon-machine [ ~ ]# free -h</span><br><span class="line">              total        used        free      shared  buff/cache   available</span><br><span class="line">Mem:          2.0Gi       108Mi       1.6Gi       0.0Ki       298Mi       1.8Gi</span><br></pre></td></tr></table></figure><ul><li>内核模块的数量也比较少 30 个左右，大部分都是一些网络相关的内核模块。常规的 Linux 发行版的内核模块往往在 60 个以上。</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">root@photon-machine [ ~ ]# lsmod</span><br><span class="line">Module                  Size  Used by</span><br><span class="line">xt_conntrack           16384  2</span><br><span class="line">ip6table_mangle        16384  0</span><br><span class="line">ip6table_nat           16384  0</span><br><span class="line">nf_nat_ipv6            16384  1 ip6table_nat</span><br><span class="line">iptable_mangle         16384  0</span><br><span class="line">iptable_nat            16384  0</span><br><span class="line">nf_nat_ipv4            16384  1 iptable_nat</span><br><span class="line">nf_nat                 28672  2 nf_nat_ipv6,nf_nat_ipv4</span><br><span class="line">ip6table_filter        16384  1</span><br><span class="line">ip6_tables             24576  3 ip6table_filter,ip6table_nat,ip6table_mangle</span><br><span class="line">iptable_filter         16384  1</span><br><span class="line">xt_LOG                 16384  0</span><br><span class="line">nf_conntrack           90112  4 xt_conntrack,nf_nat,nf_nat_ipv6,nf_nat_ipv4</span><br><span class="line">nf_defrag_ipv6         20480  1 nf_conntrack</span><br><span class="line">nf_defrag_ipv4         16384  1 nf_conntrack</span><br><span class="line">mousedev               20480  0</span><br><span class="line">vfat                   20480  1</span><br><span class="line">fat                    61440  1 vfat</span><br><span class="line">evdev                  20480  1</span><br><span class="line">vmwgfx                253952  1</span><br><span class="line">psmouse                90112  0</span><br><span class="line">drm_kms_helper        106496  1 vmwgfx</span><br><span class="line">ttm                    86016  1 vmwgfx</span><br><span class="line">drm                   323584  4 vmwgfx,drm_kms_helper,ttm</span><br><span class="line">sr_mod                 24576  0</span><br><span class="line">i2c_core               40960  2 drm_kms_helper,drm</span><br><span class="line">cdrom                  49152  1 sr_mod</span><br><span class="line">rdrand_rng             16384  0</span><br><span class="line">rng_core               16384  1 rdrand_rng</span><br><span class="line">ipv6                  368640  16 nf_nat_ipv6,ip6table_mangle</span><br><span class="line">root@photon-machine [ ~ ]# lsmod | wc</span><br><span class="line">     31     109    1273</span><br></pre></td></tr></table></figure><ul><li>系统自带的 docker 版本为 <code>19.03.10</code>，存储驱动使用的是 <code>overlay2</code></li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">Client:</span><br><span class="line"> Debug Mode: false</span><br><span class="line"></span><br><span class="line">Server:</span><br><span class="line"> Containers: 0</span><br><span class="line">  Running: 0</span><br><span class="line">  Paused: 0</span><br><span class="line">  Stopped: 0</span><br><span class="line"> Images: 0</span><br><span class="line"> Server Version: 19.03.10</span><br><span class="line"> Storage Driver: overlay2</span><br><span class="line">  Backing Filesystem: extfs</span><br><span class="line">  Supports d_type: true</span><br><span class="line">  Native Overlay Diff: true</span><br><span class="line"> Logging Driver: json-file</span><br><span class="line"> Cgroup Driver: cgroupfs</span><br><span class="line"> Plugins:</span><br><span class="line">  Volume: local</span><br><span class="line">  Network: bridge host ipvlan macvlan null overlay</span><br><span class="line">  Log: awslogs fluentd gcplogs gelf journald json-file local logentries splunk syslog</span><br><span class="line"> Swarm: inactive</span><br><span class="line"> Runtimes: runc</span><br><span class="line"> Default Runtime: runc</span><br><span class="line"> Init Binary: docker-init</span><br><span class="line"> containerd version: b34a5c8af56e510852c35414db4c1f4fa6172339</span><br><span class="line"> runc version: d736ef14f0288d6993a1845745d6756cfc9ddd5a</span><br><span class="line"> init version: fec3683</span><br><span class="line"> Security Options:</span><br><span class="line">  apparmor</span><br><span class="line">  seccomp</span><br><span class="line">   Profile: default</span><br><span class="line"> Kernel Version: 4.19.132-5.ph3-esx</span><br><span class="line"> Operating System: VMware Photon OS/Linux</span><br><span class="line"> OSType: linux</span><br><span class="line"> Architecture: x86_64</span><br><span class="line"> CPUs: 1</span><br><span class="line"> Total Memory: 1.951GiB</span><br><span class="line"> Name: photon-machine</span><br><span class="line"> ID: HXBT:Z4LZ:4HZM:3YII:U7ZA:RVOH:Z7CL:L4FA:YGA4:Y2V6:DSVR:NWPD</span><br><span class="line"> Docker Root Dir: /var/lib/docker</span><br><span class="line"> Debug Mode: false</span><br><span class="line"> Registry: https://index.docker.io/v1/</span><br><span class="line"> Labels:</span><br><span class="line"> Experimental: false</span><br><span class="line"> Insecure Registries:</span><br><span class="line">  127.0.0.0/8</span><br><span class="line"> Live Restore Enabled: false</span><br><span class="line"> Product License: Community Engine</span><br></pre></td></tr></table></figure><h2 id="系统管理"><a href="#系统管理" class="headerlink" title="系统管理"></a>系统管理</h2><h3 id="网络管理"><a href="#网络管理" class="headerlink" title="网络管理"></a>网络管理</h3><ul><li>查看网卡状态，可使用自带的 <code>networkctl</code> 命令行工具，像 ifconfig、ip、ss 等命令都已经默认安装。</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">root@photon-machine [ /mnt/RPMS ]# networkctl status eth0</span><br><span class="line">● 2: eth0</span><br><span class="line">       Link File: /usr/lib/systemd/network/99-default.link</span><br><span class="line">    Network File: /etc/systemd/network/99-dhcp-en.network</span><br><span class="line">            Type: ether</span><br><span class="line">           State: routable (configured)</span><br><span class="line">            Path: pci-0000:0b:00.0</span><br><span class="line">          Driver: vmxnet3</span><br><span class="line">          Vendor: VMware</span><br><span class="line">           Model: VMXNET3 Ethernet Controller</span><br><span class="line">      HW Address: 00:0c:29:74:13:16 (VMware, Inc.)</span><br><span class="line">         Address: 192.168.0.235</span><br><span class="line">                  fe80::20c:29ff:fe74:1316</span><br><span class="line">         Gateway: 192.168.0.1 (NETGEAR)</span><br><span class="line">             DNS: 119.29.29.29</span><br><span class="line">                  223.6.6.6</span><br><span class="line">        CLIENTID: ffb6220feb00020000ab113bc2c88225c0d29b</span><br><span class="line">    Connected To: n/a on port 00:e0:4c:68:54:12</span><br><span class="line">                  n/a on port 00:e0:4c:68:54:13</span><br><span class="line">                  n/a on port 00:e0:4c:68:54:15</span><br></pre></td></tr></table></figure><ul><li>系统安装时默认使用的 DHCP 获取 IP ，可以使用 systemd 来设置静态 IP</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 首先修改 DHCP 的 systemd 文件，关闭 DHCP</span></span><br><span class="line">sed -i 's/yes/no/' /etc/systemd/network/99-dhcp-en.network</span><br><span class="line"><span class="meta">#</span><span class="bash"> 创建静态 IP 的 systemd 文件</span></span><br><span class="line">cat &gt; /etc/systemd/network/10-static-en.network &lt;&lt; "EOF"</span><br><span class="line"></span><br><span class="line">[Match]</span><br><span class="line">Name=eth0</span><br><span class="line"></span><br><span class="line">[Network]</span><br><span class="line">Address=198.168.0.235/24</span><br><span class="line">Gateway=198.168.0.1</span><br><span class="line">DNS=192.168.0.100</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 修改以下文件权限为 644 ，不然启动的时候会报错提示权限问题</span></span><br><span class="line">chmod 644 /etc/systemd/network/10-static-en.network</span><br><span class="line"><span class="meta">#</span><span class="bash"> 重启一下网络</span></span><br><span class="line">systemctl restart systemd-networkd</span><br></pre></td></tr></table></figure><ul><li>挂载 NFS 文件系统需要安装 <code>nfs-utils</code></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tdnf install nfs-utils -y</span><br><span class="line">mount 192.168.0.100:/nfs /mnt/nfs</span><br></pre></td></tr></table></figure><h3 id="包管理"><a href="#包管理" class="headerlink" title="包管理"></a>包管理</h3><p>Photon OS 使用的是 yum/tdnf 作为包管理器，使用方法和 RedHat 系的发行版基本相同，repo 主要有以下几个：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ls /etc/yum.repos.d/</span><br><span class="line">lightwave.repo</span><br><span class="line">photon-extras.repo</span><br><span class="line">photon-iso.repo</span><br><span class="line">photon-updates.repo</span><br><span class="line">photon.repo</span><br></pre></td></tr></table></figure><h3 id="源码编译"><a href="#源码编译" class="headerlink" title="源码编译"></a>源码编译</h3><h2 id="运行容器"><a href="#运行容器" class="headerlink" title="运行容器"></a>运行容器</h2><h3 id="Pi-hole"><a href="#Pi-hole" class="headerlink" title="Pi-hole"></a>Pi-hole</h3><blockquote><p>  Pi-hole 是一款开源且免费的 DNS 沉洞服务器（DNS sinkhole），能够在不安装任何客户端侧软件的前提下为设备提供网络内容屏蔽服务，非常轻量易用。搭配上家中吃灰已久的树莓派，我们就能够轻松打造属于自己的广告屏蔽助手。<br>  在<a href="https://pi-hole.net/" target="_blank" rel="noopener">官网</a>的介绍中，Pi-hole 主要具有以下优点：</p><ul><li>易于安装和配置（号称 10 分钟安装配置一条龙）。</li><li>全平台，广告屏蔽服务可作用于任何设备，包括PC、手机、平板电脑。</li><li>轻量，对硬件要求极低。</li><li>功能稳定且强大，能轻松 hold 住百万级别的请求。</li><li>提供了美观的 Web 数据监控仪表盘。</li><li>开源且免费。</li></ul></blockquote><ul><li>首先需要关闭 systemd 自带的 DNS 服务，不然 Pi-hole 坚挺的 53 端口会被占用</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl stop systemd-resolved</span><br><span class="line">systemctl disable systemd-resolved</span><br></pre></td></tr></table></figure><ul><li>安装 docker-compose，修改 docker-compose.yaml 文件</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">"3"</span></span><br><span class="line"><span class="comment"># More info at https://github.com/pi-hole/docker-pi-hole/ and https://docs.pi-hole.net/</span></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line">  <span class="attr">pihole:</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">pihole</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">pihole/pihole:latest</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">"53:53/tcp"</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">"53:53/udp"</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">"67:67/udp"</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">"80:80/tcp"</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">"443:443/tcp"</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="attr">TZ:</span> <span class="string">'Asia/Shanghai'</span></span><br><span class="line">      <span class="attr">WEBPASSWORD:</span> <span class="string">'changeme'</span></span><br><span class="line">    <span class="comment"># Volumes store your data between container upgrades</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">'./etc-pihole/:/etc/pihole/'</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">'./etc-dnsmasq.d/:/etc/dnsmasq.d/'</span></span><br><span class="line">    <span class="comment"># Recommended but not required (DHCP needs NET_ADMIN)</span></span><br><span class="line">    <span class="comment">#   https://github.com/pi-hole/docker-pi-hole#note-on-capabilities</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">unless-stopped</span></span><br></pre></td></tr></table></figure><ul><li>docker-compose up 走起！</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line">root@PhotonOS [ /opt/docker/pihole ]# docker-compose up</span><br><span class="line">Creating network "pihole_default" with the default driver</span><br><span class="line">Creating pihole ... done</span><br><span class="line">Attaching to pihole</span><br><span class="line">pihole    | [s6-init] making user provided files available at /var/run/s6/etc...exited 0.</span><br><span class="line">pihole    | [s6-init] ensuring user provided files have correct perms...exited 0.</span><br><span class="line">pihole    | [fix-attrs.d] applying ownership &amp; permissions fixes...</span><br><span class="line">pihole    | [fix-attrs.d] 01-resolver-resolv: applying...</span><br><span class="line">pihole    | [fix-attrs.d] 01-resolver-resolv: exited 0.</span><br><span class="line">pihole    | [fix-attrs.d] done.</span><br><span class="line">pihole    | [cont-init.d] executing container initialization scripts...</span><br><span class="line">pihole    | [cont-init.d] 20-start.sh: executing...</span><br><span class="line">pihole    |  ::: Starting docker specific checks &amp; setup for docker pihole/pihole</span><br><span class="line">  [✓] Update local cache of available packages</span><br><span class="line">pihole    |   [i] Existing PHP installation detected : PHP version 7.0.33-0+deb9u8</span><br><span class="line">pihole    |</span><br><span class="line">pihole    |   [i] Installing configs from /etc/.pihole...</span><br><span class="line">pihole    |   [i] Existing dnsmasq.conf found... it is not a Pi-hole file, leaving alone!</span><br><span class="line">  [✓] Copying 01-pihole.conf to /etc/dnsmasq.d/01-pihole.conf</span><br><span class="line">pihole    | chown: cannot access '': No such file or directory</span><br><span class="line">pihole    | chmod: cannot access '': No such file or directory</span><br><span class="line">pihole    | chown: cannot access '/etc/pihole/dhcp.leases': No such file or directory</span><br><span class="line">pihole    | ::: Pre existing WEBPASSWORD found</span><br><span class="line">pihole    | Using default DNS servers: 8.8.8.8 &amp; 8.8.4.4</span><br><span class="line">pihole    | DNSMasq binding to default interface: eth0</span><br><span class="line">pihole    | Added ENV to php:</span><br><span class="line">pihole    |                     "PHP_ERROR_LOG" =&gt; "/var/log/lighttpd/error.log",</span><br><span class="line">pihole    |                     "ServerIP" =&gt; "0.0.0.0",</span><br><span class="line">pihole    |                     "VIRTUAL_HOST" =&gt; "0.0.0.0",</span><br><span class="line">pihole    | Using IPv4 and IPv6</span><br><span class="line">pihole    | ::: Preexisting ad list /etc/pihole/adlists.list detected ((exiting setup_blocklists early))</span><br><span class="line">pihole    | https://raw.githubusercontent.com/StevenBlack/hosts/master/hosts</span><br><span class="line">pihole    | https://mirror1.malwaredomains.com/files/justdomains</span><br><span class="line">pihole    | ::: Testing pihole-FTL DNS: FTL started!</span><br><span class="line">pihole    | ::: Testing lighttpd config: Syntax OK</span><br><span class="line">pihole    | ::: All config checks passed, cleared for startup ...</span><br><span class="line">pihole    |  ::: Docker start setup complete</span><br><span class="line">pihole    |   [i] Neutrino emissions detected...</span><br><span class="line">  [✓] Pulling blocklist source list into range</span><br><span class="line">pihole    |</span><br><span class="line">  [✓] Preparing new gravity database</span><br><span class="line">pihole    |   [i] Target: https://raw.githubusercontent.com/StevenBlack/hosts/master/hosts</span><br><span class="line">pihole    |   [i] Received 55654 domains</span><br><span class="line">pihole    |   [i] Target: https://mirror1.malwaredomains.com/files/justdomains</span><br><span class="line">  [✓] Status: No changes detected</span><br><span class="line">pihole    |   [i] Received 26854 domains</span><br><span class="line">  [✓] Storing downloaded domains in new gravity database</span><br><span class="line">  [✓] Building tree</span><br><span class="line">  [✓] Swapping databases</span><br><span class="line">pihole    |   [i] Number of gravity domains: 82508 (82465 unique domains)</span><br><span class="line">pihole    |   [i] Number of exact blacklisted domains: 0</span><br><span class="line">pihole    |   [i] Number of regex blacklist filters: 0</span><br><span class="line">pihole    |   [i] Number of exact whitelisted domains: 0</span><br><span class="line">pihole    |   [i] Number of regex whitelist filters: 0</span><br><span class="line">  [✓] Cleaning up stray matter</span><br><span class="line">pihole    |</span><br><span class="line">pihole    |   [✓] DNS service is running</span><br><span class="line">pihole    |   [✓] Pi-hole blocking is Enabled</span><br><span class="line">pihole    |   Pi-hole version is v5.1.2 (Latest: v5.1.2)</span><br><span class="line">pihole    |   AdminLTE version is v5.1.1 (Latest: v5.1.1)</span><br><span class="line">pihole    |   FTL version is v5.2 (Latest: v5.2)</span><br><span class="line">pihole    | [cont-init.d] 20-start.sh: exited 0.</span><br><span class="line">pihole    | [cont-init.d] done.</span><br><span class="line">pihole    | [services.d] starting services</span><br><span class="line">pihole    | Starting pihole-FTL (no-daemon) as root</span><br><span class="line">pihole    | Starting lighttpd</span><br><span class="line">pihole    | Starting crond</span><br><span class="line">pihole    | [services.d] done.</span><br></pre></td></tr></table></figure><ul><li>打开浏览器，输入 <code>http://ip:port/admin</code> 即可进入 Pi-hole 的后台管理页面，在这里可以查看到 DNS 解析的详细记录，关于 Pi-hole 的使用可以参考一些大佬的博客，比如 <a href="https://wzyboy.im/post/1372.html" target="_blank" rel="noopener">搭建 Pi-Hole 为网上冲浪保驾护航</a>。</li></ul><p><img src="img/20200925-pihole.png" alt=""></p><p>如果想要让内网的机器都走 Pi-hole 来进行 DNS ，可以将路由器的 DHCP 的  DNS 的 IP 设置为 Pi-hole 的 IP。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="https://cloud.google.com/blog/products/containers-kubernetes/bringing-ebpf-and-cilium-to-google-kubernetes-engine" target="_blank" rel="noopener">New GKE Dataplane V2 increases security and visibility for containers</a></li><li><a href="https://moelove.info/2020/09/02/%E8%A2%AB-Google-%E9%80%89%E6%8B%A9%E7%9A%84%E4%B8%8B%E4%B8%80%E4%BB%A3%E6%95%B0%E6%8D%AE%E9%9D%A2-Cilium-%E6%98%AF%E4%BB%80%E4%B9%88/" target="_blank" rel="noopener">被 Google 选择的下一代数据面 Cilium 是什么</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;前段时间捡垃圾东拼西凑搞了台 Homelab 👇玩玩
        
      
    
    </summary>
    
    
      <category term="技术" scheme="https://blog.k8s.li/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Linux" scheme="https://blog.k8s.li/tags/Linux/"/>
    
      <category term="容器" scheme="https://blog.k8s.li/tags/%E5%AE%B9%E5%99%A8/"/>
    
      <category term="PhotonOS" scheme="https://blog.k8s.li/tags/PhotonOS/"/>
    
  </entry>
  
  <entry>
    <title>给阵列卡刷个机，IR 模式转 IT 模式</title>
    <link href="https://blog.k8s.li/lsi-9211-4i-ir-to-it.html"/>
    <id>https://blog.k8s.li/lsi-9211-4i-ir-to-it.html</id>
    <published>2020-09-07T16:00:00.000Z</published>
    <updated>2020-09-07T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="刷机？"><a href="#刷机？" class="headerlink" title="刷机？"></a>刷机？</h2><p>不久前捡垃圾搞了一台低功耗 Homelab 主机玩玩，由于主板 SATA 口的限制，不能使用大于 2TB 的硬盘，对于咱梦想着这种拥有几十 TB 存储来存放老婆的死肥宅来说，2TB 怎么够了。于是想要突破限制，再给 Homelab 主机增加一块 6TB 的磁盘。于是，在洋垃圾堆里花了 50 块钱捡了这块阵列卡👇。</p><p><img src="img/20200830_9211-4i-01.jpg" alt=""></p><p>买的这块阵列卡型号是 <a href="https://lenovopress.com/tips0831-serveraid-h1110" target="_blank" rel="noopener">ServeRAID H1110 SAS/SATA Controller for IBM System x </a> ，卖家说是 <code>IBM H1110</code> ，其实都差不多啦。由于是第一次玩儿阵列卡，对这种型号也不是很熟悉，之后刷了新的固件又变成了 <code>LSI 9211-4i</code> 。</p><h2 id="翻车？"><a href="#翻车？" class="headerlink" title="翻车？"></a>翻车？</h2><p>收到货后，迫不及待地将存满老婆的硬盘接到阵列卡上，开机的时候，一直卡在阵列卡 BIOS 初始化页面很久很久。顿时觉着，完蛋翻车了，正准备去怼一波卖家，阵列卡启动等了五六分钟后进入了久违的  ESXi 的启动页面。这尼玛，坑我啊，你一个巴掌大的阵列卡启动竟然需要五分钟？内心一万匹草泥马奔腾而过。</p><p><img src="img/20200830_9211-4i-02.png" alt=""></p><h2 id="IR-模式？"><a href="#IR-模式？" class="headerlink" title="IR 模式？"></a>IR 模式？</h2><p>在网上看来一下大佬们的评论，说阵列卡 IR 模式的启动速度要慢一些？然后又找到了 <a href="https://wiki2.xbits.net:4430/hardware:lsi:h1110-it-firmware" target="_blank" rel="noopener">IBM H1110卡刷为LSI 9211-4i IT固件</a> ，里面提到的可以将 IR 模式刷为 IT 直通模式。至于 IR 模式和 IT 模式，自己太菜没找到确切的资料。大概可以理解为 IR 模式适用于使用阵列卡组 RAID 阵列，而 IT 模式就是所谓的直通模式，不适用 RAID ，只使用阵列卡的磁盘控制器？相当于主板上的 SATA 接口。何况我这个是小主机，里面也塞不下那么多的磁盘，所以阵列卡使用 IT 直通模式无疑是最好的选择。</p><p><img src="img/20200828_9211-4i-03.jpg" alt=""></p><h2 id="万物皆可刷？"><a href="#万物皆可刷？" class="headerlink" title="万物皆可刷？"></a>万物皆可刷？</h2><p>参照大佬们的博客，咱也要体验一把刷<del>机</del>卡的痛快了，毕竟折腾这些没用的玩意儿也是咱的一大乐趣。</p><blockquote><p>  我青年时代就刷过：诺基亚、摩托罗拉、三星、黑莓、Lumia、HTC，我还刷过：路由器、交换机、阵列卡、电视盒子……</p></blockquote><p>安卓<del>基</del>机佬们想必对 twrp 再熟悉不过了，它是我们刷机，刷各种 ROM 包最常用的系统，相当于 Windows 中的 PE 系统，对系统分区刷上 ROM 来达到刷机的目的。刷阵列卡的固件和刷机也差不多，也是需要一个底层的系统进去对阵列卡上的存储芯片进行操作。最常见的就是 Dos 和 EFI Shell ，由于 Dos 年代久远，且我的主板对 EFI 支持比较友好，在进行刷机的时候为了稳妥起见选择 EFI shell。</p><h3 id="记录-SAS-地址"><a href="#记录-SAS-地址" class="headerlink" title="记录 SAS 地址"></a>记录 SAS 地址</h3><p>在刷阵列卡之前要线记录下 SAS 的 Address ，进入到阵列卡的 BIOS 中会有这个信息。</p><h3 id="找好固件和文档"><a href="#找好固件和文档" class="headerlink" title="找好固件和文档"></a>找好固件和文档</h3><p>由于我要刷入的固件不是阵列卡原厂的固件，只找到了现成的固件，直接就拿来用了，应该问题不大。而且刷入的流程也是比较简答。<a href="https://wiki2.xbits.net:4430/hardware:lsi:h1110-it-firmware" target="_blank" rel="noopener">IBM H1110卡刷为LSI 9211-4i IT固件</a> :</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 备份原卡信息和sbr</span></span><br><span class="line">MegaCli.exe -AdpAllInfo -aAll -ApplogFile bak.txt</span><br><span class="line">MegaRec.exe -readsbr 0 orig.sbr</span><br><span class="line"><span class="meta">#</span><span class="bash">擦写sbr和flash一遍能刷入LSI原厂固件</span></span><br><span class="line">MegaRec -writesbr 0 sbrempty.bin</span><br><span class="line">MegaRec -cleanflash 0</span><br><span class="line"><span class="meta">#</span><span class="bash">重启再次进入DOS</span></span><br><span class="line">reboot</span><br><span class="line"><span class="meta">#</span><span class="bash">刷入对应IT固件和ROM</span></span><br><span class="line">sas2flsh -o -f 2114it.bin -b mptsas2.rom</span><br><span class="line"><span class="meta">#</span><span class="bash">恢复原来的SAS地址</span></span><br><span class="line">sas2flsh -o -sasadd xxxxxxxx</span><br><span class="line"><span class="meta">#</span><span class="bash">查看最新状态</span></span><br><span class="line">sas2flsh -list</span><br><span class="line"><span class="meta">#</span><span class="bash">重启，完成</span></span><br><span class="line">reboot</span><br></pre></td></tr></table></figure><p>一些官方的文档<a href="https://www.broadcom.cn/support/knowledgebase/1211161495925/flash-upgrading-firmware-on-lsi-sas-hbas-upgraded-firmware-on-92" target="_blank" rel="noopener">Flash upgrading firmware on LSI SAS HBAs; Upgraded firmware on 9211-8i to P8, now duplicated drives</a>：</p><blockquote><p>  Advanced users:</p><p>  To delete the firmware and BIOS in your 9211, then reflash it, follow these steps:</p><ol><li><p>Check to see if there is an also an onboard SATA controller with disk in the system before running the commands below.<br>Run sas2flsh -listall<br>If you see only the 9211, then run the commands as shown below.<br>If you see two controllers (e.g. c0 and c1, then add -c 1 to all of the commands below–&gt; sas2flsh -c 1 -o -e 6</p></li><li><p>Record the SAS address of the 9211 in case you need it later.  To display it, type:<br>sas2flsh -list</p><p>and write down the SAS address.  You can run the is DOS, Windows, Linux, etc.</p></li><li><p>Download 9211_8i_Package_for_P9_Firmware_BIOS_on_MSDOS_and_Windows.zip for the 9211-8i</p></li><li><p>Boot to DOS (create a DOS bootable USB stick from <a href="http://www.bootdisk.com" target="_blank" rel="noopener">http://www.bootdisk.com</a> or <a href="http://www.gocoding.com" target="_blank" rel="noopener">www.gocoding.com</a>).</p></li><li><p>Run from DOS sas2flsh -o -e 6 (this will erase the controller firmware and BIOS).</p></li><li><p>Turn the system off.</p></li><li><p>Turn the system on and boot to DOS (note:  the BIOS won’t post, as you will reflash it in step 8 below).</p></li><li><p>Run from DOS, with files sas2flsh.exe, the .bin and .rom files in the same directory:</p><p>For IR firmware:  sas2flsh -f 9211IRP9.bin -b mptsas2.rom<br>For IT firmware:  sas2flsh -f 9211itp9.bin -b mptsas2.rom</p><p>Note:  you will need to rename 9211-8i_IR_P9.bin to 9211IRP9.bin and 9211-8i-IT_ph9.bin to 9211itp9.bin</p></li><li><p>The controller will now work normally, with the P9 firmware and BIOS.</p></li><li><p>Check to make sure you have a SAS address:<br>sas2flsh -list<br>If you see the same SAS address that you had in step 2, then you are done.<br>If you don’t see the same SAS address, or you don’t see a SAS address, type:<br>sas2flsh -o -sasadd <SAS address></p></li></ol></blockquote><p>上面提到的都是基于 Dos 系统上操作的，不过我试了一下都翻车了🤣</p><h3 id="制作-EFI-shell-系统"><a href="#制作-EFI-shell-系统" class="headerlink" title="制作 EFI shell 系统"></a>制作 EFI shell 系统</h3><p>如果主板支持 EFI 的话，建议使用 EFI shell 刷入固件，在 Dos 下会有些奇怪的问题。</p><p>按照 <a href="https://superuser.com/questions/1057446/how-do-i-boot-to-uefi-shell" target="_blank" rel="noopener">How do I “Boot to UEFI shell”?</a> 中提到的：</p><blockquote><p>It depends on whether your UEFI has a shell builtin. If it does, there should be an option in its settings / boot menu for you to launch it. Some motherboard also provide an option to launch a shell from the EFI System Partition (ESP). You should consult the manual of your motherboard for the path it will look for (the instruction is often vague though). Usually they are looking for a file named <code>Shell.efi</code> in the ESP root folder.</p><p>Another way is to launch it just like you launch any other EFI binary (e.g. bootloader). Since it’s not really accessible to register a EFI binary to your UEFI or put the shell binary to your ESP in Windows, so the easiest way is probably to put it as <code>\EFI\Boot\bootx64.efi</code> <strong>(also put the <code>update.nsh</code> you need to run and the files it requires under <code>\EFI\Boot\</code>)</strong> in a FAT(32)-formatted USB drive (It shouldn’t matter whether it’s MBR or GPT as long as your UEFI is standard-conforming enough). <strong>Then reboot and boot the USB in UEFI mode from your UEFI boot menu.</strong></p><p>You can obtain the EFI shell binary from the EDK2 project repo:</p><ul><li><p><a href="https://github.com/tianocore/edk2/releases/download/edk2-stable202002/ShellBinPkg.zip" target="_blank" rel="noopener">version 2</a></p></li><li><p><a href="https://github.com/tianocore/edk2/blob/UDK2018/EdkShellBinPkg/FullShell/X64/Shell_Full.efi?raw=true" target="_blank" rel="noopener">version 1 (no longer updated, only for old UEFI that does not work with v2)</a></p><p>(<strong>Note:</strong> some older EFI tools like [sas2flash.efi](<a href="https://www.broadcom.com/site-search?q=Installer" target="_blank" rel="noopener">https://www.broadcom.com/site-search?q=Installer</a> for UEFI) only work with such an old EFI shell (which works on current mainboards with current UEFI))</p></li></ul></blockquote><p>首先需要一个 U 盘，对容量没有闲置，几十兆足够，把分区格式化为 FAT32 文件系统格式，然后下载一个 EFI shell 的 efi 文件 <a href="https://github.com/tianocore/edk2/blob/UDK2018/EdkShellBinPkg/FullShell/X64/Shell_Full.efi?raw=true" target="_blank" rel="noopener">version 1 </a>，把该文件保存在 FAT32 分区下的 <code>\EFI\Boot\bootx64.efi</code> 路径下。</p><blockquote><p>  Download from Github Tianocore the precompiled UEFI version 1 Shell: <a href="https://github.com/tianocore/edk2/tree/master/EdkShellBinPkg/FullShell/X64" target="_blank" rel="noopener">Shell_Full.efi</a>. (Only v1 is applicable, later versions are not compatible with the flash tool and end up with the message: “InitShellApp: Application not started from Shell”.)</p></blockquote><p>由于刷固件的工具 <code>sas2flash.efi</code> 只和 EFI shell v1 版本的兼容，我第一次刷的时候时使用的 v2 版本，提示 <code>“InitShellApp: Application not started from Shell”</code> 错误😂</p><p>然后还需要把固件 <code>2114it.bin</code> ，以及刷固件用到的工具 <code>sas2flash.efi</code> 放入到 FAT32 跟目录下，其中固件根据阵列卡的型号不同需要自行找到相应的固件版本，我这个虽然是 IBM H1110 型号的，但是可以刷成 LSI 9211 的，所以就没去找原厂的固件。</p><h3 id="进入-EFI-shell-刷入新的固件"><a href="#进入-EFI-shell-刷入新的固件" class="headerlink" title="进入 EFI shell 刷入新的固件"></a>进入 EFI shell 刷入新的固件</h3><p>从 <a href="https://www.ixsystems.com/community/threads/how-to-flash-lsi-9211-8i-using-efi-shell.50902/" target="_blank" rel="noopener">How-to: Flash LSI 9211-8i using EFI shell</a> 大佬那里复制粘贴过来的的教程：</p><blockquote><ol><li>Insert the controller card in a PCIe slot. (I’ve used the slot Nr. 3. In case of troubles recognizing the card in your desktop PC try different slots.)</li><li>Boot the PC and prepare the USB stick:</li><li>In the USB stick create and format a FAT or FAT32 partition &gt;= 10 MB. (I’ve created 500 MB FAT32 partition. I wouldn’t recommend large partitions, who knows if the EFI shell will read every big partition.)</li><li>Create the sub-folders for EFI boot. In the web there are two different structures: <code>/boot/efi</code> and <code>/efi/boot</code>. For time saving I’ve created both groups, it works.</li><li>Download from Broadcom following packages: <a href="https://docs.broadcom.com/docs/12350820" target="_blank" rel="noopener">Installer_P20_for_UEFI</a> and <a href="https://docs.broadcom.com/docs/12350530" target="_blank" rel="noopener">9211-8i_Package_P20_IR_IT_Firmware_BIOS_for_MSDOS_Windows</a> and extract them on your PC’s HDD.</li><li>Copy from the downloaded packages three files to the USB stick root folder:</li><li>from the first package the file <code>sas2flash.efi</code> (it is in sub-folder <code>/sas2flash_efi_ebc_rel/</code>);</li><li>from the second package: <code>2118it.bin</code> (it is in sub-folder <code>/Firmware/HBA_9211_8i_IT/</code>) and <code>mptsas2.rom</code> (it is in sub-folder <code>/sasbios_rel/</code>).</li><li>Download from Github Tianocore the precompiled UEFI version 1 Shell: <a href="https://github.com/tianocore/edk2/tree/master/EdkShellBinPkg/FullShell/X64" target="_blank" rel="noopener">Shell_Full.efi</a>. (Only v1 is applicable, later versions are not compatible with the flash tool and end up with the message: “InitShellApp: Application not started from Shell”.)</li><li>Rename the <code>Shell_Full.efi</code> in <code>ShellX64.efi</code> and copy this file to following three USB stick destinations: root folder, <code>/boot/efi/</code>, <code>/efi/boot/</code>. (Again, there are different advices, for time saving it easier to use all three choices.)</li><li>The creative part is completed, it’s time for action. Restart the PC and enter the BIOS. If you use ASUS UEFI BIOS Utility in advanced mode, mouse click on the Exit (not by using keyboard “Esc”), in the next dialog select “Launch EFI Shell from filesystem device”. Other BIOS should behave similarly.</li><li>Next you should see starting shell execution, ending with a prompt: “Shell&gt;” (not the “2.0 Shell&gt;”!).</li><li>Type the command: <code>map –b</code> (+Enter) for listing of available disks. Locate which one is your USB stick. In my case it is the fs6:<br>“fs6 :Removable HardDisk - … USB(…)”</li><li>You can break further execution of the map command by <code>q</code>.</li><li>Switch to the located USB stick by command <code>fsN:</code> (+Enter) (N=6 – in my example = “fs6:”, set N to your USB stick ID).</li><li><code>Dir</code> shows the file list:<br>2118IT.BIN<br>MPTSAS2.ROM<br>sas2flash.efi<DIR> BOOT<DIR> EFIShellX64.efi</li><li>The action can start. During it the power shall not be brocken!</li><li>Erase the controller flash memory: <code>sas2flash.efi -o -e 6</code>.</li><li>Write the new firmware to the flash: <code>sas2flash.efi -o -f 2118it.bin -b mptsas2.rom</code>.</li><li>After a while you’ll see the success message. You can restart the PC and check if the controller BIOS reports the new “IT”-firmware.</li><li>The card is ready to use.</li></ol></blockquote><ul><li>使用 <code>map -b</code> 命令查看 U 盘的路径，一般为 <code>fsX</code> 然后按下 <code>fs0:</code> 路径就切换到了 U 盘的 FAT32 分区下。</li></ul><p><img src="img/20200828_9211-4i-04.jpg" alt=""></p><ul><li>然后使用 <code>sas2flash.efi -o -e 6</code> 命令清空阵列卡的  <code>flash memory</code>。</li><li>接着使用 <code>sas2flsh -o -f 2114it.bin -b mptsas2.rom</code> 命令刷入新的固件。</li></ul><p><img src="img/20200828_9211-4i-05.jpg" alt=""></p><ul><li>恢复 SAS 地址 <code>sas2flsh -o -sasadd xxxxxxxx</code> </li></ul><p>操作完以上步骤后就可以重启了</p><h2 id="IT-模式？"><a href="#IT-模式？" class="headerlink" title="IT 模式？"></a>IT 模式？</h2><p>刷完之后阵列卡的型号就莫名其妙地变成了 <code>LSI® SAS 9211-4i PCI Express® to 6Gb/s Serial Attached SCSI (SAS) Host Bus Adapter</code> ，固件的版本也变成了  IT 模式，开机的速度比以前快了很多，只需要不到 5s 就自检完成进入 ESXi 的启动流程，终于告别原先的龟速启动了。</p><p><img src="img/20200828_9211-4i-06.jpg" alt=""></p><p>在 ESXi 中，阵列卡也被识别为了 <code>LSI2004</code> ，看来是没问题了，插上硬盘也都是识别出来了。</p><p><img src="img/20200908_9211-4i-07.png" alt=""></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>由于是是第一次给阵列卡刷固件，在网上找到了写资料可以做参考。</p><ul><li><a href="https://wiki2.xbits.net:4430/hardware:lsi:h1110-it-firmware" target="_blank" rel="noopener">IBM H1110卡刷为LSI 9211-4i IT固件</a></li><li><a href="https://www.tfir.io/easiest-way-to-flash-lsi-sas-9211-8i-on-motherboards-without-efi-shell/" target="_blank" rel="noopener">Easiest Way To Flash LSI SAS 9211-8i on Motherboards without EFI Shell</a></li><li><a href="https://www.broadcom.cn/support/knowledgebase/1211161495925/flash-upgrading-firmware-on-lsi-sas-hbas-upgraded-firmware-on-92" target="_blank" rel="noopener">Flash upgrading firmware on LSI SAS HBAs; Upgraded firmware on 9211-8i to P8, now duplicated drives</a></li><li><a href="chrome-extension://ikhdkkncnoglghljlkmcimlnlhkeamad/pdf-viewer/web/viewer.html?file=https%3A%2F%2Fdocs.broadcom.com%2Fdoc%2F12353332">LSI® SAS 9211-4i PCI Express® to 6Gb/s Serial Attached SCSI (SAS) Host Bus Adapter </a></li><li><a href="https://www.ixsystems.com/community/threads/how-to-flash-lsi-9211-8i-using-efi-shell.50902/" target="_blank" rel="noopener">How-to: Flash LSI 9211-8i using EFI shell</a></li><li><a href="https://github.com/bsodmike/s5clouds8-lsi9211-8i-IR-to-IT-EFI-bootable-usb" target="_blank" rel="noopener">s5clouds8-lsi9211-8i-IR-to-IT-EFI-bootable-usb</a></li><li><a href="https://superuser.com/questions/1057446/how-do-i-boot-to-uefi-shell" target="_blank" rel="noopener">How do I “Boot to UEFI shell”?</a></li><li><a href="https://forums.laptopvideo2go.com/topic/29059-sas2008-lsi92409211-firmware-files/" target="_blank" rel="noopener">SAS2008 (LSI9240/9211) Firmware files</a></li><li><a href="https://www.servethehome.com/ibm-serveraid-m1015-part-4/" target="_blank" rel="noopener">IBM ServeRAID M1015 Part 4: Cross flashing to a LSI9211-8i in IT or IR mode</a></li><li><a href="https://web.archive.org/web/20200423162708/http://brycv.com/blog/2012/flashing-it-firmware-to-lsi-sas9211-8i/" target="_blank" rel="noopener">Flashing IT Firmware to the LSI SAS9211-8i HBA</a></li><li><a href="https://forum.openmediavault.org/index.php?thread/2310-ibm-m1015-ir-vs-it/" target="_blank" rel="noopener">IBM M1015 - IR vs. IT</a></li><li><a href="https://marcan.st/2016/05/crossflashing-the-fujitsu-d2607/" target="_blank" rel="noopener">Crossflashing the Fujitsu D2607</a></li><li><a href="https://kc.mcafee.com/corporate/index?page=content&id=KB90801&locale=en_US" target="_blank" rel="noopener">How to create a bootable USB media to access the default EFI shell</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;h2 id=&quot;刷机？&quot;&gt;&lt;a href=&quot;#刷机？&quot;
        
      
    
    </summary>
    
    
      <category term="技术" scheme="https://blog.k8s.li/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="刷机" scheme="https://blog.k8s.li/tags/%E5%88%B7%E6%9C%BA/"/>
    
      <category term="阵列卡" scheme="https://blog.k8s.li/tags/%E9%98%B5%E5%88%97%E5%8D%A1/"/>
    
  </entry>
  
  <entry>
    <title>垃圾佬的 Homelab 折腾记录</title>
    <link href="https://blog.k8s.li/homelab.html"/>
    <id>https://blog.k8s.li/homelab.html</id>
    <published>2020-08-20T16:00:00.000Z</published>
    <updated>2020-09-15T00:28:09.964Z</updated>
    
    <content type="html"><![CDATA[<h2 id="捡垃圾"><a href="#捡垃圾" class="headerlink" title="捡垃圾"></a>捡垃圾</h2><p>来自 <a href="https://space.bilibili.com/1292029" target="_blank" rel="noopener">@awpak78 </a>的图👇</p><p><img src="img/20200801_150112.jpg" alt="20200801_150112"></p><p>作为一名运维工程师，白天在工地上搬砖养家糊口，晚上下班回家后就开始折腾一堆破铜烂铁自娱自乐😂。最近东拼西凑花了 2000 来块钱捡垃圾整了台 HomeLab 玩玩，折腾一些没用的东西🙃</p><p>其实很早之前就想搞一台低功耗的 HomeLab 主机玩儿了，最早开始选择的是 Dell T1700 SFF + E3-1271V3 +32GB DDR3，但是呢，E3 V3 系列是 Intel 第四代  CPU ，1150 芯片组无法从 M.2 启动，磁盘速度只能达到 SATA III 也就是顶多 600 MB/s 的读写速度，而目前随便一块支持  PCI-e M.2 NVMe 的主板普遍都能达到 3000MB/s 了。所以这一点来讲 E3 V3 已经不值得捡了。而且我想把我台式机上 SN750 500GB 换到这台机器上，所以还是要选择一个支持 PCI-e M.2 NVMe 的主板。</p><table><thead><tr><th align="center">硬件</th><th>配置</th><th align="center">价格</th></tr></thead><tbody><tr><td align="center">CPU</td><td>Intel(R) Core(TM) i5-6600T CPU @ 2.70GHz 35w</td><td align="center">480</td></tr><tr><td align="center">主板</td><td>Dell OptiPlex 7040 准系统：Intel ®Q170</td><td align="center">400</td></tr><tr><td align="center">内存</td><td>镁光 DDR4 16GB 2666MHz</td><td align="center">310</td></tr><tr><td align="center">显卡</td><td>英特尔® 核芯显卡 530</td><td align="center">0</td></tr><tr><td align="center">机箱</td><td>Dell OptiPlex 7040 准系统</td><td align="center">0</td></tr><tr><td align="center">电源</td><td>Dell OptiPlex 7040 准系统：290W 开关电源</td><td align="center">0</td></tr><tr><td align="center">UPS</td><td>某杂牌 UPS 650VA360W</td><td align="center">160</td></tr><tr><td align="center">固态</td><td>三星 970PRO 512GB</td><td align="center">820</td></tr><tr><td align="center">总价</td><td></td><td align="center">2170</td></tr></tbody></table><h3 id="CPU"><a href="#CPU" class="headerlink" title="CPU"></a>CPU</h3><p>至于 6600T 的性能，在 500 块钱的价位内 35W低功耗的 6600T 还算可以能接受，为什么不买 7200U 这种低压 U 呢？，一是低压 U 的装机成本太高，而且性价比很低，我还要在上面跑一堆虚拟机，低压 U 恐怕扛不住，所以一开始就放弃了低压 U 的装机方案。</p><p><img src="img/HomeLab-1.jpg" alt=""></p><h3 id="主板"><a href="#主板" class="headerlink" title="主板"></a>主板</h3><p>由于 Dell SFF 系列的机箱是定制的，和普通的主板不太一样，也只有这样才能塞进这么小的空间，对于 MFF 系列的则更小一点。对于这种小机箱而言，拥有 2个 PCI-e*4 和一个 PIC-e*16 是相当不错了，PCI-e*4可以装一个阵列卡个一个四网口的网卡，PIC-e*16又可以装一个低功耗的刀卡显卡。等到以后台式机升级的硬件的时候再把台式机上的 GT1030 亮机卡放上去。三个 SATA 一个 M.2 有点捉襟见肘，机箱空间就那么点，口子多了硬盘也塞不下呀😂。</p><table><thead><tr><th>Model:</th><th><a href="https://www.dell.com/support/manuals/us/en/04/optiplex-7040-desktop/opti7040_sff_om/specifications?guid=guid-f058d593-d332-479e-9d55-6c6031fa6cba&lang=en-us" target="_blank" rel="noopener"><em>Dell OptiPlex 7040 SFF</em></a></th></tr></thead><tbody><tr><td>Form factor:</td><td>Small Form Factor</td></tr><tr><td>CPU options:</td><td>Intel Gen6 i3/i5/i7</td></tr><tr><td>Chipset:</td><td><a href="https://ark.intel.com/content/www/us/en/ark/products/90587/intel-q170-chipset.html" target="_blank" rel="noopener">Intel Q170</a></td></tr><tr><td>RAM slots:</td><td>(4x) DIMM DDR4-2133</td></tr><tr><td>Max RAM:</td><td>64 GB</td></tr><tr><td>USB Ports:</td><td>(6x) USB3.0; (4x) USB2.0;</td></tr><tr><td>Video Ports:</td><td>(2x) Display Port 1.2; HDMI 1.4;</td></tr><tr><td>Other Ports:</td><td>Serial; (2x) PS2; RJ45; Headset; Line-Out;</td></tr><tr><td>Optional Ports:</td><td>VGA; Media Card Reader;</td></tr><tr><td>SATA:</td><td>(3x) SATA 3.0*</td></tr><tr><td>PCIe:</td><td>PCIe 3.0 x16 (low profile); PCIe 3.0 x4 (low profile);</td></tr><tr><td>M.2 slots:</td><td>M.2 2280 M-key (PCIe 3.0 x4, SATA 3.0)</td></tr><tr><td>Drive bays:</td><td>3.5-inch/(2x)2.5-inch; 5.25-inch (slim);</td></tr><tr><td>Hard Drive:</td><td>max 2TB; RAID 0 &amp; 1;</td></tr><tr><td>PSU:</td><td>180 W</td></tr><tr><td>Weight:</td><td>6.00 kg (13.22 lb)</td></tr></tbody></table><ul><li>从 <a href="https://www.hardware-corner.net/guides/difference-optiplex-3040-vs-5040-vs-7040/" target="_blank" rel="noopener">The difference between Dell OptiPlex 3040 vs. 5040 vs. 7040</a> 偷来的一张图片👇</li></ul><p><img src="img/OptiPlex_5040SFF_motherboard.jpg" alt="img"></p><h3 id="内存"><a href="#内存" class="headerlink" title="内存"></a>内存</h3><p>两条 8GB DDR4 内从从我台式机上拆下来的，又花了 300 块钱买了个镁光的 16GB DDR4 装了上去，迫于 我的台式机 B350M-K 的缩水板只有两个内存插槽而且支持到 32GB，暂时装一个 16GB 的吧，能以后再装一个上去。</p><h3 id="固态"><a href="#固态" class="headerlink" title="固态"></a>固态</h3><p>其实本来的预算三星 970PRO 512GB没打算买，是我在找 Dell OptiPlex 7040 时意外碰到的一个老哥，而且这块固态是德亚的，还算靠谱一些，于是剁手买了这个块固态。970PRO 系列的都是 MLC 的颗粒的固态硬盘，通 SM961 一样是属于传家宝系列😂，但是 SM961 淘宝上水太深，清零盘占据多数，所以不建议买。</p><p>正好把这块 970PRO 换到我的台式机上，把台式机上的 SN750 512GB 换到 HomeLab 机器上，给 ESXi 上的虚拟机用。在玩儿虚拟化的时候深有感触，宿主机的磁盘是机械硬盘的话，上面的虚拟机达到一定数量时，虚拟机会很卡，所以玩 ESXi 虚拟化，有块固态的体验是非常爽滴😋。</p><h2 id="装机"><a href="#装机" class="headerlink" title="装机"></a>装机</h2><p>其实装机很快，由于是买的 Dell OptiPlex 7040 准系统，所以只需要把 CPU 、内存、硬盘装上去就完事儿了。</p><p>收到准系统后发现没有带 M.2 螺丝，只能临时拿胶带粘糊上去，勉强撑了两天，后来买了个螺丝和散热片完美地解决了。</p><p><img src="img/HomeLab-5.jpg" alt=""></p><p>从以前旧笔记本淘汰下来的 2TB 5400RPM 的石头盘，已经出现坏道了，临时当个下载盘吧，在它还没彻底崩盘之前再压榨一下它吧😂。后面打算再添加一块12TB的氦气盘当仓库盘和备份数据使用，有了 UPS 和这台主机 7*24 小时开机也没啥问题了。</p><p><img src="img/HomeLab-3.jpg" alt=""></p><p>后面那台是我的台式机，也是去年这时候买的，两者比较起来 SFF 的型号确实小很多。Dell 的这种主机还有一种 MFF 型号的，那种更小一些，差不多比路由器大一些而已，不过扩展性不好，而且还需要外置电源，也就没考虑，不过现在想想有点后悔了，当初应该多加点钱买 SFF 的，不过还好也能接受，只不过体积大了些，搬家的时候不太方便。</p><p><img src="img/HomeLab-4.jpg" alt=""></p><h2 id="ESXi"><a href="#ESXi" class="headerlink" title="ESXi"></a>ESXi</h2><p>装完机器之后就开始装 ESXi ，对于虚拟化，ESXi 算是比较熟悉的了，听说 Proxmox VE 也不错🤔，等到后面硬盘到了再折腾一下 Proxmox VE。看到隔壁 <a href="https://wzyboy.im/post/1293.html" target="_blank" rel="noopener">Proxmox VE：优秀的自建虚拟化方案</a> 愈发想玩玩了。</p><blockquote><p>  贯彻「不重复造轮子」的原则，当前版本的 PVE 基于成熟稳定的 Debian 9 “Stretch” 构建。在熟悉和使用 PVE 的过程中，我越发喜欢它「不重复造轮子」的特性。相较之前用过的其他虚拟化方案，PVE 的内部构造和工作原理对我来说不再是一个黑盒，我可以清晰地观测到它在干什么——比如要迁移一台虚拟机到另一个节点，我就可以通过 <code>ps</code> 观察到它启动了一个 <code>dd</code> 进程，对接 <code>ssh</code> 管道，将磁盘数据通过网络复制到目标机器——这种仿佛透明手表一样能看到内部工作原理的感觉真是太棒了！</p></blockquote><p>从 VMware 家下载好 <code>VMware-VMvisor-Installer-7.0.0-15843807.x86_64.iso</code> 镜像，找了两个 U 盘，一个用于 ESXi 的安装盘，一个用于 ESXi 的系统盘，其中一个 U 盘还是我用读卡器+16GB内存卡拼凑而成的，目的是为了把 ESXi 装到 U 盘里方便迁移数据之类的，之后在网上找一个神 KEY 激活一下（🤫小声</p><p><img src="img/HomeLab-6.jpg" alt=""></p><h3 id="Ubuntu-20-04"><a href="#Ubuntu-20-04" class="headerlink" title="Ubuntu 20.04"></a>Ubuntu 20.04</h3><p>当作网关机使用，和我所有的 云主机打通网络，使用 WireGuard 组成一个小内网，关于 WireGuard 的使用建议阅读大佬写得博客 <a href="https://fuckcloudnative.io/posts/wireguard-docs-practice/" target="_blank" rel="noopener">WireGuard 教程：WireGuard 的搭建使用与配置详解</a> 以及 <a href="https://fuckcloudnative.io/posts/wireguard-docs-theory/" target="_blank" rel="noopener">WireGuard 教程：WireGuard 的工作原理</a>。</p><p>顺带用 <a href="https://github.com/Aniverse/ZBench" target="_blank" rel="noopener">ZBench</a> 测了一下虚拟机的磁盘性能，还算勉强说的过去，实际上 SN750 512GB 只有 2GB 左右的缓存，写满换粗之后，写入的性能会直线下降到 800MB/s，读的性能倒是可以达到 3200MB/s 以上，或许是主板的限制，没能达到理想的读写性能。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">--------------------------------------------------------------------------</span><br><span class="line">CPU model            : Intel(R) Core(TM) i5-6600T CPU @ 2.70GHz</span><br><span class="line">Number of cores      : 4</span><br><span class="line">CPU frequency        : 2712.000 MHz</span><br><span class="line">Total size of Disk   : 33.3 GB (7.7 GB Used)</span><br><span class="line">Total amount of Mem  : 3935 MB (306 MB Used)</span><br><span class="line">Total amount of Swap : 3934 MB (0 MB Used)</span><br><span class="line">System uptime        : 4 days, 19 hour 47 min</span><br><span class="line">Load average         : 0.13, 0.08, 0.03</span><br><span class="line">OS                   : Ubuntu 20.04 LTS</span><br><span class="line">Arch                 : x86_64 (64 Bit)</span><br><span class="line">Kernel               : 5.4.0-42-generic</span><br><span class="line">Virt                 : vmware</span><br><span class="line">--------------------------------------------------------------------------</span><br><span class="line">I/O speed(1st run)   :1.3 GB/s</span><br><span class="line">I/O speed(2nd run)   :1.3 GB/s</span><br><span class="line">I/O speed(3rd run)   :1.3 GB/s</span><br></pre></td></tr></table></figure><h3 id="PhotonOS"><a href="#PhotonOS" class="headerlink" title="PhotonOS"></a>PhotonOS</h3><p>这个是系统在我另一篇博客 <a href="https://blog.k8s.li/container-linux-os.html">Container Linux OS 从入坑到爬出来</a> 里提到过，Photon OS™ 是针对 VMware vSphere® 虚拟化平台进行内核优化的容器专用操作系统，就和 CoreOS 一样。十分适合专门用来运行容器，当作 Kubernetes 集群中的工作负载来使用。</p><ul><li>系统初始化启动之后内存仅仅使用了 45Mi</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">root@photon-machine [ ~ ]# free -h</span><br><span class="line">              total        used        free      shared  buff/cache   available</span><br><span class="line">Mem:          2.0Gi        45Mi       1.8Gi       0.0Ki        93Mi       1.8Gi</span><br><span class="line">Swap:            0B          0B          0B</span><br></pre></td></tr></table></figure><ul><li>启动 docker 进程之后的占用情况，也仅仅 109Mi</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">root@photon-machine [ ~ ]# free -h</span><br><span class="line">              total        used        free      shared  buff/cache   available</span><br><span class="line">Mem:          2.0Gi       109Mi       1.6Gi       0.0Ki       238Mi       1.8Gi</span><br><span class="line">Swap:            0B          0B          0B</span><br></pre></td></tr></table></figure><ul><li>使用 OVA 虚拟机模板启动后的虚拟机，磁盘仅仅占用了 515MB ，确实是相当轻量化，这还是包含了 docker。</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">root@photon-machine [ ~ ]# df -h</span><br><span class="line">Filesystem      Size  Used Avail Use% Mounted on</span><br><span class="line">/dev/root        16G  515M   15G   4% /</span><br><span class="line">devtmpfs        998M     0  998M   0% /dev</span><br><span class="line">tmpfs          1000M     0 1000M   0% /dev/shm</span><br><span class="line">tmpfs          1000M  532K  999M   1% /run</span><br><span class="line">tmpfs          1000M     0 1000M   0% /sys/fs/cgroup</span><br><span class="line">tmpfs          1000M     0 1000M   0% /tmp</span><br><span class="line">/dev/sda2        10M  2.2M  7.9M  22% /boot/efi</span><br><span class="line">tmpfs           200M     0  200M   0% /run/user/0</span><br></pre></td></tr></table></figure><p>总之，PhotonOS 是个很轻量的 OS ，适合专门用来运行一些容器化的服务，这正好符合我的需求。别问我为什么不用 CoreOS ，CoreOS 已经凉了。</p><h3 id="Alpine-NFS"><a href="#Alpine-NFS" class="headerlink" title="Alpine NFS"></a>Alpine NFS</h3><p>把我一块磁盘直通给这个虚拟机，主要用来给 k8s 集群中的 Pod 挂载 PVC 持久化存储使用。</p><h3 id="Debian"><a href="#Debian" class="headerlink" title="Debian"></a>Debian</h3><p>主要是用来运行 K8s 集群，目前只有一个  master 和一个 node 玩玩儿，跑了一些自用的服务。</p><h3 id="Windows"><a href="#Windows" class="headerlink" title="Windows"></a>Windows</h3><p>当下载机使用，外加运行一些不得不使用的国产毒瘤软件😡</p><h2 id="额外硬件"><a href="#额外硬件" class="headerlink" title="额外硬件"></a>额外硬件</h2><p>捡垃圾的乐趣就在于越折腾越好玩，于是又开始打算折腾一些</p><h3 id="UPS"><a href="#UPS" class="headerlink" title="UPS"></a>UPS</h3><p>由于最近房东家里经常断电，有时一天断电八九次，每次断电我都担心着硬盘里的老婆们会不会挂掉，索性还是买了 UPS ，在马云家看了看，带给 NAS 自动断电的 UPS 普遍在 400块钱以上，而且我这个还是个假的 NAS ，UPS 上的 USB 口不一定支持我的主机。最后为了节省一下预算花儿 160 块钱买了个不支持 USB 的 UPS ，但是又不能没有这个功能，因为家里的 220V 市电断电之后，UPS 的电量只能给主机续命 10~20min 左右，UPS 的电量用完之后就嗝屁了，照阳还是断电。所以在 UPS 用尽电量还是没有来电之前，一定要想办法把主机通过 poweroff 的方式安全优雅滴关机。</p><p>首先要考虑的是怎么知道 220V 市电断电了，起初想有没有个 220V 的传感器，我去，有点难度还是算了吧。最后一想，可以通过 ping 房东家光猫的方式。我的路由器和主机等设备连接 UPS ，房东家的光猫并没有连接 UPS ，我在路由器上设置一个定时任务，每分钟去 ping 房东家的光猫，没有 ping 通说明就是断电了，也有可能是网线被拔掉了，但概率很小。<code>! ping -c 8 A &amp;&amp; ssh B &quot;poweroff&quot;</code> 一行简单的命令就满足了我的需求，</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/sh</span></span><br><span class="line">echo "start" &gt;&gt; /tmp/power_status</span><br><span class="line">if ! ping -c 32 192.168.1.1</span><br><span class="line">then</span><br><span class="line">    sleep 300</span><br><span class="line">    ping -c 32 192.168.1.1 &amp;&amp; exit 0</span><br><span class="line">    sshpass -p "pwd" ssh root@192.168.0.210 "net rpc shutdown -I 192.168.0.240 -U admin%poweroff"</span><br><span class="line">    sshpass -p "pwd" ssh root@192.168.0.200 "sh -c /suspend_vm.sh"</span><br><span class="line">    echo "220v poweroff" &gt;&gt; /tmp/power_status</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><p>对于 ESXi 上的虚拟机，还是采用了挂起的方式，将虚拟机的内存状态保存在数据存储的磁盘里，这样重新开启虚拟机后就能恢复到之前的状态，这一点有点像 Windows 的休眠。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/sh</span></span><br><span class="line">for vm in $(/sbin/vmdumper -l | grep -v Alpine |  awk '&#123;print $1&#125;' | sed 's/wid=//g')</span><br><span class="line">do</span><br><span class="line">     /sbin/vmdumper $&#123;vm&#125; suspend_vm</span><br><span class="line">done</span><br></pre></td></tr></table></figure><h3 id="网管交换机"><a href="#网管交换机" class="headerlink" title="网管交换机"></a>网管交换机</h3><p>当我从台式机向 ESXI 里的虚拟机传输文件的时候，发现网络速度最快只能达到 700Mbits/sec ，看来应该是路由器的性能瓶颈，于是想着升级一下网络设备，把 R6300V2 路由器当作 AP 来用，将流量都汇聚到网管交换机上。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">[  4] local 192.168.0.240 port 50718 connected to 192.168.0.123 port 5201</span><br><span class="line">[ ID] Interval           Transfer     Bandwidth</span><br><span class="line">[  4]   0.00-1.00   sec  83.8 MBytes   702 Mbits/sec</span><br><span class="line">[  4]   1.00-2.00   sec  83.4 MBytes   700 Mbits/sec</span><br><span class="line">[  4]   2.00-3.00   sec  83.6 MBytes   701 Mbits/sec</span><br><span class="line">[  4]   3.00-4.00   sec  82.9 MBytes   695 Mbits/sec</span><br><span class="line">[  4]   4.00-5.00   sec  83.8 MBytes   702 Mbits/sec</span><br><span class="line">[  4]   5.00-6.00   sec  83.6 MBytes   701 Mbits/sec</span><br><span class="line">[  4]   6.00-7.00   sec  83.5 MBytes   701 Mbits/sec</span><br><span class="line">[  4]   7.00-8.00   sec  83.8 MBytes   703 Mbits/sec</span><br><span class="line">[  4]   8.00-9.00   sec  83.8 MBytes   702 Mbits/sec</span><br><span class="line">[  4]   9.00-10.00  sec  83.8 MBytes   702 Mbits/sec</span><br><span class="line">[  4]  10.00-11.00  sec  83.8 MBytes   703 Mbits/sec</span><br><span class="line">[  4]  11.00-12.00  sec  83.8 MBytes   703 Mbits/sec</span><br><span class="line">[  4]  12.00-13.00  sec  83.9 MBytes   703 Mbits/sec</span><br><span class="line">[  4]  13.00-14.00  sec  83.8 MBytes   703 Mbits/sec</span><br><span class="line">[  4]  14.00-15.00  sec  83.8 MBytes   703 Mbits/sec</span><br><span class="line">[  4]  15.00-16.00  sec  83.9 MBytes   704 Mbits/sec</span><br><span class="line">[  4]  16.00-17.00  sec  83.4 MBytes   699 Mbits/sec</span><br><span class="line">[  4]  17.00-18.00  sec  83.9 MBytes   703 Mbits/sec</span><br><span class="line">[  4]  18.00-19.00  sec  83.6 MBytes   702 Mbits/sec</span><br><span class="line">[  4]  19.00-20.00  sec  83.8 MBytes   702 Mbits/sec</span><br><span class="line">[  4]  20.00-21.00  sec  83.9 MBytes   704 Mbits/sec</span><br><span class="line">[  4]  21.00-22.00  sec  83.8 MBytes   703 Mbits/sec</span><br><span class="line">[  4]  22.00-23.00  sec  83.9 MBytes   704 Mbits/sec</span><br><span class="line">[  4]  23.00-24.00  sec  83.9 MBytes   703 Mbits/sec</span><br><span class="line">[  4]  24.00-25.00  sec  83.9 MBytes   703 Mbits/sec</span><br><span class="line">[  4]  25.00-25.20  sec  16.6 MBytes   698 Mbits/sec</span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">╭─debian@debian ~</span><br><span class="line">╰─$ qperf 192.168.0.123 -t 30 -vvu tcp_lat udp_lat tcp_bw udp_bw conf</span><br><span class="line">tcp_lat:</span><br><span class="line">    latency   =  98.7 us</span><br><span class="line">    msg_size  =     1 bytes</span><br><span class="line">    time      =    30 sec</span><br><span class="line">    timeout   =     5 sec</span><br><span class="line">udp_lat:</span><br><span class="line">    latency   =  98 us</span><br><span class="line">    msg_size  =   1 bytes</span><br><span class="line">    time      =  30 sec</span><br><span class="line">    timeout   =   5 sec</span><br><span class="line">tcp_bw:</span><br><span class="line">    bw        =  87.9 MB/sec</span><br><span class="line">    msg_size  =    64 KiB (65,536)</span><br><span class="line">    time      =    30 sec</span><br><span class="line">    timeout   =     5 sec</span><br><span class="line">udp_bw:</span><br><span class="line">    send_bw   =  56.7 MB/sec</span><br><span class="line">    recv_bw   =  56.7 MB/sec</span><br><span class="line">    msg_size  =    32 KiB (32,768)</span><br><span class="line">    time      =    30 sec</span><br><span class="line">    timeout   =     5 sec</span><br><span class="line">conf:</span><br><span class="line">    loc_node   =  debian</span><br><span class="line">    loc_cpu    =  16 Cores: AMD Ryzen 7 1700 Eight-Core   3.0GHz</span><br><span class="line">    loc_os     =  Linux 4.4.0-18362</span><br><span class="line">    loc_qperf  =  0.4.11</span><br><span class="line">    rem_node   =  gateway</span><br><span class="line">    rem_cpu    =  4 Cores: Intel Core i5-6600T @ 2.70GHz</span><br><span class="line">    rem_os     =  Linux 5.4.0-42-generic</span><br><span class="line">    rem_qperf  =  0.4.11</span><br></pre></td></tr></table></figure><p>准备买 GS108E V2 或者 GS105E V2，</p><h3 id="四网口网卡"><a href="#四网口网卡" class="headerlink" title="四网口网卡"></a>四网口网卡</h3><p>为了折腾一下网卡直通、端口汇聚、overlay 网络卸载等特性，后面还要添加一块 <a href="https://www.intel.cn/content/www/cn/zh/products/docs/network-io/ethernet/10-25-40-gigabit-adapters/ethernet-i350-server-adapter-brief.html" target="_blank" rel="noopener">intel I350 T4 V2</a> ，闲鱼上的价格也不是很贵。</p><p><img src="img/20200822195450798.png" alt="image-20200822195450798"></p><h3 id="阵列卡"><a href="#阵列卡" class="headerlink" title="阵列卡"></a>阵列卡</h3><p>由于主板的 SATA 接口最大只支持到 2TB ，为了扩展一下存储，只能额外添加一块阵列卡了，由于主板的 PCIe 有限，而且这么大点的机箱最多也就能塞下 1 块 3.5 寸硬盘和 3 块 2.5 寸硬盘，所以找一块入门级的阵列卡就够了，最终花了 50 块钱捡了一块 <a href="https://lenovopress.com/tips0831-serveraid-h1110" target="_blank" rel="noopener">ServeRAID H1110 SAS/SATA Controller</a> 阵列卡，看来一下手册里的参数，大概也能暂时满足我的需求。</p><blockquote><ul><li>Four internal 6 Gbps SAS/SATA ports</li><li>One x4 mini-SAS internal connector (SFF-8087)</li><li>6 Gbps throughput per port</li><li>Based on LSI SAS2004 6 Gbps RAID on Chip (ROC) controller</li><li>x4 PCI Express 2.0 host interface</li><li>Supports RAID 0, 1, 1E, and 10</li><li>Connects to up to four SAS or SATA drives</li><li>SAS and SATA drives are supported, but the mixing of SAS and SATA in the same integrated volume is not supported</li><li>Supports simple-swap SATA and hot-swap SAS and SATA drives</li><li>Supports up to two integrated volumes</li><li>Supports up to two global hot-spare drives</li><li>Supports drive sizes greater than 2 TB for RAID 0, 1E, and 10 (not RAID 1)</li><li>Fixed stripe size of 64 KB</li><li>Compliant with Disk Data Format (DDF)</li><li>S.M.A.R.T. support</li></ul></blockquote><h2 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h2><p>懒得写了</p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;h2 id=&quot;捡垃圾&quot;&gt;&lt;a href=&quot;#捡垃圾&quot;
        
      
    
    </summary>
    
    
      <category term="技术" scheme="https://blog.k8s.li/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="捡垃圾" scheme="https://blog.k8s.li/tags/%E6%8D%A1%E5%9E%83%E5%9C%BE/"/>
    
      <category term="NAS" scheme="https://blog.k8s.li/tags/NAS/"/>
    
  </entry>
  
  <entry>
    <title>docker registry GC 原理分析</title>
    <link href="https://blog.k8s.li/registry-gc.html"/>
    <id>https://blog.k8s.li/registry-gc.html</id>
    <published>2020-07-10T16:00:00.000Z</published>
    <updated>2020-09-15T00:28:09.960Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>好久没更新博客了，在家摸鱼赶紧来水一篇😂</p></blockquote><h2 id="registry-GC-原理🤔"><a href="#registry-GC-原理🤔" class="headerlink" title="registry GC 原理🤔"></a>registry GC 原理🤔</h2><p>在咱上个月写的<a href="https://blog.k8s.li/Exploring-container-image.html">《深入浅出容器镜像的一生》</a>中简单提到了容器镜像的一些知识，也简单介绍了镜像在 registry 中存储的目录结构。今天还是从文件系统层面分析一下 registry GC 的原理，比从源码来分析更直观一些。</p><h3 id="部署-registry-容器"><a href="#部署-registry-容器" class="headerlink" title="部署 registry 容器"></a>部署 registry 容器</h3><p>首先我们需要在本地部署一个 registry 容器，同时为了操作的方便还需要使用到 skopeo 这个工具来替代 docker 命令行客户端进行 copy 镜像和 delete 镜像。关于 skopeo 这个工具的安装和使用可以参考咱之前写过的<a href="https://blog.k8s.li/skopeo.html">《镜像搬运工 skopeo 》</a>。</p><h4 id="自签-SSL-证书"><a href="#自签-SSL-证书" class="headerlink" title="自签 SSL 证书"></a>自签 SSL 证书</h4><p>这一步为了方便在使用 skopeo 的时候不用加一堆额外的参数😂</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/sh</span></span><br><span class="line">set -e</span><br><span class="line">set -o nounset</span><br><span class="line">cat &gt;ca.conf &lt;&lt;EOF</span><br><span class="line">[ req ]</span><br><span class="line">default_bits  = 2048</span><br><span class="line">distinguished_name = req_distinguished_name</span><br><span class="line">prompt   = no</span><br><span class="line">encrypt_key  = no</span><br><span class="line">x509_extensions  = v3_ca</span><br><span class="line">[ req_distinguished_name ]</span><br><span class="line">CN         = localhost</span><br><span class="line">[ CA_default ]</span><br><span class="line">copy_extensions = copy</span><br><span class="line">[ alternate_names ]</span><br><span class="line">DNS.2=localhost</span><br><span class="line">[ v3_ca ]</span><br><span class="line">subjectAltName=@alternate_names</span><br><span class="line">subjectKeyIdentifier=hash</span><br><span class="line">authorityKeyIdentifier=keyid:always,issuer:always</span><br><span class="line">basicConstraints = critical,CA:true</span><br><span class="line">keyUsage=keyCertSign,cRLSign,digitalSignature,keyEncipherment,nonRepudiation</span><br><span class="line">EOF</span><br><span class="line">mkdir -p certs</span><br><span class="line">openssl req -days 365 -x509 -config ca.conf \</span><br><span class="line">    -new -keyout certs/domain.key -out certs/domain.crt</span><br></pre></td></tr></table></figure><ul><li>信任证书，根据不同的发行版选择相应的路径和命令行即可。</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> CentOS</span></span><br><span class="line">update-ca-trust force-enable</span><br><span class="line">cp certs/domain.crt /etc/pki/ca-trust/source/anchors/localhost.crt</span><br><span class="line">update-ca-trust</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Ubuntu</span></span><br><span class="line">cp certs/domain.crt /usr/local/share/ca-certificates/localhost.crt</span><br><span class="line"><span class="meta">$</span><span class="bash"> update-ca-certificates</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Debian</span></span><br><span class="line">cp certs/domain.crt /usr/share/ca-certificates/localhost.crt</span><br><span class="line">echo localhost.crt &gt;&gt; /etc/ca-certificates.conf</span><br><span class="line">update-ca-certificates</span><br></pre></td></tr></table></figure><h4 id="创建密码-auth-认证-auth-htpasswd-文件"><a href="#创建密码-auth-认证-auth-htpasswd-文件" class="headerlink" title="创建密码 auth 认证  auth.htpasswd 文件"></a>创建密码 auth 认证  auth.htpasswd 文件</h4><p>由于 PUSH 镜像和 DELETE 镜像是通过 HTTP 请求 registry 的 API 完成的，每个请求都需要一个 token 才能完成操作，这个 token 需要使用这个 AUTH 文件来进行鉴权，使用 <code>htpasswd</code> 来生成一个明文的用户/密码即可。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">htpasswd -cB -b auth.htpasswd root 123456</span><br></pre></td></tr></table></figure><h4 id="启动-registry-容器，docker-run-走起！"><a href="#启动-registry-容器，docker-run-走起！" class="headerlink" title="启动 registry 容器，docker run 走起！"></a>启动 registry 容器，docker run 走起！</h4><ul><li><code>-v /var/lib/registry:/var/lib/registry</code> ，将本地的存储目录挂载到容器内的 registry 存储目录下。</li><li><code>-v pwd/certs:/certs</code>，将生成的 SSL 证书挂载到容器内。</li><li><code>-e REGISTRY_STORAGE_DELETE_ENABLED=true</code>，添加该参数才能进行 DELETE 镜像操作，不然的话会提示 <a href="https://github.com/docker/distribution/issues/1573" target="_blank" rel="noopener">Error in deleting repository in a private registry V2 #1573</a> 这种错误（＞﹏＜）。</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 127.0.0.1:443:5000 --name registry \</span><br><span class="line">    -v /var/lib/registry:/var/lib/registry \</span><br><span class="line">    -v `pwd`/certs:/certs \</span><br><span class="line">    -v $(pwd)/auth.htpasswd:/etc/docker/registry/auth.htpasswd \</span><br><span class="line">    -e REGISTRY_AUTH="&#123;htpasswd: &#123;realm: localhost, path: /etc/docker/registry/auth.htpasswd&#125;&#125;" \</span><br><span class="line">    -e REGISTRY_HTTP_ADDR=0.0.0.0:5000 \</span><br><span class="line">    -e REGISTRY_HTTP_TLS_CERTIFICATE=/certs/domain.crt \</span><br><span class="line">    -e REGISTRY_HTTP_TLS_KEY=/certs/domain.key \</span><br><span class="line">    -e REGISTRY_STORAGE_DELETE_ENABLED=true \</span><br><span class="line">    registry</span><br></pre></td></tr></table></figure><h4 id="docker-login"><a href="#docker-login" class="headerlink" title="docker login"></a>docker login</h4><p>这一步是为了在 <code>~/.docker/.config.json</code> ，中添加上 auth 认证，后面使用 skopeo 的时候会用到。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">╭─root@sg-02 ~/registry</span><br><span class="line">╰─# docker login localhost -u root -p 123456</span><br><span class="line">]WARNING! Using --password via the CLI is insecure. Use --password-stdin.</span><br><span class="line">WARNING! Your password will be stored unencrypted in /root/.docker/config.json.</span><br><span class="line">Configure a credential helper to remove this warning. See</span><br><span class="line">https://docs.docker.com/engine/reference/commandline/login/#credentials-store</span><br><span class="line"></span><br><span class="line">Login Succeeded</span><br><span class="line">╭─root@sg-02 ~/registry</span><br><span class="line">╰─# cat ~/.docker/config.json</span><br><span class="line">&#123;</span><br><span class="line">        "auths": &#123;</span><br><span class="line">                "https://registry.k8s.li/v2": &#123;</span><br><span class="line">                        "auth": "VlJFpmQE43Sw=="</span><br><span class="line">                &#125;,</span><br><span class="line">                "localhost": &#123;</span><br><span class="line">                        "auth": "cm9vdDoxMjM0NTY="</span><br><span class="line">                &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        "HttpHeaders": &#123;</span><br><span class="line">                "User-Agent": "Docker-Client/19.03.5 (linux)"</span><br><span class="line">        &#125;,</span><br><span class="line">        "experimental": "enabled"</span><br><span class="line">&#125;#</span><br></pre></td></tr></table></figure><h3 id="COPY-镜像到-registry"><a href="#COPY-镜像到-registry" class="headerlink" title="COPY 镜像到 registry"></a>COPY 镜像到 registry</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">╭─root@sg-02 ~/registry</span><br><span class="line">╰─# skopeo copy docker://alpine:3.10 docker://localhost/library/alpine:3.10</span><br><span class="line">Getting image source signatures</span><br><span class="line">Copying blob 21c83c524219 done</span><br><span class="line">Copying config be4e4bea2c done</span><br><span class="line">Writing manifest to image destination</span><br><span class="line">Storing signatures</span><br></pre></td></tr></table></figure><h3 id="registry-存储目录长什么样🤔"><a href="#registry-存储目录长什么样🤔" class="headerlink" title="registry 存储目录长什么样🤔"></a>registry 存储目录长什么样🤔</h3><p><img src="img/registry-storage.jpeg" alt="img"></p><p>registry 容器内的<code>/var/lib/registry/docker/registry/v2</code> 存储目录，结合上面这张图，通过 tree 目录我们可以清晰地看到：registry 存储目录下只有两种文件名的文件，一个是 <code>data</code> 文件，一个是 <code>link</code> 文件。其中 link 文件是普通的文本文件，存放在 <code>repositories</code> 目录下，其内容是指向 data 文件的 sha256 digest 值。link 文件是不是有点像 C 语言中的指针😂（大雾。</p><p>data 文件存放在 <code>blobs</code> 目录下文件又分为了三种文件，一个是镜像每一层的 <code>layer</code> 文件和镜像的 <code>config</code> 文件，以及镜像的 <code>manifest</code> 文件。</p><p>在 <code>repositories</code> 目录下每个镜像的 <code>_layers/sha256</code> 目录下的文件夹名是镜像的 layer 和 config 文件的 digest ，该目录下的 link 文件就是指向对应 blobs 目录下的 data 文件。当我们 pull 一个镜像的 layer 时，是通过 link 文件找到 layer 在 registry 中实际的存储位置的。</p><p>在 <code>_manifests</code> 文件夹下的 tags 和 revisions 目录下的 link 文件则指向该镜像的 manifest 文件，保存在所有历史镜像 tag 的 manifest 文件 的 link。当删除一个镜像时，只会删除该镜像最新的 tag 的 link 文件。</p><p>tags 目录下的文件夹名例如 3.10 ，就是该镜像的 tag ，在它的子目录下的 current/link 文件则记录了当前 tag 指向的 manifest 文件的位置。比如我们的 alpine:latest 镜像，每次 push 新的 latest 镜像时，current/link 都会更新成指向最新镜像的 manifest 文件。</p><p>我们后面观察一下当删除一个镜像时，这些文件是怎么变化的，就可以得知通过 registry API 进行 DELETE 操作可以转换成文件系统层面上对 link 文件的删除操作。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">╭─root@sg-02 ~/registry</span><br><span class="line">╰─# cd /var/lib/registry/docker/registry/v2</span><br><span class="line">╭─root@sg-02 /var/lib/registry/docker/registry/v2</span><br><span class="line">╰─# tree</span><br><span class="line">.</span><br><span class="line">├── blobs</span><br><span class="line">│   └── sha256</span><br><span class="line">│       ├── 21</span><br><span class="line">│       │   └── 21c83c5242199776c232920ddb58cfa2a46b17e42ed831ca9001c8dbc532d22d</span><br><span class="line">│       │       └── data</span><br><span class="line">│       ├── a1</span><br><span class="line">│       │   └── a143f3ba578f79e2c7b3022c488e6e12a35836cd4a6eb9e363d7f3a07d848590</span><br><span class="line">│       │       └── data</span><br><span class="line">│       └── be</span><br><span class="line">│           └── be4e4bea2c2e15b403bb321562e78ea84b501fb41497472e91ecb41504e8a27c</span><br><span class="line">│               └── data</span><br><span class="line">└── repositories</span><br><span class="line">    └── library</span><br><span class="line">        └── alpine</span><br><span class="line">            ├── _layers</span><br><span class="line">            │   └── sha256</span><br><span class="line">            │       ├── 21c83c5242199776c232920ddb58cfa2a46b17e42ed831ca9001c8dbc532d22d</span><br><span class="line">            │       │   └── link</span><br><span class="line">            │       └── be4e4bea2c2e15b403bb321562e78ea84b501fb41497472e91ecb41504e8a27c</span><br><span class="line">            │           └── link</span><br><span class="line">            ├── _manifests</span><br><span class="line">            │   ├── revisions</span><br><span class="line">            │   │   └── sha256</span><br><span class="line">            │   │       └── a143f3ba578f79e2c7b3022c488e6e12a35836cd4a6eb9e363d7f3a07d848590</span><br><span class="line">            │   │           └── link</span><br><span class="line">            │   └── tags</span><br><span class="line">            │       └── 3.10</span><br><span class="line">            │           ├── current</span><br><span class="line">            │           │   └── link</span><br><span class="line">            │           └── index</span><br><span class="line">            │               └── sha256</span><br><span class="line">            │                   └── a143f3ba578f79e2c7b3022c488e6e12a35836cd4a6eb9e363d7f3a07d848590</span><br><span class="line">            │                       └── link</span><br><span class="line">            └── _uploads</span><br><span class="line"></span><br><span class="line">26 directories, 8 files</span><br></pre></td></tr></table></figure><ul><li><code>blobs</code> 存储目录，存放了镜像的三个必须文件，<code>layer</code>，<code>manifest</code>，<code>config</code>。通过文件大小我们可以大致地推算出最大的 2.7M 是镜像的 layer 。</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">╭─root@sg-02 /var/lib/registry/docker/registry/v2</span><br><span class="line">╰─# find . -name "data" -exec ls -sh &#123;&#125; \;</span><br><span class="line">2.7M ./blobs/sha256/21/21c83c5242199776c232920ddb58cfa2a46b17e42ed831ca9001c8dbc532d22d/data</span><br><span class="line">4.0K ./blobs/sha256/a1/a143f3ba578f79e2c7b3022c488e6e12a35836cd4a6eb9e363d7f3a07d848590/data</span><br><span class="line">4.0K ./blobs/sha256/be/be4e4bea2c2e15b403bb321562e78ea84b501fb41497472e91ecb41504e8a27c/data</span><br></pre></td></tr></table></figure><ul><li><code>image layer</code> 文件，是 gzip 格式的 tar 包，是镜像层真实内容的 <code>tar.gzip</code> 格式存储形式。</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./blobs/sha256/21/21c83c5242199776c232920ddb58cfa2a46b17e42ed831ca9001c8dbc532d22d/data: gzip compressed data</span><br></pre></td></tr></table></figure><ul><li><code>image manifest</code> 文件，json 文件格式的，存放该镜像 <code>layer</code> 和  <code>image config</code> 文件的索引。</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">╭─root@sg-02 /var/lib/registry/docker/registry/v2</span><br><span class="line">╰─# cat ./blobs/sha256/a1/a143f3ba578f79e2c7b3022c488e6e12a35836cd4a6eb9e363d7f3a07d848590/data</span><br><span class="line">&#123;</span><br><span class="line">   <span class="attr">"schemaVersion"</span>: <span class="number">2</span>,</span><br><span class="line">   <span class="attr">"mediaType"</span>: <span class="string">"application/vnd.docker.distribution.manifest.v2+json"</span>,</span><br><span class="line">   <span class="attr">"config"</span>: &#123;</span><br><span class="line">      <span class="attr">"mediaType"</span>: <span class="string">"application/vnd.docker.container.image.v1+json"</span>,</span><br><span class="line">      <span class="attr">"size"</span>: <span class="number">1509</span>,</span><br><span class="line">      <span class="attr">"digest"</span>: <span class="string">"sha256:be4e4bea2c2e15b403bb321562e78ea84b501fb41497472e91ecb41504e8a27c"</span></span><br><span class="line">   &#125;,</span><br><span class="line">   <span class="attr">"layers"</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">         <span class="attr">"mediaType"</span>: <span class="string">"application/vnd.docker.image.rootfs.diff.tar.gzip"</span>,</span><br><span class="line">         <span class="attr">"size"</span>: <span class="number">2795580</span>,</span><br><span class="line">         <span class="attr">"digest"</span>: <span class="string">"sha256:21c83c5242199776c232920ddb58cfa2a46b17e42ed831ca9001c8dbc532d22d"</span></span><br><span class="line">      &#125;</span><br><span class="line">   ]</span><br><span class="line">&#125;#</span><br></pre></td></tr></table></figure><ul><li><code>image config</code> 文件，json 格式的。是构建时生成的，根据 <code>Dockerfile</code> 和宿主机的一些信息，以及一些构建过程中的容器可以生成 digest 唯一的 <code>image config</code> 文件。仔细看这个 image config 文件是不是有点疑惑，无论是 manifest 还是 config 文件里面的内容压根就没有镜像的名称和 tag 。其实，镜像就好比一个文件，文件的内容和文件名毫无关系。在 registry 中，是通过路径名的方式来对一个镜像进行命名的。当我们往 registry 中 PUSH 一个镜像时，以<code>localhost/library/alpine:3.10</code>为例，<code>localhost</code>，就是该 registry 的域名或者 URL ，<code>library</code>就是 project ，<code>alpine:3.10</code>就是镜像名和镜像的 tag。registry 会根据 <code>localhost/library/alpine:3.10</code> 在<code>repositories</code> 目录下依次创建相应的目录。</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line">╭─root@sg-02 /var/lib/registry/docker/registry/v2</span><br><span class="line">╰─# cat ./blobs/sha256/be/be4e4bea2c2e15b403bb321562e78ea84b501fb41497472e91ecb41504e8a27c/data | jq "."</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"architecture"</span>: <span class="string">"amd64"</span>,</span><br><span class="line">  <span class="attr">"config"</span>: &#123;</span><br><span class="line">    <span class="attr">"Hostname"</span>: <span class="string">""</span>,</span><br><span class="line">    <span class="attr">"Domainname"</span>: <span class="string">""</span>,</span><br><span class="line">    <span class="attr">"User"</span>: <span class="string">""</span>,</span><br><span class="line">    <span class="attr">"AttachStdin"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">"AttachStdout"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">"AttachStderr"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">"Tty"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">"OpenStdin"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">"StdinOnce"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">"Env"</span>: [</span><br><span class="line">      <span class="string">"PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">"Cmd"</span>: [</span><br><span class="line">      <span class="string">"/bin/sh"</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">"ArgsEscaped"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"Image"</span>: <span class="string">"sha256:d928e20e1fbe5142bb5cdf594862271673133c5354950d6a8f74afed24df4c23"</span>,</span><br><span class="line">    <span class="attr">"Volumes"</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">"WorkingDir"</span>: <span class="string">""</span>,</span><br><span class="line">    <span class="attr">"Entrypoint"</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">"OnBuild"</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">"Labels"</span>: <span class="literal">null</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"container"</span>: <span class="string">"37e3972c75360676982c8f6591b66a9097719e5ad4cecd5fa63ad4f06472825f"</span>,</span><br><span class="line">  <span class="attr">"container_config"</span>: &#123;</span><br><span class="line">    <span class="attr">"Hostname"</span>: <span class="string">"37e3972c7536"</span>,</span><br><span class="line">    <span class="attr">"Domainname"</span>: <span class="string">""</span>,</span><br><span class="line">    <span class="attr">"User"</span>: <span class="string">""</span>,</span><br><span class="line">    <span class="attr">"AttachStdin"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">"AttachStdout"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">"AttachStderr"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">"Tty"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">"OpenStdin"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">"StdinOnce"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">"Env"</span>: [</span><br><span class="line">      <span class="string">"PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">"Cmd"</span>: [</span><br><span class="line">      <span class="string">"/bin/sh"</span>,</span><br><span class="line">      <span class="string">"-c"</span>,</span><br><span class="line">      <span class="string">"#(nop) "</span>,</span><br><span class="line">      <span class="string">"CMD [\"/bin/sh\"]"</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">"ArgsEscaped"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="attr">"Image"</span>: <span class="string">"sha256:d928e20e1fbe5142bb5cdf594862271673133c5354950d6a8f74afed24df4c23"</span>,</span><br><span class="line">    <span class="attr">"Volumes"</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">"WorkingDir"</span>: <span class="string">""</span>,</span><br><span class="line">    <span class="attr">"Entrypoint"</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">"OnBuild"</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">"Labels"</span>: &#123;&#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"created"</span>: <span class="string">"2020-04-24T01:05:21.571691552Z"</span>,</span><br><span class="line">  <span class="attr">"docker_version"</span>: <span class="string">"18.09.7"</span>,</span><br><span class="line">  <span class="attr">"history"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"created"</span>: <span class="string">"2020-04-24T01:05:21.178437685Z"</span>,</span><br><span class="line">      <span class="attr">"created_by"</span>: <span class="string">"/bin/sh -c #(nop) ADD file:66a440394c2442570f1f060e25c86613cb2d88a8af0c71c5a4154b3570e9a805 in / "</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"created"</span>: <span class="string">"2020-04-24T01:05:21.571691552Z"</span>,</span><br><span class="line">      <span class="attr">"created_by"</span>: <span class="string">"/bin/sh -c #(nop)  CMD [\"/bin/sh\"]"</span>,</span><br><span class="line">      <span class="attr">"empty_layer"</span>: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">"os"</span>: <span class="string">"linux"</span>,</span><br><span class="line">  <span class="attr">"rootfs"</span>: &#123;</span><br><span class="line">    <span class="attr">"type"</span>: <span class="string">"layers"</span>,</span><br><span class="line">    <span class="attr">"diff_ids"</span>: [</span><br><span class="line">      <span class="string">"sha256:1b3ee35aacca9866b01dd96e870136266bde18006ac2f0d6eb706c798d1fa3c3"</span></span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>我们再往 registry 中 COPY 一个镜像，方便后面的分析过程。</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">skopeo copy docker://debian:buster-slim docker://localhost/library/debian:buster-slim</span><br></pre></td></tr></table></figure><ul><li>这是 registry 中就只有 <code>alpine:3.10</code> 和 <code>debian:buster-slim</code>这两个基础镜像，此时的 registry 存储目录的结构如下：</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line">╭─root@sg-02 /var/lib/registry/docker/registry/v2</span><br><span class="line">╰─# tree</span><br><span class="line">.</span><br><span class="line">├── blobs</span><br><span class="line">│   └── sha256</span><br><span class="line">│       ├── 21</span><br><span class="line">│       │   └── 21c83c5242199776c232920ddb58cfa2a46b17e42ed831ca9001c8dbc532d22d</span><br><span class="line">│       │       └── data</span><br><span class="line">│       ├── 43</span><br><span class="line">│       │   └── 43e3995ee54ac008271bfcf2d8ac7278c33f4c5e83d2f02bfcddd350034e3357</span><br><span class="line">│       │       └── data</span><br><span class="line">│       ├── 7c</span><br><span class="line">│       │   └── 7c459309b9a5ec1683ef3b137f39ce5888f5ad0384e488ad73c94e0243bc77d4</span><br><span class="line">│       │       └── data</span><br><span class="line">│       ├── 85</span><br><span class="line">│       │   └── 8559a31e96f442f2c7b6da49d6c84705f98a39d8be10b3f5f14821d0ee8417df</span><br><span class="line">│       │       └── data</span><br><span class="line">│       ├── a1</span><br><span class="line">│       │   └── a143f3ba578f79e2c7b3022c488e6e12a35836cd4a6eb9e363d7f3a07d848590</span><br><span class="line">│       │       └── data</span><br><span class="line">│       └── be</span><br><span class="line">│           └── be4e4bea2c2e15b403bb321562e78ea84b501fb41497472e91ecb41504e8a27c</span><br><span class="line">│               └── data</span><br><span class="line">└── repositories</span><br><span class="line">    └── library</span><br><span class="line">        ├── alpine</span><br><span class="line">        │   ├── _layers</span><br><span class="line">        │   │   └── sha256</span><br><span class="line">        │   │       ├── 21c83c5242199776c232920ddb58cfa2a46b17e42ed831ca9001c8dbc532d22d</span><br><span class="line">        │   │       │   └── link</span><br><span class="line">        │   │       └── be4e4bea2c2e15b403bb321562e78ea84b501fb41497472e91ecb41504e8a27c</span><br><span class="line">        │   │           └── link</span><br><span class="line">        │   ├── _manifests</span><br><span class="line">        │   │   ├── revisions</span><br><span class="line">        │   │   │   └── sha256</span><br><span class="line">        │   │   │       └── a143f3ba578f79e2c7b3022c488e6e12a35836cd4a6eb9e363d7f3a07d848590</span><br><span class="line">        │   │   │           └── link</span><br><span class="line">        │   │   └── tags</span><br><span class="line">        │   │       └── 3.10</span><br><span class="line">        │   │           ├── current</span><br><span class="line">        │   │           │   └── link</span><br><span class="line">        │   │           └── index</span><br><span class="line">        │   │               └── sha256</span><br><span class="line">        │   │                   └── a143f3ba578f79e2c7b3022c488e6e12a35836cd4a6eb9e363d7f3a07d848590</span><br><span class="line">        │   │                       └── link</span><br><span class="line">        │   └── _uploads</span><br><span class="line">        └── debian</span><br><span class="line">            ├── _layers</span><br><span class="line">            │   └── sha256</span><br><span class="line">            │       ├── 43e3995ee54ac008271bfcf2d8ac7278c33f4c5e83d2f02bfcddd350034e3357</span><br><span class="line">            │       │   └── link</span><br><span class="line">            │       └── 8559a31e96f442f2c7b6da49d6c84705f98a39d8be10b3f5f14821d0ee8417df</span><br><span class="line">            │           └── link</span><br><span class="line">            ├── _manifests</span><br><span class="line">            │   ├── revisions</span><br><span class="line">            │   │   └── sha256</span><br><span class="line">            │   │       └── 7c459309b9a5ec1683ef3b137f39ce5888f5ad0384e488ad73c94e0243bc77d4</span><br><span class="line">            │   │           └── link</span><br><span class="line">            │   └── tags</span><br><span class="line">            │       └── buster-slim</span><br><span class="line">            │           ├── current</span><br><span class="line">            │           │   └── link</span><br><span class="line">            │           └── index</span><br><span class="line">            │               └── sha256</span><br><span class="line">            │                   └── 7c459309b9a5ec1683ef3b137f39ce5888f5ad0384e488ad73c94e0243bc77d4</span><br><span class="line">            │                       └── link</span><br><span class="line">            └── _uploads</span><br><span class="line"></span><br><span class="line">48 directories, 16 files</span><br></pre></td></tr></table></figure><h3 id="DELETE-镜像"><a href="#DELETE-镜像" class="headerlink" title="DELETE 镜像"></a>DELETE 镜像</h3><ul><li>通过 <code>skopeo delete</code> 删除镜像，注意，通过 registry 的 API 删除镜像每次只能删除一个 tag 的镜像。</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">╭─root@sg-02 /var/lib/registry/docker/registry/v2</span><br><span class="line">╰─# skopeo delete docker://localhost/library/alpine:3.10 --debug</span><br><span class="line">DEBU[0000] Returning credentials from /run/containers/0/auth.json</span><br><span class="line">DEBU[0000] Using registries.d directory /etc/containers/registries.d for sigstore configuration</span><br><span class="line">DEBU[0000]  No signature storage configuration found for localhost/library/alpine:3.10</span><br><span class="line">DEBU[0000] Looking for TLS certificates and private keys in /etc/docker/certs.d/localhost</span><br><span class="line">DEBU[0000] Loading registries configuration "/etc/containers/registries.conf"</span><br><span class="line">DEBU[0000] GET https://localhost/v2/</span><br><span class="line">DEBU[0000] Ping https://localhost/v2/ status 401</span><br><span class="line">DEBU[0000] GET https://localhost/v2/library/alpine/manifests/3.10</span><br><span class="line">DEBU[0000] DELETE https://localhost/v2/library/alpine/manifests/sha256:a143f3ba578f79e2c7b3022c488e6e12a35836cd4a6eb9e363d7f3a07d848590</span><br></pre></td></tr></table></figure><ul><li>再看一下删除后的 registry 存储目录下的 alpine 目录里都少了哪些东东？</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">╭─root@sg-02 /var/lib/registry/docker/registry/v2</span><br><span class="line">╰─# tree</span><br><span class="line">.</span><br><span class="line">├── blobs</span><br><span class="line">│   └── sha256</span><br><span class="line">│       ├── 21</span><br><span class="line">│       │   └── 21c83c5242199776c232920ddb58cfa2a46b17e42ed831ca9001c8dbc532d22d</span><br><span class="line">│       │       └── data</span><br><span class="line">│       ├── 43</span><br><span class="line">│       │   └── 43e3995ee54ac008271bfcf2d8ac7278c33f4c5e83d2f02bfcddd350034e3357</span><br><span class="line">│       │       └── data</span><br><span class="line">│       ├── 7c</span><br><span class="line">│       │   └── 7c459309b9a5ec1683ef3b137f39ce5888f5ad0384e488ad73c94e0243bc77d4</span><br><span class="line">│       │       └── data</span><br><span class="line">│       ├── 85</span><br><span class="line">│       │   └── 8559a31e96f442f2c7b6da49d6c84705f98a39d8be10b3f5f14821d0ee8417df</span><br><span class="line">│       │       └── data</span><br><span class="line">│       ├── a1</span><br><span class="line">│       │   └── a143f3ba578f79e2c7b3022c488e6e12a35836cd4a6eb9e363d7f3a07d848590</span><br><span class="line">│       │       └── data</span><br><span class="line">│       └── be</span><br><span class="line">│           └── be4e4bea2c2e15b403bb321562e78ea84b501fb41497472e91ecb41504e8a27c</span><br><span class="line">│               └── data</span><br><span class="line">└── repositories</span><br><span class="line">    └── library</span><br><span class="line">        ├── alpine</span><br><span class="line">        │   ├── _layers</span><br><span class="line">        │   │   └── sha256</span><br><span class="line">        │   │       ├── 21c83c5242199776c232920ddb58cfa2a46b17e42ed831ca9001c8dbc532d22d</span><br><span class="line">        │   │       │   └── link</span><br><span class="line">        │   │       └── be4e4bea2c2e15b403bb321562e78ea84b501fb41497472e91ecb41504e8a27c</span><br><span class="line">        │   │           └── link</span><br><span class="line">        │   ├── _manifests</span><br><span class="line">        │   │   ├── revisions</span><br><span class="line">        │   │   │   └── sha256</span><br><span class="line">        │   │   │       └── a143f3ba578f79e2c7b3022c488e6e12a35836cd4a6eb9e363d7f3a07d848590</span><br><span class="line">        │   │   └── tags</span><br><span class="line">        │   └── _uploads</span><br></pre></td></tr></table></figure><p>我们可以看到，通过 skopeo delete 一个镜像的时候，只对 <code>_manifests</code> 下的 link 文件进行了操作，删除的都是对该 tag 镜像 manifest 文件夹下的 link 文件，实际上 manifest 文件并没有从 blobs 目录下删除，只是删除了该镜像的 manifest 文件的引用。删除一个镜像后，tags 目录下的 tag 名目录就被删除了，_manifests/revisions 目录下的 link 文件也被删除了。实际上两者删除的是同一个内容，即对该镜像 manifest 文件的 link 文件。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DEBU[0000] DELETE https://localhost/v2/library/alpine/manifests/sha256:a143f3ba578f79e2c7b3022c488e6e12a35836cd4a6eb9e363d7f3a07d848590</span><br></pre></td></tr></table></figure><p>从上面文件的变化可以得出，通过 registry API 来 DELETE 一个镜像实质上是删除 repositories 元数据文件夹下的 tag 名文件夹和该 tag 的 revisions 下的 link 文件。</p><h2 id="registry-GC-原理"><a href="#registry-GC-原理" class="headerlink" title="registry GC 原理"></a>registry GC 原理</h2><p>上面巴拉巴拉扯了一通也许你现在一头雾水，这和今天的主题 registry GC 原理毛关系？😂，其实想要从文件系统层面来理解 registry GC ，上面的知识是必备的（<em>^____^</em>）。</p><h3 id="GC-是弄啥咧？🤔"><a href="#GC-是弄啥咧？🤔" class="headerlink" title="GC 是弄啥咧？🤔"></a>GC 是弄啥咧？🤔</h3><p>GC 嘛，就是垃圾回收的意思，从 docker 官方文档 <a href="https://docs.docker.com/registry/garbage-collection/" target="_blank" rel="noopener">Garbage collection</a> 偷来的 example 😂来解释一下吧。</p><ul><li>假如镜像 A 和镜像 B ，他俩分别引用了layer a，b和 a，c。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">A -----&gt; a &lt;----- B</span><br><span class="line">    \--&gt; b     |</span><br><span class="line">         c &lt;--&#x2F;</span><br></pre></td></tr></table></figure><ul><li>通过 registry API 删除镜像 B 之后，layer c 并没有删掉，只是删掉了对它的引用，所以 c 是多余的。</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">A -----&gt; a     B</span><br><span class="line">    \--&gt; b</span><br><span class="line">         c</span><br></pre></td></tr></table></figure><ul><li>GC 之后，layer c 就被删掉了，现在就没有无用的 layer 了。</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">A -----&gt; a</span><br><span class="line">    \--&gt; b</span><br></pre></td></tr></table></figure><h3 id="GC-的过程"><a href="#GC-的过程" class="headerlink" title="GC 的过程"></a>GC 的过程</h3><p>翻一下 registry  GC 的源码 <a href="https://github.com/docker/distribution/blob/master/registry/storage/garbagecollect.go" target="_blank" rel="noopener">garbagecollect.go</a>，可以看到 GC 的主要分两个阶段，marking 和 sweep。</p><h4 id="marking"><a href="#marking" class="headerlink" title="marking"></a>marking</h4><p>marking 阶段是扫描所有的 manifest 文件，根据上文我们提到的 link 文件，通过扫描所有镜像 tags 目录下的 link 文件就可以得到这些镜像的 manifest，在 manifest 中保存在该镜像所有的 layer 和 config 文件的 digest 值，把这些值标记为<strong>不能清除</strong>。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// mark</span></span><br><span class="line">markSet := <span class="built_in">make</span>(<span class="keyword">map</span>[digest.Digest]<span class="keyword">struct</span>&#123;&#125;)</span><br><span class="line">manifestArr := <span class="built_in">make</span>([]ManifestDel, <span class="number">0</span>)</span><br><span class="line">err := repositoryEnumerator.Enumerate(ctx, <span class="function"><span class="keyword">func</span><span class="params">(repoName <span class="keyword">string</span>)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">emit(repoName)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> err error</span><br><span class="line">named, err := reference.WithName(repoName)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">"failed to parse repo name %s: %v"</span>, repoName, err)</span><br><span class="line">&#125;</span><br><span class="line">repository, err := registry.Repository(ctx, named)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">"failed to construct repository: %v"</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">manifestService, err := repository.Manifests(ctx)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">"failed to construct manifest service: %v"</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">manifestEnumerator, ok := manifestService.(distribution.ManifestEnumerator)</span><br><span class="line"><span class="keyword">if</span> !ok &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">"unable to convert ManifestService into ManifestEnumerator"</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这一阶段用 shell 脚本来实现的话大致可以这样来搞，使用 shell 去遍历这些 manifest ，然后再 grep 出所有的 sha256 值就能得到这个镜像所有的 blobs 目录下的 data 文件。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">set -x</span><br><span class="line">v2=$&#123;v2:="/var/lib/registry/docker/registry/v2"&#125;</span><br><span class="line">cd $&#123;v2&#125;</span><br><span class="line">all_blobs=/tmp/all_blobs.list</span><br><span class="line">echo "" &gt; $&#123;all_blobs&#125;</span><br><span class="line"><span class="meta">#</span><span class="bash"> marking all the blob by all images manifest</span></span><br><span class="line">for tag in $(find repositories -name "link" | grep current)</span><br><span class="line">do</span><br><span class="line">    link=$(cat $&#123;tag&#125; | cut -c8-71)</span><br><span class="line">    mfs=blobs/sha256/$&#123;link:0:2&#125;/$&#123;link&#125;/data</span><br><span class="line">    echo $&#123;link&#125; &gt;&gt; $&#123;all_blobs&#125;</span><br><span class="line">    grep sha256 $&#123;mfs&#125; |cut -d "\"" -f4 | cut -c8-71 &gt;&gt; $&#123;all_blobs&#125;</span><br><span class="line">done</span><br></pre></td></tr></table></figure><h4 id="sweep"><a href="#sweep" class="headerlink" title="sweep"></a>sweep</h4><p>第二阶段就是删除操作啦，marking 完之后，没有标记 blob（ layer 和 config 文件）就会被清除掉。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// sweep</span></span><br><span class="line">vacuum := NewVacuum(ctx, storageDriver)</span><br><span class="line"><span class="keyword">if</span> !opts.DryRun &#123;</span><br><span class="line"><span class="keyword">for</span> _, obj := <span class="keyword">range</span> manifestArr &#123;</span><br><span class="line">err = vacuum.RemoveManifest(obj.Name, obj.Digest, obj.Tags)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">"failed to delete manifest %s: %v"</span>, obj.Digest, err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">blobService := registry.Blobs()</span><br><span class="line">deleteSet := <span class="built_in">make</span>(<span class="keyword">map</span>[digest.Digest]<span class="keyword">struct</span>&#123;&#125;)</span><br><span class="line">err = blobService.Enumerate(ctx, <span class="function"><span class="keyword">func</span><span class="params">(dgst digest.Digest)</span> <span class="title">error</span></span> &#123;</span><br><span class="line"><span class="comment">// check if digest is in markSet. If not, delete it!</span></span><br><span class="line"><span class="keyword">if</span> _, ok := markSet[dgst]; !ok &#123;</span><br><span class="line">deleteSet[dgst] = <span class="keyword">struct</span>&#123;&#125;&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><img src="img/registry-gc.png" alt=""></p><h3 id="GC-都干了啥？"><a href="#GC-都干了啥？" class="headerlink" title="GC 都干了啥？"></a>GC 都干了啥？</h3><p>接下来我们就进行实际的 GC 操作，进入到 registry 容器中，使用 registry garbage-collect 这个子命令进行操作。</p><h4 id="marking-1"><a href="#marking-1" class="headerlink" title="marking"></a>marking</h4><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">╭─root@sg-<span class="number">02</span> /<span class="keyword">var</span>/lib/registry/docker/registry/v2</span><br><span class="line">╰─# docker exec -it registry sh</span><br><span class="line">/ # registry garbage-collect -m --delete-untagged=true /etc/docker/registry/<span class="keyword">config</span><span class="variable">.yml</span></span><br><span class="line"><span class="keyword">library</span>/alpine</span><br><span class="line"><span class="keyword">library</span>/debian</span><br><span class="line"><span class="keyword">library</span>/debian: marking manifest sha256:<span class="number">7</span>c459309b9a5ec1683ef3b137f39ce5888f5ad0384e488ad73c94e0243bc77d4</span><br><span class="line"><span class="keyword">library</span>/debian: marking blob sha256:<span class="number">43</span>e3995ee54ac008271bfcf2d8ac7278c33f4c5e83d2f02bfcddd350034e3357</span><br><span class="line"><span class="keyword">library</span>/debian: marking blob sha256:<span class="number">8559</span>a31e96f442f2c7b6da49d6c84705f98a39d8be10b3f5f14821d0ee8417df</span><br><span class="line"></span><br><span class="line"><span class="number">3</span> blobs marked, <span class="number">3</span> blobs <span class="keyword">and</span> <span class="number">0</span> manifests eligible <span class="keyword">for</span> deletion</span><br></pre></td></tr></table></figure><h4 id="sweep-1"><a href="#sweep-1" class="headerlink" title="sweep"></a>sweep</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">blob eligible for deletion: sha256:a143f3ba578f79e2c7b3022c488e6e12a35836cd4a6eb9e363d7f3a07d848590</span><br><span class="line">INFO[0000] Deleting blob: &#x2F;docker&#x2F;registry&#x2F;v2&#x2F;blobs&#x2F;sha256&#x2F;a1&#x2F;a143f3ba578f79e2c7b3022c488e6e12a35836cd4a6eb9e363d7f3a07d848590  go.version&#x3D;go1.11.2 instance.id&#x3D;3ad15352-7cb7-46ca-a5ae-e5e16c6485a5 service&#x3D;registry</span><br><span class="line">blob eligible for deletion: sha256:be4e4bea2c2e15b403bb321562e78ea84b501fb41497472e91ecb41504e8a27c</span><br><span class="line">INFO[0000] Deleting blob: &#x2F;docker&#x2F;registry&#x2F;v2&#x2F;blobs&#x2F;sha256&#x2F;be&#x2F;be4e4bea2c2e15b403bb321562e78ea84b501fb41497472e91ecb41504e8a27c  go.version&#x3D;go1.11.2 instance.id&#x3D;3ad15352-7cb7-46ca-a5ae-e5e16c6485a5 service&#x3D;registry</span><br><span class="line">blob eligible for deletion: sha256:21c83c5242199776c232920ddb58cfa2a46b17e42ed831ca9001c8dbc532d22d</span><br><span class="line">INFO[0000] Deleting blob: &#x2F;docker&#x2F;registry&#x2F;v2&#x2F;blobs&#x2F;sha256&#x2F;21&#x2F;21c83c5242199776c232920ddb58cfa2a46b17e42ed831ca9001c8dbc532d22d  go.version&#x3D;go1.11.2 instance.id&#x3D;3ad15352-7cb7-46ca-a5ae-e5e16c6485a5 service&#x3D;registry</span><br></pre></td></tr></table></figure><h4 id="GC-之后的-registry-存储目录长什么样？"><a href="#GC-之后的-registry-存储目录长什么样？" class="headerlink" title="GC 之后的 registry 存储目录长什么样？"></a>GC 之后的 registry 存储目录长什么样？</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">╭─root@sg-02 /var/lib/registry/docker/registry/v2</span><br><span class="line">╰─# tree                                                                                     </span><br><span class="line">.</span><br><span class="line">├── blobs</span><br><span class="line">│   └── sha256</span><br><span class="line">│       ├── 21</span><br><span class="line">│       ├── 43</span><br><span class="line">│       │   └── 43e3995ee54ac008271bfcf2d8ac7278c33f4c5e83d2f02bfcddd350034e3357</span><br><span class="line">│       │       └── data</span><br><span class="line">│       ├── 7c</span><br><span class="line">│       │   └── 7c459309b9a5ec1683ef3b137f39ce5888f5ad0384e488ad73c94e0243bc77d4</span><br><span class="line">│       │       └── data</span><br><span class="line">│       ├── 85</span><br><span class="line">│       │   └── 8559a31e96f442f2c7b6da49d6c84705f98a39d8be10b3f5f14821d0ee8417df</span><br><span class="line">│       │       └── data</span><br><span class="line">│       ├── a1</span><br><span class="line">│       └── be</span><br><span class="line">└── repositories</span><br><span class="line">    └── library</span><br><span class="line">        ├── alpine</span><br><span class="line">        │   ├── _layers</span><br><span class="line">        │   │   └── sha256</span><br><span class="line">        │   │       ├── 21c83c5242199776c232920ddb58cfa2a46b17e42ed831ca9001c8dbc532d22d</span><br><span class="line">        │   │       │   └── link</span><br><span class="line">        │   │       └── be4e4bea2c2e15b403bb321562e78ea84b501fb41497472e91ecb41504e8a27c</span><br><span class="line">        │   │           └── link</span><br><span class="line">        │   ├── _manifests</span><br><span class="line">        │   │   ├── revisions</span><br><span class="line">        │   │   │   └── sha256</span><br><span class="line">        │   │   │       └── a143f3ba578f79e2c7b3022c488e6e12a35836cd4a6eb9e363d7f3a07d848590</span><br><span class="line">        │   │   └── tags</span><br><span class="line">        │   └── _uploads</span><br><span class="line">        └── debian</span><br><span class="line">            ├── _layers</span><br><span class="line">            │   └── sha256</span><br><span class="line">            │       ├── 43e3995ee54ac008271bfcf2d8ac7278c33f4c5e83d2f02bfcddd350034e3357</span><br><span class="line">            │       │   └── link</span><br><span class="line">            │       └── 8559a31e96f442f2c7b6da49d6c84705f98a39d8be10b3f5f14821d0ee8417df</span><br><span class="line">            │           └── link</span><br><span class="line">            ├── _manifests</span><br><span class="line">            │   ├── revisions</span><br><span class="line">            │   │   └── sha256</span><br><span class="line">            │   │       └── 7c459309b9a5ec1683ef3b137f39ce5888f5ad0384e488ad73c94e0243bc77d4</span><br><span class="line">            │   │           └── link</span><br><span class="line">            │   └── tags</span><br><span class="line">            │       └── buster-slim</span><br><span class="line">            │           ├── current</span><br><span class="line">            │           │   └── link</span><br><span class="line">            │           └── index</span><br><span class="line">            │               └── sha256</span><br><span class="line">            │                   └── 7c459309b9a5ec1683ef3b137f39ce5888f5ad0384e488ad73c94e0243bc77d4</span><br><span class="line">            │                       └── link</span><br><span class="line">            └── _uploads</span><br><span class="line"></span><br><span class="line">40 directories, 10 files</span><br></pre></td></tr></table></figure><p>根据 GC 后的 registry 存储目录我们可以看到，原本 blobs 目录下有 6 个 data 文件，现在已经变成了 3 个，alpine:3.10 这个镜像相关的 layer、config、manifest 这三个文件都已经被 GC 掉了。但是在 repositories 目录下，该镜像的 _layers 下的 link 文件依旧存在🤔。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>总结以上，用下面这三张图片就能直观地理解这些过程啦。</p><h4 id="delete-镜像之前的-registry-存储目录结构"><a href="#delete-镜像之前的-registry-存储目录结构" class="headerlink" title="delete 镜像之前的 registry 存储目录结构"></a>delete 镜像之前的 registry 存储目录结构</h4><p><img src="img/registry-gc-1.jpeg" alt="REGISTRY"></p><h4 id="delete-镜像之后的-registry-存储目录结构"><a href="#delete-镜像之后的-registry-存储目录结构" class="headerlink" title="delete 镜像之后的 registry 存储目录结构"></a>delete 镜像之后的 registry 存储目录结构</h4><p><img src="img/registry-gc-2.jpeg" alt=""></p><h4 id="GC-之后的-registry-存储目录结构"><a href="#GC-之后的-registry-存储目录结构" class="headerlink" title="GC 之后的 registry 存储目录结构"></a>GC 之后的 registry 存储目录结构</h4><p><img src="img/registry-gc-3.jpeg" alt=""></p><h3 id="shell-大法好！"><a href="#shell-大法好！" class="headerlink" title="shell 大法好！"></a>shell 大法好！</h3><p>根据上面的 GC 原理和过程，实际上我们可以使用不到 25 行的 shell 脚本来实现一个粗暴的  GC 😂</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">set -x</span><br><span class="line">v2=$1</span><br><span class="line">v2=$&#123;v2:="/var/lib/registry/docker/registry/v2"&#125;</span><br><span class="line">cd $&#123;v2&#125;</span><br><span class="line">all_blobs=/tmp/all_blobs.list</span><br><span class="line">: &gt; $&#123;all_blobs&#125;</span><br><span class="line"><span class="meta">#</span><span class="bash"> marking all the blob by all images manifest</span></span><br><span class="line">for tag in $(find repositories -name "link" | grep current)</span><br><span class="line">do</span><br><span class="line">    link=$(cat $&#123;tag&#125; | cut -c8-71)</span><br><span class="line">    mfs=blobs/sha256/$&#123;link:0:2&#125;/$&#123;link&#125;/data</span><br><span class="line">    echo $&#123;link&#125; &gt;&gt; $&#123;all_blobs&#125;</span><br><span class="line">    grep sha256 $&#123;mfs&#125; |cut -d "\"" -f4 | cut -c8-71 &gt;&gt; $&#123;all_blobs&#125;</span><br><span class="line">done</span><br><span class="line"><span class="meta">#</span><span class="bash"> delete blob <span class="keyword">if</span> the blob doesn<span class="string">'t exist in all_blobs.list</span></span></span><br><span class="line">for blob in $(find blobs -name "data" | cut -d "/" -f4)</span><br><span class="line">do</span><br><span class="line">    grep $&#123;blob&#125; $&#123;all_blobs&#125;</span><br><span class="line">    if [[ $? != 0 ]]; then</span><br><span class="line">    rm -rf blobs/sha256/$&#123;blob:0:2&#125;/$&#123;blob&#125;</span><br><span class="line">    fi</span><br><span class="line">done</span><br></pre></td></tr></table></figure><ol><li><p>遍历所有镜像的 tag 下最新的 link 文件指向的 manifest</p></li><li><p>根据 manifest 文件 grep 出 sha256 值的 image config 和 layer 文件，保存到 <code>all_blobs.list</code> 文件中。</p></li><li><p>使用 <code>find</code> 和 <code>for</code> 循环遍历所有 blobs 下的的 data 文件，判断它是否在 <code>all_blobs.list</code> 中，不再的话直接 <code>rm -rf</code> 干掉它！</p></li><li><p>最后重启一下 registry 容器。</p></li></ol><p>就是这么简单粗暴！哈哈，<code>rm -rf</code> 用起来真爽（手动滑稽 。如果还想把这个脚本再优化一下的话，可以将 所有的 blob 的 sha256 值截取前 12 位保存在一个变量中。通过 <code>=~</code> 来判断包含关系来替代 grep。</p><h2 id="踩坑！"><a href="#踩坑！" class="headerlink" title="踩坑！"></a>踩坑！</h2><h3 id="The-operation-is-unsupported-405-Method-Not-Allowed"><a href="#The-operation-is-unsupported-405-Method-Not-Allowed" class="headerlink" title="The operation is unsupported.(405 Method Not Allowed)"></a>The operation is unsupported.(405 Method Not Allowed)</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">╭─root@sg-02 ~/registry</span><br><span class="line">╰─# skopeo delete docker://localhost/library/alpine:3.10 --debug</span><br><span class="line">DEBU[0000] Returning credentials from /run/containers/0/auth.json</span><br><span class="line">DEBU[0000] Using registries.d directory /etc/containers/registries.d for sigstore configuration</span><br><span class="line">DEBU[0000]  No signature storage configuration found for localhost/library/alpine:3.10</span><br><span class="line">DEBU[0000] Looking for TLS certificates and private keys in /etc/docker/certs.d/localhost</span><br><span class="line">DEBU[0000] Loading registries configuration "/etc/containers/registries.conf"</span><br><span class="line">DEBU[0000] GET https://localhost/v2/</span><br><span class="line">DEBU[0000] Ping https://localhost/v2/ status 401</span><br><span class="line">DEBU[0000] GET https://localhost/v2/library/alpine/manifests/3.10</span><br><span class="line">DEBU[0000] DELETE https://localhost/v2/library/alpine/manifests/sha256:a143f3ba578f79e2c7b3022c488e6e12a35836cd4a6eb9e363d7f3a07d848590</span><br><span class="line">FATA[0000] Failed to delete /v2/library/alpine/manifests/sha256:a143f3ba578f79e2c7b3022c488e6e12a35836cd4a6eb9e363d7f3a07d848590: &#123;"errors":[&#123;"code":"UNSUPPORTED","message":"The operation is unsupported."&#125;]&#125;</span><br><span class="line"> (405 Method Not Allowed)</span><br></pre></td></tr></table></figure><p>在 registry 容器启动的时候添加变量开启 <code>REGISTRY_STORAGE_DELETE_ENABLED=true</code> 即可，或者修改容器内的配置文件 <code>/etc/docker/registry/config.yml</code>，在 <code>storage:</code> 下添加上 下面的参数。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">storage:</span></span><br><span class="line">  <span class="attr">delete:</span></span><br><span class="line">    <span class="attr">enabled:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><h3 id="GC-不彻底，残留-link-文件"><a href="#GC-不彻底，残留-link-文件" class="headerlink" title="GC 不彻底，残留 link 文件"></a>GC 不彻底，残留 link 文件</h3><p>从上面我们可以得知，registry 无论是删除一个镜像还是进行 GC 操作，都不会删除 repositories 目录下的 <code>_layers/sha256/digest/link</code> 文件，在进行 GC 之后，一些镜像 layer 和 config 文件已经在 blobs 存储目录下删除了，但指向它的 layers/link 文件依旧保存在 repositories 目录下🙄。GitHub 上有个 PR <a href="https://github.com/docker/distribution/issues/2288" target="_blank" rel="noopener">Remove the layer’s link by garbage-collect #2288</a> 就是专门来清理这些无用的 layer link 文件的，最早的一个是三年前的，但是还没有合并😂。</p><p>留着已经被 GC 掉 blob 的 layer link 也没啥用，使用下面这个脚本就能删掉无用的 layer link 文件。根据 layer link 的值去 blobs 目录下看看该文件是否存在，不存在的话就 rm -rf 掉，存在的话就留着。这样就能清理干净啦😁。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line">cd /var/lib/registry/docker/registry/v2</span><br><span class="line">for link in $(find repositories -name "link" | grep -E "_layers")</span><br><span class="line">do</span><br><span class="line">    link_sha256=$(echo $&#123;link&#125; | awk -F "/" '&#123;print $6&#125;')</span><br><span class="line">    link_short=$(echo $&#123;link&#125; | awk -F "/" '&#123;print $6&#125;' | cut -c1-2)</span><br><span class="line">    data_file=blobs/sha256/$&#123;link_short&#125;/$&#123;link_sha256&#125;</span><br><span class="line">    dir_link=$(echo $&#123;link&#125; | sed s'/link//g')</span><br><span class="line">    if [[ ! -d "$&#123;data_file&#125;" ]]; then</span><br><span class="line">    rm -rf $&#123;dir_link&#125;</span><br><span class="line">    fi</span><br><span class="line">done</span><br></pre></td></tr></table></figure><h3 id="GC-后要重启！"><a href="#GC-后要重启！" class="headerlink" title="GC 后要重启！"></a>GC 后要重启！</h3><p>GC 之后一定要重启，因为 registry 容器缓存了镜像 layer 的信息，当删除掉一个镜像 A ，后边 GC 掉该镜像的 layer 之后，如果不重启 registry 容器，当重新 PUSH 镜像 A 的时候就会提示镜像 layer 已经存在，不会重新上传 layer ，但实际上已经被 GC 掉了，最终会导致镜像 A 不完整，无法 pull 到该镜像。</p><h3 id="GC-不是事务性操作"><a href="#GC-不是事务性操作" class="headerlink" title="GC 不是事务性操作"></a>GC 不是事务性操作</h3><p>GC 的时候最好暂停 PUSH 镜像，以免把正在上传的镜像 layer 给 GC 掉。</p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;blockquote&gt;
&lt;p&gt;好久没更新博客了，在家摸鱼赶紧来
        
      
    
    </summary>
    
    
      <category term="技术" scheme="https://blog.k8s.li/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="docker" scheme="https://blog.k8s.li/tags/docker/"/>
    
      <category term="registry" scheme="https://blog.k8s.li/tags/registry/"/>
    
      <category term="镜像" scheme="https://blog.k8s.li/tags/%E9%95%9C%E5%83%8F/"/>
    
  </entry>
  
  <entry>
    <title>2020 阅读记录（二）</title>
    <link href="https://blog.k8s.li/Q2-reading.html"/>
    <id>https://blog.k8s.li/Q2-reading.html</id>
    <published>2020-06-19T16:00:00.000Z</published>
    <updated>2020-06-29T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>  見證了這段歷史也越來越能體會感觸到：當今世界，專制的權力還在奴役人的自由；極權的統治還在控制人的思想；習慣性的不思考和無判斷將人傾向愚昧和自我欺騙，於是我們共同造就了這台極權專制的機器，我們服從這老大哥的思想，一切都要政治正確。</p></blockquote><p>悄无声息地渡过了 2020 年的一半，和上一篇读书记录<a href="https://blog.k8s.li/spring-reading-note.html">《春季读书笔记》</a>一样，这篇也是个人回顾一下最近三个月的读书记录，在此做个总结，以此来督促自己每天都要坚持阅读，坚持记录下去。</p><h3 id="在读"><a href="#在读" class="headerlink" title="在读"></a>在读</h3><ul><li>布拉格精神</li><li>大话存储</li><li>生命通史</li><li>徐贲文集</li><li>通往尊严的公共生活</li></ul><h3 id="2020-读完"><a href="#2020-读完" class="headerlink" title="2020 读完"></a>2020 读完</h3><p>回顾这大半年来一共完整读完了 48 本书😂</p><table><thead><tr><th align="center">书名</th><th align="center">作者</th><th align="center">时间</th><th align="center">阅读时长</th></tr></thead><tbody><tr><td align="center">论人类不平等的起源和基础</td><td align="center">[法]让-雅克·卢梭</td><td align="center">01-01</td><td align="center">5h</td></tr><tr><td align="center">社会主义：经济学与社会学的分析</td><td align="center">[奥] 路德维希·冯·米瑟斯</td><td align="center">01-01</td><td align="center">10h</td></tr><tr><td align="center">心理测量者</td><td align="center">[日]深真见</td><td align="center">01-03</td><td align="center">6h</td></tr><tr><td align="center">论革命</td><td align="center">[德] 汉娜·阿伦特</td><td align="center">01-05</td><td align="center">12h</td></tr><tr><td align="center">新常识：一党专政的性质和后果</td><td align="center">张雪忠</td><td align="center">01-15</td><td align="center">4h</td></tr><tr><td align="center">论科学与艺术</td><td align="center">[法]让-雅克·卢梭</td><td align="center">01-21</td><td align="center">2h</td></tr><tr><td align="center">地球脉动：前所未见的自然之美</td><td align="center">[英]阿拉斯泰尔·福瑟吉尔</td><td align="center">01-22</td><td align="center">2h</td></tr><tr><td align="center">社会契约论 (译林人文精选)</td><td align="center">[法]让-雅克·卢梭</td><td align="center">01-23</td><td align="center">4h</td></tr><tr><td align="center">中国国家治理的制度逻辑：一个组织学研究</td><td align="center">周雪光</td><td align="center">01-28</td><td align="center">8h</td></tr><tr><td align="center">病毒星球</td><td align="center">[美]卡尔·齐默</td><td align="center">01-28</td><td align="center">4h</td></tr><tr><td align="center">病毒来袭</td><td align="center">[美]内森•沃尔夫</td><td align="center">01-29</td><td align="center">2h</td></tr><tr><td align="center">血疫：埃博拉的故事</td><td align="center">理查德·普雷斯顿</td><td align="center">02-01</td><td align="center">8h</td></tr><tr><td align="center">远古的葱茏：古植物王国</td><td align="center">周志炎</td><td align="center">02-05</td><td align="center">4h</td></tr><tr><td align="center">古生物学简明教程</td><td align="center">朱才伐</td><td align="center">02-06</td><td align="center">3h</td></tr><tr><td align="center">上帝造人有多难：生命的密钥</td><td align="center">朱钦士</td><td align="center">02-07</td><td align="center">6h</td></tr><tr><td align="center">朱钦士的个人博客</td><td align="center">朱钦士</td><td align="center">02-08</td><td align="center">8h</td></tr><tr><td align="center">远古的辉煌：生物大幅射</td><td align="center">戎嘉余</td><td align="center">02-13</td><td align="center">6h</td></tr><tr><td align="center">牛津通识读本：地球</td><td align="center">[英]马丁·雷德芬</td><td align="center">02-13</td><td align="center">6h</td></tr><tr><td align="center">生命活动的摇篮：细胞</td><td align="center">王耀发</td><td align="center">02-16</td><td align="center">4h</td></tr><tr><td align="center">地球脉动2：奇迹世界</td><td align="center">胡·科里</td><td align="center">02-24</td><td align="center">3h</td></tr><tr><td align="center">一想到还有95<em>%的</em>问题留给人类，我就放心了</td><td align="center">豪尔赫•陈</td><td align="center">03-07</td><td align="center">4h</td></tr><tr><td align="center">历史的终结及最后之人</td><td align="center">[美]弗朗西斯·福山</td><td align="center">03-03</td><td align="center">10h</td></tr><tr><td align="center">我無罪：劉曉波傳</td><td align="center">余杰</td><td align="center">03-13</td><td align="center">8h</td></tr><tr><td align="center">神奇的生物化学</td><td align="center">神奇的生物化学</td><td align="center">03-23</td><td align="center">4h</td></tr><tr><td align="center">费马最终定理</td><td align="center">[日]日冲樱皮</td><td align="center">03-26</td><td align="center">3h</td></tr><tr><td align="center">被讨厌的勇气</td><td align="center">[日]岸見一郎</td><td align="center">03-28</td><td align="center">4h</td></tr><tr><td align="center">鸟瞰古文明</td><td align="center">[法] 让-克劳德·戈尔万</td><td align="center">04-03</td><td align="center">8h</td></tr><tr><td align="center">编码：隐匿在计算机软硬件背后的语言</td><td align="center">[美]查尔斯•佩措尔德</td><td align="center">04-10</td><td align="center">8h</td></tr><tr><td align="center">自由宪章</td><td align="center">[奥]弗里德里希·哈耶克</td><td align="center">04-01</td><td align="center">16h</td></tr><tr><td align="center">我们最幸福：北韩人民的真实生活</td><td align="center">[美]芭芭拉·德米克</td><td align="center">04-23</td><td align="center">6h</td></tr><tr><td align="center">哈维尔文集</td><td align="center">[捷克]哈维尔</td><td align="center">04-24</td><td align="center">8h</td></tr><tr><td align="center">布达佩斯往事：冷战时期一个东欧家庭的秘密档案</td><td align="center">[美] 卡蒂·马顿</td><td align="center">04-26</td><td align="center">6h</td></tr><tr><td align="center">致命的自负：社会主义的谬误</td><td align="center">[奥]弗里德里希·哈耶克</td><td align="center">05-01</td><td align="center">10h</td></tr><tr><td align="center">地球的演变故事</td><td align="center">姚建明</td><td align="center">05-02</td><td align="center">4h</td></tr><tr><td align="center">图解科技译丛：漫画元素118</td><td align="center">[日]斋腾胜裕</td><td align="center">05-02</td><td align="center">2h</td></tr><tr><td align="center">颓废与沉默：透视犬儒文化</td><td align="center">徐贲</td><td align="center">05-02</td><td align="center">4h</td></tr><tr><td align="center">统治与教育：从国民到公民</td><td align="center">徐贲</td><td align="center">05-03</td><td align="center">8h</td></tr><tr><td align="center">三角距离无限为零1-4</td><td align="center">[日]岬鹭宫</td><td align="center">05-05</td><td align="center">10h</td></tr><tr><td align="center">被禁锢的头脑</td><td align="center">[立]切斯瓦夫·米沃什</td><td align="center">05-05</td><td align="center">6h</td></tr><tr><td align="center">人以什么理由来记忆</td><td align="center">徐贲</td><td align="center">05-02</td><td align="center">10h</td></tr><tr><td align="center">宇宙从一粒尘埃开始：9堂极简宇宙课</td><td align="center">[英]布莱恩•考克斯</td><td align="center">05-25</td><td align="center">5h</td></tr><tr><td align="center">通往尊严的公共生活</td><td align="center">徐贲</td><td align="center">05-25</td><td align="center">10h</td></tr><tr><td align="center">宇宙从起源到未来</td><td align="center">[[美]约翰·布罗克曼</td><td align="center">06-18</td><td align="center">5h</td></tr><tr><td align="center">kubernetes 网络权威指南</td><td align="center">杜军</td><td align="center">06-20</td><td align="center">6h</td></tr><tr><td align="center">Linux开源网络全栈详解：从DPDK到OpenFlow</td><td align="center">英特尔亚太研发有限公司</td><td align="center">06-20</td><td align="center">3h</td></tr><tr><td align="center">大话处理器</td><td align="center">万木杨</td><td align="center">06-21</td><td align="center">1h</td></tr><tr><td align="center">三角的距离无限为零5</td><td align="center">[日]岬鹭宫</td><td align="center">06-24</td><td align="center">2.5h</td></tr></tbody></table><h2 id="4-月"><a href="#4-月" class="headerlink" title="4 月"></a>4 月</h2><h3 id="自由宪章"><a href="#自由宪章" class="headerlink" title="自由宪章"></a>自由宪章</h3><p>《自由宪章》是这大半年来最难啃的书，哈耶克的书对于木子这种菜鸡来说读起来就是头大啊😂，和我在一月份读的《自由与繁荣的国度》味道一样。</p><h4 id="作者"><a href="#作者" class="headerlink" title="作者"></a>作者</h4><p><strong>弗里德里希·哈耶克</strong>（Friedrich A·Hayek）是奥地利经济学家和政治哲学家。身为1974年的诺贝尔经济学奖的获得者之一，他主张以市场为基础的自由资本主义和有限的政府。此外，他还于1991年获得了总统自由勋章。</p><p>在这本书中，单单法治概念的含义，哈耶克本人就罗列引用了 30 多本著作！可见当时哈耶克本人的学术水平相当高滴！</p><blockquote><ul><li>《法律与秩序》</li><li>《教会、国家与研究》</li><li>《新利维坦》</li><li>《美国的行政司法及法律的最高地位》</li><li>《宪政政治与民主》</li><li>《政治与行政》</li><li>《现代共同体的基础》</li><li>《对良好社会原则探索》</li><li>《宪政与变动中的世界》</li><li>《民主国家与集权国家》</li><li>《行政与法治》</li><li>《现代政治诸要素》</li><li>《法治：保守的伦敦律师公会与工会协会进行的研究》</li><li>《法律：有关民主之中的权威的理论的论文》</li><li>《个人主义与法律》</li><li>《宪法学》</li><li>《宪法之保卫者》</li><li>《法治国家，还是独裁？》</li><li>《政治学》《法治国家有效性的界限》</li><li>《法治国家还是威权国家？》</li><li>《自由主义作为一种意识形态的没落》</li><li>《波恩基本法中的社会法治国家概念》</li><li>《作为刑法最新发展的中心概念的法治国家》</li><li>《法、国家、经济》</li><li>《从法律国家到法官国家》</li><li>《瑞士联邦国家法》</li><li>《德国行政法的体制》</li><li>《瑞士联邦法院的宪法管辖权》</li><li>《法制国家民主制》</li><li>《美国与瑞士宪法管辖权的政治意识形态上与法律意识形态上的根据》</li><li>《作为国家根本法律秩序的宪法》</li><li>《瑞士法律中的公民自由》</li><li>《法治国家的秩序》</li><li>《1955年雅典国际法学家大会报告》</li></ul></blockquote><h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p>虽然这本书早在1960年就已出版，但其深刻的见解时至今日仍然盛行。他所倡导的经济和个人自由理论适用于很多当今的热议话题，从物价上涨到累进税制。在书中，作者对比了建立有限政府的益处和实施中央计划经济的弊端。限制政府权力将会有利于提升个体能动性和创造力，进而推动人类知识和文明的进步。哈耶克论证了法律法规、合法程序和宪法政府对自由的积极作用，并指出个人自由所面临的严峻的潜在威胁。以下是本书的几个要点：</p><ul><li>有限的政府通过激发人的个体主动性来推动社会的进步。</li><li>财产权利和个人自由这一宽泛的政治概念有着密切的联系。</li><li>只有那些与约定俗成的道德观念相符的法律才能经得住时间的考验。</li><li>多数裁定原则自然很有必要，但仅仅依靠它还不足以建立一个自由社会。</li><li>宪政是美国追求自由事业最有力的武器。</li><li>社会主义是一种失败的政府形式，但它至今依然影响着公共政策的制定。</li><li>通过收入再分配来缓解贫困会带来意想不到的负面效应，比如“福利国家”的出现。</li><li>基于市场状况的奖励制度比基于个人优点的奖励制度更加有效。</li><li>比起通货紧缩，政府更倾向于通货膨胀。但过度的膨胀会威胁到自由。</li><li>限制政府对教育的干涉有利于社会保持思想活力。</li></ul><h3 id="我们最幸福：北朝鲜人民的真实生活"><a href="#我们最幸福：北朝鲜人民的真实生活" class="headerlink" title="我们最幸福：北朝鲜人民的真实生活"></a>我们最幸福：北朝鲜人民的真实生活</h3><p>读完这本书就感觉到当今的朝鲜就如上世纪的中国<strong>十年文革基础上再加上三年大饥荒</strong>一样悲惨，这种纪实类的写作和《切尔诺贝利的悲鸣》以及《十个人的一百年》一样，沉重的历史感。我们都是被共产主义的极权专制独裁暴政统治蹂躏过的民族，感同身受的历史记忆，彷佛就在映射着当下一样，让人有种身在历史中感受它的存在一样。看看下面这几段摘抄，和文革时期的我们以及当下的我们又是何其的相似：</p><blockquote><p>  由于北韩太贫困，电力供应不足以维持电子监控，所以国家安全必须仰赖人力情报——告密。报纸偶尔会出现文情并茂的报导，描述勇敢的孩子纠举父母的违法行为。由此看来，因发表对当局不满的言论而被邻居告发也就不觉得奇怪了。</p></blockquote><blockquote><p>  北韩人学会吞下自己的自尊与捏住自己的鼻子。他们从农村动物的排泄物中挑出来未被消化的玉米粒。船厂工人发展处一种技术，原本储存粮食的货仓底部残留着腐臭黏腻的东西，他们将这些东西刮起了，放在地面晾干，从中可以拾取一点未烹煮过的稻米与其他可食用的谷物。</p></blockquote><blockquote><p>  孩子睡觉时要提防其他帮派偷走他们的少许余粮。此外也流传着许多诡异的故事，提到成年人把孩子当成猎物。不只用来发泄性欲，也当成食物。金赫听说有人对孩子下毒，杀死孩子，大卸八块吃下肚。在火车站后面，靠近铁道边，有些小贩在小火炉上煮汤煮面，据说浮在上面的灰色肉块就是人肉。</p></blockquote><blockquote><p>  各级督导例行性地捏造农业生产与工业产出的统计数据，因为他们不敢告诉长官实情。为了圆谎，只好说更多的谎，从基层传达到高层的讯息没有一件是真的，所以可以想见金日成本人恐怕完全不知道经济的状况有多糟。</p></blockquote><h4 id="作者-1"><a href="#作者-1" class="headerlink" title="作者"></a>作者</h4><p><strong>芭芭拉·德米克</strong></p><h4 id="别笑，我们也很幸福"><a href="#别笑，我们也很幸福" class="headerlink" title="别笑，我们也很幸福"></a>别笑，我们也很幸福</h4><p><img src="img/2020-06-27_17-12-28.jpg" alt="img"></p><p>看完这本书也可以去看另外一本书《黄长烨回忆录》</p><blockquote><p>  我在一个充满了虚伪和欺骗的社会生活了很久，一开始我以为虚伪和欺骗是为了解放勤劳的人民大众，即为了取得与剥削阶级斗争的胜利而必须采用的手段。 但是，后来我意识到，虚伪与欺骗已经与独裁者的利己主义结合起来。独裁者的利己主义集中体现为个人崇拜思想，北朝鲜是全世界个人崇拜和阶级主义最严重的国家。 我身处北朝鲜统治体制的中枢，是整个虚伪宣传的动员和组织者（作者是北朝鲜马克思主义和意识形态领域的权威，译者注）。虚伪曾经一度取代真理占据一个学者的良心，与学者的灵魂对立。 我（在书中）不会因为讨厌我和让我讨厌的人而夸大、丑化事实，也不会因为爱我和让我爱的人而毫无原则的美化现实。 历史就摆在那里，对历史来说，歪曲是最大的犯罪。我不认为我说的就是绝对（正确），我反倒更希望读者带着批判的态度来阅读本书。 对于与大众利益毫无关系的个人生活，或者有干涉它国内政之嫌的言论，我会尽量避免。来到韩国之后，我在努力学习新事物，开始新的体验。 但是，我已经老了，学到的新知识和新经验对我思考方法的影响有限。在本书中，我还是想将在北朝鲜经历过的、体验过的写出来。</p></blockquote><h3 id="哈维尔文集"><a href="#哈维尔文集" class="headerlink" title="哈维尔文集"></a>哈维尔文集</h3><p>三月份在读《我无罪：刘晓波传》的时候意外收获到的这本书，刘晓波和哈维尔至于捷克</p><p>另外推荐阅读李慎之先生为这本书题的序的<a href="http://www.aisixiang.com/data/1724.html" target="_blank" rel="noopener">《无权者的权力和反政治的政治：后极权主义时代的人生哲学》</a></p><h3 id="布达佩斯往事：冷战时期一个东欧家庭的秘密档案"><a href="#布达佩斯往事：冷战时期一个东欧家庭的秘密档案" class="headerlink" title="布达佩斯往事：冷战时期一个东欧家庭的秘密档案"></a>布达佩斯往事：冷战时期一个东欧家庭的秘密档案</h3><p>在二月份的时候剩余价值里的一期节目中提到过《布达佩斯往事：冷战时期一个东欧家庭的秘密档案》这本书，而这本书的序言正是徐贲老师写的，后来陆续又读了五六本徐贲老师的书。</p><h4 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h4><blockquote><p>  本书通过冷战时期匈牙利秘密警察长达20年的档案，所揭开的是一部隐藏了几十年的家庭历史和时代侧记。</p><p>  冷战时期，苏联集团中的匈牙利，秘密警察通过庞大的告密网，试图全面渗透控制匈牙利的政治生活。作者的父母原是匈牙利著名记者，他们的报道是西方了解匈牙利的重要信息来源。因此他们被视为“人民的敌人”，长期受秘密警察的监控，终因叛国和间谍罪而先后入狱。一家移居美国后，匈牙利政府却又异想天开地试图招募他们当间谍，而美国也对他们进行了几年的监控。书中不只还原了马顿夫妇被告密者包围的经历和遭遇，他们的抗争、坚守、脆弱和勇气，也展现了他们情感和内心的矛盾——夫妻之间相互的感情背叛与灾难中的支撑，父母子女之间的爱与亲情，人性的坚强与软弱，从而使得这本书更为丰富、复杂，具有血肉。</p></blockquote><h2 id="5-月"><a href="#5-月" class="headerlink" title="5 月"></a>5 月</h2><h3 id="致命的自负：社会主义的谬误"><a href="#致命的自负：社会主义的谬误" class="headerlink" title="致命的自负：社会主义的谬误"></a>致命的自负：社会主义的谬误</h3><p>地球的演变故事</p><h3 id="图解科技译丛：漫画元素118"><a href="#图解科技译丛：漫画元素118" class="headerlink" title="图解科技译丛：漫画元素118"></a>图解科技译丛：漫画元素118</h3><h3 id="人以什么理由来记忆"><a href="#人以什么理由来记忆" class="headerlink" title="人以什么理由来记忆"></a>人以什么理由来记忆</h3><h4 id="作者-2"><a href="#作者-2" class="headerlink" title="作者"></a>作者</h4><p><strong>徐贲</strong></p><h4 id="简介-2"><a href="#简介-2" class="headerlink" title="简介"></a>简介</h4><p>之前我也读过他的论文 <a href="https://matters.news/@philosophia1979/徐贲-中国的-新极权主义-及其末世景象-野兽荐读-bafyreiegbg5tti3ljc7newaah5wp36ncf7fvb2oaovd6p7elc4xqfhbcd4" target="_blank" rel="noopener">《中国的“新极权主义”及其末世景象》</a>) ，所以对他关注的内容也有所了解。总感觉这本书更像是阿伦特、加缪、萨特、哈维尔等人对于极权主义著作及思想的解析。就像在剩余价值里提到的，我们读这些历史的时候，而当下就仿佛置身于历史之中一样。书中记录苏联和纳粹德国极权统治改造人性的言论审查、秘密警察、集中营、无言论自由和新闻自由、党媒愚民洗脑等，这些描述极权统治的历史，再看一看当下，我们不正置身于其中吗？</p><ul><li><strong>比瘟疫更可怕的是謊言，比災難更可怕的是遺忘</strong></li></ul><p><img src="img/20200618225156768.png" alt="image-20200618225156768"></p><p><img src="img/2020-06-09_15-46-37.jpg" alt=""></p><p><img src="img/2020-06-09_15-46-372.jpg" alt=""></p><p><img src="img/2020-06-09_15-46-373.jpg" alt=""></p><p>诺贝尔和平奖得主 <a href="https://www.rfa.org/mandarin/pinglun/liuxiaobopinglunzhuanji/64-06022008113911.html" target="_blank" rel="noopener">刘晓波曾经说过，</a>“遗忘罪恶历史的民族，决不会有真正的未来。”</p><blockquote><p>  “对于一个民族来说，记忆对遗忘的抗拒，首先是知识精英的良知对强权的抗拒。否则的话，我们非但无法把六四大屠杀的真相、进而把独裁制度的罪恶变成民众的历史常识，也无法防止类似大悲剧的重演。难道中国历史在专制下恶性循环的时间还不够长吗？”</p></blockquote><p>最终，因为遗忘罪恶历史而受害的，只会是中国人自己。</p><p>就像刘晓波所说的那样：</p><p><strong>“用民间记忆抗拒官方的强制遗忘，就是为我们这个历尽苦难的民族保存记忆和良知。”</strong></p><blockquote><p>  人民“获得”的“国家历史”是那些记录下来，或者说被权力允许记录下来的“事件”，而那些没有被记录或不被允许记录下来的事件，就此被武断地从国家历史中剔除，也从族群记忆中排斥出去了。因此，对历史真实保持沉默，虽然是从改写历史开始，但最终却表现为族群的集体忘却。每个沉默的个人，每个在族群中按权力意志来记忆或忘却的人，都参与在以沉默代替真实，以沉默维持谎言的共谋之中。</p></blockquote><h3 id="颓废与沉默：透视犬儒文化"><a href="#颓废与沉默：透视犬儒文化" class="headerlink" title="颓废与沉默：透视犬儒文化"></a>颓废与沉默：透视犬儒文化</h3><p>恰好读完这本书之后不久 B 站就上映了后浪洗脑宣传片，不料微博评论区也是翻车现场🤣</p><p><img src="img/2020-05-04_17-31-222.jpg" alt=""></p><p><img src="img/2020-05-04_17-31-223.jpg" alt=""></p><p>第一次听说到后浪的时候我就觉着，这类身居高位的犬儒知识份子，如胡锡进、胡鞍钢、金灿荣、张维为这类，为当权者歌功赞德、拍马溜须、谄媚献媚、阿谀奉承，这类人应该比任何人都清楚在这太平盛世的背后，抓捕了多少维权律师、迫害了多少异议人士、关押了多少公民记者、处分了多少直言教师。然这些知识分子、教授、专家在说假话，用所谓的”学术”来取悦和投靠权力和当权者,谋取私利，以貌似高深、渊博、精致的理论包装普通人用常识就能看穿的慌言，有的甚至还相当”富有创意”，善于”理论更新”,或有”理论建树”。</p><p>在政治意识形态主导一切,权力可以操控一切的社会里,不存在所谓的”独立学术”,尤其不存在独立的人文学术。一些知识分子因为不得已而做”纯学问”,是一种憋屈的学术”自宫”。权力的咸胁与利诱造就体制性的”学术义儒”,它往往是一种在清醒状态下的装傻——一面自嘲,一面配合体制,积极自我审査；一面咒骂,一面迎合体制的无理要求；一面鄙视不懂学术的顶头上司,一面顺从他们的领导权威；一面嘲笑,一面参与为官员授予各种真的假学位和假头衔。</p><blockquote><p>  阿伦特在1963年7月24日给友人卡斯贝尔（Gerhard Casper）的信里写道:”人们经常发现,洗脑欺骗最肯定的长期后果就是造成犬儒主义——绝对不相信任何事情可能是真的,哪怕是确有实据的真实,也照样不相信。换言之,完全用谎言来代替事实真相的结果不是人们会把谎言当作真实,或者真实会被当作为谎言,而是我们赖以在真实世界里存在的知觉会被完全摧毁。人类为了生存,必须具备基本知觉,其中就有对真和假的识别。”</p></blockquote><blockquote><p>  阿伦特认为,社会中的多数人集体投向犬儒主义,是因为政治权力长期用谎言来代替真实,大规模地对群众进行洗脑并欺骗他们。这是20世纪才有的统治方式,最典型的例子就是斯大林统治时期否认托洛茨基曾对俄罗斯革命有过任何贡献。阿伦特称此为”极权谎言”,它要编造的是一种完全虚假的,因此彻底颠覆真伪区别的”真实”。</p></blockquote><h4 id="犬儒主义"><a href="#犬儒主义" class="headerlink" title="犬儒主义"></a>犬儒主义</h4><ul><li>（1）娱乐至死（没有目标或信仰,得过且过）；</li><li>（2）看客心态（看穿、冷漠、围观,管了也没用,不如不管）；</li><li>（3）习惯性怀疑（上至政府,下至朋友,对谁都不信任,都不相信）；</li><li>（4）审丑心理（在一个是非不分的环境里,美丑、善恶、真假也无法辨别,何必要坚持真、善、美）；</li><li>（8）”鸵鸟心态”（多一事不如少一事,被宣传的现实反正是假的,不如”躲进小楼成一统”）;</li><li>（9）思考恐惧症（多思多惹事,有的是前车之鉴,你要我怎么说,我就怎么说,这才是安身保命之道）；</li><li>（11）炫富心态（看穿一些道德、理想、未来展望的虚妄,只有钱才是实在的,才是世人认可的唯一价值）；</li><li>（12）初老症（没有前途、没有未来、没有追求,过一天算一天,坐吃等死）；</li><li>（13）自虐心态（这个说法并不确实,因为一般人既非共产党又非体制,不是”自虐”,这种顾左右而言他的说法,明白人说糊涂话,既不诚实,也不真实,它本身就是犬儒主义的）。</li></ul><blockquote><p>  对犬儒的现代定义是有代表性的:一、挑刺、嘲笑、讽刺；二、不相信或装着不相信普通人接受的道德价值观和人类行为真诚的善良动机,把自私自利认作唯一可能的动机；轻蔑、鄙视、嘲讽的怀疑和不相信。</p></blockquote><p>刘晓波曾在 <a href="http://www.liu-xiaobo.org/blog/archives/12412" target="_blank" rel="noopener">刘晓波：在刀锋上行走——狱中读《布拉格精神》</a> 写过：</p><blockquote><p>  据克里玛的介绍，在前苏东极权下的捷克知识分子群体中，不仅出现了哈维尔这样的道义示范，而且有95％以上的人为了自由和良知而进行着各种形式的拒绝，只有不到5%的人甘愿堕落为卖身投靠者。这当然是让中国知识分子自觉羞愧的表现。我们没有捷克人那种清醒和坚韧，仅仅十年的时间，六四的伤口便被遗忘，这不光是因为官方的强制，也是民族灵魂的冷漠。知识分子群体不能以言行来洗刷耻辱，既源于外在的政治恐怖，更源于他们生命中洗刷耻辱的冲动已经死亡。</p></blockquote><h3 id="统治与教育：从国民到公民"><a href="#统治与教育：从国民到公民" class="headerlink" title="统治与教育：从国民到公民"></a>统治与教育：从国民到公民</h3><blockquote><p>  极权政体彻底控制与思想、言论、新闻有关的要害领域，教育是被管制得最严厉的领域之一，和宣传一样，被严格控制。这样的教育虽然与民主国家的教育一样被称为“教育”，但实际上已经成为政治权力控制国民思想和培养子民的工具。这与民主国家中学校教育作为公民社会文化机制的一部分，起到培养民主公民的作用，是完全不同的。</p></blockquote><blockquote><p>  纳粹统治德国，依靠的不仅是完全由纳粹控制和操纵的国家机器，政府、各级纳粹党组织、党卫军、冲锋队、警察等，而且更是无处不在的纳粹意识形态，它渗透到德国社会、文化、教育和家庭生活的每一个角落，确保纳粹政党成为德国主权的内核。正是由于纳粹政党实际上已经成为德国主权的内核，德国的国家主义才会按照纳粹的意志转变为符合纳粹党利益，并为它的利益服务的党国主义。</p></blockquote><blockquote><p>  在纳粹的极权统治制度中，学校进行的是一种由统治政党意识形态指挥的党化教育。这种党化教育渗透到教育的每一个环节之中，而在每一个环节中使这种党化意识形态顺利发生作用的正是无数直接从事教学工作的教师。党化教育迫使人们不断进行思想的相互纯洁和自我纯洁，它在课堂里发生之前，早就先已经在许多教师的头脑中发生了，并成为他们的思维和行为习惯。没有这样的教师，党化教育是不可能在学校里有效贯彻的。</p></blockquote><blockquote><p>  在极权国家里，国民必须有相同的正确表现，教师在学校里的行为被完全模式化了。教师们都忠于党，按党的要求去做，他们在学校的行为并不仅仅是“好教师”行为，同时也是“好国民”行为。当一个“好国民”，就是像所有其他国民一样对领袖、党和党国表现绝对的忠诚。“</p></blockquote><blockquote><p>  纳粹德国实行的是一种彻底的以国家主义为旗号的党化教育，这种教育从儿童开始，在课程、教学、教材、师生关系的每一个环节上都贯彻纳粹的极权统治原则。</p></blockquote><blockquote><p>  在《极权主义的起源》一书中，汉娜·阿伦特从极权主义原型的特点中概括出它成功统治的三大要素，它们分别是暴力和恐惧的统治，迫使人民成为相互隔绝的、无助无援的散沙个体，以及充分运用“组织”和“宣传”的力量。阿伦特亲身经历过她所思考的极权主义中最为成功的一种，那就是德国纳粹的极权。她对极权主义三要素的总结便是从她的直接经验中观察得出的。</p></blockquote><blockquote><p>  党的宣传要求新闻从“正面报道”，所以总是尽量不让坏消息曝光。它认为，坏消息不利于稳定人心，也可能被别人利用，所以，坏消息也成为一种不能泄露的“国家机密”。</p></blockquote><h3 id="三角的距离无限为零1-4"><a href="#三角的距离无限为零1-4" class="headerlink" title="三角的距离无限为零1-4"></a>三角的距离无限为零1-4</h3><h3 id="七堂极简物理课"><a href="#七堂极简物理课" class="headerlink" title="七堂极简物理课"></a>七堂极简物理课</h3><p>虽然被捧得很好，但觉着没啥好看的……🙄</p><h2 id="6-月"><a href="#6-月" class="headerlink" title="6 月"></a>6 月</h2><h3 id="被禁锢的头脑"><a href="#被禁锢的头脑" class="headerlink" title="被禁锢的头脑"></a>被禁锢的头脑</h3><h3 id="宇宙从一粒尘埃开始：9堂极简宇宙课"><a href="#宇宙从一粒尘埃开始：9堂极简宇宙课" class="headerlink" title="宇宙从一粒尘埃开始：9堂极简宇宙课"></a>宇宙从一粒尘埃开始：9堂极简宇宙课</h3><p>不错的天体物理学科普，简单讲了下大爆炸、暴涨、量子力学等知识，以及如何给地球称重量、如何测量天体之间的距离等。</p><h3 id="宇宙从起源到未来"><a href="#宇宙从起源到未来" class="headerlink" title="宇宙从起源到未来"></a>宇宙从起源到未来</h3><p>作者阵容很强</p><h3 id="kubernetes-网络权威指南"><a href="#kubernetes-网络权威指南" class="headerlink" title="kubernetes 网络权威指南"></a>kubernetes 网络权威指南</h3><p>这是一本技术干货，写作风格和博客极为相似，主要是讲了些 kubernetes 及其容器网路的底层原理，是容器网络里难得的中文资料，值得推荐。</p><h3 id="大话处理器"><a href="#大话处理器" class="headerlink" title="大话处理器"></a>大话处理器</h3><h3 id="Linux-开源网络全栈详解：从-DPDK-到-OpenFlow"><a href="#Linux-开源网络全栈详解：从-DPDK-到-OpenFlow" class="headerlink" title="Linux 开源网络全栈详解：从 DPDK 到 OpenFlow"></a>Linux 开源网络全栈详解：从 DPDK 到 OpenFlow</h3><h3 id="三角的距离无限为零5"><a href="#三角的距离无限为零5" class="headerlink" title="三角的距离无限为零5"></a>三角的距离无限为零5</h3>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;blockquote&gt;
&lt;p&gt; 
        
      
    
    </summary>
    
    
    
      <category term="life" scheme="https://blog.k8s.li/tags/life/"/>
    
  </entry>
  
  <entry>
    <title>深入浅出容器镜像的一生🤔</title>
    <link href="https://blog.k8s.li/Exploring-container-image.html"/>
    <id>https://blog.k8s.li/Exploring-container-image.html</id>
    <published>2020-06-13T16:00:00.000Z</published>
    <updated>2020-06-13T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<p>上周在写<a href="https://blog.k8s.li/skopeo.html">《镜像搬运工 skopeo 》</a> 的时候看了很多关于容器镜像相关的博客，从大佬们那里偷偷学了不少知识，对容器镜像有了一点点深入的了解。这周末一个人闲着宅在家里没事就把最近所学的知识整理一下分享出来，供大家一起来食用。内容比较多，耐心看完的话，还是能收获一些<del>没用的</del>知识滴😂。</p><h2 id="更新记录"><a href="#更新记录" class="headerlink" title="更新记录"></a>更新记录</h2><ul><li>2020-06-13：还有一些没有写完，后续补充</li><li>2020-06-06： 初稿</li><li>2020-09-02：补充</li></ul><h2 id="镜像是怎样炼成的🤔"><a href="#镜像是怎样炼成的🤔" class="headerlink" title="镜像是怎样炼成的🤔"></a>镜像是怎样炼成的🤔</h2><p>所谓炼成像就是构建镜像啦，下面用到的<strong>搓</strong>和<strong>炼制</strong>都是指的构建镜像啦，只是个人习惯用语而已😂。</p><p>提到容器镜像就不得不提一下 OCI ，即 Open Container Initiative 旨在围绕容器格式和运行时制定一个开放的工业化标准。目前 OCI 主要有三个规范：运行时规范 <a href="https://github.com/opencontainers/runtime-spec" target="_blank" rel="noopener">runtime-spec</a> ，镜像规范 <a href="http://www.github.com/opencontainers/image-spec" target="_blank" rel="noopener">image-spec</a> 以及不常见的镜像仓库规范 <a href="https://github.com/opencontainers/distribution-spec" target="_blank" rel="noopener">distribution-spec</a> 。关于 OCI 这些规范的作用的作用，就引用一下 <a href="https://wilhelmguo.cn/blog/post/william/%E5%AE%B9%E5%99%A8%E5%BC%80%E6%94%BE%E6%8E%A5%E5%8F%A3%E8%A7%84%E8%8C%83%EF%BC%88CRI-OCI%EF%BC%89-2" target="_blank" rel="noopener">容器开放接口规范（CRI OCI）</a> 中的内容，我也就懒得自己组织语言灌水了😂（凑字数</p><blockquote><p>制定容器格式标准的宗旨概括来说就是不受上层结构的绑定，如特定的客户端、编排栈等，同时也不受特定的供应商或项目的绑定，即不限于某种特定操作系统、硬件、CPU架构、公有云等。</p><p>这两个协议通过 OCI runtime filesytem bundle 的标准格式连接在一起，OCI 镜像可以通过工具转换成 bundle，然后 OCI 容器引擎能够识别这个 bundle 来运行容器</p><ul><li>操作标准化：容器的标准化操作包括使用标准容器创建、启动、停止容器，使用标准文件系统工具复制和创建容器快照，使用标准化网络工具进行下载和上传。</li><li>内容无关：内容无关指不管针对的具体容器内容是什么，容器标准操作执行后都能产生同样的效果。如容器可以用同样的方式上传、启动，不管是PHP应用还是MySQL数据库服务。</li><li>基础设施无关：无论是个人的笔记本电脑还是AWS S3，亦或是OpenStack，或者其它基础设施，都应该对支持容器的各项操作。</li><li>为自动化量身定制：制定容器统一标准，是的操作内容无关化、平台无关化的根本目的之一，就是为了可以使容器操作全平台自动化。</li><li>工业级交付：制定容器标准一大目标，就是使软件分发可以达到工业级交付成为现实</li></ul></blockquote><p>其实 OCI 规范就是一堆 markdown 文件啦，内容也很容易理解，不像 RFC 和 ISO 那么高深莫测，所以汝想对容器镜像有个深入的了解还是推荐大家去读一下这些 markdown 文件😂。OCI 规范是免费的哦，不像大多数 ISO 规范还要交钱才能看（︶^︶）哼。</p><h3 id="OCI-image-spec"><a href="#OCI-image-spec" class="headerlink" title="OCI image-spec"></a>OCI image-spec</h3><p>OCI 规范中的镜像规范 <a href="http://www.github.com/opencontainers/image-spec" target="_blank" rel="noopener">image-spec</a> 决定了我们的镜像按照什么标准来构建，以及构建完镜像之后如何存放，接着下文提到的 Dockerfile 则决定了镜像的 layer 内容以及镜像的一些元数据信息。一个镜像规范 image-spec 和一个 Dockerfile 就指导着我们构建一个镜像，那么接下来我们就简单了解一下这个镜像规范，看看镜像是长什么样子的，对镜像有个大体的主观认识。</p><p>根据官方文档的描述，OCI 镜像规范的主要由以下几个 markdown 文件组成：</p><blockquote><ul><li><a href="https://github.com/opencontainers/image-spec/blob/master/manifest.md" target="_blank" rel="noopener">Image Manifest</a> - a document describing the components that make up a container image</li><li><a href="https://github.com/opencontainers/image-spec/blob/master/image-index.md" target="_blank" rel="noopener">Image Index</a> - an annotated index of image manifests</li><li><a href="https://github.com/opencontainers/image-spec/blob/master/image-layout.md" target="_blank" rel="noopener">Image Layout</a> - a filesystem layout representing the contents of an image</li><li><a href="https://github.com/opencontainers/image-spec/blob/master/layer.md" target="_blank" rel="noopener">Filesystem Layer</a> - a changeset that describes a container’s filesystem</li><li><a href="https://github.com/opencontainers/image-spec/blob/master/config.md" target="_blank" rel="noopener">Image Configuration</a> - a document determining layer ordering and configuration of the image suitable for translation into a <a href="https://github.com/opencontainers/runtime-spec" target="_blank" rel="noopener">runtime bundle</a></li><li><a href="https://github.com/opencontainers/image-spec/blob/master/conversion.md" target="_blank" rel="noopener">Conversion</a> - a document describing how this translation should occur</li><li><a href="https://github.com/opencontainers/image-spec/blob/master/descriptor.md" target="_blank" rel="noopener">Descriptor</a> - a reference that describes the type, metadata and content address of referenced content</li></ul></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">├── annotations.md         # 注解规范</span><br><span class="line">├── config.md              # image config 文件规范</span><br><span class="line">├── considerations.md      # 注意事项</span><br><span class="line">├── conversion.md          # 转换为 OCI 运行时</span><br><span class="line">├── descriptor.md          # OCI Content Descriptors 内容描述</span><br><span class="line">├── image-index.md         # manifest list 文件</span><br><span class="line">├── image-layout.md        # 镜像的布局</span><br><span class="line">├── implementations.md     # 使用 OCI 规范的项目</span><br><span class="line">├── layer.md               # 镜像层 layer 规范</span><br><span class="line">├── manifest.md            # manifest 规范</span><br><span class="line">├── media-types.md         # 文件类型</span><br><span class="line">├── README.md              # README 文档</span><br><span class="line">├── spec.md                # OCI 镜像规范的概览</span><br></pre></td></tr></table></figure><p>总结以上几个 markdown 文件， OCI 容器镜像规范主要包括以下几块内容：</p><h4 id="layer"><a href="#layer" class="headerlink" title="layer"></a>layer</h4><p><a href="https://github.com/opencontainers/image-spec/blob/master/layer.md" target="_blank" rel="noopener">文件系统</a>：以 layer （镜像层）保存的文件系统，每个 layer 保存了和上层之间变化的部分，layer 应该保存哪些文件，怎么表示增加、修改和删除的文件等。</p><h4 id="image-config"><a href="#image-config" class="headerlink" title="image config"></a>image config</h4><p><a href="https://github.com/opencontainers/image-spec/blob/master/config.md" target="_blank" rel="noopener">image config 文件</a>：保存了文件系统的层级信息（每个层级的 hash 值，以及历史信息），以及容器运行时需要的一些信息（比如环境变量、工作目录、命令参数、mount 列表），指定了镜像在某个特定平台和系统的配置，比较接近我们使用 <code>docker inspect &lt;image_id&gt;</code> 看到的内容。</p><ul><li>example</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"architecture"</span>: <span class="string">"amd64"</span>,</span><br><span class="line">  <span class="attr">"config"</span>: &#123;</span><br><span class="line">    <span class="attr">"Hostname"</span>: <span class="string">""</span>,</span><br><span class="line">    <span class="attr">"Domainname"</span>: <span class="string">""</span>,</span><br><span class="line">    <span class="attr">"User"</span>: <span class="string">""</span>,</span><br><span class="line">    <span class="attr">"AttachStdin"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">"AttachStdout"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">"AttachStderr"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">"Tty"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">"OpenStdin"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">"StdinOnce"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">"Env"</span>: [</span><br><span class="line">      <span class="string">"PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">"Cmd"</span>: [</span><br><span class="line">      <span class="string">"bash"</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">"Image"</span>: <span class="string">"sha256:ba8f577813c7bdf6b737f638dffbc688aa1df2ff28a826a6c46bae722977b549"</span>,</span><br><span class="line">    <span class="attr">"Volumes"</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">"WorkingDir"</span>: <span class="string">""</span>,</span><br><span class="line">    <span class="attr">"Entrypoint"</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">"OnBuild"</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">"Labels"</span>: <span class="literal">null</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"container"</span>: <span class="string">"38501d5aa48c080884f4dc6fd4b1b6590ff1607d9e7a12e1cef1d86a3fdc32df"</span>,</span><br><span class="line">  <span class="attr">"container_config"</span>: &#123;</span><br><span class="line">    <span class="attr">"Hostname"</span>: <span class="string">"38501d5aa48c"</span>,</span><br><span class="line">    <span class="attr">"Domainname"</span>: <span class="string">""</span>,</span><br><span class="line">    <span class="attr">"User"</span>: <span class="string">""</span>,</span><br><span class="line">    <span class="attr">"AttachStdin"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">"AttachStdout"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">"AttachStderr"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">"Tty"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">"OpenStdin"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">"StdinOnce"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">"Env"</span>: [</span><br><span class="line">      <span class="string">"PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">"Cmd"</span>: [</span><br><span class="line">      <span class="string">"/bin/sh"</span>,</span><br><span class="line">      <span class="string">"-c"</span>,</span><br><span class="line">      <span class="string">"#(nop) "</span>,</span><br><span class="line">      <span class="string">"CMD [\"bash\"]"</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">"Image"</span>: <span class="string">"sha256:ba8f577813c7bdf6b737f638dffbc688aa1df2ff28a826a6c46bae722977b549"</span>,</span><br><span class="line">    <span class="attr">"Volumes"</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">"WorkingDir"</span>: <span class="string">""</span>,</span><br><span class="line">    <span class="attr">"Entrypoint"</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">"OnBuild"</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">"Labels"</span>: &#123;&#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"created"</span>: <span class="string">"2020-06-07T01:59:47.348924716Z"</span>,</span><br><span class="line">  <span class="attr">"docker_version"</span>: <span class="string">"19.03.5"</span>,</span><br><span class="line">  <span class="attr">"history"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"created"</span>: <span class="string">"2020-06-07T01:59:46.877600299Z"</span>,</span><br><span class="line">      <span class="attr">"created_by"</span>: <span class="string">"/bin/sh -c #(nop) ADD file:a82014afc29e7b364ac95223b22ebafad46cc9318951a85027a49f9ce1a99461 in / "</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"created"</span>: <span class="string">"2020-06-07T01:59:47.348924716Z"</span>,</span><br><span class="line">      <span class="attr">"created_by"</span>: <span class="string">"/bin/sh -c #(nop)  CMD [\"bash\"]"</span>,</span><br><span class="line">      <span class="attr">"empty_layer"</span>: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">"os"</span>: <span class="string">"linux"</span>,</span><br><span class="line">  <span class="attr">"rootfs"</span>: &#123;</span><br><span class="line">    <span class="attr">"type"</span>: <span class="string">"layers"</span>,</span><br><span class="line">    <span class="attr">"diff_ids"</span>: [</span><br><span class="line">      <span class="string">"sha256:d1b85e6186f67d9925c622a7a6e66faa447e767f90f65ae47cdc817c629fa956"</span></span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="manifest"><a href="#manifest" class="headerlink" title="manifest"></a>manifest</h4><p><a href="https://github.com/opencontainers/image-spec/blob/master/manifest.md" target="_blank" rel="noopener">manifest 文件</a> ：镜像的 config 文件索引，有哪些 layer，额外的 annotation 信息，manifest 文件中保存了很多和当前平台有关的信息。另外 manifest 中的 layer 和 config 中的 layer 表达的虽然都是镜像的 layer ，但二者代表的意义不太一样，稍后会讲到。manifest 文件是存放在 registry 中，当我们拉取镜像的时候，会根据该文件拉取相应的 layer 。根据 OCI image-spec 规范中 <a href="https://github.com/opencontainers/image-spec/blob/master/manifest.md" target="_blank" rel="noopener">OCI Image Manifest Specification</a> 的定义可以得知，镜像的 manifest 文件主要有以下三个目标：（英语不好就不翻译了😥</p><blockquote><p>There are three main goals of the Image Manifest Specification.</p><ul><li>The first goal is content-addressable images, by supporting an image model where the image’s configuration can be hashed to generate a unique ID for the image and its components.</li><li>The second goal is to allow multi-architecture images, through a “fat manifest” which references image manifests for platform-specific versions of an image. In OCI, this is codified in an <a href="https://github.com/opencontainers/image-spec/blob/master/image-index.md" target="_blank" rel="noopener">image index</a>.</li><li>The third goal is to be <a href="https://github.com/opencontainers/image-spec/blob/master/conversion.md" target="_blank" rel="noopener">translatable</a> to the <a href="https://github.com/opencontainers/runtime-spec" target="_blank" rel="noopener">OCI Runtime Specification</a>.</li></ul></blockquote><p>另外 manifest 也分好几个版本，目前主流的版本是  <code>Manifest Version 2, Schema 2</code> ，可以参考 docker 的官方文档 <a href="https://github.com/docker/distribution/blob/master/docs/spec/manifest-v2-2.md" target="_blank" rel="noopener">Image Manifest Version 2, Schema 2</a> 。registry 中会有个 <code>Manifest List</code> 文件，该文件是为不同处理器体系架构而设计的，通过该文件指向与该处理器体系架构相对应的 Image Manifest ，这一点不要搞混。</p><ul><li>Example Manifest List</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="attr">"schemaVersion"</span>: <span class="number">2</span>,</span><br><span class="line">  <span class="attr">"mediaType"</span>: <span class="string">"application/vnd.docker.distribution.manifest.list.v2+json"</span>,</span><br><span class="line">  <span class="attr">"manifests"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"mediaType"</span>: <span class="string">"application/vnd.docker.distribution.manifest.v2+json"</span>,</span><br><span class="line">      <span class="attr">"size"</span>: <span class="number">7143</span>,</span><br><span class="line">      <span class="attr">"digest"</span>: <span class="string">"sha256:e692418e4cbaf90ca69d05a66403747baa33ee08806650b51fab815ad7fc331f"</span>,</span><br><span class="line">      <span class="attr">"platform"</span>: &#123;</span><br><span class="line">        <span class="attr">"architecture"</span>: <span class="string">"ppc64le"</span>,</span><br><span class="line">        <span class="attr">"os"</span>: <span class="string">"linux"</span>,</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"mediaType"</span>: <span class="string">"application/vnd.docker.distribution.manifest.v2+json"</span>,</span><br><span class="line">      <span class="attr">"size"</span>: <span class="number">7682</span>,</span><br><span class="line">      <span class="attr">"digest"</span>: <span class="string">"sha256:5b0bcabd1ed22e9fb1310cf6c2dec7cdef19f0ad69efa1f392e94a4333501270"</span>,</span><br><span class="line">      <span class="attr">"platform"</span>: &#123;</span><br><span class="line">        <span class="attr">"architecture"</span>: <span class="string">"amd64"</span>,</span><br><span class="line">        <span class="attr">"os"</span>: <span class="string">"linux"</span>,</span><br><span class="line">        <span class="attr">"features"</span>: [</span><br><span class="line">          <span class="string">"sse4"</span></span><br><span class="line">        ]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>Image Manifest</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  "schemaVersion": 2,</span><br><span class="line">  "mediaType": "application/vnd.docker.distribution.manifest.v2+json",</span><br><span class="line">  "config": &#123;</span><br><span class="line">    "mediaType": "application/vnd.docker.container.image.v1+json",</span><br><span class="line">    "size": 1509,</span><br><span class="line">    "digest": "sha256:a24bb4013296f61e89ba57005a7b3e52274d8edd3ae2077d04395f806b63d83e"</span><br><span class="line">  &#125;,</span><br><span class="line">  "layers": [</span><br><span class="line">    &#123;</span><br><span class="line">      "mediaType": "application/vnd.docker.image.rootfs.diff.tar.gzip",</span><br><span class="line">      "size": 5844992,</span><br><span class="line">      "digest": "sha256:50644c29ef5a27c9a40c393a73ece2479de78325cae7d762ef3cdc19bf42dd0a"</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后再补充一段高策大佬的 <a href="http://gaocegege.com/Blog/ormb" target="_blank" rel="noopener">解释</a> ：</p><blockquote><p>Manifest 是一个 JSON 文件，其定义包括两个部分，分别是 <a href="https://github.com/opencontainers/image-spec/blob/master/config.md" target="_blank" rel="noopener">Config</a> 和 <a href="https://github.com/opencontainers/image-spec/blob/master/layer.md" target="_blank" rel="noopener">Layers</a>。Config 是一个 JSON 对象，Layers 是一个由 JSON 对象组成的数组。可以看到，Config 与 Layers 中的每一个对象的结构相同，都包括三个字段，分别是 digest、mediaType 和 size。其中 digest 可以理解为是这一对象的 ID。mediaType 表明了这一内容的类型。size 是这一内容的大小。</p><p>容器镜像的 Config 有着固定的 mediaType <code>application/vnd.oci.image.config.v1+json</code>。一个 Config 的示例配置如下，它记录了关于容器镜像的配置，可以理解为是镜像的元数据。通常它会被镜像仓库用来在 UI 中展示信息，以及区分不同操作系统的构建等。</p><p>而容器镜像的 Layers 是由多层 mediaType 为 <code>application/vnd.oci.image.layer.v1.*</code>（其中最常见的是 <code>application/vnd.oci.image.layer.v1.tar+gzip</code>) 的内容组成的。众所周知，容器镜像是分层构建的，每一层就对应着 Layers 中的一个对象。</p><p>容器镜像的 Config，和 Layers 中的每一层，都是以 Blob 的方式存储在镜像仓库中的，它们的 digest 作为 Key 存在。因此，在请求到镜像的 Manifest 后，Docker 会利用 digest 并行下载所有的 Blobs，其中就包括 Config 和所有的 Layers。</p></blockquote><h4 id="image-manifest-index"><a href="#image-manifest-index" class="headerlink" title="image manifest index"></a>image manifest index</h4><p><a href="https://github.com/opencontainers/image-spec/blob/master/image-index.md" target="_blank" rel="noopener">index 文件</a> ：其实就是我们上面提到的 Manifest List 啦。在 docker 的 <a href="https://github.com/docker/distribution" target="_blank" rel="noopener">distribution</a> 中称之为 <code>Manifest List</code> 在 OCI 中就叫 <a href="https://github.com/opencontainers/image-spec/blob/master/image-index.md" target="_blank" rel="noopener">OCI Image Index Specification</a> 。其实两者是指的同一个文件，甚至两者 GitHub 上文档给的 example 都一一模样🤣，应该是 OCI 复制粘贴 Docker 的文档😂。index 文件是个可选的文件，包含着一个列表为同一个镜像不同的处理器 arch 指向不同平台的 manifest 文件，这个文件能保证一个镜像可以跨平台使用，每个处理器 arch 平台拥有不同的 manifest 文件，使用 index 作为索引。当我们使用 arm 架构的处理器时要额外注意，在拉取镜像的时候要拉取 arm 架构的镜像，一般处理器的架构都接在镜像的 tag 后面，默认 latest tag 的镜像是 x86 的，在 arm 处理器的机器这些镜像上是跑不起来的。</p><h3 id="各种-id-分不清？"><a href="#各种-id-分不清？" class="headerlink" title="各种 id 分不清？"></a>各种 id 分不清？</h3><p>看完  <a href="http://www.github.com/opencontainers/image-spec" target="_blank" rel="noopener">image-spec</a> 里面提到的各种 id 相信你又很多疑惑，在此总结一下这些 id 的作用：</p><table><thead><tr><th align="center">image-id</th><th>image config 的 sha256 哈希值，在本地镜像存储中由它唯一标识一个镜像</th></tr></thead><tbody><tr><td align="center">image digest</td><td>在 registry 中的 image manifest 的 sha256 哈希值，在 registry 中由它唯一标识一个镜像</td></tr><tr><td align="center">diff_ids</td><td>镜像每一层的 id ，是对 layer 的未压缩的 tar 包的 sha256 哈希值</td></tr><tr><td align="center">layer digest</td><td>镜像在 registry 存储中的 id ，是对 layer压缩后的 tar 包的 sha256 哈希值</td></tr></tbody></table><p>镜像的 image config 中的 <code>rootfs</code> 字段记录了每一层 layer 的 id，而镜像的 layer id 则是 layer tar 包的 sha256 值，如果镜像的 layer 改变，则这个 layer id 会改变，而记录它的 image config 内容也会改变，image config 内容变了，image config 文件的 sha256 值也就会改变，这样就可以由 image id 和 image digest 唯一标识一个镜像，达到防治篡改的安全目的。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">"rootfs": &#123;</span><br><span class="line">    "type": "layers",</span><br><span class="line">    "diff_ids": [</span><br><span class="line">      <span class="string">"sha256:d1b85e6186f67d9925c622a7a6e66faa447e767f90f65ae47cdc817c629fa956"</span></span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h3 id="Dockerfile"><a href="#Dockerfile" class="headerlink" title="Dockerfile"></a>Dockerfile</h3><p>众所周知 docker 镜像需要一个 Dockerfile 来构建而成，当我们对 OCI 镜像规范有了个大致的了解之后，我们接下来就拿着 Dockerfile 这个 ”图纸“ 去一步步构建镜像。本文不再细讲 Dockerfile 的详细书写和技巧，网上也有很多众所周知的关于写好 Dockerfile 的技巧，比如我之前水过的一篇 <a href="https://blog.k8s.li/dockerfile-tips.html">Dockerfile 搓镜像的小技巧</a> 。</p><p>下面就是 <a href="https://webp.sh" target="_blank" rel="noopener">webp server go</a> Dockerfile 的例子：</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> golang:alpine as builder</span><br><span class="line"><span class="keyword">ARG</span> IMG_PATH=/opt/pics</span><br><span class="line"><span class="keyword">ARG</span> EXHAUST_PATH=/opt/exhaust</span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> apk update ;\</span></span><br><span class="line"><span class="bash">    apk add alpine-sdk ;\</span></span><br><span class="line"><span class="bash">    git <span class="built_in">clone</span> https://github.com/webp-sh/webp_server_go /build ;\</span></span><br><span class="line"><span class="bash">    <span class="built_in">cd</span> /build ;\</span></span><br><span class="line"><span class="bash">    sed -i <span class="string">"s|.\/pics|<span class="variable">$&#123;IMG_PATH&#125;</span>|g"</span> config.json ;\</span></span><br><span class="line"><span class="bash">    sed -i <span class="string">"s|\"\"|\"<span class="variable">$&#123;EXHAUST_PATH&#125;</span>\"|g"</span> config.json ;\</span></span><br><span class="line"><span class="bash">    sed -i <span class="string">'s/127.0.0.1/0.0.0.0/g'</span> config.json</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /build</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> go build -o webp-server .</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">FROM</span> alpine</span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> --from=builder /build/webp-server  /usr/bin/webp-server</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> --from=builder /build/config.json /etc/config.json</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /opt</span></span><br><span class="line"><span class="keyword">VOLUME</span><span class="bash"> /opt/exhaust</span></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> [<span class="string">"/usr/bin/webp-server"</span>, <span class="string">"--config"</span>, <span class="string">"/etc/config.json"</span>]</span></span><br></pre></td></tr></table></figure><p>需要注意的是，在 RUN 指令的每行结尾我使用的是 <code>;\</code> 来接下一行 shell ，另一种写法是 <code>&amp;&amp;</code> 。二者有本质的区别，比如 COMMAND 1;COMMAND 2 ，当 COMMAND 1 运行失败时会继续运行 COMMAND2 ，并不会退出。而 COMMAND 1&amp;&amp; COMMAND 2，时 COMMAND 1 运行成功时才接着运行 COMMAND 2 ，COMMAND 1 运行失败会退出。如果没有十足的把握保证每一行 shell 都能每次运行成功建议用 <code>&amp;&amp;</code> ，这样失败了就退出构建镜像，不然构建出来的镜像会有问题。如果是老司机🚗 的话建议用 <code>;</code> ，逛了一圈 docker hub 官方镜像中用 <code>;</code> 较多一些，因为 <code>;</code> 比 <code>&amp;&amp;</code> 要美观一些（大雾😂。</p><ul><li>风格一：比如 <a href="https://github.com/nginxinc/docker-nginx/blob/master/stable/buster/Dockerfile" target="_blank" rel="noopener">nginx</a> 官方镜像是用的 <code>&amp;&amp;</code>，貌似也混入了 <code>;</code>🤣</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">RUN set -x \</span><br><span class="line"><span class="meta">#</span><span class="bash"> create nginx user/group first, to be consistent throughout docker variants</span></span><br><span class="line">    &amp;&amp; addgroup --system --gid 101 nginx \</span><br><span class="line">    &amp;&amp; adduser --system --disabled-login --ingroup nginx --no-create-home --home /nonexistent --gecos "nginx user" --shell /bin/false --uid 101 nginx \</span><br><span class="line">    &amp;&amp; apt-get update \</span><br><span class="line">    &amp;&amp; apt-get install --no-install-recommends --no-install-suggests -y gnupg1 ca-certificates \</span><br><span class="line">    &amp;&amp; \</span><br><span class="line">    NGINX_GPGKEY=573BFD6B3D8FBC641079A6ABABF5BD827BD9BF62; \</span><br><span class="line">    found=''; \</span><br><span class="line">    for server in \</span><br><span class="line">        ha.pool.sks-keyservers.net \</span><br><span class="line">        hkp://keyserver.ubuntu.com:80 \</span><br><span class="line">        hkp://p80.pool.sks-keyservers.net:80 \</span><br><span class="line">        pgp.mit.edu \</span><br><span class="line">    ; do \</span><br></pre></td></tr></table></figure><ul><li>风格二：比如 <a href="https://github.com/docker-library/redis/blob/23af5b6adb271bcebbcebc93308884438512a4af/6.0/Dockerfile" target="_blank" rel="noopener">redis</a> 官方镜像就清一色使用的 <code>;</code></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">RUN set -eux; \</span><br><span class="line">savedAptMark="$(apt-mark showmanual)"; \</span><br><span class="line">apt-get update; \</span><br><span class="line">apt-get install -y --no-install-recommends ca-certificates dirmngr gnupg wget; \</span><br><span class="line">rm -rf /var/lib/apt/lists/*; \</span><br><span class="line">dpkgArch="$(dpkg --print-architecture | awk -F- '&#123; print $NF &#125;')"; \</span><br><span class="line">wget -O /usr/local/bin/gosu "https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$dpkgArch"; \</span><br><span class="line">wget -O /usr/local/bin/gosu.asc "https://github.com/tianon/gosu/releases/download/$GOSU_VERSION/gosu-$dpkgArch.asc"; \</span><br><span class="line">export GNUPGHOME="$(mktemp -d)"; \</span><br><span class="line">gpg --batch --keyserver hkps://keys.openpgp.org --recv-keys B42F6819007F00F88E364FD4036A9C25BF357DD4; \</span><br><span class="line">gpg --batch --verify /usr/local/bin/gosu.asc /usr/local/bin/gosu; \</span><br><span class="line">gpgconf --kill all; \</span><br><span class="line">rm -rf "$GNUPGHOME" /usr/local/bin/gosu.asc; \</span><br><span class="line">apt-mark auto '.*' &gt; /dev/null; \</span><br><span class="line">[ -z "$savedAptMark" ] || apt-mark manual $savedAptMark &gt; /dev/null; \</span><br><span class="line">apt-get purge -y --auto-remove -o APT::AutoRemove::RecommendsImportant=false; \</span><br><span class="line">chmod +x /usr/local/bin/gosu; \</span><br><span class="line">gosu --version; \</span><br><span class="line">gosu nobody true</span><br></pre></td></tr></table></figure><p>汝喜欢哪种风格呢？快在评论区留言吧😋</p><h4 id="镜像工厂🛠"><a href="#镜像工厂🛠" class="headerlink" title="镜像工厂🛠"></a>镜像工厂🛠</h4><blockquote><p>Docker 是一个典型的 C/S 架构的应用，分为 Docker 客户端（即平时敲的 docker 命令） Docker 服务端（dockerd 守护进程）。</p><p>Docker 客户端通过 REST API 和服务端进行交互，docker 客户端每发送一条指令，底层都会转化成 REST API 调用的形式发送给服务端，服务端处理客户端发送的请求并给出响应。</p><p>Docker 镜像的构建、容器创建、容器运行等工作都是 Docker 服务端来完成的，Docker 客户端只是承担发送指令的角色。</p><p>Docker 客户端和服务端可以在同一个宿主机，也可以在不同的宿主机，如果在同一个宿主机的话，Docker 客户端默认通过 UNIX 套接字(<code>/var/run/docker.sock</code>)和服务端通信。</p></blockquote><p>类比于钢铁是怎样炼成的，如果说炼制镜像也需要个工厂的话，那么我们的 dockerd 这个守护进程就是个生产镜像的工厂。能生产镜像的不止 docker 一家，红帽子家的 <a href="https://buildah.io/" target="_blank" rel="noopener">buildah</a> 也能生产镜像，不过用的人并不多。二者的最大区别在于 buildah 可以不用 root 权限来构建镜像，而使用 docker 构建镜像时需要用到 root 权限，没有 root 权限的用户构建镜像会当场翻车。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Got permission denied while trying to connect to the Docker daemon socket at unix:///var/run/docker.sock:</span><br></pre></td></tr></table></figure><p>不过 buildah 构建出来的镜像有一堆堆的兼容性问题，所以我们还是使用 docker 来构建镜像吧。当我们使用 docker build 命令构建一个镜像的时候第一行日志就是 <code>Sending build context to Docker daemon xx MB</code>。这一步是 docker cli 这个命令行客户端将我们当前目录（即构建上下文） <code>build context</code> 打包发送 <code>Docker daemon</code> 守护进程 （即 dockerd）的过程。</p><p><img src="img/docker-architecture.png" alt="img"></p><p>docker build 构建镜像的流程大概就是：</p><ul><li>执行 <code>docker build -t &lt;imageName:Tag&gt; .</code>，可以使用 <code>-f</code>参数来指定 Dockerfile 文件；</li><li>docker 客户端会将构建命令后面指定的路径(<code>.</code>)下的所有文件打包成一个 tar 包，发送给 Docker 服务端;</li><li>docker 服务端收到客户端发送的 tar 包，然后解压，接下来根据 Dockerfile 里面的指令进行镜像的分层构建；</li><li>docker 下载 FROM 语句中指定的基础镜像，然后将基础镜像的 layer 联合挂载为一层，并在上面创建一个空目录；</li><li>接着启动一个临时的容器并在 chroot 中启动一个 bash，运行 <code>RUN</code> 语句中的命令：<code>RUN: chroot . /bin/bash -c &quot;apt get update……&quot;</code>；</li><li>一条 <code>RUN</code> 命令结束后，会把上层目录压缩，形成新镜像中的新的一层；</li><li>如果 Dockerfile 中包含其它命令，就以之前构建的层次为基础，从第二步开始重复创建新层，直到完成所有语句后退出；</li><li>构建完成之后为该镜像打上 tag；</li></ul><p>以上就是构建镜像的大致流程，我们也可以通过 <code>docker history &lt;imageName:Tag&gt;</code> 命令来逆向推算出 docker build 的过程。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">╭─root@sg-02 ~/buster/slim</span><br><span class="line">╰─# docker history webpsh/webps</span><br><span class="line">IMAGE               CREATED             CREATED BY          SIZE                COMMENT</span><br><span class="line">30d9679b0b1c        2 weeks ago         /bin/sh -c #(nop)  CMD ["/usr/bin/webp-serve…   0B</span><br><span class="line">&lt;missing&gt;           2 weeks ago         /bin/sh -c #(nop)  VOLUME [/opt/exhaust]        0B</span><br><span class="line">&lt;missing&gt;           2 weeks ago         /bin/sh -c #(nop) WORKDIR /opt                  0B</span><br><span class="line">&lt;missing&gt;           2 weeks ago         /bin/sh -c #(nop) COPY file:1497d882aeef5f77…   168B</span><br><span class="line">&lt;missing&gt;           2 weeks ago         /bin/sh -c #(nop) COPY file:327020918e4dc998…   14.9MB</span><br><span class="line">&lt;missing&gt;           6 weeks ago         /bin/sh -c #(nop)  CMD ["/bin/sh"]              0B</span><br><span class="line">&lt;missing&gt;           6 weeks ago         /bin/sh -c #(nop) ADD file:b91adb67b670d3a6f…   5.61MB</span><br><span class="line"></span><br><span class="line">╭─root@sg-02 ~/buster/slim</span><br><span class="line">╰─# docker history debian:v2</span><br><span class="line">IMAGE               CREATED             CREATED BY           SIZE                COMMENT</span><br><span class="line">e6e782a57a51        38 hours ago        /bin/sh -c #(nop)  CMD ["bash"]                 0B</span><br><span class="line">ba8f577813c7        38 hours ago        /bin/sh -c #(nop) ADD file:a82014afc29e7b364…   69.2MB</span><br></pre></td></tr></table></figure><h4 id="base-image"><a href="#base-image" class="headerlink" title="base image"></a>base image</h4><p>当我们在写 Dockerfile 的时候都需要用 <code>FROM</code> 语句来指定一个基础镜像，这些基础镜像并不是无中生有，也需要一个 Dockerfile 来构建成镜像。下面我们拿来 <a href="https://hub.docker.com/_/debian" target="_blank" rel="noopener">debian:buster</a> 这个基础镜像的 <a href="https://github.com/debuerreotype/docker-debian-artifacts/blob/18cb4d0418be1c80fb19141b69ac2e0600b2d601/buster/Dockerfile" target="_blank" rel="noopener">Dockerfile</a> 来看一下基础镜像是如何炼成的。</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">FROM</span> scratch</span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> rootfs.tar.xz /</span></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> [<span class="string">"bash"</span>]</span></span><br></pre></td></tr></table></figure><p>一个基础镜像的 Dockerfile 一般仅有三行。第一行 <code>FROM scratch</code> 中的<code>scratch</code> 这个镜像并不真实的存在。当你使用 <code>docker pull scratch</code> 命令来拉取这个镜像的时候会翻车哦，提示 <code>Error response from daemon: &#39;scratch&#39; is a reserved name</code>。这是因为自从 docker 1.5 版本开始，在 Dockerfile 中 <code>FROM scratch</code> 指令并不进行任何操作，也就是不会创建一个镜像层；接着第二行的 <code>ADD rootfs.tar.xz /</code> 会自动把 <code>rootfs.tar.xz</code>  解压到 <code>/</code> 目录下，由此产生的一层镜像就是最终构建的镜像真实的 layer 内容；第三行 <code>CMD [&quot;bash&quot;]</code> 指定这镜像在启动容器的时候执行的应用程序，一般基础镜像的 CMD 默认为 bash 或者 sh 。</p><blockquote><p>As of Docker 1.5.0 (specifically, <a href="https://github.com/docker/docker/pull/8827" target="_blank" rel="noopener"><code>docker/docker#8827</code></a>), <code>FROM scratch</code> is a no-op in the Dockerfile , and will not create an extra layer in your image (so a previously 2-layer image will be a 1-layer image instead).</p></blockquote><p><code>ADD rootfs.tar.xz /</code> 中，这个 <code>rootfs.tar.xz</code> 就是我们经过一系列骚操作（一般是发行版源码编译）搓出来的根文件系统，这个操作比较复杂，木子太菜了🥬就不在这里瞎掰掰了🙃，如果汝对源码构建 <code>rootfs.tar.xz</code> 这个过程感兴趣可以去看一下构建 debian 基础镜像的 Jenkins 流水线任务 <a href="https://doi-janky.infosiftr.net/job/tianon/job/debuerreotype/" target="_blank" rel="noopener">debuerreotype</a>，上面有构建这个 <code>rootfs.tar.xz</code> 完整过程，或者参考 Debian 官方的 <a href="https://github.com/debuerreotype/docker-debian-artifacts" target="_blank" rel="noopener">docker-debian-artifacts</a> 这个 repo 里的 shell 脚本。</p><p>需要额外注意一点，在这里往镜像里添加 <code>rootfs.tar.xz</code> 时使用的是 <code>ADD</code> 而不是 <code>COPY</code> ，因为在 Dockerfile 中的 ADD 指令 src 文件如果是个 tar 包，在构建的时候 docker 会帮我们把 tar 包解开到指定目录，使用 copy 指令则不会解开 tar 包。另外一点区别就是 ADD 指令是添加一个文件，这个文件可以是构建上下文环境中的文件，也可以是个 URL，而 COPY 则只能添加构建上下文中的文件，所谓的构建上下文就是我们构建镜像的时候最后一个参数啦。</p><blockquote><p>PS：面试的时候经常被问 ADD 与 COPY 的区别；CMD 与 ENTRYPOINT 的区别😂。</p></blockquote><p>搓这个 <code>rootfs.tar.xz</code> 不同的发行版方法可能不太一样，Debian 发行版的 <code>rootfs.tar.xz</code> 可以在 <a href="https://github.com/debuerreotype/docker-debian-artifacts" target="_blank" rel="noopener">docker-debian-artifacts</a> 这个 repo 上找到，根据不同处理器 arch 选择相应的 branch ，然后这个 branch 下的目录就对应着该发行版的不同的版本的代号。意外发现 Debian 官方是将所有 arch 和所有版本的 <code>rootfs.tar.xz</code> 都放在这个 repo 里的，以至于这个 repo 的大小接近 2.88 GiB 😨，当网盘来用的嘛🤣（：手动滑稽</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">╭─root@sg-02 ~</span><br><span class="line">╰─# git clone https://github.com/debuerreotype/docker-debian-artifacts</span><br><span class="line">Cloning into 'docker-debian-artifacts'...</span><br><span class="line">remote: Enumerating objects: 278, done.</span><br><span class="line">remote: Counting objects: 100% (278/278), done.</span><br><span class="line">Receiving objects:  67% (443/660), 1.60 GiB | 16.96 MiB/s</span><br><span class="line">remote: Total 660 (delta 130), reused 244 (delta 97), pack-reused 382</span><br><span class="line">Receiving objects: 100% (660/660), 2.88 GiB | 16.63 MiB/s, done.</span><br><span class="line">Resolving deltas: 100% (267/267), done.</span><br></pre></td></tr></table></figure><p>我们把这个 <code>rootfs.tar.xz</code> 解开就可以看到，这就是一个 Linux 的根文件系统，不同于我们使用 ISO 安装系统的那个根文件系统，这个根文件系统是经过一系列的裁剪，去掉了一些在容器运行中不必要的文件，使之更加轻量适用于容器运行的场景，整个根文件系统的大小为 125M，如果使用 slim 的<code>rootfs.tar.xz</code> 会更小一些，仅仅 76M。当然相比于仅仅几 M 的 <code>alpine</code> ，这算是够大的了。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">╭─root@sg-02 ~/docker-debian-artifacts/buster ‹dist-amd64*›</span><br><span class="line">╰─# git checkout dist-amd64</span><br><span class="line">╭─root@sg-02 ~/docker-debian-artifacts/buster ‹dist-amd64*›</span><br><span class="line">╰─# cd buster</span><br><span class="line">╭─root@sg-02 ~/docker-debian-artifacts/buster ‹dist-amd64*›</span><br><span class="line">╰─# mkdir rootfs</span><br><span class="line">╭─root@sg-02 ~/docker-debian-artifacts/buster ‹dist-amd64*›</span><br><span class="line">╰─# tar -xvf rootfs.tar.xz -C !$</span><br><span class="line">╭─root@sg-02 ~/docker-debian-artifacts/buster ‹dist-amd64*›</span><br><span class="line">╰─# ls rootfs/</span><br><span class="line">bin  boot  dev  etc  home  lib  lib64  media  mnt  opt  proc  root  run  sbin  srv  sys  tmp  usr  var</span><br><span class="line">╭─root@sg-02 ~/docker-debian-artifacts/buster ‹dist-amd64*›</span><br><span class="line">╰─# du -sh rootfs</span><br><span class="line">125M    rootfs</span><br><span class="line">╭─root@sg-02 ~/docker-debian-artifacts/buster ‹dist-amd64*›</span><br><span class="line">╰─# du -sh slim/rootfs</span><br><span class="line">76M     slim/rootfs</span><br></pre></td></tr></table></figure><p>想要自己构建一个 <code>debian:buster</code> 基础镜像其实很简单，就像下面这样一把梭操作下来就行😂：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/debuerreotype/docker-debian-artifacts debian</span><br><span class="line">cd !$</span><br><span class="line">git checkout dist-amd64</span><br><span class="line">cd buster</span><br><span class="line">docker build -t debian:buster .</span><br></pre></td></tr></table></figure><p>下面就是构建 Debian 基础镜像的过程，正如 Dockerfile 中的那样，最终只产生了一层镜像。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">docker build -t debian:buster .</span><br><span class="line">Sending build context to Docker daemon  30.12MB</span><br><span class="line">Step 1/3 : FROM scratch</span><br><span class="line"><span class="meta"> ---&gt;</span></span><br><span class="line">Step 2/3 : ADD rootfs.tar.xz /</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> 1756d6a585ae</span></span><br><span class="line">Step 3/3 : CMD ["bash"]</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> Running <span class="keyword">in</span> c86a8b6deb3d</span></span><br><span class="line">Removing intermediate container c86a8b6deb3d</span><br><span class="line"><span class="meta"> ---&gt;</span><span class="bash"> 04948daa3c2e</span></span><br><span class="line">Successfully built 04948daa3c2e</span><br><span class="line">Successfully tagged debian:buster</span><br></pre></td></tr></table></figure><h2 id="镜像是怎样存放的-（一）本地存储-🙄"><a href="#镜像是怎样存放的-（一）本地存储-🙄" class="headerlink" title="镜像是怎样存放的 （一）本地存储 🙄"></a>镜像是怎样存放的 （一）本地存储 🙄</h2><p>当我们构建完一个镜像之后，镜像就存储在了我们 docker 本地存储目录，默认情况下为 <code>/var/lib/docker</code> ，下面就探寻一下镜像是以什么样的目录结构存放的。在开始 hack 之前我们先统一一下环境信息，我使用的机器是 Ubuntu 1804，<code>docker info</code> 信息如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">╭─root@sg-02</span> <span class="string">/var/lib/docker</span></span><br><span class="line"><span class="string">╰─#</span> <span class="string">docker</span> <span class="string">info</span></span><br><span class="line"><span class="attr">Client:</span></span><br><span class="line"> <span class="attr">Debug Mode:</span> <span class="literal">false</span></span><br><span class="line"> <span class="attr">Plugins:</span></span><br><span class="line">  <span class="attr">buildx:</span> <span class="string">Build</span> <span class="string">with</span> <span class="string">BuildKit</span> <span class="string">(Docker</span> <span class="string">Inc.,</span> <span class="string">v0.3.1-tp-docker)</span></span><br><span class="line">  <span class="attr">app:</span> <span class="string">Docker</span> <span class="string">Application</span> <span class="string">(Docker</span> <span class="string">Inc.,</span> <span class="string">v0.8.0)</span></span><br><span class="line"><span class="attr">Server:</span></span><br><span class="line"> <span class="attr">Containers:</span> <span class="number">0</span></span><br><span class="line">  <span class="attr">Running:</span> <span class="number">0</span></span><br><span class="line">  <span class="attr">Paused:</span> <span class="number">0</span></span><br><span class="line">  <span class="attr">Stopped:</span> <span class="number">0</span></span><br><span class="line"> <span class="attr">Images:</span> <span class="number">2</span></span><br><span class="line"> <span class="attr">Server Version:</span> <span class="number">19.03</span><span class="number">.5</span></span><br><span class="line"> <span class="attr">Storage Driver:</span> <span class="string">overlay2</span></span><br><span class="line">  <span class="attr">Backing Filesystem:</span> <span class="string">extfs</span></span><br><span class="line">  <span class="attr">Supports d_type:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">Native Overlay Diff:</span> <span class="literal">true</span></span><br><span class="line"> <span class="attr">Logging Driver:</span> <span class="string">json-file</span></span><br><span class="line"> <span class="attr">Cgroup Driver:</span> <span class="string">cgroupfs</span></span><br><span class="line"> <span class="attr">Plugins:</span></span><br><span class="line">  <span class="attr">Volume:</span> <span class="string">local</span></span><br><span class="line">  <span class="attr">Network:</span> <span class="string">bridge</span> <span class="string">host</span> <span class="string">ipvlan</span> <span class="string">macvlan</span> <span class="literal">null</span> <span class="string">overlay</span></span><br><span class="line">  <span class="attr">Log:</span> <span class="string">awslogs</span> <span class="string">fluentd</span> <span class="string">gcplogs</span> <span class="string">gelf</span> <span class="string">journald</span> <span class="string">json-file</span> <span class="string">local</span> <span class="string">logentries</span> <span class="string">splunk</span> <span class="string">syslog</span></span><br><span class="line"> <span class="attr">Swarm:</span> <span class="string">inactive</span></span><br><span class="line"> <span class="attr">Runtimes:</span> <span class="string">runc</span></span><br><span class="line"> <span class="attr">Default Runtime:</span> <span class="string">runc</span></span><br><span class="line"> <span class="attr">Init Binary:</span> <span class="string">docker-init</span></span><br><span class="line"> <span class="attr">containerd version:</span> <span class="string">b34a5c8af56e510852c35414db4c1f4fa6172339</span></span><br><span class="line"> <span class="attr">runc version:</span> <span class="string">3e425f80a8c931f88e6d94a8c831b9d5aa481657</span></span><br><span class="line"> <span class="attr">init version:</span> <span class="string">fec3683</span></span><br><span class="line"> <span class="attr">Security Options:</span></span><br><span class="line">  <span class="string">apparmor</span></span><br><span class="line">  <span class="string">seccomp</span></span><br><span class="line">   <span class="attr">Profile:</span> <span class="string">default</span></span><br><span class="line"> <span class="attr">Kernel Version:</span> <span class="number">4.15</span><span class="number">.0</span><span class="number">-1052</span><span class="string">-aws</span></span><br><span class="line"> <span class="attr">Operating System:</span> <span class="string">Ubuntu</span> <span class="number">18.04</span><span class="number">.1</span> <span class="string">LTS</span></span><br><span class="line"> <span class="attr">OSType:</span> <span class="string">linux</span></span><br><span class="line"> <span class="attr">Architecture:</span> <span class="string">x86_64</span></span><br><span class="line"> <span class="attr">CPUs:</span> <span class="number">1</span></span><br><span class="line"> <span class="attr">Total Memory:</span> <span class="number">983.</span><span class="string">9MiB</span></span><br><span class="line"> <span class="attr">Name:</span> <span class="string">sg-02</span></span><br><span class="line"> <span class="attr">ID:</span> <span class="string">B7J5:Y7ZM:Y477:7AS6:WMYI:6NLV:YOMA:W32Y:H4NZ:UQVD:XHDX:Y5EF</span></span><br><span class="line"> <span class="attr">Docker Root Dir:</span> <span class="string">/opt/docker</span></span><br><span class="line"> <span class="attr">Debug Mode:</span> <span class="literal">false</span></span><br><span class="line"> <span class="attr">Username:</span> <span class="string">webpsh</span></span><br><span class="line"> <span class="attr">Registry:</span> <span class="string">https://index.docker.io/v1/</span></span><br><span class="line"> <span class="attr">Labels:</span></span><br><span class="line"> <span class="attr">Experimental:</span> <span class="literal">false</span></span><br><span class="line"> <span class="attr">Insecure Registries:</span></span><br><span class="line">  <span class="number">127.0</span><span class="number">.0</span><span class="number">.0</span><span class="string">/8</span></span><br><span class="line"> <span class="attr">Registry Mirrors:</span></span><br><span class="line">  <span class="string">https://registry.k8s.li/</span></span><br><span class="line"> <span class="attr">Live Restore Enabled:</span> <span class="literal">false</span></span><br></pre></td></tr></table></figure><p>为了方便分析，我将其他的 docker image 全部清空掉，只保留 <code>debian:v1</code> 和 <code>debian:v2</code> 这两个镜像，这两个镜像足够帮助我们理解容器镜像是如何存放的，镜像多了多话分析下面存储目录的时候可能不太方便（＞﹏＜），这两个镜像是我们之前使用 Debian 的 <code>rootfs.tar.xz</code> 构建出来的基础镜像。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">╭─root@sg-02 /var/lib/docker</span><br><span class="line">╰─# docker images</span><br><span class="line">REPOSITORY       TAG         IMAGE ID            CREATED             SIZE</span><br><span class="line">debian           v2          e6e782a57a51        22 hours ago        69.2MB</span><br><span class="line">debian           v1          cfba37fd24f8        22 hours ago        69.2MB</span><br></pre></td></tr></table></figure><h3 id="docker-var-lib-docker"><a href="#docker-var-lib-docker" class="headerlink" title="docker (/var/lib/docker)"></a>docker (/var/lib/docker)</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">╭─root@sg-02 /var/lib/docker</span><br><span class="line">╰─# tree -d -L 1</span><br><span class="line">.</span><br><span class="line">├── builder</span><br><span class="line">├── buildkit</span><br><span class="line">├── containers</span><br><span class="line">├── image</span><br><span class="line">├── network</span><br><span class="line">├── overlay2</span><br><span class="line">├── plugins</span><br><span class="line">├── runtimes</span><br><span class="line">├── swarm</span><br><span class="line">├── tmp</span><br><span class="line">├── trust</span><br><span class="line">└── volumes</span><br><span class="line"></span><br><span class="line">12 directories</span><br></pre></td></tr></table></figure><p>根据目录的名字我们可以大致推断出关于容器镜像的存储，我们只关心 image 和 overlay2 这两个文件夹即可，容器的元数据存放在 image 目录下，容器的 layer 数据则存放在 overlay2 目录下。</p><h3 id="var-lib-docker-image"><a href="#var-lib-docker-image" class="headerlink" title="/var/lib/docker/image"></a>/var/lib/docker/image</h3><p>overlay2 代表着本地 docker 存储使用的是 overlay2 该存储驱动，目前最新版本的 docker 默认优先采用 <strong>overlay2</strong> 作为存储驱动，对于已支持该驱动的 Linux 发行版，不需要任何进行任何额外的配置，可使用 lsmod 命令查看当前系统内核是否支持 overlay2 。</p><p>另外值得一提的是<code>devicemapper</code> 存储驱动已经在 docker 18.09 版本中被废弃，docker 官方推荐使用 <code>overlay2</code> 替代<code>devicemapper</code>。（之前我老东家用的 docker 1.13 版本，<code>devicemapper</code>的存储驱动在生产环境翻过车😂。所以呢，都 2020 年了，当你使用 baidu 这种垃圾搜素引擎去搜索 “CentOS 安装 docker” 时它会给你一堆垃圾的教程，叫你去安装 <code>device-mapper-persistent-data lvm2</code>，对于这种抄来抄去的博客平台，离得越远越好。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">image</span><br><span class="line">└── overlay2</span><br><span class="line">    ├── distribution</span><br><span class="line">    │   ├── diffid-by-digest</span><br><span class="line">    │   │   └── sha256</span><br><span class="line">    │   │       ├── 039b991354af4dcbc534338f687e27643c717bb57e11b87c2e81d50bdd0b2376</span><br><span class="line">    │   │       ├── 09a4142c5c9dde2fbf35e7a6e6475eba75a8c28540c375c80be7eade4b7cb438</span><br><span class="line">    │   └── v2metadata-by-diffid</span><br><span class="line">    │       └── sha256</span><br><span class="line">    │           ├── 0683de2821778aa9546bf3d3e6944df779daba1582631b7ea3517bb36f9e4007</span><br><span class="line">    │           ├── 0f7493e3a35bab1679e587b41b353b041dca1e7043be230670969703f28a1d83</span><br><span class="line">    ├── imagedb</span><br><span class="line">    │   ├── content</span><br><span class="line">    │   │   └── sha256</span><br><span class="line">    │   │       ├── 708bc6af7e5e539bdb59707bbf1053cc2166622f5e1b17666f0ba5829ca6aaea</span><br><span class="line">    │   │       └── f70734b6a266dcb5f44c383274821207885b549b75c8e119404917a61335981a</span><br><span class="line">    │   └── metadata</span><br><span class="line">    │       └── sha256</span><br><span class="line">    ├── layerdb</span><br><span class="line">    │   ├── mounts</span><br><span class="line">    │   ├── sha256</span><br><span class="line">    │   │   ├── b9835d6a62886d4e85b65abb120c0ea44ff1b3d116d7a707620785d4664d8c1a</span><br><span class="line">    │   │   │   ├── cache-id</span><br><span class="line">    │   │   │   ├── diff</span><br><span class="line">    │   │   │   ├── parent</span><br><span class="line">    │   │   │   ├── size</span><br><span class="line">    │   │   │   └── tar-split.json.gz</span><br><span class="line">    │   │   └── d9b567b77bcdb9d8944d3654ea9bb5f6f4f7c4d07a264b2e40b1bb09af171dd3</span><br><span class="line">    │   │       ├── cache-id</span><br><span class="line">    │   │       ├── diff</span><br><span class="line">    │   │       ├── parent</span><br><span class="line">    │   │       ├── size</span><br><span class="line">    │   │       └── tar-split.json.gz</span><br><span class="line">    │   └── tmp</span><br><span class="line">    └── repositories.json</span><br><span class="line">21 directories, 119 files</span><br></pre></td></tr></table></figure><ul><li><code>repositories.json</code></li></ul><p>repositories.json 就是存储镜像元数据信息，主要是 image name 和 image id 的对应，digest 和 image id 的对应。当 pull 完一个镜像的时候 docker 会更新这个文件。当我们 docker run 一个容器的时候也用到这个文件去索引本地是否存在该镜像，没有镜像的话就自动去 pull 这个镜像。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">╭─root@sg-02 /var/lib/docker/image/overlay2</span><br><span class="line">╰─# jq "." repositories.json</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"Repositories"</span>: &#123;</span><br><span class="line">    <span class="attr">"debian"</span>: &#123;</span><br><span class="line">      <span class="attr">"debian:v1"</span>: <span class="string">"sha256:cfba37fd24f80f59e5d7c1f7735cae7a383e887d8cff7e2762fdd78c0d73568d"</span>,</span><br><span class="line">      <span class="attr">"debian:v2"</span>: <span class="string">"sha256:e6e782a57a51d01168907938beb5cd5af24fcb7ebed8f0b32c203137ace6d3df"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"localhost:5000/library/debian"</span>: &#123;</span><br><span class="line">      <span class="attr">"localhost:5000/library/debian:v1"</span>: <span class="string">"sha256:cfba37fd24f80f59e5d7c1f7735cae7a383e887d8cff7e2762fdd78c0d73568d"</span>,</span><br><span class="line">      <span class="attr">"localhost:5000/library/debian:v2"</span>: <span class="string">"sha256:e6e782a57a51d01168907938beb5cd5af24fcb7ebed8f0b32c203137ace6d3df"</span>,</span><br><span class="line">      <span class="attr">"localhost:5000/library/debian@sha256:b9caca385021f231e15aee34929eac332c49402372a79808d07ee66866792239"</span>: <span class="string">"sha256:cfba37fd24f80f59e5d7c1f7735cae7a383e887d8cff7e2762fdd78c0d73568d"</span>,</span><br><span class="line">      <span class="attr">"localhost:5000/library/debian@sha256:c805f078bb47c575e9602b09af7568eb27fd1c92073199acba68c187bc5bcf11"</span>: <span class="string">"sha256:e6e782a57a51d01168907938beb5cd5af24fcb7ebed8f0b32c203137ace6d3df"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"registry"</span>: &#123;</span><br><span class="line">      <span class="attr">"registry:latest"</span>: <span class="string">"sha256:708bc6af7e5e539bdb59707bbf1053cc2166622f5e1b17666f0ba5829ca6aaea"</span>,</span><br><span class="line">      <span class="attr">"registry@sha256:7d081088e4bfd632a88e3f3bcd9e007ef44a796fddfe3261407a3f9f04abe1e7"</span>: <span class="string">"sha256:708bc6af7e5e539bdb59707bbf1053cc2166622f5e1b17666f0ba5829ca6aaea"</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>distribution 目录下</li></ul><p>存放着 layer 的 diff_id 和 digest 的对应关系</p><p>diffid-by-digest :存放 <code>digest</code> 到 <code>diffid</code> 的对应关系</p><p>v2metadata-by-diffid : 存放 <code>diffid</code> 到 <code>digest</code> 的对应关系</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">├── distribution</span><br><span class="line">│   ├── diffid-by-digest</span><br><span class="line">│   │   └── sha256</span><br><span class="line">│   │       ├── 039b991354af4dcbc534338f687e27643c717bb57e11b87c2e81d50bdd0b2376</span><br><span class="line">│   │       ├── 09a4142c5c9dde2fbf35e7a6e6475eba75a8c28540c375c80be7eade4b7cb438</span><br><span class="line">│   └── v2metadata-by-diffid</span><br><span class="line">│       └── sha256</span><br><span class="line">│           ├── 0683de2821778aa9546bf3d3e6944df779daba1582631b7ea3517bb36f9e4007</span><br><span class="line">│           ├── 0f7493e3a35bab1679e587b41b353b041dca1e7043be230670969703f28a1d83</span><br></pre></td></tr></table></figure><ul><li>imagedb</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">├── imagedb</span><br><span class="line">│   ├── content</span><br><span class="line">│   │   └── sha256</span><br><span class="line">│   │       ├── 708bc6af7e5e539bdb59707bbf1053cc2166622f5e1b17666f0ba5829ca6aaea</span><br><span class="line">│   │       └── f70734b6a266dcb5f44c383274821207885b549b75c8e119404917a61335981a</span><br><span class="line">│   └── metadata</span><br><span class="line">│       └── sha256</span><br></pre></td></tr></table></figure><ul><li>layerdb</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">├── layerdb</span><br><span class="line">│   ├── mounts</span><br><span class="line">│   ├── sha256</span><br><span class="line">│   │   ├── b9835d6a62886d4e85b65abb120c0ea44ff1b3d116d7a707620785d4664d8c1a</span><br><span class="line">│   │   │   ├── cache-id  # docker 下载镜像时随机生成的 id</span><br><span class="line">│   │   │   ├── diff # 存放 layer 的 diffid</span><br><span class="line">│   │   │   ├── parent # 放当前 layer 的父 layer 的 diffid，最底层的 layer 没有这个文件</span><br><span class="line">│   │   │   ├── size # 该 layer 的大小</span><br><span class="line">│   │   │   └── tar-split.json.gz</span><br></pre></td></tr></table></figure><p>需要注意的是：tar-split.json.gz 文件是 layer tar 包的 split 文件，记录了 layer 解压后的文件在 tar 包中的位置（偏移量），通过这个文件可以还原 layer 的 tar 包，在 docker save 导出 image 的时候会用到，由根据它可以开倒车把解压的 layer 还原回 tar 包。详情可参考 <a href="https://github.com/vbatts/tar-split" target="_blank" rel="noopener">tar-split</a></p><h3 id="var-lib-docker-overlay2"><a href="#var-lib-docker-overlay2" class="headerlink" title="/var/lib/docker/overlay2"></a>/var/lib/docker/overlay2</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line">overlay2</span><br><span class="line">├── 259cf6934509a674b1158f0a6c90c60c133fd11189f98945c7c3a524784509ff</span><br><span class="line">│   └── diff</span><br><span class="line">│       ├── bin</span><br><span class="line">│       ├── dev</span><br><span class="line">│       ├── etc</span><br><span class="line">│       ├── home</span><br><span class="line">│       ├── lib</span><br><span class="line">│       ├── media</span><br><span class="line">│       ├── mnt</span><br><span class="line">│       ├── opt</span><br><span class="line">│       ├── proc</span><br><span class="line">│       ├── root</span><br><span class="line">│       ├── run</span><br><span class="line">│       ├── sbin</span><br><span class="line">│       ├── srv</span><br><span class="line">│       ├── sys</span><br><span class="line">│       ├── tmp</span><br><span class="line">│       ├── usr</span><br><span class="line">│       └── var</span><br><span class="line">├── 27f9e9b74a88a269121b4e77330a665d6cca4719cb9a58bfc96a2b88a07af805</span><br><span class="line">│   ├── diff</span><br><span class="line">│   └── work</span><br><span class="line">├── a0df3cc902cfbdee180e8bfa399d946f9022529d12dba3bc0b13fb7534120015</span><br><span class="line">│   ├── diff</span><br><span class="line">│   │   └── bin</span><br><span class="line">│   └── work</span><br><span class="line">├── b2fbebb39522cb6f1f5ecbc22b7bec5e9bc6ecc25ac942d9e26f8f94a028baec</span><br><span class="line">│   ├── diff</span><br><span class="line">│   │   ├── etc</span><br><span class="line">│   │   ├── lib</span><br><span class="line">│   │   ├── usr</span><br><span class="line">│   │   └── var</span><br><span class="line">│   └── work</span><br><span class="line">├── be8c12f63bebacb3d7d78a09990dce2a5837d86643f674a8fd80e187d8877db9</span><br><span class="line">│   ├── diff</span><br><span class="line">│   │   └── etc</span><br><span class="line">│   └── work</span><br><span class="line">├── e8f6e78aa1afeb96039c56f652bb6cd4bbd3daad172324c2172bad9b6c0a968d</span><br><span class="line">│   └── diff</span><br><span class="line">│       ├── bin</span><br><span class="line">│       ├── dev</span><br><span class="line">│       ├── etc</span><br><span class="line">│       ├── home</span><br><span class="line">│       ├── lib</span><br><span class="line">│       ├── media</span><br><span class="line">│       ├── mnt</span><br><span class="line">│       ├── proc</span><br><span class="line">│       ├── root</span><br><span class="line">│       ├── run</span><br><span class="line">│       ├── sbin</span><br><span class="line">│       ├── srv</span><br><span class="line">│       ├── sys</span><br><span class="line">│       ├── tmp</span><br><span class="line">│       ├── usr</span><br><span class="line">│       └── var</span><br><span class="line">└── l</span><br><span class="line">    ├── 526XCHXRJMZXRIHN4YWJH2QLPY -&gt; ../b2fbebb39522cb6f1f5ecbc22b7bec5e9bc6ecc25ac942d9e26f8f94a028baec/diff</span><br><span class="line">    ├── 5RZOXYR35NSGAWTI36CVUIRW7U -&gt; ../be8c12f63bebacb3d7d78a09990dce2a5837d86643f674a8fd80e187d8877db9/diff</span><br><span class="line">    ├── LBWRL4ZXGBWOTN5JDCDZVNOY7H -&gt; ../a0df3cc902cfbdee180e8bfa399d946f9022529d12dba3bc0b13fb7534120015/diff</span><br><span class="line">    ├── MYRYBGZRI4I76MJWQHN7VLZXLW -&gt; ../27f9e9b74a88a269121b4e77330a665d6cca4719cb9a58bfc96a2b88a07af805/diff</span><br><span class="line">    ├── PCIS4FYUJP4X2D4RWB7ETFL6K2 -&gt; ../259cf6934509a674b1158f0a6c90c60c133fd11189f98945c7c3a524784509ff/diff</span><br><span class="line">    └── XK5IA4BWQ2CIS667J3SXPXGQK5 -&gt; ../e8f6e78aa1afeb96039c56f652bb6cd4bbd3daad172324c2172bad9b6c0a968d/diff</span><br></pre></td></tr></table></figure><p>在 <code>/var/lib/docker/overlay2</code> 目录下，我们可以看到，镜像 layer 的内容都存放在一个 <code>diff</code> 的文件夹下，diff 的上级目录就是以镜像 layer 的 digest 为名的目录。其中还有个 <code>l</code> 文件夹，下面有一坨坨的硬链接文件指向上级目录的 layer 目录。这个 l 其实就是 link 的缩写，l 下的文件都是一些比 digest 文件夹名短一些的，方面不至于 mount 的参数过长。</p><h2 id="镜像是怎么搬运的🤣"><a href="#镜像是怎么搬运的🤣" class="headerlink" title="镜像是怎么搬运的🤣"></a>镜像是怎么搬运的🤣</h2><p>当我们在本地构建完成一个镜像之后，如何传递给他人呢？这就涉及到镜像是怎么搬运的一些知识，搬运镜像就像我们在 GitHub 上搬运代码一样，docker 也有类似于 git clone 和 git push 的搬运方式。docker push 就和我们使用 git push 一样，将本地的镜像推送到一个称之为 registry 的镜像仓库，这个 registry 镜像仓库就像 GitHub 用来存放公共/私有的镜像，一个中心化的镜像仓库方便大家来进行交流和搬运镜像。docker pull 就像我们使用 git pull 一样，将远程的镜像拉拉取本地。</p><h3 id="docker-pull"><a href="#docker-pull" class="headerlink" title="docker pull"></a>docker pull</h3><p>理解 docker pull 一个镜像的流程最好的办法是查看 OCI registry 规范中的这段文档 <a href="https://github.com/opencontainers/distribution-spec/blob/master/spec.md#pulling-an-image" target="_blank" rel="noopener">pulling-an-image</a> ，在这里我结合大佬的博客简单梳理一下 pull 一个镜像的大致流程。下面这张图是从 <a href="https://github.com/helios741/myblog/blob/new/learn_go/src/2019/20191206_docker_disk_storage/README.md" target="_blank" rel="noopener">浅谈docker中镜像和容器在本地的存储)</a> 借来的😂</p><p><img src="https://user-images.githubusercontent.com/12036324/70367494-646d2380-18db-11ea-992a-d2bca4cbfeb0.png" alt="image"></p><p>docker pull 就和我们使用 git clone 一样效果，将远程的镜像仓库拉取到本地来给容器运行时使用，结合上图大致的流程如下：</p><ul><li>第一步应该是使用<code>~/.docker/config.json</code> 中的 auth 认证信息在 registry 那里进行鉴权授权，拿到一个 token，后面的所有的 HTTP 请求中都要包含着该 token 才能有权限进行操作。</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">╭─root@sg-02 /home/ubuntu</span><br><span class="line">╰─# cat ~/.docker/config.json</span><br><span class="line">&#123;</span><br><span class="line">        <span class="attr">"auths"</span>: &#123;</span><br><span class="line">                <span class="attr">"https://registry.k8s.li/v2/"</span>: &#123;</span><br><span class="line">                        <span class="attr">"auth"</span>: <span class="string">"d2VicH855828WM7bSVsslJFpmQE43Sw=="</span></span><br><span class="line">                &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"HttpHeaders"</span>: &#123;</span><br><span class="line">                <span class="attr">"User-Agent"</span>: <span class="string">"Docker-Client/19.03.5 (linux)"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"experimental"</span>: <span class="string">"enabled"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>dockerd 守护进程解析 docker 客户端参数，由镜像名 + tag 向 registry 请求 Manifest 文件，HTTP 请求为<code>GET /v2/&lt;name&gt;/manifests/&lt;reference&gt;</code>。registry 中一个镜像有多个 tag 或者多个处理器体系架构的镜像，则根据这个 tag 来返回给客户端与之对应的  manifest 文件；</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">GET /v2/&lt;name&gt;/manifests/&lt;reference&gt;</span><br><span class="line">&#123;</span><br><span class="line">   <span class="attr">"annotations"</span>: &#123;</span><br><span class="line">      <span class="attr">"com.example.key1"</span>: <span class="string">"value1"</span>,</span><br><span class="line">      <span class="attr">"com.example.key2"</span>: <span class="string">"value2"</span></span><br><span class="line">   &#125;,</span><br><span class="line">   <span class="attr">"config"</span>: &#123;</span><br><span class="line">      <span class="attr">"digest"</span>: <span class="string">"sha256:6f4e69a5ff18d92e7315e3ee31c62165ebf25bfa05cad05c0d09d8f412dae401"</span>,</span><br><span class="line">      <span class="attr">"mediaType"</span>: <span class="string">"application/vnd.oci.image.config.v1+json"</span>,</span><br><span class="line">      <span class="attr">"size"</span>: <span class="number">452</span></span><br><span class="line">   &#125;,</span><br><span class="line">   <span class="attr">"layers"</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">         <span class="attr">"digest"</span>: <span class="string">"sha256:6f4e69a5ff18d92e7315e3ee31c62165ebf25bfa05cad05c0d09d8f412dae401"</span>,</span><br><span class="line">         <span class="attr">"mediaType"</span>: <span class="string">"application/vnd.oci.image.layer.v1.tar+gzip"</span>,</span><br><span class="line">         <span class="attr">"size"</span>: <span class="number">78343</span></span><br><span class="line">      &#125;</span><br><span class="line">   ],</span><br><span class="line">   <span class="attr">"schemaVersion"</span>: <span class="number">2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>dockerd 得到 <code>manifest</code> 后，读取里面 image config 文件的 <code>digest</code>，这个 sha256 值就是 image 的 <code>ID</code></li><li>根据 <code>ID</code> 在本地的 <code>repositories.json</code>中查找找有没有存在同样 <code>ID</code> 的 image，有的话就不用下载了</li><li>如果没有，那么会给 registry 服务器发请求拿到  image config 文件</li><li>根据 image config 文件中的 <code>diff_ids</code>在本地找对应的 layer 是否存在</li><li>如果 layer 不存在，则根据 <code>manifest</code> 里面 layer 的 <code>sha256</code> 和 <code>media type</code> 去服务器拿相应的 layer（相当去拿压缩格式的包）</li><li>dockerd 守护进程并行下载各 layer ，HTTP 请求为<code>GET /v2/&lt;name&gt;/blobs/&lt;digest&gt;</code>。 </li><li>拿到后进行解压，并检查解压(gzip -d)后 tar 包的 sha256 是否和 image config 中的 <code>diff_id</code> 相同，不相同就翻车了</li><li>等所有的 layer 都下载完成后，整个 image 的 layer 就下载完成，接着开始进行解压(tar -xf) layer 的 tar 包。</li><li>dockerd 起一个单独的进程 <code>docker-untar</code> 来 gzip 解压缩已经下载完成的 layer 文件；对于有些比较大的镜像（比如几十 GB 的镜像），往往镜像的 layer 已经下载完成了，但还没有解压完😂。</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-untar /var/lib/docker/overlay2/a076db6567c7306f3cdab6040cd7d083ef6a39d125171353eedbb8bde7f203b4/diff</span><br></pre></td></tr></table></figure><ul><li>验证 image config 中的 RootFS.DiffIDs 是否与下载（解压后）hash 相同；</li></ul><h3 id="docker-push"><a href="#docker-push" class="headerlink" title="docker push"></a>docker push</h3><p>push 推送一个镜像到远程的 registry 流程恰好和 pull 拉取镜像到本地的流程相反。我们 pull 一个镜像的时候往往需要先获取包含着镜像 layer 信息的 Manifest 文件，然后根据这个文件中的 layer 信息取 pull 相应的 layer。push 一个镜像，需要先将镜像的各个 layer 推送到 registry ，当所有的镜像 layer 上传完毕之后最后再 push Image Manifest 到 registry。大体的流程如下：</p><blockquote><p>  All layer uploads use two steps to manage the upload process. The first step starts the upload in the registry service, returning a url to carry out the second step. The second step uses the upload url to transfer the actual data. Uploads are started with a POST request which returns a url that can be used to push data and check upload status.</p></blockquote><ul><li><p>第一步和 pull 一个镜像一样也是进行鉴权授权，拿到一个 token；</p></li><li><p>向 registry 发送 <code>POST /v2/&lt;name&gt;/blobs/uploads/</code>请求，registry 返回一个上传镜像 layer 时要应到的 URL；</p></li><li><p>客户端通过 <code>HEAD /v2/&lt;name&gt;/blobs/&lt;digest&gt;</code> 请求检查 registry 中是否已经存在镜像的 layer。</p></li><li><p>客户端通过URL 使用 POST 方法来实时上传 layer 数据，上传镜像 layer 分为 <code>Monolithic Upload</code> （整体上传）和<code>Chunked Upload</code>（分块上传）两种方式。</p><ul><li>Monolithic Upload </li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">PUT /v2/&lt;name&gt;/blobs/uploads/&lt;session_id&gt;?digest=&lt;digest&gt;</span><br><span class="line"><span class="attribute">Content-Length</span>: &lt;size of layer&gt;</span><br><span class="line"><span class="attribute">Content-Type</span>: application/octet-stream</span><br><span class="line"></span><br><span class="line">&lt;Layer Binary Data&gt;</span><br></pre></td></tr></table></figure><ul><li>Chunked Upload</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">PATCH /v2/&lt;name&gt;/blobs/uploads/&lt;session_id&gt;</span><br><span class="line"><span class="attribute">Content-Length</span>: &lt;size of chunk&gt;</span><br><span class="line"><span class="attribute">Content-Range</span>: &lt;start of range&gt;-&lt;end of range&gt;</span><br><span class="line"><span class="attribute">Content-Type</span>: application/octet-stream</span><br><span class="line"></span><br><span class="line">&lt;Layer Chunk Binary Data&gt;</span><br></pre></td></tr></table></figure></li><li><p>镜像的 layer 上传完成之后，客户端需要向 registry 发送一个 PUT HTTP 请求告知该 layer 已经上传完毕。</p></li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">PUT /v2/&lt;name&gt;/blobs/uploads/&lt;session_id&gt;?digest=&lt;digest&gt;</span><br><span class="line"><span class="attribute">Content-Length</span>: &lt;size of chunk&gt;</span><br><span class="line"><span class="attribute">Content-Range</span>: &lt;start of range&gt;-&lt;end of range&gt;</span><br><span class="line"><span class="attribute">Content-Type</span>: application/octet-stream</span><br><span class="line"></span><br><span class="line">&lt;Last Layer Chunk Binary Data&gt;</span><br></pre></td></tr></table></figure><ul><li>最后当所有的 layer 上传完之后，客户端再将 manifest 推送上去就完事儿了。</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">PUT /v2/&lt;name&gt;/manifests/&lt;reference&gt;</span><br><span class="line">Content-Type: &lt;manifest media type&gt;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">   <span class="attr">"annotations"</span>: &#123;</span><br><span class="line">      <span class="attr">"com.example.key1"</span>: <span class="string">"value1"</span>,</span><br><span class="line">      <span class="attr">"com.example.key2"</span>: <span class="string">"value2"</span></span><br><span class="line">   &#125;,</span><br><span class="line">   <span class="attr">"config"</span>: &#123;</span><br><span class="line">      <span class="attr">"digest"</span>: <span class="string">"sha256:6f4e69a5ff18d92e7315e3ee31c62165ebf25bfa05cad05c0d09d8f412dae401"</span>,</span><br><span class="line">      <span class="attr">"mediaType"</span>: <span class="string">"application/vnd.oci.image.config.v1+json"</span>,</span><br><span class="line">      <span class="attr">"size"</span>: <span class="number">452</span></span><br><span class="line">   &#125;,</span><br><span class="line">   <span class="attr">"layers"</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">         <span class="attr">"digest"</span>: <span class="string">"sha256:6f4e69a5ff18d92e7315e3ee31c62165ebf25bfa05cad05c0d09d8f412dae401"</span>,</span><br><span class="line">         <span class="attr">"mediaType"</span>: <span class="string">"application/vnd.oci.image.layer.v1.tar+gzip"</span>,</span><br><span class="line">         <span class="attr">"size"</span>: <span class="number">78343</span></span><br><span class="line">      &#125;</span><br><span class="line">   ],</span><br><span class="line">   <span class="attr">"schemaVersion"</span>: <span class="number">2</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Python-docker-drag"><a href="#Python-docker-drag" class="headerlink" title="Python docker-drag"></a>Python <a href="https://github.com/NotGlop/docker-drag" target="_blank" rel="noopener">docker-drag</a></h3><p>这是一个很简单粗暴的 Python 脚本，使用 request 库请求 registry API 来从镜像仓库中拉取镜像，并保存为一个 tar 包，拉完之后使用 docker load 加载一下就能食用啦。该 python 脚本简单到去掉空行和注释不到 200 行，如果把这个脚本源码读一遍的话就能大概知道 docker pull 和 skopeo copy 的一些原理，他们都是去调用 registry 的 API ，所以还是推荐去读一下这个它的源码。</p><p>食用起来也很简单直接 <code>python3 docker_pull.py [image name]</code>，貌似只能拉取 docker.io 上的镜像。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">╭─root@sg-02 /home/ubuntu</span><br><span class="line">╰─# wget https://raw.githubusercontent.com/NotGlop/docker-drag/master/docker_pull.py</span><br><span class="line">╭─root@sg-02 /home/ubuntu</span><br><span class="line">╰─# python3 docker_pull.py nginx</span><br><span class="line">Creating image structure in: tmp_nginx_latest</span><br><span class="line">afb6ec6fdc1c: Pull complete [27098756]</span><br><span class="line">dd3ac8106a0b: Pull complete [26210578]                                       ]</span><br><span class="line">8de28bdda69b: Pull complete [538]</span><br><span class="line">a2c431ac2669: Pull complete [900]</span><br><span class="line">e070d03fd1b5: Pull complete [669]</span><br><span class="line">Docker image pulled: library_nginx.tar</span><br><span class="line">╭─root@sg-02 /home/ubuntu</span><br><span class="line">╰─# docker load -i library_nginx.tar</span><br><span class="line">ffc9b21953f4: Loading layer [==================================================&gt;]  72.49MB/72.49MB</span><br><span class="line">d9c0b16c8d5b: Loading layer [==================================================&gt;]  63.81MB/63.81MB</span><br><span class="line">8c7fd6263c1f: Loading layer [==================================================&gt;]  3.072kB/3.072kB</span><br><span class="line">077ae58ac205: Loading layer [==================================================&gt;]  4.096kB/4.096kB</span><br><span class="line">787328500ad5: Loading layer [==================================================&gt;]  3.584kB/3.584kB</span><br><span class="line">Loaded image: nginx:latest</span><br></pre></td></tr></table></figure><h3 id="skopeo"><a href="#skopeo" class="headerlink" title="skopeo"></a>skopeo</h3><p>这个工具是红帽子家的，是 Podman、Skopeo 和 Buildah （简称 PSB ）下一代容器新架构中的一员，不过木子觉着 Podman 想要取代 docker 和 containerd 容器运行时还有很长的路要走，虽然它符合 OCI 规范，但对于企业来讲，替换的成本并不值得他们去换到 PSB 上去。</p><p>其中的 skopeo 这个镜像搬运工具简直是个神器，尤其是在 CI/CD 流水线中搬运两个镜像仓库里的镜像简直爽的不得了。我入职新公司后做的一个工作就是优化我们的 Jenkins 流水线中同步两个镜像仓库的过程，使用 了skopeo 替代 docker 来同步两个镜像仓库中的镜像，将原来需要 2h 小时缩短到了 25min 😀。</p><p>关于这个工具的详细使用推荐大家去读一下我之前写的一篇博客 <a href="https://blog.k8s.li/skopeo.html">镜像搬运工 skopeo 初体验</a> 。在这里只讲两个木子最常用的功能。</p><h4 id="skopeo-copy"><a href="#skopeo-copy" class="headerlink" title="skopeo copy"></a>skopeo copy</h4><p>使用 skopeo copy 两个 registry 中的镜像时，skopeo 请求两个 registry API 直接 copy <code>original blob</code> 到另一个 registry ，这样免去了像 docker pull –&gt; docker tag –&gt; docker push 那样 pull 镜像对镜像进行解压缩，push 镜像进行压缩。尤其是在搬运一些较大的镜像（几GB 或者几十 GB的镜像，比如 <code>nvidia/cuda</code> ），使用 skopeo copy 的加速效果十分明显。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">DEBU[0000] Detected compression format gzip</span><br><span class="line">DEBU[0000] Using original blob without modification</span><br><span class="line"></span><br><span class="line">Getting image source signatures</span><br><span class="line">Copying blob 09a9f6a07669 done</span><br><span class="line">Copying blob f8cdeb3c6c18 done</span><br><span class="line">Copying blob 22c4d5853f25 done</span><br><span class="line">Copying blob 76abc3f50d9b done</span><br><span class="line">Copying blob 3386b7c9ccd4 done</span><br><span class="line">Copying blob b9207193f1af [==============================&gt;-------] 224.2MiB / 271.2MiB</span><br><span class="line">Copying blob 2f32d819e6ce done</span><br><span class="line">Copying blob 5dbc3047e646 done</span><br><span class="line">Copying blob f8dfcc3265c3 [==================&gt;-------------------] 437.1MiB / 864.3MiB</span><br><span class="line">Copying blob 13d3556105d1 done</span><br><span class="line">Copying blob f9b7fa6a027e [=========================&gt;------------] 84.0MiB / 124.3MiB</span><br><span class="line">Copying blob a1a0f6abe73b [====================&gt;-----------------] 417.9MiB / 749.1MiB</span><br><span class="line">Copying blob bcc9947fc8a4 done</span><br><span class="line">Copying blob 9563b2824fef done</span><br><span class="line">Copying blob a1b8faa0044b [===&gt;----------------------------------] 88.0MiB / 830.1MiB</span><br><span class="line">Copying blob 9917e218edfd [===============&gt;----------------------] 348.6MiB / 803.6MiB</span><br><span class="line">Copying blob 776b9ff2f788 done</span><br><span class="line">Copying config d0c3cfd730 done</span><br><span class="line">Writing manifest to image destination</span><br><span class="line">Storing signatures</span><br></pre></td></tr></table></figure><h4 id="skopeo-inspect"><a href="#skopeo-inspect" class="headerlink" title="skopeo inspect"></a>skopeo inspect</h4><p>用 skopeo inspect 命令可以很方方便地通过 registry 的 API 来查看镜像的 manifest 文件，以前我都是用 curl 命令的，要 token 还要加一堆参数，所以比较麻烦，所以后来就用上了  skopeo inspect😀。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">root@deploy:/root # skopeo inspect docker://index.docker.io/webpsh/webps:latest --raw</span><br><span class="line">&#123;</span><br><span class="line">   <span class="attr">"schemaVersion"</span>: <span class="number">2</span>,</span><br><span class="line">   <span class="attr">"mediaType"</span>: <span class="string">"application/vnd.docker.distribution.manifest.v2+json"</span>,</span><br><span class="line">   <span class="attr">"config"</span>: &#123;</span><br><span class="line">      <span class="attr">"mediaType"</span>: <span class="string">"application/vnd.docker.container.image.v1+json"</span>,</span><br><span class="line">      <span class="attr">"size"</span>: <span class="number">2534</span>,</span><br><span class="line">      <span class="attr">"digest"</span>: <span class="string">"sha256:30d9679b0b1ca7e56096eca0cdb7a6eedc29b63968f25156ef60dec27bc7d206"</span></span><br><span class="line">   &#125;,</span><br><span class="line">   <span class="attr">"layers"</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">         <span class="attr">"mediaType"</span>: <span class="string">"application/vnd.docker.image.rootfs.diff.tar.gzip"</span>,</span><br><span class="line">         <span class="attr">"size"</span>: <span class="number">2813316</span>,</span><br><span class="line">         <span class="attr">"digest"</span>: <span class="string">"sha256:cbdbe7a5bc2a134ca8ec91be58565ec07d037386d1f1d8385412d224deafca08"</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">         <span class="attr">"mediaType"</span>: <span class="string">"application/vnd.docker.image.rootfs.diff.tar.gzip"</span>,</span><br><span class="line">         <span class="attr">"size"</span>: <span class="number">8088920</span>,</span><br><span class="line">         <span class="attr">"digest"</span>: <span class="string">"sha256:54335262c2ed2d4155e62b45b187a1394fbb6f39e0a4a171ab8ce0c93789e6b0"</span></span><br><span class="line">      &#125;,</span><br><span class="line">      &#123;</span><br><span class="line">         <span class="attr">"mediaType"</span>: <span class="string">"application/vnd.docker.image.rootfs.diff.tar.gzip"</span>,</span><br><span class="line">         <span class="attr">"size"</span>: <span class="number">262</span>,</span><br><span class="line">         <span class="attr">"digest"</span>: <span class="string">"sha256:31555b34852eddc7c01f26fa9c0e5e577e36b4e7ccf1b10bec977eb4593a376b"</span></span><br><span class="line">      &#125;</span><br><span class="line">   ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="镜像是怎么存放的-二-registry-存储🙄"><a href="#镜像是怎么存放的-二-registry-存储🙄" class="headerlink" title="镜像是怎么存放的 (二) registry 存储🙄"></a>镜像是怎么存放的 (二) registry 存储🙄</h2><p>文章的开头我们提到过 OCI 规范中的镜像仓库规范 <a href="https://github.com/opencontainers/distribution-spec" target="_blank" rel="noopener">distribution-spec</a>，该规范就定义着容器镜像如何存储在远端（即 registry）上。我们可以把 registry 看作镜像的仓库，使用该规范可以帮助我们把这些镜像按照约定俗成的格式来存放，目前实现该规范的 registry 就 docker 家的 registry 使用的多一些。其他的 registry 比如 harbor ，quay.io 使用的也比较多。</p><h3 id="registry-registry-docker-v2"><a href="#registry-registry-docker-v2" class="headerlink" title="registry (/registry/docker/v2)"></a>registry (/registry/docker/v2)</h3><p>想要分析一下镜像是如何存放在 registry 上的，我们在本地使用 docker run 来起 registry 的容器即可，我们仅仅是来分析 registry 中镜像时如何存储的，这种场景下不太适合用 harbor 这种重量级的 registry 。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">╭─root@sg-02 /home/ubuntu</span><br><span class="line">╰─# docker run -d --name registry -p 5000:5000 -v /var/lib/registry:/var/lib/registry registry</span><br><span class="line">335ea763a2fa4508ebf3ec6f8b11f3b620a11bdcaa0ab43176b781427e0beee6</span><br></pre></td></tr></table></figure><p>启动完 registry 容器之后我们给之前已经构建好的镜像重新打上改 registry 的 tag 方便后续 push 到 registry 上。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">╭─root@sg-02 ~/buster/slim</span><br><span class="line">╰─# docker tag debian:v1  localhost:5000/library/debian:v1</span><br><span class="line">╭─root@sg-02 ~/buster/slim</span><br><span class="line">╰─# ^v1^v2</span><br><span class="line">╭─root@sg-02 ~/buster/slim</span><br><span class="line">╰─# docker tag debian:v2  localhost:5000/library/debian:v2</span><br><span class="line">╭─root@sg-02 ~/buster/slim</span><br><span class="line">╰─# docker images</span><br><span class="line">REPOSITORY                      TAG                 IMAGE ID            CREATED             SIZE</span><br><span class="line">debian                          v2                  e6e782a57a51        5 minutes ago       69.2MB</span><br><span class="line">localhost:5000/library/debian   v2                  e6e782a57a51        5 minutes ago       69.2MB</span><br><span class="line">debian                          v1                  cfba37fd24f8        9 minutes ago       69.2MB</span><br><span class="line">localhost:5000/library/debian   v1                  cfba37fd24f8        9 minutes ago       69.2MB</span><br><span class="line">╭─root@sg-02 ~/buster/slim</span><br><span class="line">╰─# docker push localhost:5000/library/debian:v1</span><br><span class="line">The push refers to repository [localhost:5000/library/debian]</span><br><span class="line">d1b85e6186f6: Pushed</span><br><span class="line">v1: digest: sha256:b9caca385021f231e15aee34929eac332c49402372a79808d07ee66866792239 size: 529</span><br><span class="line">╭─root@sg-02 ~/buster/slim</span><br><span class="line">╰─# docker push localhost:5000/library/debian:v2</span><br><span class="line">The push refers to repository [localhost:5000/library/debian]</span><br><span class="line">d1b85e6186f6: Layer already exists</span><br><span class="line">v2: digest: sha256:c805f078bb47c575e9602b09af7568eb27fd1c92073199acba68c187bc5bcf11 size: 529</span><br></pre></td></tr></table></figure><p>当我们在本地启动一个 registry 容器之后，容器内默认的存储位置为 <code>/var/lib/registry</code> ，所以我们在启动的时候加了参数 <code>-v /var/lib/registry:/var/lib/registry</code> 将本机的路径挂载到容器内。进入这里路径我们使用 tree 命令查看一下这个目录的存储结构。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">╭─root@sg-02 /var/lib/registry/docker/registry/v2</span><br><span class="line">╰─# tree -h</span><br><span class="line">.</span><br><span class="line">├── [4.0K]  blobs</span><br><span class="line">│   └── [4.0K]  sha256</span><br><span class="line">│       ├── [4.0K]  aa</span><br><span class="line">│       │   └── [4.0K]  aaae33815489895f602207ac5a583422b8a8755b3f67fc6286ca9484ba685bdb</span><br><span class="line">│       │       └── [ 26M]  data</span><br><span class="line">│       ├── [4.0K]  b9</span><br><span class="line">│       │   └── [4.0K]  b9caca385021f231e15aee34929eac332c49402372a79808d07ee66866792239</span><br><span class="line">│       │       └── [ 529]  data</span><br><span class="line">│       ├── [4.0K]  c8</span><br><span class="line">│       │   └── [4.0K]  c805f078bb47c575e9602b09af7568eb27fd1c92073199acba68c187bc5bcf11</span><br><span class="line">│       │       └── [ 529]  data</span><br><span class="line">│       ├── [4.0K]  cf</span><br><span class="line">│       │   └── [4.0K]  cfba37fd24f80f59e5d7c1f7735cae7a383e887d8cff7e2762fdd78c0d73568d</span><br><span class="line">│       │       └── [1.4K]  data</span><br><span class="line">│       └── [4.0K]  e6</span><br><span class="line">│           └── [4.0K]  e6e782a57a51d01168907938beb5cd5af24fcb7ebed8f0b32c203137ace6d3df</span><br><span class="line">│               └── [1.4K]  data</span><br><span class="line">└── [4.0K]  repositories</span><br><span class="line">    └── [4.0K]  library</span><br><span class="line">        └── [4.0K]  debian</span><br><span class="line">            ├── [4.0K]  _layers</span><br><span class="line">            │   └── [4.0K]  sha256</span><br><span class="line">            │       ├── [4.0K]  aaae33815489895f602207ac5a583422b8a8755b3f67fc6286ca9484ba685bdb</span><br><span class="line">            │       │   └── [  71]  link</span><br><span class="line">            │       ├── [4.0K]  cfba37fd24f80f59e5d7c1f7735cae7a383e887d8cff7e2762fdd78c0d73568d</span><br><span class="line">            │       │   └── [  71]  link</span><br><span class="line">            │       └── [4.0K]  e6e782a57a51d01168907938beb5cd5af24fcb7ebed8f0b32c203137ace6d3df</span><br><span class="line">            │           └── [  71]  link</span><br><span class="line">            ├── [4.0K]  _manifests</span><br><span class="line">            │   ├── [4.0K]  revisions</span><br><span class="line">            │   │   └── [4.0K]  sha256</span><br><span class="line">            │   │       ├── [4.0K]  b9caca385021f231e15aee34929eac332c49402372a79808d07ee66866792239</span><br><span class="line">            │   │       │   └── [  71]  link</span><br><span class="line">            │   │       └── [4.0K]  c805f078bb47c575e9602b09af7568eb27fd1c92073199acba68c187bc5bcf11</span><br><span class="line">            │   │           └── [  71]  link</span><br><span class="line">            │   └── [4.0K]  tags</span><br><span class="line">            │       ├── [4.0K]  v1</span><br><span class="line">            │       │   ├── [4.0K]  current</span><br><span class="line">            │       │   │   └── [  71]  link</span><br><span class="line">            │       │   └── [4.0K]  index</span><br><span class="line">            │       │       └── [4.0K]  sha256</span><br><span class="line">            │       │           └── [4.0K]  b9caca385021f231e15aee34929eac332c49402372a79808d07ee66866792239</span><br><span class="line">            │       │               └── [  71]  link</span><br><span class="line">            │       └── [4.0K]  v2</span><br><span class="line">            │           ├── [4.0K]  current</span><br><span class="line">            │           │   └── [  71]  link</span><br><span class="line">            │           └── [4.0K]  index</span><br><span class="line">            │               └── [4.0K]  sha256</span><br><span class="line">            │                   └── [4.0K]  c805f078bb47c575e9602b09af7568eb27fd1c92073199acba68c187bc5bcf11</span><br><span class="line">            │                       └── [  71]  link</span><br><span class="line">            └── [4.0K]  _uploads</span><br><span class="line"></span><br><span class="line">37 directories, 14 files</span><br></pre></td></tr></table></figure><p>树形的结构看着不太直观，木子就画了一张层级结构的图：</p><p><img src="img/registry-arch.png" alt="img"></p><h3 id="blobs-目录"><a href="#blobs-目录" class="headerlink" title="blobs 目录"></a>blobs 目录</h3><p>之前我们向 registry 种推送了两个镜像，这两个镜像的 layer 相同但不是用一个镜像，在我们之前 push image 的时候也看到了 <code>d1b85e6186f6: Layer already exists</code>。也就可以证明了，虽然两个镜像不同，但它们的 layer 在 registry 中存储的时候可能是相同的。</p><p>在 <code>blobs/sha256</code> 目录下一共有 5 个名为 data 的文件，我们可以推测一下最大的那个 <code>[ 26M]</code> 应该是镜像的 layer ，最小的 <code>[ 529]</code> 那个应该是 manifest，剩下的那个 <code>[1.4K]</code> 应该就是 image config 文件。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">╭─root@sg-02 /var/lib/registry/docker/registry/v2/blobs/sha256</span><br><span class="line">╰─# tree -h</span><br><span class="line">.</span><br><span class="line">├── [4.0K]  aa</span><br><span class="line">│   └── [4.0K]  aaae33815489895f602207ac5a583422b8a8755b3f67fc6286ca9484ba685bdb</span><br><span class="line">│       └── [ 26M]  data</span><br><span class="line">├── [4.0K]  b9</span><br><span class="line">│   └── [4.0K]  b9caca385021f231e15aee34929eac332c49402372a79808d07ee66866792239</span><br><span class="line">│       └── [ 529]  data</span><br><span class="line">├── [4.0K]  c8</span><br><span class="line">│   └── [4.0K]  c805f078bb47c575e9602b09af7568eb27fd1c92073199acba68c187bc5bcf11</span><br><span class="line">│       └── [ 529]  data</span><br><span class="line">├── [4.0K]  cf</span><br><span class="line">│   └── [4.0K]  cfba37fd24f80f59e5d7c1f7735cae7a383e887d8cff7e2762fdd78c0d73568d</span><br><span class="line">│       └── [1.4K]  data</span><br><span class="line">└── [4.0K]  e6</span><br><span class="line">    └── [4.0K]  e6e782a57a51d01168907938beb5cd5af24fcb7ebed8f0b32c203137ace6d3df</span><br><span class="line">        └── [1.4K]  data</span><br></pre></td></tr></table></figure><p>在 <code>registry</code> 的存储目录下，<code>blobs</code> 目录用来存放镜像的三种文件： layer 的真实数据，镜像的 manifest 文件，镜像的 image config 文件。这些文件都是以 <code>data</code> 为名的文件存放在于该文件 <code>sha256</code> 相对应的目录下。 使用以内容寻址的 <code>sha256</code> 散列存储方便索引文件，在 <code>blob digest</code> 目录下有一个名为 <code>data</code>的文件，对于 layer 来讲，这是个 <code>data</code> 文件的格式是 <code>vnd.docker.image.rootfs.diff.tar.gzip</code> ，我们可以使用 <code>tar -xvf</code> 命令将这个 layer 解开。当我们使用 docker pull 命令拉取镜像的时候，也是去下载这个 <code>data</code>文件，下载完成之后会有一个 <code>docker-untar</code>的进程将这个 <code>data</code>文件解开存放在<code>/var/lib/docker/overlay2/${digest}/diff</code> 目录下。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">├── [4.0K]  blobs</span><br><span class="line">│   └── [4.0K]  sha256</span><br><span class="line">│       ├── [4.0K]  aa</span><br><span class="line">│       │   └── [4.0K]  aaae33815489895f602207ac5a583422b8a8755b3f67fc6286ca9484ba685bdb</span><br><span class="line">│       │       └── [ 26M]  data</span><br></pre></td></tr></table></figure><h4 id="manifest-文件"><a href="#manifest-文件" class="headerlink" title="manifest 文件"></a>manifest 文件</h4><p>就是一个普通的 json 文件啦，记录了一个镜像所包含的 layer 信息，当我们 pull 镜像的时候会使用到这个文件。</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">╭─root@sg-02 /var/lib/registry/docker/registry/v2/blobs/sha256/b9/b9caca385021f231e15aee34929eac332c49402372a79808d07ee66866792239</span><br><span class="line">╰─# cat data</span><br><span class="line">&#123;</span><br><span class="line">   <span class="attr">"schemaVersion"</span>: <span class="number">2</span>,</span><br><span class="line">   <span class="attr">"mediaType"</span>: <span class="string">"application/vnd.docker.distribution.manifest.v2+json"</span>,</span><br><span class="line">   <span class="attr">"config"</span>: &#123;</span><br><span class="line">      <span class="attr">"mediaType"</span>: <span class="string">"application/vnd.docker.container.image.v1+json"</span>,</span><br><span class="line">      <span class="attr">"size"</span>: <span class="number">1462</span>,</span><br><span class="line">      <span class="attr">"digest"</span>: <span class="string">"sha256:cfba37fd24f80f59e5d7c1f7735cae7a383e887d8cff7e2762fdd78c0d73568d"</span></span><br><span class="line">   &#125;,</span><br><span class="line">   <span class="attr">"layers"</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">         <span class="attr">"mediaType"</span>: <span class="string">"application/vnd.docker.image.rootfs.diff.tar.gzip"</span>,</span><br><span class="line">         <span class="attr">"size"</span>: <span class="number">27097859</span>,</span><br><span class="line">         <span class="attr">"digest"</span>: <span class="string">"sha256:aaae33815489895f602207ac5a583422b8a8755b3f67fc6286ca9484ba685bdb"</span></span><br><span class="line">      &#125;</span><br><span class="line">   ]</span><br><span class="line">&#125;#</span><br></pre></td></tr></table></figure><h4 id="image-config-文件"><a href="#image-config-文件" class="headerlink" title="image config 文件"></a>image config 文件</h4><p>image config 文件里并没有包含镜像的 tag 信息。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line">╭─root@sg-02 /var/lib/registry/docker/registry/v2/blobs/sha256/e6/e6e782a57a51d01168907938beb5cd5af24fcb7ebed8f0b32c203137ace6d3df</span><br><span class="line">╰─# cat data | jq "."</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"architecture"</span>: <span class="string">"amd64"</span>,</span><br><span class="line">  <span class="attr">"config"</span>: &#123;</span><br><span class="line">    <span class="attr">"Hostname"</span>: <span class="string">""</span>,</span><br><span class="line">    <span class="attr">"Domainname"</span>: <span class="string">""</span>,</span><br><span class="line">    <span class="attr">"User"</span>: <span class="string">""</span>,</span><br><span class="line">    <span class="attr">"AttachStdin"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">"AttachStdout"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">"AttachStderr"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">"Tty"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">"OpenStdin"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">"StdinOnce"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">"Env"</span>: [</span><br><span class="line">      <span class="string">"PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">"Cmd"</span>: [</span><br><span class="line">      <span class="string">"bash"</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">"Image"</span>: <span class="string">"sha256:ba8f577813c7bdf6b737f638dffbc688aa1df2ff28a826a6c46bae722977b549"</span>,</span><br><span class="line">    <span class="attr">"Volumes"</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">"WorkingDir"</span>: <span class="string">""</span>,</span><br><span class="line">    <span class="attr">"Entrypoint"</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">"OnBuild"</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">"Labels"</span>: <span class="literal">null</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"container"</span>: <span class="string">"38501d5aa48c080884f4dc6fd4b1b6590ff1607d9e7a12e1cef1d86a3fdc32df"</span>,</span><br><span class="line">  <span class="attr">"container_config"</span>: &#123;</span><br><span class="line">    <span class="attr">"Hostname"</span>: <span class="string">"38501d5aa48c"</span>,</span><br><span class="line">    <span class="attr">"Domainname"</span>: <span class="string">""</span>,</span><br><span class="line">    <span class="attr">"User"</span>: <span class="string">""</span>,</span><br><span class="line">    <span class="attr">"AttachStdin"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">"AttachStdout"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">"AttachStderr"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">"Tty"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">"OpenStdin"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">"StdinOnce"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="attr">"Env"</span>: [</span><br><span class="line">      <span class="string">"PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">"Cmd"</span>: [</span><br><span class="line">      <span class="string">"/bin/sh"</span>,</span><br><span class="line">      <span class="string">"-c"</span>,</span><br><span class="line">      <span class="string">"#(nop) "</span>,</span><br><span class="line">      <span class="string">"CMD [\"bash\"]"</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">"Image"</span>: <span class="string">"sha256:ba8f577813c7bdf6b737f638dffbc688aa1df2ff28a826a6c46bae722977b549"</span>,</span><br><span class="line">    <span class="attr">"Volumes"</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">"WorkingDir"</span>: <span class="string">""</span>,</span><br><span class="line">    <span class="attr">"Entrypoint"</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">"OnBuild"</span>: <span class="literal">null</span>,</span><br><span class="line">    <span class="attr">"Labels"</span>: &#123;&#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"created"</span>: <span class="string">"2020-06-07T01:59:47.348924716Z"</span>,</span><br><span class="line">  <span class="attr">"docker_version"</span>: <span class="string">"19.03.5"</span>,</span><br><span class="line">  <span class="attr">"history"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"created"</span>: <span class="string">"2020-06-07T01:59:46.877600299Z"</span>,</span><br><span class="line">      <span class="attr">"created_by"</span>: <span class="string">"/bin/sh -c #(nop) ADD file:a82014afc29e7b364ac95223b22ebafad46cc9318951a85027a49f9ce1a99461 in / "</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"created"</span>: <span class="string">"2020-06-07T01:59:47.348924716Z"</span>,</span><br><span class="line">      <span class="attr">"created_by"</span>: <span class="string">"/bin/sh -c #(nop)  CMD [\"bash\"]"</span>,</span><br><span class="line">      <span class="attr">"empty_layer"</span>: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="attr">"os"</span>: <span class="string">"linux"</span>,</span><br><span class="line">  <span class="attr">"rootfs"</span>: &#123;</span><br><span class="line">    <span class="attr">"type"</span>: <span class="string">"layers"</span>,</span><br><span class="line">    <span class="attr">"diff_ids"</span>: [</span><br><span class="line">      <span class="string">"sha256:d1b85e6186f67d9925c622a7a6e66faa447e767f90f65ae47cdc817c629fa956"</span></span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="uploads-文件夹"><a href="#uploads-文件夹" class="headerlink" title="_uploads 文件夹"></a>_uploads 文件夹</h4><p>_uploads 文件夹是个临时的文件夹，主要用来存放 push 镜像过程中的文件数据，当镜像 <code>layer</code> 上传完成之后会清空该文件夹。其中的 <code>data</code> 文件上传完毕后会移动到 <code>blobs</code> 目录下，根据该文件的 <code>sha256</code> 值来进行散列存储到相应的目录下。</p><p>上传过程中的目录结构：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">_uploads</span><br><span class="line">├── [  53]  0d6c996e-638f-4436-b2b6-54fa7ad430d2</span><br><span class="line">│   ├── [198M]  data</span><br><span class="line">│   ├── [  20]  hashstates</span><br><span class="line">│   │   └── [  15]  sha256</span><br><span class="line">│   │       └── [ 108]  0</span><br><span class="line">│   └── [  20]  startedat</span><br><span class="line">└── [  53]  ba31818e-4217-47ef-ae46-2784c9222614</span><br><span class="line">    ├── [571M]  data</span><br><span class="line">    ├── [  20]  hashstates</span><br><span class="line">    │   └── [  15]  sha256</span><br><span class="line">    │       └── [ 108]  0</span><br><span class="line">    └── [  20]  startedat</span><br><span class="line"></span><br><span class="line">6 directories, 6 files</span><br></pre></td></tr></table></figure><ul><li>上传完镜像之后，<code>_uploads</code> 文件夹就会被清空，正常情况下这个文件夹是空的。但也有异常的时候😂，比如网络抖动导致上传意外中断，该文件夹就可能不为空。</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">_uploads</span><br><span class="line"></span><br><span class="line">0 directories, 0 files</span><br></pre></td></tr></table></figure><h4 id="manifests-文件夹"><a href="#manifests-文件夹" class="headerlink" title="_manifests 文件夹"></a>_manifests 文件夹</h4><p><code>_manifests</code> 文件夹是镜像上传完成之后由 registry 来生成的，并且该目录下的文件都是一个名为 <code>link</code>的文本文件，它的值指向 blobs 目录下与之对应的目录。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">╭─root@sg-02 /var/lib/registry/docker/registry/v2/repositories/library</span><br><span class="line">╰─# find . -type f</span><br><span class="line">./debian/_layers/sha256/aaae33815489895f602207ac5a583422b8a8755b3f67fc6286ca9484ba685bdb/link</span><br><span class="line">./debian/_layers/sha256/e6e782a57a51d01168907938beb5cd5af24fcb7ebed8f0b32c203137ace6d3df/link</span><br><span class="line">./debian/_layers/sha256/cfba37fd24f80f59e5d7c1f7735cae7a383e887d8cff7e2762fdd78c0d73568d/link</span><br><span class="line">./debian/_manifests/tags/v2/current/link</span><br><span class="line">./debian/_manifests/tags/v2/index/sha256/c805f078bb47c575e9602b09af7568eb27fd1c92073199acba68c187bc5bcf11/link</span><br><span class="line">./debian/_manifests/tags/v1/current/link</span><br><span class="line">./debian/_manifests/tags/v1/index/sha256/b9caca385021f231e15aee34929eac332c49402372a79808d07ee66866792239/link</span><br><span class="line">./debian/_manifests/revisions/sha256/b9caca385021f231e15aee34929eac332c49402372a79808d07ee66866792239/link</span><br><span class="line">./debian/_manifests/revisions/sha256/c805f078bb47c575e9602b09af7568eb27fd1c92073199acba68c187bc5bcf11/link</span><br></pre></td></tr></table></figure><p><code>_manifests</code> 文件夹下包含着镜像的 <code>tags</code> 和 <code>revisions</code> 信息，每一个镜像的每一个 tag 对应着于 tag 名相同的目录。镜像的 tag 并不存储在 image config 中，而是以目录的形式来形成镜像的 tag，这一点比较奇妙，这和我们 Dockerfile 中并不包含镜像名和 tag 一个道理？</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── [4.0K]  _layers</span><br><span class="line">│   └── [4.0K]  sha256</span><br><span class="line">│       ├── [4.0K]  aaae33815489895f602207ac5a583422b8a8755b3f67fc6286ca9484ba685bdb</span><br><span class="line">│       │   └── [  71]  link</span><br><span class="line">│       ├── [4.0K]  cfba37fd24f80f59e5d7c1f7735cae7a383e887d8cff7e2762fdd78c0d73568d</span><br><span class="line">│       │   └── [  71]  link</span><br><span class="line">│       └── [4.0K]  e6e782a57a51d01168907938beb5cd5af24fcb7ebed8f0b32c203137ace6d3df</span><br><span class="line">│           └── [  71]  link</span><br><span class="line">├── [4.0K]  _manifests</span><br><span class="line">│   ├── [4.0K]  revisions</span><br><span class="line">│   │   └── [4.0K]  sha256</span><br><span class="line">│   │       ├── [4.0K]  b9caca385021f231e15aee34929eac332c49402372a79808d07ee66866792239</span><br><span class="line">│   │       │   └── [  71]  link</span><br><span class="line">│   │       └── [4.0K]  c805f078bb47c575e9602b09af7568eb27fd1c92073199acba68c187bc5bcf11</span><br><span class="line">│   │           └── [  71]  link</span><br><span class="line">│   └── [4.0K]  tags</span><br><span class="line">│       ├── [4.0K]  v1</span><br><span class="line">│       │   ├── [4.0K]  current</span><br><span class="line">│       │   │   └── [  71]  link</span><br><span class="line">│       │   └── [4.0K]  index</span><br><span class="line">│       │       └── [4.0K]  sha256</span><br><span class="line">│       │           └── [4.0K]  b9caca385021f231e15aee34929eac332c49402372a79808d07ee66866792239</span><br><span class="line">│       │               └── [  71]  link</span><br><span class="line">│       └── [4.0K]  v2</span><br><span class="line">│           ├── [4.0K]  current</span><br><span class="line">│           │   └── [  71]  link</span><br><span class="line">│           └── [4.0K]  index</span><br><span class="line">│               └── [4.0K]  sha256</span><br><span class="line">│                   └── [4.0K]  c805f078bb47c575e9602b09af7568eb27fd1c92073199acba68c187bc5bcf11</span><br><span class="line">│                       └── [  71]  link</span><br><span class="line">└── [4.0K]  _uploads</span><br><span class="line"></span><br><span class="line">22 directories, 9 files</span><br></pre></td></tr></table></figure><h4 id="镜像的-tag"><a href="#镜像的-tag" class="headerlink" title="镜像的 tag"></a>镜像的 tag</h4><p> 每个 <code>tag</code>名目录下面有 <code>current</code> 目录和 <code>index</code> 目录， <code>current</code> 目录下的 link 文件保存了该 tag 目前的 manifest 文件的 sha256 编码，对应在 <code>blobs</code> 中的 <code>sha256</code> 目录下的 <code>data</code> 文件，而 <code>index</code> 目录则列出了该 <code>tag</code> 历史上传的所有版本的 <code>sha256</code> 编码信息。<code>_revisions</code> 目录里存放了该 <code>repository</code> 历史上上传版本的所有 sha256 编码信息。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">╭─root@sg-02 /var/lib/registry/docker/registry/v2/repositories/library/debian/_manifests/tags/v1</span><br><span class="line">╰─# cat current/link</span><br><span class="line">sha256:b9caca385021f231e15aee34929eac332c49402372a79808d07ee66866792239</span><br><span class="line">╭─root@sg-02 /var/lib/registry/docker/registry/v2/blobs/sha256</span><br><span class="line">╰─# tree -h</span><br><span class="line">.</span><br><span class="line">├── [4.0K]  aa</span><br><span class="line">│   └── [4.0K]  aaae33815489895f602207ac5a583422b8a8755b3f67fc6286ca9484ba685bdb</span><br><span class="line">│       └── [ 26M]  data</span><br><span class="line">├── [4.0K]  b9</span><br><span class="line">│   └── [4.0K]  b9caca385021f231e15aee34929eac332c49402372a79808d07ee66866792239</span><br><span class="line">│       └── [ 529]  data</span><br></pre></td></tr></table></figure><p>当我们 <code>pull</code> 镜像的时候如果不指定镜像的 <code>tag</code>名，默认就是 latest，registry 会从 HTTP 请求中解析到这个 tag 名，然后根据 tag 名目录下的 link 文件找到该镜像的 manifest 的位置返回给客户端，客户端接着去请求这个 manifest 文件，客户端根据这个 manifest 文件来 pull 相应的镜像 layer 。</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">╭─root@sg-02 /var/lib/registry/docker/registry/v2/repositories/library/debian/_manifests/tags/v1</span><br><span class="line">╰─# cat  /var/lib/registry/docker/registry/v2/blobs/sha256/b9/b9caca385021f231e15aee34929eac332c49402372a79808d07ee66866792239/data</span><br><span class="line">&#123;</span><br><span class="line">   <span class="attr">"schemaVersion"</span>: <span class="number">2</span>,</span><br><span class="line">   <span class="attr">"mediaType"</span>: <span class="string">"application/vnd.docker.distribution.manifest.v2+json"</span>,</span><br><span class="line">   <span class="attr">"config"</span>: &#123;</span><br><span class="line">      <span class="attr">"mediaType"</span>: <span class="string">"application/vnd.docker.container.image.v1+json"</span>,</span><br><span class="line">      <span class="attr">"size"</span>: <span class="number">1462</span>,</span><br><span class="line">      <span class="attr">"digest"</span>: <span class="string">"sha256:cfba37fd24f80f59e5d7c1f7735cae7a383e887d8cff7e2762fdd78c0d73568d"</span></span><br><span class="line">   &#125;,</span><br><span class="line">   <span class="attr">"layers"</span>: [</span><br><span class="line">      &#123;</span><br><span class="line">         <span class="attr">"mediaType"</span>: <span class="string">"application/vnd.docker.image.rootfs.diff.tar.gzip"</span>,</span><br><span class="line">         <span class="attr">"size"</span>: <span class="number">27097859</span>,</span><br><span class="line">         <span class="attr">"digest"</span>: <span class="string">"sha256:aaae33815489895f602207ac5a583422b8a8755b3f67fc6286ca9484ba685bdb"</span></span><br><span class="line">      &#125;</span><br><span class="line">   ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后再补充一点就是，同一个镜像在 registry 中存储的位置是相同的，具体的分析可以参考 <a href="https://supereagle.github.io/2018/04/24/docker-registry/" target="_blank" rel="noopener">镜像仓库中镜像存储的原理解析</a> 这篇博客。</p><blockquote><ul><li>通过 Registry API 获得的两个镜像仓库中相同镜像的 manifest 信息完全相同。</li><li>两个镜像仓库中相同镜像的 manifest 信息的存储路径和内容完全相同。</li><li>两个镜像仓库中相同镜像的 blob 信息的存储路径和内容完全相同。</li></ul></blockquote><p>从上面这三个结论中我们可以推断出 registry 存储目录里并不会存储与该 registry 相关的信息，比我们 push 镜像的时候需要给镜像加上 <code>localhost:5000</code> 这个前缀，这个前缀并不会存储在 registry 存储中。加入我要迁移一个很大的 registry 镜像仓库，镜像的数量在 5k 以上。最便捷的办法就是打包这个 registry 存储目录，将这个 tar 包 rsync 到另一台机器即可。需要强调一点，打包 registry 存储目录的时候不需要进行压缩，直接 <code>tar -cvf</code> 即可。因为 registry 存储的镜像 layer 已经是个 <code>tar.gzip</code> 格式的文件，再进行压缩的话效果甚微而且还浪费 CPU 时间得不偿失。</p><h3 id="docker-archive"><a href="#docker-archive" class="headerlink" title="docker-archive"></a>docker-archive</h3><p>本来我想着 docker save 出来的并不是一个镜像，而是一个 <code>.tar</code> 文件，但我想了又想，还是觉着它是一个镜像，只不过存在的方式不同而已。于在 docker 和 registry 中存放的方式不同，使用 docker save 出来的镜像是一个孤立的存在。就像是从蛋糕店里拿出来的蛋糕，外面肯定要有个精美的包装是吧，你总没见过。放在哪里都可以，使用的时候我们使用 docker load 拆开外包装(<code>.tar</code>)就可。比如我们离线部署 harbor 的时候就是使用官方的镜像 tar 包来进行加载镜像启动容器的。</p><h2 id="镜像是怎么食用的😋"><a href="#镜像是怎么食用的😋" class="headerlink" title="镜像是怎么食用的😋"></a>镜像是怎么食用的😋</h2><p>当我们拿到一个镜像之后，如果用它来启动一个容器呢？这里就涉及到了 OCI 规范中的另一个规范即运行时规范 <a href="https://github.com/opencontainers/runtime-spec" target="_blank" rel="noopener">runtime-spec</a> 。容器运行时通过一个叫 <a href="https://github.com/opencontainers/runtime-spec/blob/master/bundle.md" target="_blank" rel="noopener"> OCI runtime filesytem bundle</a> 的标准格式将 OCI 镜像通过工具转换为 bundle ，然后 OCI 容器引擎能够识别这个 bundle 来运行容器。</p><blockquote><p>filesystem bundle 是个目录，用于给 runtime 提供启动容器必备的配置文件和文件系统。标准的容器 bundle 包含以下内容：</p><ul><li>config.json: 该文件包含了容器运行的配置信息，该文件必须存在 bundle 的根目录，且名字必须为 config.json</li><li>容器的根目录，可以由 config.json 中的 root.path 指定</li></ul></blockquote><p><img src="img/20200609_oci-04.jpg" alt="img"></p><h3 id="docker-run"><a href="#docker-run" class="headerlink" title="docker run"></a>docker run</h3><p>当我们启动一个容器之后我们使用 tree 命令来分析一下 overlay2 就会发现，较之前的目录，容器启动之后 overlay2 目录下多了一个 <code>merged</code> 的文件夹，该文件夹就是容器内看到的。docker 通过 overlayfs 联合挂载的技术将镜像的多层 layer 挂载为一层，这层的内容就是容器里所看到的，也就是 merged 文件夹。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">╭─root@sg-02 /var/lib/docker</span><br><span class="line">╰─# tree overlay2 -d -L 3</span><br><span class="line">overlay2</span><br><span class="line">├── 259cf6934509a674b1158f0a6c90c60c133fd11189f98945c7c3a524784509ff</span><br><span class="line">│   └── diff</span><br><span class="line">│       ├── bin</span><br><span class="line">|</span><br><span class="line">│       └── var</span><br><span class="line">├── 27f9e9b74a88a269121b4e77330a665d6cca4719cb9a58bfc96a2b88a07af805</span><br><span class="line">│   ├── diff</span><br><span class="line">│   └── work</span><br><span class="line">├── 5f85c914c55220ec2635bce0080d2ad677f739dcfac4fd266b773625e3051844</span><br><span class="line">│   ├── diff</span><br><span class="line">│   │   └── var</span><br><span class="line">│   ├── merged</span><br><span class="line">│   │   ├── bin</span><br><span class="line">│   │   ├── dev</span><br><span class="line">│   │   ├── etc</span><br><span class="line">│   │   ├── home</span><br><span class="line">│   │   ├── lib</span><br><span class="line">│   │   ├── media</span><br><span class="line">│   │   ├── mnt</span><br><span class="line">│   │   ├── proc</span><br><span class="line">│   │   ├── root</span><br><span class="line">│   │   ├── run</span><br><span class="line">│   │   ├── sbin</span><br><span class="line">│   │   ├── srv</span><br><span class="line">│   │   ├── sys</span><br><span class="line">│   │   ├── tmp</span><br><span class="line">│   │   ├── usr</span><br><span class="line">│   │   └── var</span><br><span class="line">│   └── work</span><br><span class="line">│       └── work</span><br><span class="line">├── 5f85c914c55220ec2635bce0080d2ad677f739dcfac4fd266b773625e3051844-init</span><br><span class="line">│   ├── diff</span><br><span class="line">│   │   ├── dev</span><br><span class="line">│   │   └── etc</span><br><span class="line">│   └── work</span><br><span class="line">│       └── work</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">overlay on / type overlay (rw,relatime,lowerdir=/opt/docker/overlay2/l/4EPD2X5VF62FH5PZOZHZDKAKGL:/opt/docker/overlay2/l/MYRYBGZRI4I76MJWQHN7VLZXLW:/opt/docker/overlay2/l/5RZOXYR35NSGAWTI36CVUIRW7U:/opt/docker/overlay2/l/LBWRL4ZXGBWOTN5JDCDZVNOY7H:/opt/docker/overlay2/l/526XCHXRJMZXRIHN4YWJH2QLPY:/opt/docker/overlay2/l/XK5IA4BWQ2CIS667J3SXPXGQK5,upperdir=/opt/docker/overlay2/f913d81219134e23eb0827a1c27668494dfaea2f1b5d1d0c70382366eabed629/diff,workdir=/opt/docker/overlay2/f913d81219134e23eb0827a1c27668494dfaea2f1b5d1d0c70382366eabed629/work)</span><br></pre></td></tr></table></figure><p>从 docker 官方文档 <a href="https://docs.docker.com/storage/storagedriver/overlayfs-driver/" target="_blank" rel="noopener">Use the OverlayFS storage driver</a> 里偷来的一张图片</p><p><img src="img/overlay_constructs.jpg" alt="overlayfs lowerdir, upperdir, merged"></p><p>关于上图中这些 Dir 的作用，下面是一段从 <a href="https://stackoverflow.com/questions/56550890/docker-image-merged-diff-work-lowerdir-components-of-graphdriver" target="_blank" rel="noopener">StackOverflow</a> 上搬运过来的解释。</p><blockquote><p><strong>LowerDir</strong>: these are the read-only layers of an overlay filesystem. For docker, these are the image layers assembled in order.</p><p><strong>UpperDir</strong>: this is the read-write layer of an overlay filesystem. For docker, that is the equivalent of the container specific layer that contains changes made by that container.</p><p><strong>WorkDir</strong>: this is a required directory for overlay, it needs an empty directory for internal use.</p><p><strong>MergedDir</strong>: this is the result of the overlay filesystem. Docker effectively chroot’s into this directory when running the container.</p></blockquote><p>如果想对 overlayfs 文件系统有详细的了解，可以参考 Linux 内核官网上的这篇文档 <a href="https://www.kernel.org/doc/Documentation/filesystems/overlayfs.txt" target="_blank" rel="noopener">overlayfs.txt</a> 。</p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><h3 id="官方文档"><a href="#官方文档" class="headerlink" title="官方文档"></a>官方文档</h3><ul><li><a href="https://docs.docker.com/develop/develop-images/baseimages/" target="_blank" rel="noopener">Create a base image</a></li><li><a href="https://hub.docker.com/_/scratch" target="_blank" rel="noopener">FROM scratch</a></li><li><a href="https://docs.docker.com/registry/" target="_blank" rel="noopener">Docker Registry</a></li><li><a href="https://github.com/docker/distribution/blob/master/docs/spec/manifest-v2-2.md" target="_blank" rel="noopener">Image Manifest Version 2, Schema 2</a></li><li><a href="https://docs.docker.com/registry/spec/api/" target="_blank" rel="noopener">Docker Registry HTTP API V2</a></li><li><a href="https://github.com/containers/image" target="_blank" rel="noopener">image</a></li><li><a href="https://github.com/opencontainers/image-spec" target="_blank" rel="noopener">OCI Image Manifest Specification</a></li><li><a href="https://github.com/opencontainers/distribution-spec" target="_blank" rel="noopener">distribution-spec</a></li><li><a href="https://doi-janky.infosiftr.net/job/tianon/job/debuerreotype/" target="_blank" rel="noopener">debuerreotype/</a></li><li><a href="https://www.kernel.org/doc/Documentation/filesystems/overlayfs.txt" target="_blank" rel="noopener">overlayfs.txt</a></li></ul><h3 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h3><ul><li><a href="https://github.com/docker-library/oi-janky-groovy" target="_blank" rel="noopener">oi-janky-groovy</a></li><li><a href="https://github.com/debuerreotype/docker-debian-artifacts" target="_blank" rel="noopener">docker-debian-artifacts</a></li><li><a href="https://github.com/NotGlop/docker-drag" target="_blank" rel="noopener">docker-drag</a></li><li><a href="https://github.com/deislabs/oras" target="_blank" rel="noopener">oras</a></li><li><a href="https://github.com/containers/skopeo" target="_blank" rel="noopener">skopeo</a></li><li><a href="https://github.com/vbatts/tar-split" target="_blank" rel="noopener">tar-split</a></li></ul><h3 id="博客"><a href="#博客" class="headerlink" title="博客"></a>博客</h3><ul><li><a href="https://supereagle.github.io/2018/04/24/docker-registry/" target="_blank" rel="noopener">镜像仓库中镜像存储的原理解析</a></li><li><a href="https://fuckcloudnative.io/posts/how-manage-image/" target="_blank" rel="noopener">docker 在本地如何管理 image（镜像）?</a></li><li><a href="http://gaocegege.com/Blog/ormb" target="_blank" rel="noopener">ormb：像管理 Docker 容器镜像一样管理机器学习模型</a></li><li><a href="https://blog.fleeto.us/post/how-are-docker-images-built/" target="_blank" rel="noopener">镜像是怎样炼成的</a></li><li><a href="https://duyanghao.github.io/docker-registry-pull-manifest-v2/" target="_blank" rel="noopener">docker pull分析</a></li><li><a href="https://github.com/helios741/myblog/blob/new/learn_go/src/2019/20191206_docker_disk_storage/README.md" target="_blank" rel="noopener">浅谈docker中镜像和容器在本地的存储</a></li><li><a href="https://www.qedev.com/cloud/103860.html" target="_blank" rel="noopener">容器OCI规范 镜像规范</a></li><li><a href="https://xuanwo.io/2019/08/06/oci-intro/" target="_blank" rel="noopener">开放容器标准(OCI) 内部分享</a></li><li><a href="https://wilhelmguo.cn/blog/post/william/%E5%AE%B9%E5%99%A8%E5%BC%80%E6%94%BE%E6%8E%A5%E5%8F%A3%E8%A7%84%E8%8C%83%EF%BC%88CRI-OCI%EF%BC%89-2" target="_blank" rel="noopener">容器开放接口规范（CRI OCI）</a></li><li><a href="https://segmentfault.com/a/1190000014284289" target="_blank" rel="noopener">Docker镜像的存储机制</a></li><li><a href="http://open.daocloud.io/docker-source-code-analysis-part10/" target="_blank" rel="noopener">Docker源码分析（十）：Docker镜像下载</a></li><li><a href="http://open.daocloud.io/docker-source-code-analysis-part9/" target="_blank" rel="noopener">Docker源码分析（九）：Docker镜像</a></li><li><a href="https://www.twblogs.net/a/5b8aab392b71775d1ce86eca" target="_blank" rel="noopener">docker push 過程 distribution源碼 分析</a></li><li><a href="http://open.daocloud.io/tag/allen-tan-docker/" target="_blank" rel="noopener">Allen 谈 Docker</a></li><li><a href="http://open.daocloud.io/shen-ru-li-jie-dockerjing-xiang-jsonwen-jian-2/" target="_blank" rel="noopener">深入理解 Docker 镜像 json 文件</a></li><li><a href="http://open.daocloud.io/docker-jing-xiang-nei-you-sha-cun-na-ntitled/" target="_blank" rel="noopener">Docker 镜像内有啥，存哪？</a></li><li><a href="http://open.daocloud.io/allen-tan-docker-xi-lie-zhi-shen-ke-li-jie-docker-jing-xiang-da-xiao/" target="_blank" rel="noopener">理解 Docker 镜像大小</a></li><li><a href="http://open.daocloud.io/allen-tan-docker-xi-lie-zhi-tu-kan-jin-docker-rong-qi-wen-jian-xi-tong/" target="_blank" rel="noopener">看尽 docker 容器文件系统</a></li><li><a href="https://qhh.me/2019/02/17/%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3-Docker-%E6%9E%84%E5%BB%BA%E4%B8%8A%E4%B8%8B%E6%96%87/" target="_blank" rel="noopener">深入理解 Docker 构建上下文</a></li><li><a href="https://cizixs.com/2017/11/05/oci-and-runc/" target="_blank" rel="noopener">OCI 和 runc：容器标准化和 docker</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;p&gt;上周在写&lt;a
        
      
    
    </summary>
    
    
      <category term="技术" scheme="https://blog.k8s.li/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="docker" scheme="https://blog.k8s.li/tags/docker/"/>
    
      <category term="registry" scheme="https://blog.k8s.li/tags/registry/"/>
    
      <category term="image" scheme="https://blog.k8s.li/tags/image/"/>
    
  </entry>
  
  <entry>
    <title>mount 命令之 --bind 挂载参数</title>
    <link href="https://blog.k8s.li/mount-bind.html"/>
    <id>https://blog.k8s.li/mount-bind.html</id>
    <published>2020-06-01T16:00:00.000Z</published>
    <updated>2020-09-15T00:28:09.948Z</updated>
    
    <content type="html"><![CDATA[<h2 id="翻车（："><a href="#翻车（：" class="headerlink" title="翻车（："></a>翻车（：</h2><p>由于我的 VPS 不是大盘鸡(就是大容量磁盘机器啦😂)， docker 存储目录 <code>/var/lib/docker</code> 所在的分区严重不足，于是就想着在不改变 docker 配置的下将 <code>/opt</code> 目录下的分区分配给 <code>/var/lib/docker</code> 目录。首先想到的是把 <code>/var/lib/docker</code> 复制到 <code>/opt/docker</code>，然后再将 <code>/opt/docker</code> 软链接到 <code>/var/lib/docker</code> 。</p><p>于是我就一顿操作猛如虎，<code>mv /var/lib/docker /opt/docker &amp;&amp; ln -s /opt/docker /var/lib/docker</code> 一把梭，然后我启动一个容器的时候当场就翻车了🤣。</p><p>原来有些程序是不支持软链接目录的，还有一点就是软链接的路径也有点坑。比如我将 <code>/opt/docker -&gt; /var/lib/docker/</code> ，在 <code>/var/lib/docker</code> 目录下执行 <code>ls ../</code> 即它的上一级目录是 <code>/opt</code> 而不是 <code>/var/lib</code> ，对于一些依赖相对路径的应用（尤其是 shell 脚本）来讲这样使用软链接的方式也容易翻车😂。</p><p>那么有没有一种更好的办法将两个目录进行“硬链接”呢，注意我在此用的是双引号，并非是真正的”硬链接“，搜了一圈发现 mount –bind 这种骚操作。无论我们对文件使用软链接/硬链接/bind，还是对目录使用软链接，其实都是希望操作的 <code>src</code> 和 <code>dest</code> 他们二者都能保持一致。通过 bind 挂载的方式具有着挂载点的一些特性，这是链接是不具有的，对一些不支持链接的应用来讲，bind 的方式要友好一些。</p><h2 id="bind"><a href="#bind" class="headerlink" title="bind"></a>bind</h2><p>其实 bind 这个挂载选项我们在使用 docker 或者 kubernetes 多少都会用到的，尤其是当使用 kubernetes  时 kubelet 在启动容器挂载存储的时候底层是将 node 节点本机的 <code>/var/lib/kubelet/pods/&lt;Pod的ID&gt;/volumes/kubernetes.io~&lt;Volume类型&gt;/&lt;Volume名字&gt;</code> 目录通过 bind 的方式挂载到容器中的，详细的分析可以参考之前我写的一篇博客 <a href="https://blog.k8s.li/kubelet-mount-volumes-analysis.html">kubelet 挂载 volume 原理分析</a> 。</p><blockquote><ul><li><strong>Volumes</strong> are stored in a part of the host filesystem which is <em>managed by Docker</em> (<code>/var/lib/docker/volumes/</code> on Linux). Non-Docker processes should not modify this part of the filesystem. Volumes are the best way to persist data in Docker.</li><li><strong>Bind mounts</strong> may be stored <em>anywhere</em> on the host system. They may even be important system files or directories. Non-Docker processes on the Docker host or a Docker container can modify them at any time.</li><li><strong><code>tmpfs</code> mounts</strong> are stored in the host system’s memory only, and are never written to the host system’s filesystem.</li></ul></blockquote><p>不过那时候并没有详细地去了解 bind 的原理，直到最近翻了一次车才想起来 bind ，于是接下来就详细地分析以下 mount –bind 挂载参数。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 使用软链接链接目录</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> ls -i 显示文件/目录的 inode 号</span></span><br><span class="line">╭─root@sg-02 /var/lib</span><br><span class="line">╰─# ln -s /opt/docker /var/lib/docker</span><br><span class="line">╭─root@sg-02 /var/lib</span><br><span class="line">╰─# ls -i /opt | grep docker</span><br><span class="line">2304916 docker</span><br><span class="line">╭─root@sg-02 /var/lib</span><br><span class="line">╰─# ls -i /var/lib | grep docker</span><br><span class="line">    211 docker</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 使用硬链接链接两个文件</span></span><br><span class="line">╭─root@sg-02 /var/lib</span><br><span class="line">╰─# ln /usr/local/bin/docker-compose /usr/bin/docker-compose</span><br><span class="line">╭─root@sg-02 /var/lib</span><br><span class="line">╰─# ls -i /usr/bin/docker-compose</span><br><span class="line">112 /usr/bin/docker-compose</span><br><span class="line">╭─root@sg-02 /var/lib</span><br><span class="line">╰─# ls -i /usr/bin/docker-compose</span><br><span class="line">112 /usr/bin/docker-compose</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 使用 --<span class="built_in">bind</span> 挂载目录</span></span><br><span class="line">╭─root@sg-02 /var/lib</span><br><span class="line">╰─# mount --bind /opt/docker /var/lib/docker</span><br><span class="line">╭─root@sg-02 /var/lib</span><br><span class="line">╰─# ls -i /var/lib | grep docker</span><br><span class="line">2304916 docker</span><br><span class="line">╭─root@sg-02 /var/lib</span><br><span class="line">╰─# ls -i /opt | grep docker</span><br><span class="line">2304916 docker</span><br></pre></td></tr></table></figure><p>我们可以看到当使用使用硬链接或 bind 挂载目录时，两个文件 inode 号是相同的，使用软链接的两个文件的 inode 号是不同的。但目录又不能使用硬链接，而且硬链接不支持跨分区。我们是否可以将 bind 的效果和<br>“硬链接目录“ 样来使用呢？其实可以这样用，但这样类比并不严谨。</p><p>当我们使用 bind 的时候，是将一个目录 A  挂载到另一个目录 B ，目录 B 原有的内容就被屏”蔽掉“了，目录 B 里面的内容就是目录 A 里面的内容。这和我们挂在其他分区到挂载点目录一样，目录 B 的内容还是存在的，只不过是被”屏蔽“掉了，当我们 umount B 后，原内容就会复现。</p><p>当我们使用 <code>docker run -v PATH:PATH</code> 启动一个容器的时候，实质上也是会用到 <code>bind</code>，docker 会将主机的目录通过 <code>bind</code> 的方式挂载到容器目录。下面我们启动一个 alpine 容器来实验一下。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker run --name alpine -v /opt/bind/:/var --privileged --rm -it alpine sh</span><br><span class="line">docker inspect alpine</span><br></pre></td></tr></table></figure><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">"Mounts": [</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="attr">"Type"</span>: <span class="string">"bind"</span>,</span><br><span class="line">        <span class="attr">"Source"</span>: <span class="string">"/opt/bind"</span>,</span><br><span class="line">        <span class="attr">"Destination"</span>: <span class="string">"/var"</span>,</span><br><span class="line">        <span class="attr">"Mode"</span>: <span class="string">""</span>,</span><br><span class="line">        <span class="attr">"RW"</span>: <span class="literal">true</span>,</span><br><span class="line">        <span class="attr">"Propagation"</span>: <span class="string">"rprivate"</span></span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>在容器内使用 umount 命令卸载掉 <code>/var</code> ，umount 操作需要 root 权限，这也是为什么要在容器启动的时候加上 <code>--privileged</code> 参数来启动一个特权容器的原因。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">/ # ls /var/</span><br><span class="line">74898710_p21.jpg    MJSTEALEY.md        docker-compose.yml  letsencrypt         resolv.conf</span><br><span class="line">CONSOLE.md          README.md           hostname            logs                stop-and-remove.sh</span><br><span class="line">LICENSE             config              hosts               nginx               webp-server</span><br><span class="line">/ # umount /var/</span><br><span class="line"><span class="meta">#</span><span class="bash"> umount 之后容器内原来的 /var 目录内容<span class="string">"恢复"</span>了</span></span><br><span class="line">/ # ls /var/</span><br><span class="line">cache  empty  lib    local  lock   log    mail   opt    run    spool  tmp</span><br></pre></td></tr></table></figure><h2 id="其他用处🤔"><a href="#其他用处🤔" class="headerlink" title="其他用处🤔"></a>其他用处🤔</h2><h3 id="无缝更新-Webp-Server-Go"><a href="#无缝更新-Webp-Server-Go" class="headerlink" title="无缝更新 Webp Server Go"></a>无缝更新 Webp Server Go</h3><p>在 <a href="">小土豆</a>、<a href="">Nona</a> 大佬讨论 <a href="">Webp Server Go</a> 无缝更新的时候我们提出了一个思路：</p><blockquote><ul><li><p>在更新之前先对 nginx 配置文件进行修改，去掉 webp server 的 location 字段：</p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">location</span> <span class="regexp">~* \.(png|jpg|jpeg)$</span> &#123;</span><br><span class="line">    <span class="attribute">proxy_pass</span> http://127.0.0.1:3333;</span><br><span class="line">    <span class="attribute">proxy_set_header</span> HOST <span class="variable">$http_host</span>;</span><br><span class="line">    <span class="attribute">add_header</span> Cache-Control <span class="string">'no-store, no-cache, must-revalidate, proxy-revalidate, max-age=0'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>然后再 nginx -s reload 不中断 reload 一</p></li><li><p>接着停掉 webp server 服务 <code>systemctl stop webps</code></p></li><li><p>mv webp-server{.bak,}</p></li><li><p>mv ./upload/webp-server-linux-amd64 webp-server</p></li><li><p>接着启动 webp server 服务 <code>systemctl start webps</code></p></li><li><p>然后开倒车把 nginx 配置文件再改回去🍞</p></li></ul></blockquote><p>在此需要提几点，我们希望<strong>无缝更新</strong>，即在更新的过程中不会导致用户请求图片资源失败，那怕 <code>+1s</code>都不行，所以我们需要暂时性地在 nginx 配置文件里去掉 webp server ，使它去请求原图片，等更新完 webp server 之后再添加上去。</p><p>对于木子这种经常删库跑路的手残菜鸟来讲，对一个配置文件改来改去不是好方法，万一 nginx 配置文件改来改去没改好， nginx -s reload 一下 nginx 服务就炸了😂。那么使用 cp 和 mv 怎么样。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">cp blog.conf&#123;,.bak&#125;</span><br><span class="line">vim blog.conf</span><br><span class="line">nginx -s reload</span><br><span class="line">- update webp server</span><br><span class="line">mv blog.conf&#123;,.bak2&#125;</span><br><span class="line">mv blog.conf&#123;.bak,&#125;</span><br><span class="line">nginx -s reload</span><br></pre></td></tr></table></figure><p>使用 bind 呢？好像少了一步，下次更新 webp server 的时候只需要 umount 一下，更新完之后再 mount 一下就可以啦。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cp blog.conf&#123;,.bak&#125;</span><br><span class="line">vim blog.conf</span><br><span class="line">nginx -s reload</span><br><span class="line">- update webp server</span><br><span class="line">mount --bind blog.conf.bak blohg.conf</span><br><span class="line">nginx -s reload</span><br></pre></td></tr></table></figure><h3 id="VPS-搬家助手"><a href="#VPS-搬家助手" class="headerlink" title="VPS 搬家助手"></a>VPS 搬家助手</h3><p>其实还有很多用途啦，这里就不罗列了</p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;h2 id=&quot;翻车（：&quot;&gt;&lt;a href=&quot;#翻车（：&quot;
        
      
    
    </summary>
    
    
      <category term="技术" scheme="https://blog.k8s.li/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="linux" scheme="https://blog.k8s.li/tags/linux/"/>
    
      <category term="overlay2" scheme="https://blog.k8s.li/tags/overlay2/"/>
    
      <category term="docker" scheme="https://blog.k8s.li/tags/docker/"/>
    
  </entry>
  
  <entry>
    <title>镜像搬运工 skopeo 初体验</title>
    <link href="https://blog.k8s.li/skopeo.html"/>
    <id>https://blog.k8s.li/skopeo.html</id>
    <published>2020-05-26T16:00:00.000Z</published>
    <updated>2020-05-28T16:00:00.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="搬砖工具"><a href="#搬砖工具" class="headerlink" title="搬砖工具"></a>搬砖工具</h2><p>上周末的时候更新完一篇《木子的搬砖工具😂》，最近因为项目需求又发现了个搬砖工具，所以来水篇博客分享给大家。</p><blockquote><p>  我司项目组中的一个需求就是：在一台机器上去 pull 一个镜像列表中的镜像，这些镜像存储在 registry A Harbor 上，pull 完这些镜像之后重新打上 tag 然后再 push 到另一个 registry B Harbor  上去。相当于一个同步镜像操作，但和 harbor 里在带的那个镜像同步还有很大的不同，我们仅仅需要同步特定 tag 的镜像，而不是整个 harbor 或者 project 里的全部镜像。目前我们的做法还是最简单的方式，使用 docker 命令行的方式来 pull 镜像，然后打 tag 接着 push 到 B harbor。但是啊，当同步二三百个的镜像，或者镜像的总大小几十 GB 的时候这种原始的方法速度还是太慢了，于是就思考有没有另一个工具可以直接将 registry A 中的某个镜像同步到 registry B 中去。</p></blockquote><p>之前我看到过 <a href="https://mritd.me/" target="_blank" rel="noopener">漠然大佬</a> 写的博客<a href="https://mritd.me/2020/03/31/how-to-download-docker-image-without-docker/" target="_blank" rel="noopener">《如何不通过 docker 下载 docker image》</a> ，于是咱也就上手试一下这个工具看看能不能帮咱搬点砖😂。结合这个工具的使用，又一次加深了对容器镜像分发存储的了解，收获颇丰😋</p><h3 id="image"><a href="#image" class="headerlink" title="image"></a>image</h3><p>关于镜像的详细分析可以参考 <a href="https://github.com/helios741/myblog/tree/new/learn_go/src/2019/20191206_docker_disk_storage" target="_blank" rel="noopener">浅谈docker中镜像和容器在本地的存储</a></p><h3 id="registry"><a href="#registry" class="headerlink" title="registry"></a>registry</h3><p>根据 <a href="https://supereagle.github.io/" target="_blank" rel="noopener">Robin</a> 大佬在 <a href="https://supereagle.github.io/2018/04/24/docker-registry/" target="_blank" rel="noopener">镜像仓库中镜像存储的原理解析</a> 文章里得出的结论：</p><blockquote><ul><li>通过 Registry API 获得的两个镜像仓库中相同镜像的 manifest 信息完全相同。</li><li>两个镜像仓库中相同镜像的 manifest 信息的存储路径和内容完全相同。</li><li>两个镜像仓库中相同镜像的 blob 信息的存储路径和内容完全相同。</li></ul></blockquote><h3 id="docker-pull-和-docker-push"><a href="#docker-pull-和-docker-push" class="headerlink" title="docker pull 和 docker push"></a>docker pull 和 docker push</h3><p>之所以想使用 skopeo 替代原有使用 docker pull –&gt; docker tag –&gt; docker push 的操作，是因为 docker pull 镜像的时候，registry 中存储的镜像 layer 格式是 <code>vnd.docker.image.rootfs.diff.tar.gzip</code> ，这是一个 tar.gz 类型的文件。我们可以在本地搭建一个 harbor ，并向 harbor 推送一个 alpine:latest 镜像，来分析一下镜像是如何在 registry 中存储的。</p><ul><li>harbor 的存储目录</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">tree</span><br><span class="line">`-- registry</span><br><span class="line">    `-- v2      # registry V2 版本</span><br><span class="line">        |-- blobs # blobs 目录下存储镜像的 raw 数据，存储的最小单元为 layer</span><br><span class="line">        |   `-- sha256</span><br><span class="line">        |       |-- 39</span><br><span class="line">        |       |-- cb</span><br><span class="line">        |       `-- f7</span><br><span class="line">        `-- repositories # 镜像的元数据信息</span><br><span class="line">            `-- library</span><br><span class="line">                `-- alpine</span><br></pre></td></tr></table></figure><ul><li>镜像的 <a href="https://github.com/opencontainers/image-spec/blob/master/manifest.md" target="_blank" rel="noopener">manifest</a> 是针对registry服务端的配置信息</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">sh-4.2# skopeo inspect docker://index.docker.io/library/alpine:latest --raw</span><br><span class="line">&#123;</span><br><span class="line">   "schemaVersion": 2,</span><br><span class="line">   "mediaType": "application/vnd.docker.distribution.manifest.v2+json",</span><br><span class="line">   "config": &#123;</span><br><span class="line">      "mediaType": "application/vnd.docker.container.image.v1+json",</span><br><span class="line">      "size": 1507,</span><br><span class="line">      "digest": "sha256:f70734b6a266dcb5f44c383274821207885b549b75c8e119404917a61335981a"</span><br><span class="line">   &#125;,</span><br><span class="line">   "layers": [</span><br><span class="line">      &#123;</span><br><span class="line">         "mediaType": "application/vnd.docker.image.rootfs.diff.tar.gzip",</span><br><span class="line">         "size": 2813316,</span><br><span class="line">         "digest": "sha256:cbdbe7a5bc2a134ca8ec91be58565ec07d037386d1f1d8385412d224deafca08"</span><br><span class="line">      &#125;</span><br><span class="line">   ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>仔细看一下 <code>digest</code> 和下面文件夹的名称，他们是一一对应的，因为 manifest 信息就是镜像在 registry 中存储的信息。</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">tree</span><br><span class="line">|-- [  20]  blobs</span><br><span class="line">|   `-- [  36]  sha256</span><br><span class="line">|       |-- [  78]  39</span><br><span class="line">|       |   `-- [  18]  39eda93d15866957feaee28f8fc5adb545276a64147445c64992ef69804dbf01</span><br><span class="line">|       |       `-- [ 528]  data</span><br><span class="line">|       |-- [  78]  cb</span><br><span class="line">|       |   `-- [  18]  cbdbe7a5bc2a134ca8ec91be58565ec07d037386d1f1d8385412d224deafca08</span><br><span class="line">|       |       `-- [2.7M]  data </span><br><span class="line">|       `-- [  78]  f7</span><br><span class="line">|           `-- [  18]  f70734b6a266dcb5f44c383274821207885b549b75c8e119404917a61335981a</span><br><span class="line">|               `-- [1.5K]  data</span><br><span class="line">`-- [  21]  repositories</span><br><span class="line">    `-- [  20]  library</span><br><span class="line">        `-- [  55]  alpine</span><br><span class="line">            |-- [  20]  _layers</span><br><span class="line">            |   `-- [ 150]  sha256</span><br><span class="line">            |       |-- [  18]  cbdbe7a5bc2a134ca8ec91be58565ec07d037386d1f1d8385412d224deafca08</span><br><span class="line">            |       |   `-- [  71]  link</span><br><span class="line">            |       `-- [  18]  f70734b6a266dcb5f44c383274821207885b549b75c8e119404917a61335981a</span><br><span class="line">            |           `-- [  71]  link</span><br><span class="line">            |-- [  35]  _manifests</span><br><span class="line">            |   |-- [  20]  revisions</span><br><span class="line">            |   |   `-- [  78]  sha256</span><br><span class="line">            |   |       `-- [  18]  39eda93d15866957feaee28f8fc5adb545276a64147445c64992ef69804dbf01</span><br><span class="line">            |   |           `-- [  71]  link</span><br><span class="line">            |   `-- [  20]  tags</span><br><span class="line">            |       `-- [  34]  latest</span><br><span class="line">            |           |-- [  18]  current</span><br><span class="line">            |           |   `-- [  71]  link</span><br><span class="line">            |           `-- [  20]  index</span><br><span class="line">            |               `-- [  78]  sha256</span><br><span class="line">            |                   `-- [  18]  39eda93d15866957feaee28f8fc5adb545276a64147445c64992ef69804dbf01</span><br><span class="line">            |                       `-- [  71]  link</span><br><span class="line">            `-- [   6]  _uploads</span><br><span class="line"></span><br><span class="line">26 directories, 8 files</span><br></pre></td></tr></table></figure><ul><li>我们去看一下 <code>[2.7M]  data</code>  这个文件，其他文件估计是一些 json 文本用于保存元数据信息。使用 file 命令查看 blobs/sha256/cb/cbdbe7a5bc2a134ca8ec91be58565ec07d037386d1f1d8385412d224deafca08 目录下的 <code>data</code> 文件。镜像的每一层都是存放在一个 64 位长度名称的文件夹下，文件名就是 <code>data</code> 。而且这个文件还是个 gzip 压缩后的文件。我么可以使用 tar 命令将其解压开来。</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cd registry/v2/blobs/sha256/cb/cbdbe7a5bc2a134ca8ec91be58565ec07d037386d1f1d8385412d224deafca08</span><br><span class="line">sh-4.2# file data</span><br><span class="line">data: gzip compressed data</span><br><span class="line">sh-4.2# mkdir layer</span><br><span class="line">sh-4.2# tar -xvf data -C layer/</span><br></pre></td></tr></table></figure><ul><li>将其解压到 layer 目录下，使用 tree 命令看一下文件夹下的内容就会明白，这不就是我们的 alpine 镜像真实的内容嘛😂。</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">sh-4.2# tree -L 1 -d layer</span><br><span class="line">layer</span><br><span class="line">|-- bin</span><br><span class="line">|-- dev</span><br><span class="line">|-- etc</span><br><span class="line">|-- home</span><br><span class="line">|-- lib</span><br><span class="line">|-- media</span><br><span class="line">|-- mnt</span><br><span class="line">|-- opt</span><br><span class="line">|-- proc</span><br><span class="line">|-- root</span><br><span class="line">|-- run</span><br><span class="line">|-- sbin</span><br><span class="line">|-- srv</span><br><span class="line">|-- sys</span><br><span class="line">|-- tmp</span><br><span class="line">|-- usr</span><br><span class="line">`-- var</span><br></pre></td></tr></table></figure><p>知道了镜像在 registry 中是如何存储的，我们也就能够明白在当前仅仅为了同步两个 registry 上的镜像使用 docker pull –&gt; docker tag –&gt; docker push 操作的弊端。因为 docker pull 镜像时会对 registry 上的 layer 进行解压缩，这一点和我们的浏览器解压缩一些  gzip 压缩的资源一样道理，为了减少网络传输的流量。当我们 pull 镜像的时候，docker 会有一个单独的进程对镜像进行解压缩，在使用 docker pull 拉取镜像的时候使用 ps 查看一下进程就会找到 <code>docker-untar</code>  这个进程。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker-untar /var/lib/docker/overlay2/a076db6567c7306f3cdab6040cd7d083ef6a39d125171353eedbb8bde7f203b4/diff</span><br></pre></td></tr></table></figure><p>对于一些很大的镜像比如 2GB 以上，有时候镜像 layer 已经 download 完了，但是还在进行镜像的解压缩，性能的瓶颈也就在了解压镜像这一块。对于 docker push 来讲，也是如此。</p><p>有没有一种办法可以直接将 registry 上的 blob 复制到另一个 registry，中间过程不涉及对镜像 layer 的解压缩，这岂不美哉😂。</p><h2 id="skopeo-install"><a href="#skopeo-install" class="headerlink" title="skopeo install"></a>skopeo install</h2><h3 id="yum-dnf-zypper-brew"><a href="#yum-dnf-zypper-brew" class="headerlink" title="yum/dnf/zypper/brew"></a>yum/dnf/zypper/brew</h3><p>安装方式很简单，对于常见的发相伴直接 install 一把梭就行，从官方文档偷来的安装方式😂</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo dnf install skopeo</span></span><br></pre></td></tr></table></figure><p>on RHEL/CentOS ≤ 7.x:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo yum install skopeo</span></span><br></pre></td></tr></table></figure><p>for openSUSE:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo zypper install skopeo</span></span><br></pre></td></tr></table></figure><p>on alpine:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> sudo apk add skopeo</span></span><br></pre></td></tr></table></figure><p>on macOS:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> brew install skopeo</span></span><br></pre></td></tr></table></figure><h3 id="build"><a href="#build" class="headerlink" title="build"></a>build</h3><p>由于我的 VPS 机器是 Ubuntu 1804 的 OS ，配置 apt 源并没成功，当场翻车。为了能够快速体验一把还是本地起一个 alpine 容器，在 alpine 里通过 apk add 的方式安装 skopeo。但 alpine 里的 skopeo 版本 还是 0.14.0 😥，GitHub 上的 master 分支已经 1.0.0了，而且并没有 sync 的选项。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">/ # skopeo --help</span><br><span class="line">NAME:</span><br><span class="line">   skopeo - Various operations with container images and container image registries</span><br><span class="line">USAGE:</span><br><span class="line">   skopeo [global options] command [command options] [arguments...]</span><br><span class="line">VERSION:</span><br><span class="line">   0.1.40</span><br><span class="line">COMMANDS:</span><br><span class="line">     copy               Copy an IMAGE-NAME from one location to another</span><br><span class="line">     inspect            Inspect image IMAGE-NAME</span><br><span class="line">     delete             Delete image IMAGE-NAME</span><br><span class="line">     manifest-digest    Compute a manifest digest of a file</span><br><span class="line">     standalone-sign    Create a signature using local files</span><br><span class="line">     standalone-verify  Verify a signature using local files</span><br><span class="line">     help, h            Shows a list of commands or help for one command</span><br></pre></td></tr></table></figure><p>真是一波三折啊，绕了一圈最终还是亲自<del>指挥</del> build 一份吧，不过这个 build 过程也很简单。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/containers/skopeo skopeo</span><br><span class="line">cd !$</span><br><span class="line">git checkout v1.0.0</span><br><span class="line">make binary-static DISABLE_CGO=1</span><br><span class="line">cp skopeo /usr/bin/</span><br></pre></td></tr></table></figure><ul><li>在这里需要注意一点，如果汝想构建一个在各 Linux 发行版通用的二进制可执行文件，一定要使用 <code>make binary-static DISABLE_CGO=1</code> ，之前我没有仔细看文档直接 make 一把梭，然后在 Ubuntu 上构建出来的二进制执行文件拿到 CentOS 上去用，当场翻车提示以下错误：</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">skopeo: error while loading shared libraries: libdevmapper.so.1.02.1: cannot open shared object file: No such file or directory</span><br></pre></td></tr></table></figure><ul><li>然后我傻乎乎地去安装 CentOS 上的这个库，但还是提示 <code>libdevmapper.so.1.02.1</code> 不存在。因为 Ubuntu 上的这个库和 CentOS 上的这个库是不一样名称的😑。所以说要在编译的时候加上 <code>DISABLE_CGO=1</code> 这个参数进行静态链接编译，这样编译出来的二进制可执行文件就可以在 Linux 发行版之间通用了。</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">ldd skopeo_d #</span><br><span class="line">        linux-vdso.so.1 (0x00007ffed9e66000)</span><br><span class="line">        libgpgme.so.11 =&gt; /usr/lib/x86_64-linux-gnu/libgpgme.so.11 (0x00007f94aed2e000)</span><br><span class="line">        libpthread.so.0 =&gt; /lib/x86_64-linux-gnu/libpthread.so.0 (0x00007f94aeb0f000)</span><br><span class="line">        libdevmapper.so.1.02.1 =&gt; /lib/x86_64-linux-gnu/libdevmapper.so.1.02.1 (0x00007f94ae8a4000)</span><br><span class="line">        libc.so.6 =&gt; /lib/x86_64-linux-gnu/libc.so.6 (0x00007f94ae4b3000)</span><br><span class="line">        libassuan.so.0 =&gt; /usr/lib/x86_64-linux-gnu/libassuan.so.0 (0x00007f94ae2a0000)</span><br><span class="line">        libgpg-error.so.0 =&gt; /lib/x86_64-linux-gnu/libgpg-error.so.0 (0x00007f94ae08b000)</span><br><span class="line">        /lib64/ld-linux-x86-64.so.2 (0x00007f94b0ac4000)</span><br><span class="line">        libselinux.so.1 =&gt; /lib/x86_64-linux-gnu/libselinux.so.1 (0x00007f94ade63000)</span><br><span class="line">        libudev.so.1 =&gt; /lib/x86_64-linux-gnu/libudev.so.1 (0x00007f94adc45000)</span><br><span class="line">        libm.so.6 =&gt; /lib/x86_64-linux-gnu/libm.so.6 (0x00007f94ad8a7000)</span><br><span class="line">        libpcre.so.3 =&gt; /lib/x86_64-linux-gnu/libpcre.so.3 (0x00007f94ad635000)</span><br><span class="line">        libdl.so.2 =&gt; /lib/x86_64-linux-gnu/libdl.so.2 (0x00007f94ad431000)</span><br><span class="line">        librt.so.1 =&gt; /lib/x86_64-linux-gnu/librt.so.1 (0x00007f94ad229000)</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 加上 DISABLE_CGO=1 编译后的二进制可执行文件</span></span><br><span class="line">ldd skopeo_s #</span><br><span class="line">        not a dynamic executable</span><br></pre></td></tr></table></figure><h2 id="usage"><a href="#usage" class="headerlink" title="usage"></a>usage</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">Various operations with container images and container image registries</span><br><span class="line"></span><br><span class="line">Usage:</span><br><span class="line">  skopeo [command]</span><br><span class="line"></span><br><span class="line">Available Commands:</span><br><span class="line">  copy                      Copy an IMAGE-NAME from one location to another</span><br><span class="line">  delete                    Delete image IMAGE-NAME</span><br><span class="line">  help                      Help about any command</span><br><span class="line">  inspect                   Inspect image IMAGE-NAME</span><br><span class="line">  list-tags                 List tags in the transport/repository specified by the</span><br><span class="line">  login                     Login to a container registry</span><br><span class="line">  logout                    Logout of a container registry</span><br><span class="line">  manifest-digest           Compute a manifest digest of a file</span><br><span class="line">  standalone-sign           Create a signature using local files</span><br><span class="line">  standalone-verify         Verify a signature using local files</span><br><span class="line">  sync                      Synchronize one or more images from one location to another</span><br><span class="line"></span><br><span class="line">skopeo version 1.0.0 commit: bd162028cd83ceecd8915736f2d66d5ca73ee54a</span><br></pre></td></tr></table></figure><p>可以看到  skopeo 的功能很简单：</p><ul><li>copy：复制一个镜像从 A 到 B，这里的 A 和 B 可以为本地 docker 镜像或者 registry 上的镜像。</li><li>inspect：查看一个镜像的 manifest 火车 image config 详细信息</li><li>delete：删除一个镜像，可以是本地 docker 镜像或者 registry 上的镜像</li><li>list-tags：列出一个 registry 上某个镜像的所有 tag</li><li>login：登录到某个 registry，和 docker login 类似</li><li>logout： 退出已经登录到某个 registry 的 auth 信息，和 docker logout 类似</li><li>manifest-digest、standalone-sign、standalone-verify 这三个用的不多</li><li>sync：同步一个镜像从 A 到  B，感觉和 copy 一样，但 sync 支持的参数更多，功能更强大。在 0.14.0 版本的时候是没有 sync 选项的，到了 0.14.2 才有，现在是 1.0.0</li></ul><h3 id="IMAGE-NAMES"><a href="#IMAGE-NAMES" class="headerlink" title="IMAGE NAMES"></a>IMAGE NAMES</h3><p>在使用 skopeo 之前，我们首先要知道在命令行中镜像的格式，下面是官方详细的文档格式。无论我们的 src 镜像还是 desc 镜像都要满足以下格式才可以。</p><blockquote><p>  Most commands refer to container images, using a <em>transport<em><code>:</code></em>details</em> format. The following formats are supported:</p><p>  <strong>containers-storage:*</strong>docker-reference* An image located in a local containers/storage image store. Both the location and image store are specified in /etc/containers/storage.conf. (Backend for Podman, CRI-O, Buildah and friends)</p><p>  <strong>dir:*</strong>path* An existing local directory <em>path</em> storing the manifest, layer tarballs and signatures as individual files. This is a non-standardized format, primarily useful for debugging or noninvasive container inspection.</p><p>  <strong>docker://*</strong>docker-reference* An image in a registry implementing the “Docker Registry HTTP API V2”. By default, uses the authorization state in either <code>$XDG_RUNTIME_DIR/containers/auth.json</code>, which is set using <code>(skopeo login)</code>. If the authorization state is not found there, <code>$HOME/.docker/config.json</code> is checked, which is set using <code>(docker login)</code>.</p><p>  <strong>docker-archive:*</strong>path<em>[<strong>:*</strong>docker-reference*] An image is stored in the <code>docker save</code> formatted file. *docker-reference</em> is only used when creating such a file, and it must not contain a digest.</p><p>  <strong>docker-daemon:*</strong>docker-reference* An image <em>docker-reference</em> stored in the docker daemon internal storage. <em>docker-reference</em> must contain either a tag or a digest. Alternatively, when reading images, the format can be docker-daemon:algo:digest (an image ID).</p><p>  <strong>oci:*</strong>path<strong><em>:</em></strong>tag* An image <em>tag</em> in a directory compliant with “Open Container Image Layout Specification” at <em>path</em>.</p></blockquote><p>需要注意的是，这几种镜像的名字，对应着镜像存在的方式，不同存在的方式对镜像的 layer 处理的方式也不一样，比如 <code>docker://</code> 这种方式是存在 registry 上的，<code>docker-daemon:</code> 是存在本地 docker pull 下来的，再比如 <code>docker-archive</code> 是通过 docker save 出来的镜像。同一个镜像有这几种存在的方式就像水有气体、液体、固体一样。可以这样去理解，他们表述的都是同一个镜像，只不过是存在的方式不一样而已。</p><table><thead><tr><th>IMAGE NAMES</th><th>example</th></tr></thead><tbody><tr><td><strong>containers-storage:</strong></td><td>containers-storage:</td></tr><tr><td><strong>dir:</strong></td><td>dir:/PATH</td></tr><tr><td><strong>docker://</strong></td><td>docker://k8s.gcr.io/kube-apiserver:v1.17.5</td></tr><tr><td><strong>docker-daemon:</strong></td><td>docker-daemon:alpine:latest</td></tr><tr><td><strong>docker-archive:</strong></td><td>docker-archive:alpine.tar (docker save)</td></tr><tr><td><strong>oci:</strong></td><td>oci:alpine:latest</td></tr></tbody></table><h3 id="skopeo-copy"><a href="#skopeo-copy" class="headerlink" title="skopeo copy"></a>skopeo copy</h3><blockquote><p>  Copy an IMAGE-NAME from one location to another </p></blockquote><p>注意一下，这里的 location 就是指的上面提到的 <code>IMAGE NAMES</code> ，也就是说 <code>skopeo copy src dest</code> 可以有6*6=36 种组合！比如我可以将一个镜像从一个 registry 复制到另一个 registry，<code>skopeo copy docker://IMAGE_NAME docker://IMAGE_NAME</code>，再强调一遍，一定要注意 <code>IMAGE_NAME</code> 的命名的格式。</p><p>skopeo 的详细使用可以参考官方的文档，在使用之前先创建一个</p><p>在使用 skopeo 之前如果镜像是存放在 registry 上的话，需要先登录到 registry。使用 skopeo login 或者  docker login 都可以。成功登录之后会在本地保存一个为 config.json 的文件，里面保存了登录需要的验证信息，skopeo 拿到这个验证信息才有权限往 registry push 镜像。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">╭─root@sg-02 /home/ubuntu/skopeo ‹master*›</span><br><span class="line">╰─# jq "." ~/.docker/config.json                                                             </span><br><span class="line">&#123;</span><br><span class="line">  "auths": &#123;</span><br><span class="line">    "https://index.docker.io/v1/": &#123;</span><br><span class="line">      "auth": "d2sddaqWM7bSVlJFpmQE43Sw=="</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  "HttpHeaders": &#123;</span><br><span class="line">    "User-Agent": "Docker-Client/19.03.5 (linux)"</span><br><span class="line">  &#125;,</span><br><span class="line">  "experimental": "enabled"</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>从 <code>k8s.gcr.io/kube-apiserver:v1.17.5</code> 复制镜像到 <code>index.docker.io/webpsh/kube-apiserver:v1.17.5</code> </li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">╭─root@sg-02 ~/skopeo ‹master›</span><br><span class="line">╰─# skopeo copy docker://k8s.gcr.io/kube-apiserver:v1.17.5 docker://index.docker.io/webpsh/kube-apiserver:v1.17.5 --dest-authfile /root/.docker/config.json</span><br><span class="line">Getting image source signatures</span><br><span class="line">Copying blob 597de8ba0c30 done</span><br><span class="line">Copying blob e13a88fa950c done</span><br><span class="line">Copying config f640481f6d done</span><br><span class="line">Writing manifest to image destination</span><br><span class="line">Storing signatures</span><br></pre></td></tr></table></figure><ul><li>skopeo 输出的日志显示是 <code>Copying blob 597de8ba0c30 done</code> ，可以看到 skopeo 是直接 copy 镜像 layer 的 blob，而 blob 是在 registry 进行压缩存储的格式。</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 然后从重新 pul 下来刚刚 push 到 docker hub 上的镜像，验证是否正确</span></span><br><span class="line">╭─root@sg-02 ~/skopeo ‹master›</span><br><span class="line">╰─# docker pull webpsh/kube-apiserver:v1.17.5</span><br><span class="line">v1.17.5: Pulling from webpsh/kube-apiserver</span><br><span class="line">Digest: sha256:5ddc5c77f52767f2f225a531a257259228d74b32d8aac9cfe087251f998c42f3</span><br><span class="line">Status: Downloaded newer image for webpsh/kube-apiserver:v1.17.5</span><br><span class="line">docker.io/webpsh/kube-apiserver:v1.17.5</span><br></pre></td></tr></table></figure><ul><li>copy 镜像到本地</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">╭─root@sg-02 /home/ubuntu</span><br><span class="line">╰─# skopeo copy docker-daemon:alpine:latest oci:alpine</span><br><span class="line">Getting image source signatures</span><br><span class="line">Copying blob 3e207b409db3 done</span><br><span class="line">Copying config af88fdb253 done</span><br><span class="line">Writing manifest to image destination</span><br><span class="line">Storing signatures</span><br><span class="line">╭─root@sg-02 /home/ubuntu</span><br><span class="line">╰─# tree -h alpine</span><br><span class="line">alpine</span><br><span class="line">├── [4.0K]  blobs</span><br><span class="line">│   └── [4.0K]  sha256</span><br><span class="line">│       ├── [ 348]  1c6f747c933450c5169f349f2a57b9d31e833c0452e1ec712b8aab0cbfea4d2c</span><br><span class="line">│       ├── [2.8M]  3eee30c545e47333e6fe551863f6f29c3dcd850187ae3f37c606adb991444886</span><br><span class="line">│       └── [ 583]  af88fdb253aac46693de7883c9c55244327908c77248d7654841503f744aae8b</span><br><span class="line">├── [ 186]  index.json</span><br><span class="line">└── [  31]  oci-layout</span><br></pre></td></tr></table></figure><p>有点好奇这个镜像格式，所以我们来分析一下 copy 出来的镜像，可以看到在导出来的.</p><p>这个应该是镜像的 mainfaet 文件</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">╭─root@sg-02 /home/ubuntu/alpine/blobs/sha256</span><br><span class="line">╰─# jq "." 1c6f747c933450c5169f349f2a57b9d31e833c0452e1ec712b8aab0cbfea4d2c</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"schemaVersion"</span>: <span class="number">2</span>,</span><br><span class="line">  <span class="attr">"config"</span>: &#123;</span><br><span class="line">    <span class="attr">"mediaType"</span>: <span class="string">"application/vnd.oci.image.config.v1+json"</span>,</span><br><span class="line">    <span class="attr">"digest"</span>: <span class="string">"sha256:af88fdb253aac46693de7883c9c55244327908c77248d7654841503f744aae8b"</span>,</span><br><span class="line">    <span class="attr">"size"</span>: <span class="number">583</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"layers"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"mediaType"</span>: <span class="string">"application/vnd.oci.image.layer.v1.tar+gzip"</span>,</span><br><span class="line">      <span class="attr">"digest"</span>: <span class="string">"sha256:3eee30c545e47333e6fe551863f6f29c3dcd850187ae3f37c606adb991444886"</span>,</span><br><span class="line">      <span class="attr">"size"</span>: <span class="number">2898973</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>这个就是镜像的 image config 文件</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">╭─root@sg-02 /home/ubuntu/alpine/blobs/sha256</span><br><span class="line">╰─# jq "." af88fdb253aac46693de7883c9c55244327908c77248d7654841503f744aae8b</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"created"</span>: <span class="string">"2020-04-24T01:05:03.92860976Z"</span>,</span><br><span class="line">  <span class="attr">"architecture"</span>: <span class="string">"amd64"</span>,</span><br><span class="line">  <span class="attr">"os"</span>: <span class="string">"linux"</span>,</span><br><span class="line">  <span class="attr">"config"</span>: &#123;</span><br><span class="line">    <span class="attr">"Env"</span>: [</span><br><span class="line">      <span class="string">"PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin"</span></span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">"Cmd"</span>: [</span><br><span class="line">      <span class="string">"/bin/sh"</span></span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"rootfs"</span>: &#123;</span><br><span class="line">    <span class="attr">"type"</span>: <span class="string">"layers"</span>,</span><br><span class="line">    <span class="attr">"diff_ids"</span>: [</span><br><span class="line">      <span class="string">"sha256:3e207b409db364b595ba862cdc12be96dcdad8e36c59a03b7b3b61c946a5741a"</span></span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"history"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"created"</span>: <span class="string">"2020-04-24T01:05:03.608058404Z"</span>,</span><br><span class="line">      <span class="attr">"created_by"</span>: <span class="string">"/bin/sh -c #(nop) ADD file:b91adb67b670d3a6ff9463e48b7def903ed516be66fc4282d22c53e41512be49 in / "</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"created"</span>: <span class="string">"2020-04-24T01:05:03.92860976Z"</span>,</span><br><span class="line">      <span class="attr">"created_by"</span>: <span class="string">"/bin/sh -c #(nop)  CMD [\"/bin/sh\"]"</span>,</span><br><span class="line">      <span class="attr">"empty_layer"</span>: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="skopeo-inspect"><a href="#skopeo-inspect" class="headerlink" title="skopeo inspect"></a>skopeo inspect</h3><p>这个命令可以查看一个镜像的 image config 和 mainf 文件，和 docker inspect 命令差不多</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">╭─root@sg-02 /home/ubuntu/alpine/blobs/sha256</span><br><span class="line">╰─# skopeo inspect docker-daemon:alpine:latest --raw | jq "."</span><br><span class="line">&#123;</span><br><span class="line">  <span class="attr">"schemaVersion"</span>: <span class="number">2</span>,</span><br><span class="line">  <span class="attr">"mediaType"</span>: <span class="string">"application/vnd.docker.distribution.manifest.v2+json"</span>,</span><br><span class="line">  <span class="attr">"config"</span>: &#123;</span><br><span class="line">    <span class="attr">"mediaType"</span>: <span class="string">"application/vnd.docker.container.image.v1+json"</span>,</span><br><span class="line">    <span class="attr">"size"</span>: <span class="number">1507</span>,</span><br><span class="line">    <span class="attr">"digest"</span>: <span class="string">"sha256:f70734b6a266dcb5f44c383274821207885b549b75c8e119404917a61335981a"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">"layers"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="attr">"mediaType"</span>: <span class="string">"application/vnd.docker.image.rootfs.diff.tar.gzip"</span>,</span><br><span class="line">      <span class="attr">"size"</span>: <span class="number">5878784</span>,</span><br><span class="line">      <span class="attr">"digest"</span>: <span class="string">"sha256:3e207b409db364b595ba862cdc12be96dcdad8e36c59a03b7b3b61c946a5741a"</span></span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="skopeo-delete"><a href="#skopeo-delete" class="headerlink" title="skopeo delete"></a>skopeo delete</h3><p>使用这个命令可以删除镜像，对于删除 registry 上的镜像很有帮助，因为目前想要删除 registry 上的镜像常规的做法还是登录到 registry 在 WEB 上手动删除。skopeo delete 也是调用 registry 的 API 来进行删除镜像。</p><h3 id="skopeo-list-tags"><a href="#skopeo-list-tags" class="headerlink" title="skopeo list-tags"></a>skopeo list-tags</h3><p>这个命令常用来列出 registry 上的某个镜像的所有 tag ，在一些 shell 脚本中可能会又用得到。</p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;h2 id=&quot;搬砖工具&quot;&gt;&lt;a href=&quot;#搬砖工具&quot;
        
      
    
    </summary>
    
    
      <category term="技术" scheme="https://blog.k8s.li/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="docker" scheme="https://blog.k8s.li/tags/docker/"/>
    
      <category term="registry" scheme="https://blog.k8s.li/tags/registry/"/>
    
      <category term="镜像" scheme="https://blog.k8s.li/tags/%E9%95%9C%E5%83%8F/"/>
    
      <category term="搬砖工具" scheme="https://blog.k8s.li/tags/%E6%90%AC%E7%A0%96%E5%B7%A5%E5%85%B7/"/>
    
  </entry>
  
  <entry>
    <title>木子的搬砖工具😂</title>
    <link href="https://blog.k8s.li/My-brick-lifting-tools.html"/>
    <id>https://blog.k8s.li/My-brick-lifting-tools.html</id>
    <published>2020-05-21T16:00:00.000Z</published>
    <updated>2020-09-15T00:28:09.940Z</updated>
    
    <content type="html"><![CDATA[<h2 id="咕咕咕"><a href="#咕咕咕" class="headerlink" title="咕咕咕"></a>咕咕咕</h2><p>本来打算上上周就该更新完的这篇博文，但最近因为离职的事宜拖到今天晚上才捡起来，最终还是咕咕咕了😂。虽然文章还未补充完，等到以后再继续更新上吧。</p><h2 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h2><p>确切地来讲 Linux 仅仅是一个操作系统的内核，而且它的代码在一个发行版中的占用率也不到 20%。</p><h3 id="入门"><a href="#入门" class="headerlink" title="入门"></a>入门</h3><p>咱一直觉着学习技术吧，并不是看书看视频能学会的。对于一些底层的只是确实需要仔细研读书籍来吃透他，这趟会让我们对操作系统这个体系结构有更下透彻的认识。但是呢，光看不练还是不行滴，咱学习 Linux 纯靠瞎玩，瞎折腾。咱大学时学校没有开设 Linux 课程，只能靠自己自学。于是乎，和大家一样，搭建 WordPress ，一步步安装 LAMP 环境，配置 iptables，写 shell 脚本备份网站，搭建梯子等等。可谓是玩得不亦乐乎😂。</p><p>所以说学习和入门 Linux 咱还是推荐鸟哥的《鸟哥 Linux 私房菜》这本书，结合着自己搭建网站一步步来就可以。</p><h3 id="放弃"><a href="#放弃" class="headerlink" title="放弃"></a>放弃</h3><p>入门完 Linux 之后就开始挑战高难度的啦，比如：</p><ul><li>OpenStack</li><li>Docker</li><li>Kubernetes</li><li>CI/CD</li></ul><p>目前来讲在运维这个搬砖行业，kubernetes 云原生无疑是最具有挑战性和前景的，所以如果汝想更近一层楼就不妨学习一下 Docker 和 Kuberneets 这一块。</p><h3 id="发行版"><a href="#发行版" class="headerlink" title="发行版"></a>发行版</h3><p>从运维这个搬砖行业来讲，企业内部使用的 Linux 发行版当属 RedHat 和 Debian 家族的最多，像其他的什么 archlinux 咱还真没见过有在生产环境使用的，毕竟滚动更新不小心就滚挂了不好说😂。国内企业和云计算厂商使用最多的当然是 CentOS 啦，我记得是在 2018 年年末的时候阿里云/腾讯云还没有 Ubuntu 1804 的云主机可用😑。国外使用 Ubuntu 的较多一些，咱是倾向于使用 Ubuntu 😝</p><p>从 <a href="https://www.datanyze.com" target="_blank" rel="noopener">datanyze</a> 家偷来一张企业 Linux 市场占有率的统计表格 <a href="https://www.datanyze.com/market-share/operating-systems--443" target="_blank" rel="noopener">Operating Systems</a>😂</p><table><thead><tr><th align="center">Ranking</th><th align="left">Technology</th><th align="right">Domains</th><th align="right">Market Share</th></tr></thead><tbody><tr><td align="center">1</td><td align="left"><a href="https://www.datanyze.com/market-share/operating-systems--443/ubuntu-market-share" target="_blank" rel="noopener">Ubuntu</a></td><td align="right">278,611</td><td align="right">29.30%</td></tr><tr><td align="center">2</td><td align="left"><a href="https://www.datanyze.com/market-share/operating-systems--443/unix-market-share" target="_blank" rel="noopener">Unix</a></td><td align="right">192,215</td><td align="right">20.21%</td></tr><tr><td align="center">3</td><td align="left"><a href="https://www.datanyze.com/market-share/operating-systems--443/centos-market-share" target="_blank" rel="noopener">CentOS</a></td><td align="right">165,640</td><td align="right">17.42%</td></tr><tr><td align="center">4</td><td align="left"><a href="https://www.datanyze.com/market-share/operating-systems--443/debian-market-share" target="_blank" rel="noopener">Debian</a></td><td align="right">108,373</td><td align="right">11.40%</td></tr><tr><td align="center">5</td><td align="left"><a href="https://www.datanyze.com/market-share/operating-systems--443/linux-market-share" target="_blank" rel="noopener">Linux</a></td><td align="right">24,563</td><td align="right">2.58%</td></tr><tr><td align="center">6</td><td align="left"><a href="https://www.datanyze.com/market-share/operating-systems--443/windows-server-market-share" target="_blank" rel="noopener">Windows Server</a></td><td align="right">23,872</td><td align="right">2.51%</td></tr><tr><td align="center">7</td><td align="left"><a href="https://www.datanyze.com/market-share/operating-systems--443/gentoo-market-share" target="_blank" rel="noopener">Gentoo</a></td><td align="right">16,756</td><td align="right">1.76%</td></tr><tr><td align="center">8</td><td align="left"><a href="https://www.datanyze.com/market-share/operating-systems--443/red-hat-enterprise-linux-market-share" target="_blank" rel="noopener">Red Hat Enterprise Linux</a></td><td align="right">13,659</td><td align="right">1.44%</td></tr><tr><td align="center">9</td><td align="left"><a href="https://www.datanyze.com/market-share/operating-systems--443/windows-7-market-share" target="_blank" rel="noopener">Windows 7</a></td><td align="right">11,843</td><td align="right">1.25%</td></tr><tr><td align="center">10</td><td align="left"><a href="https://www.datanyze.com/market-share/operating-systems--443/microsoft-windows-os-market-share" target="_blank" rel="noopener">Microsoft Windows OS</a></td><td align="right">10,986</td><td align="right">1.16%</td></tr></tbody></table><table><thead><tr><th align="left">op Competitors</th><th align="right">Websites</th><th align="right">Market Share</th><th align="right">Versus Page</th></tr></thead><tbody><tr><td align="left"><a href="https://www.datanyze.com/market-share/operating-systems--443/ubuntu-market-share" target="_blank" rel="noopener">Ubuntu</a></td><td align="right">278,611</td><td align="right">29.30%</td><td align="right"><a href="https://www.datanyze.com/market-share/operating-systems--443/linux-vs-ubuntu" target="_blank" rel="noopener">Linux vs. Ubuntu</a></td></tr><tr><td align="left"><a href="https://www.datanyze.com/market-share/operating-systems--443/unix-market-share" target="_blank" rel="noopener">Unix</a></td><td align="right">192,215</td><td align="right">20.21%</td><td align="right"><a href="https://www.datanyze.com/market-share/operating-systems--443/linux-vs-unix" target="_blank" rel="noopener">Linux vs. Unix</a></td></tr><tr><td align="left"><a href="https://www.datanyze.com/market-share/operating-systems--443/centos-market-share" target="_blank" rel="noopener">CentOS</a></td><td align="right">165,640</td><td align="right">17.42%</td><td align="right"><a href="https://www.datanyze.com/market-share/operating-systems--443/linux-vs-centos" target="_blank" rel="noopener">Linux vs. CentOS</a></td></tr><tr><td align="left"><a href="https://www.datanyze.com/market-share/operating-systems--443/debian-market-share" target="_blank" rel="noopener">Debian</a></td><td align="right">108,373</td><td align="right">11.40%</td><td align="right"><a href="https://www.datanyze.com/market-share/operating-systems--443/linux-vs-debian" target="_blank" rel="noopener">Linux vs. Debian</a></td></tr><tr><td align="left"><a href="https://www.datanyze.com/market-share/operating-systems--443/windows-server-market-share" target="_blank" rel="noopener">Windows Server</a></td><td align="right">23,872</td><td align="right">2.51%</td><td align="right"><a href="https://www.datanyze.com/market-share/operating-systems--443/linux-vs-windows-server" target="_blank" rel="noopener">Linux vs. Windows Server</a></td></tr><tr><td align="left"><a href="https://www.datanyze.com/market-share/operating-systems--443/gentoo-market-share" target="_blank" rel="noopener">Gentoo</a></td><td align="right">16,756</td><td align="right">1.76%</td><td align="right"><a href="https://www.datanyze.com/market-share/operating-systems--443/linux-vs-gentoo" target="_blank" rel="noopener">Linux vs. Gentoo</a></td></tr><tr><td align="left"><a href="https://www.datanyze.com/market-share/operating-systems--443/red-hat-enterprise-linux-market-share" target="_blank" rel="noopener">Red Hat Enterprise Linux</a></td><td align="right">13,659</td><td align="right">1.44%</td><td align="right"><a href="https://www.datanyze.com/market-share/operating-systems--443/linux-vs-red-hat-enterprise-linux" target="_blank" rel="noopener">Linux vs. Red Hat Enterprise Linux</a></td></tr><tr><td align="left"><a href="https://www.datanyze.com/market-share/operating-systems--443/windows-7-market-share" target="_blank" rel="noopener">Windows 7</a></td><td align="right">11,843</td><td align="right">1.25%</td><td align="right"><a href="https://www.datanyze.com/market-share/operating-systems--443/linux-vs-windows-7" target="_blank" rel="noopener">Linux vs. Windows 7</a></td></tr><tr><td align="left"><a href="https://www.datanyze.com/market-share/operating-systems--443/microsoft-windows-os-market-share" target="_blank" rel="noopener">Microsoft Windows OS</a></td><td align="right">10,986</td><td align="right">1.16%</td><td align="right"><a href="https://www.datanyze.com/market-share/operating-systems--443/linux-vs-microsoft-windows-os" target="_blank" rel="noopener">Linux vs. Microsoft Windows OS</a></td></tr><tr><td align="left"><a href="https://www.datanyze.com/market-share/operating-systems--443/freebsd-market-share" target="_blank" rel="noopener">FreeBSD</a></td><td align="right">9,633</td><td align="right">1.01%</td><td align="right"><a href="https://www.datanyze.com/market-share/operating-systems--443/linux-vs-freebsd" target="_blank" rel="noopener">Linux vs. FreeBSD</a></td></tr></tbody></table><h4 id="RedHat-CentOS"><a href="#RedHat-CentOS" class="headerlink" title="RedHat/CentOS"></a>RedHat/CentOS</h4><h4 id="Debian-Ubuntu"><a href="#Debian-Ubuntu" class="headerlink" title="Debian/Ubuntu"></a>Debian/Ubuntu</h4><p>咱的 VPS 清一色 Ubuntu 1804 ，主要是省事儿。</p><h2 id="命令行工具"><a href="#命令行工具" class="headerlink" title="命令行工具"></a>命令行工具</h2><h3 id="文本处理"><a href="#文本处理" class="headerlink" title="文本处理"></a>文本处理</h3><p>提到 Linux 上的文本处理工具当然是离不开三剑客（awk、grep、sed），这也是咱当初跟着《鸟哥 Linux 私房菜》学来的😂。</p><h4 id="sed"><a href="#sed" class="headerlink" title="sed"></a>sed</h4><h4 id="awk"><a href="#awk" class="headerlink" title="awk"></a>awk</h4><h4 id="grep"><a href="#grep" class="headerlink" title="grep"></a>grep</h4><h4 id="jq"><a href="#jq" class="headerlink" title="jq"></a>jq</h4><h4 id="tr"><a href="#tr" class="headerlink" title="tr"></a>tr</h4><h4 id="sort"><a href="#sort" class="headerlink" title="sort"></a>sort</h4><h4 id="wc"><a href="#wc" class="headerlink" title="wc"></a>wc</h4><h4 id="join"><a href="#join" class="headerlink" title="join"></a>join</h4><h4 id="cut"><a href="#cut" class="headerlink" title="cut"></a>cut</h4><h3 id="系统信息"><a href="#系统信息" class="headerlink" title="系统信息"></a>系统信息</h3><h4 id="htop"><a href="#htop" class="headerlink" title="htop"></a>htop</h4><p>top 黑乎乎的颜值太低了，咱还是喜欢花花绿绿的 htop （大雾</p><ul><li>install</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> RHEL/CentOS</span></span><br><span class="line">yum install htop</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Debian/Ubuntu</span></span><br><span class="line">apt install htop</span><br></pre></td></tr></table></figure><p><img src="img/20200506142544440.png" alt="image-20200506142544440"></p><h3 id="bashtop"><a href="#bashtop" class="headerlink" title="bashtop"></a><a href="https://github.com/aristocratos/bashtop" target="_blank" rel="noopener">bashtop</a></h3><p>bashtop 相比于 htop 有种吊炸天的感觉，炫酷无比😄</p><ul><li>install</li></ul><p>安装起来很简单，其实这是一个 shell 可执行文件，直接使用 curl 或者 wget 命令下载到本地并赋予 +x 权限即可。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -fsSL https://raw.githubusercontent.com/aristocratos/bashtop/master/bashtop -o /usr/bin/bashtop &amp;&amp; chmod +x /usr/bin/bashtop</span><br></pre></td></tr></table></figure><p>国内用户推荐使用 jsdelivr.net 的 CDN 来下载该脚本😑，（fuck GFW by jsdelivr😡</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -fsSL https://cdn.jsdelivr.net/gh/aristocratos/bashtop/bashtop  -o /usr/bin/bashtop ;chmod +x /usr/bin/bashtop</span><br></pre></td></tr></table></figure><p><img src="img/20200506151706148.png" alt="image-20200506151706148"></p><h4 id="pstree"><a href="#pstree" class="headerlink" title="pstree"></a>pstree</h4><p>以树状图的方式展现进程之间的派生关系，显示效果比 ps 更直观一些，可以很清楚地分辨出子进程和父进程之间的关系。可以用来排查一些孤儿进程。</p><ul><li>install</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> RHEL/CentOS</span></span><br><span class="line">yum install psmisc</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Debian/Ubuntu</span></span><br><span class="line">apt install psmisc</span><br></pre></td></tr></table></figure><ul><li>output example</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">╭─root@k8s-node-3 /proc</span><br><span class="line">╰─# pstree</span><br><span class="line">systemd─┬─agetty</span><br><span class="line">        ├─auditd───&#123;auditd&#125;</span><br><span class="line">        ├─containerd─┬─6*[containerd-shim─┬─pause]</span><br><span class="line">        │            │                    └─9*[&#123;containerd-shim&#125;]]</span><br><span class="line">        │            ├─containerd-shim─┬─kube-proxy───12*[&#123;kube-proxy&#125;]</span><br><span class="line">        │            │                 └─9*[&#123;containerd-shim&#125;]</span><br><span class="line">        │            ├─4*[containerd-shim─┬─pause]</span><br><span class="line">        │            │                    └─10*[&#123;containerd-shim&#125;]]</span><br><span class="line">        │            ├─containerd-shim─┬─lvscare───11*[&#123;lvscare&#125;]</span><br><span class="line">        │            │                 └─10*[&#123;containerd-shim&#125;]</span><br><span class="line">        │            ├─containerd-shim─┬─agent───10*[&#123;agent&#125;]</span><br><span class="line">        │            │                 └─10*[&#123;containerd-shim&#125;]</span><br><span class="line">        │            ├─containerd-shim─┬─runsvdir─┬─runsv───bird6</span><br><span class="line">        │            │                 │          ├─runsv───calico-node───18*[&#123;calico-node&#125;]</span><br><span class="line">        │            │                 │          ├─runsv───calico-node───15*[&#123;calico-node&#125;]</span><br><span class="line">        │            │                 │          └─runsv───bird</span><br><span class="line">        │            │                 └─12*[&#123;containerd-shim&#125;]</span><br><span class="line">        │            ├─containerd-shim─┬─node_exporter───4*[&#123;node_exporter&#125;]</span><br><span class="line">        │            │                 └─10*[&#123;containerd-shim&#125;]</span><br><span class="line">        │            ├─containerd-shim─┬─nginx-proxy─┬─confd───11*[&#123;confd&#125;]</span><br><span class="line">        │            │                 │             └─nginx───nginx</span><br><span class="line">        │            │                 └─9*[&#123;containerd-shim&#125;]</span><br><span class="line">        │            ├─containerd-shim─┬─deploy.sh───sleep</span><br><span class="line">        │            │                 └─10*[&#123;containerd-shim&#125;]</span><br><span class="line">        │            ├─containerd-shim─┬─nginx-ingress─┬─nginx───4*[nginx]</span><br><span class="line">        │            │                 │               └─14*[&#123;nginx-ingress&#125;]</span><br><span class="line">        │            │                 └─10*[&#123;containerd-shim&#125;]</span><br><span class="line">        │            ├─containerd-shim─┬─configmap-reloa───4*[&#123;configmap-reloa&#125;]</span><br><span class="line">        │            │                 └─9*[&#123;containerd-shim&#125;]</span><br><span class="line">        │            ├─containerd-shim─┬─bash</span><br><span class="line">        │            │                 └─9*[&#123;containerd-shim&#125;]</span><br><span class="line">        │            ├─containerd-shim─┬─ruby2.3─┬─ruby2.3───4*[&#123;ruby2.3&#125;]</span><br><span class="line">        │            │                 │         └─11*[&#123;ruby2.3&#125;]</span><br><span class="line">        │            │                 └─10*[&#123;containerd-shim&#125;]</span><br><span class="line">        │            └─46*[&#123;containerd&#125;]</span><br><span class="line">        ├─crond</span><br><span class="line">        ├─dbus-daemon───&#123;dbus-daemon&#125;</span><br><span class="line">        ├─dockerd───25*[&#123;dockerd&#125;]</span><br><span class="line">        ├─gssproxy───5*[&#123;gssproxy&#125;]</span><br><span class="line">        ├─irqbalance</span><br><span class="line">        ├─kubelet───26*[&#123;kubelet&#125;]</span><br><span class="line">        ├─lvmetad</span><br><span class="line">        ├─polkitd───6*[&#123;polkitd&#125;]</span><br><span class="line">        ├─rpc.idmapd</span><br><span class="line">        ├─rpc.mountd</span><br><span class="line">        ├─rpc.statd</span><br><span class="line">        ├─rpcbind</span><br><span class="line">        ├─rsyslogd───2*[&#123;rsyslogd&#125;]</span><br><span class="line">        ├─sshd───sshd───zsh───pstree</span><br><span class="line">        ├─systemd-journal</span><br><span class="line">        ├─systemd-logind</span><br><span class="line">        ├─systemd-udevd</span><br><span class="line">        └─tuned───4*[&#123;tuned&#125;]</span><br></pre></td></tr></table></figure><ul><li><p>可以看到 init 进程 systemd 为系统的 PID 1 号进程，所有的进程都在 systemd 的管理之下。</p></li><li><p>在运行 docker 的服务器上，容器进程的父进程并不是 dockerd 这个守护进程，而是一个名为　<code>containerd-shim-${container_name}</code>　而 containerd-shim 的父进程为容器运行时 <a href="https://containerd.io/" target="_blank" rel="noopener">containerd</a>，docker 是通过 gRPC 协议与 containerd 进程通信来，以此来进行管理所运行的容器。关于容器运行时的关系可以参考 <a href="https://xuanwo.io/2019/08/06/oci-intro/" target="_blank" rel="noopener">开放容器标准(OCI) 内部分享</a>，当时理解 dockerd 、containerd、containerd-shim 这些关系时感觉有点绕，不过用 pstree 命令看一下进程树结构就一目了然了😂，对理解进程之间的关系很有帮助。</p></li></ul><h4 id="ncdu"><a href="#ncdu" class="headerlink" title="ncdu"></a>ncdu</h4><p>面试的时候被问道过 <code>Linux 下如何查看文件见大小？</code>，当然是 <code>du -sh</code> 啦😂。不过咱还是喜欢用 ncdu</p><p>使用 <code>ncdu</code> 的好处就是可以通过交互式的方式查看目录占用空间的大小，要比 <code>du -sh</code> 命令方便很多，不过缺点也有，就是该命令为扫描目标目录下的所有文件，很耗时！如果想要立即查看一下目录占用的大小，还是用 <code>du -sh</code> 最方便，使用 ncdu 可以帮助我们分析文件夹下各个文件占用的情况。</p><ul><li>install</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> RHEL/CentOS</span></span><br><span class="line">yum install ncdu</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Debian/Ubuntu</span></span><br><span class="line">apt install ncdu</span><br></pre></td></tr></table></figure><ul><li>output example</li></ul><p>使用反向键和回车键进行目录奇幻，很方便的说😂</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">ncdu 1.13 ~ Use the arrow keys to navigate, press ? for help</span><br><span class="line">--- / ------------</span><br><span class="line">    5.2 GiB [##########] /var</span><br><span class="line">    2.2 GiB [####      ] /opt</span><br><span class="line">    2.0 GiB [###       ] /usr</span><br><span class="line">  363.6 MiB [          ] /root</span><br><span class="line">45.8 MiB [          ] /boot</span><br><span class="line">45.2 MiB [          ] /run</span><br><span class="line"> 4.6 MiB [          ] /etc</span><br><span class="line">44.0 KiB [          ] /tmp</span><br><span class="line">24.0 KiB [          ] /home</span><br><span class="line">e  16.0 KiB [          ] /lost+found</span><br><span class="line"> 8.0 KiB [          ] /media</span><br><span class="line">e   4.0 KiB [          ] /srv</span><br><span class="line">e   4.0 KiB [          ] /mnt</span><br><span class="line">.   0.0   B [          ] /proc</span><br><span class="line"> 0.0   B [          ] /sys</span><br><span class="line"> 0.0   B [          ] /dev</span><br><span class="line">@   0.0   B [          ]  initrd.img.old</span><br><span class="line">@   0.0   B [          ]  initrd.img</span><br><span class="line">@   0.0   B [          ]  vmlinuz.old</span><br><span class="line">@   0.0   B [          ]  vmlinuz</span><br><span class="line">@   0.0   B [          ]  libx32</span><br><span class="line">@   0.0   B [          ]  lib64</span><br><span class="line">@   0.0   B [          ]  lib32</span><br><span class="line">@   0.0   B [          ]  sbin</span><br><span class="line"></span><br><span class="line">ncdu 1.13 ~ Use the arrow keys to navigate, press ? for help</span><br><span class="line">--- /var --------------</span><br><span class="line"> 3.5 GiB [##########] /lib</span><br><span class="line"> 1.4 GiB [####      ] /opt</span><br><span class="line">  156.9 MiB [          ] /cache</span><br><span class="line">79.6 MiB [          ] /log</span><br><span class="line"> 1.8 MiB [          ] /backups</span><br><span class="line">20.0 KiB [          ] /tmp</span><br><span class="line">16.0 KiB [          ] /spool</span><br><span class="line">e   4.0 KiB [          ] /mail</span><br><span class="line">e   4.0 KiB [          ] /local</span><br><span class="line">@   0.0   B [          ]  lock</span><br><span class="line">@   0.0   B [          ]  run</span><br></pre></td></tr></table></figure><ul><li>G/GB</li></ul><blockquote><p>The SIZE argument is an integer and optional unit (example: 10K is 10*1024). Units are K,M,G,T,P,E,Z,Y (powers of 1024) or KB,MB,… (powers of 1000).</p></blockquote><h4 id="nload"><a href="#nload" class="headerlink" title="nload"></a>nload</h4><p>nload 命令是一个实时监控网络流量和带宽使用的控制台应用程序，使用两个图表可视化地展示接收和发送的流量，并提供诸如数据交换总量、最小/最大网络带宽使用量等附加信息。</p><ul><li>install</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> RHEL/CentOS</span></span><br><span class="line">yum install nload</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Debian/Ubuntu</span></span><br><span class="line">apt install nload</span><br></pre></td></tr></table></figure><ul><li>output example</li></ul><p>按下回车键可以切换不同的网卡</p><p><img src="img/20200506143310955.png" alt="image-20200506143310955"></p><h3 id="ls-兄弟们"><a href="#ls-兄弟们" class="headerlink" title="ls 兄弟们"></a>ls 兄弟们</h3><p>以 ls 开头的命令大多都是列出 XX 信息，这些工具也可以方便我们快速了解一下目前系统的状态。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">╭─root@gitlab /opt</span><br><span class="line">╰─<span class="comment"># ls</span></span><br><span class="line">ls           lsblk        LS_COLORS    lsinitramfs  lslogins     lsns         lspgpot</span><br><span class="line">lsa          lsb_release  lscpu        lsipc        lsmem        lsof</span><br><span class="line">lsattr       LSCOLORS     lshw         lslocks      lsmod        lspci</span><br></pre></td></tr></table></figure><h4 id="ls"><a href="#ls" class="headerlink" title="ls"></a>ls</h4><blockquote><p>ls - list directory contents 列出文件夹内容</p></blockquote><h4 id="lsattr"><a href="#lsattr" class="headerlink" title="lsattr"></a>lsattr</h4><blockquote><p>lsattr - list file attributes on a Linux second extended file system</p></blockquote><p>列出文件的属性，</p><h4 id="lsblk"><a href="#lsblk" class="headerlink" title="lsblk"></a>lsblk</h4><blockquote><p>lsblk - list block devices 列出块设备</p></blockquote><p>这个命令在查看块设备（磁盘) 分区和挂载点，以及磁盘尚未分配的空间信息很有帮助，要比 fdisk 更直观一些。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">╭─root@gitlab /opt</span><br><span class="line">╰─<span class="comment"># lsblk</span></span><br><span class="line">NAME                      MAJ:MIN RM SIZE RO TYPE MOUNTPOINT</span><br><span class="line">sda                         8:0    0  30G  0 disk</span><br><span class="line">├─sda1                      8:1    0   1M  0 part</span><br><span class="line">├─sda2                      8:2    0   1G  0 part /boot</span><br><span class="line">└─sda3                      8:3    0  29G  0 part</span><br><span class="line">  └─ubuntu--vg-ubuntu--lv 253:0    0  28G  0 lvm  /</span><br></pre></td></tr></table></figure><h4 id="lsb-release"><a href="#lsb-release" class="headerlink" title="lsb_release"></a>lsb_release</h4><blockquote><p>lsb_release - print distribution-specific information 打印发行版详情</p></blockquote><p>有些发行版尚未安装</p><h4 id="lscpu"><a href="#lscpu" class="headerlink" title="lscpu"></a>lscpu</h4><blockquote><p>lscpu - display information about the CPU architecture</p></blockquote><p>列出 CPU 的信息，和 cat /proc/cpuinfo 输出结果类似。相当于 Linux 下的 CPU-Z 😂</p><ul><li>output example</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">╭─root@gitlab</span> <span class="string">/opt</span></span><br><span class="line"><span class="string">╰─#</span> <span class="string">lscpu</span></span><br><span class="line"><span class="attr">Architecture:</span>        <span class="string">x86_64</span></span><br><span class="line"><span class="string">CPU</span> <span class="string">op-mode(s):</span>      <span class="number">32</span><span class="string">-bit,</span> <span class="number">64</span><span class="string">-bit</span></span><br><span class="line"><span class="attr">Byte Order:</span>          <span class="string">Little</span> <span class="string">Endian</span></span><br><span class="line"><span class="string">CPU(s):</span>              <span class="number">4</span></span><br><span class="line"><span class="string">On-line</span> <span class="string">CPU(s)</span> <span class="attr">list:</span> <span class="number">0</span><span class="number">-3</span></span><br><span class="line"><span class="string">Thread(s)</span> <span class="attr">per core:</span>  <span class="number">1</span></span><br><span class="line"><span class="string">Core(s)</span> <span class="attr">per socket:</span>  <span class="number">1</span></span><br><span class="line"><span class="string">Socket(s):</span>           <span class="number">4</span></span><br><span class="line"><span class="string">NUMA</span> <span class="string">node(s):</span>        <span class="number">1</span></span><br><span class="line"><span class="attr">Vendor ID:</span>           <span class="string">GenuineIntel</span></span><br><span class="line"><span class="attr">CPU family:</span>          <span class="number">6</span></span><br><span class="line"><span class="attr">Model:</span>               <span class="number">60</span></span><br><span class="line"><span class="attr">Model name:</span>          <span class="string">Intel(R)</span> <span class="string">Xeon(R)</span> <span class="string">CPU</span> <span class="string">E3-1271</span> <span class="string">v3</span> <span class="string">@</span> <span class="number">3.</span><span class="string">60GHz</span></span><br><span class="line"><span class="attr">Stepping:</span>            <span class="number">3</span></span><br><span class="line"><span class="attr">CPU MHz:</span>             <span class="number">3591.683</span></span><br><span class="line"><span class="attr">BogoMIPS:</span>            <span class="number">7183.36</span></span><br><span class="line"><span class="attr">Hypervisor vendor:</span>   <span class="string">VMware</span></span><br><span class="line"><span class="attr">Virtualization type:</span> <span class="string">full</span></span><br><span class="line"><span class="attr">L1d cache:</span>           <span class="string">32K</span></span><br><span class="line"><span class="attr">L1i cache:</span>           <span class="string">32K</span></span><br><span class="line"><span class="attr">L2 cache:</span>            <span class="string">256K</span></span><br><span class="line"><span class="attr">L3 cache:</span>            <span class="string">8192K</span></span><br><span class="line"><span class="string">NUMA</span> <span class="string">node0</span> <span class="string">CPU(s):</span>   <span class="number">0</span><span class="number">-3</span></span><br><span class="line"><span class="attr">Flags:</span>               <span class="string">fpu</span> <span class="string">vme</span> <span class="string">de</span> <span class="string">pse</span> <span class="string">tsc</span> <span class="string">msr</span> <span class="string">pae</span> <span class="string">mce</span> <span class="string">cx8</span> <span class="string">apic</span> <span class="string">sep</span> <span class="string">mtrr</span> <span class="string">pge</span> <span class="string">mca</span> <span class="string">cmov</span> <span class="string">pat</span> <span class="string">pse36</span> <span class="string">clflush</span> <span class="string">dts</span> <span class="string">mmx</span> <span class="string">fxsr</span> <span class="string">sse</span> <span class="string">sse2</span> <span class="string">ss</span> <span class="string">syscall</span> <span class="string">nx</span> <span class="string">pdpe1gb</span> <span class="string">rdtscp</span> <span class="string">lm</span> <span class="string">constant_tsc</span> <span class="string">arch_perfmon</span> <span class="string">pebs</span> <span class="string">bts</span> <span class="string">nopl</span> <span class="string">xtopology</span> <span class="string">tsc_reliable</span> <span class="string">nonstop_tsc</span> <span class="string">cpuid</span> <span class="string">aperfmperf</span> <span class="string">pni</span> <span class="string">pclmulqdq</span> <span class="string">ssse3</span> <span class="string">fma</span> <span class="string">cx16</span> <span class="string">pcid</span> <span class="string">sse4_1</span> <span class="string">sse4_2</span> <span class="string">x2apic</span> <span class="string">movbe</span> <span class="string">popcnt</span> <span class="string">tsc_deadline_timer</span> <span class="string">aes</span> <span class="string">xsave</span> <span class="string">avx</span> <span class="string">f16c</span> <span class="string">rdrand</span> <span class="string">hypervisor</span> <span class="string">lahf_lm</span> <span class="string">abm</span> <span class="string">cpuid_fault</span> <span class="string">epb</span> <span class="string">invpcid_single</span> <span class="string">pti</span> <span class="string">fsgsbase</span> <span class="string">tsc_adjust</span> <span class="string">bmi1</span> <span class="string">avx2</span> <span class="string">smep</span> <span class="string">bmi2</span> <span class="string">invpcid</span> <span class="string">xsaveopt</span> <span class="string">dtherm</span> <span class="string">ida</span> <span class="string">arat</span> <span class="string">pln</span> <span class="string">pts</span></span><br></pre></td></tr></table></figure><p><code>cat /proc/cpuinfo</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">╭─root@gitlab</span> <span class="string">/opt</span></span><br><span class="line"><span class="string">╰─#</span> <span class="string">cat</span> <span class="string">/proc/cpuinfo</span></span><br><span class="line"><span class="attr">processor       :</span> <span class="number">0</span></span><br><span class="line"><span class="attr">vendor_id       :</span> <span class="string">GenuineIntel</span></span><br><span class="line"><span class="attr">cpu family      :</span> <span class="number">6</span></span><br><span class="line"><span class="attr">model           :</span> <span class="number">60</span></span><br><span class="line"><span class="attr">model name      :</span> <span class="string">Intel(R)</span> <span class="string">Xeon(R)</span> <span class="string">CPU</span> <span class="string">E3-1271</span> <span class="string">v3</span> <span class="string">@</span> <span class="number">3.</span><span class="string">60GHz</span></span><br><span class="line"><span class="attr">stepping        :</span> <span class="number">3</span></span><br><span class="line"><span class="attr">microcode       :</span> <span class="number">0x1c</span></span><br><span class="line"><span class="attr">cpu MHz         :</span> <span class="number">3591.683</span></span><br><span class="line"><span class="attr">cache size      :</span> <span class="number">8192</span> <span class="string">KB</span></span><br><span class="line"><span class="attr">physical id     :</span> <span class="number">0</span></span><br><span class="line"><span class="attr">siblings        :</span> <span class="number">1</span></span><br><span class="line"><span class="attr">core id         :</span> <span class="number">0</span></span><br><span class="line"><span class="attr">cpu cores       :</span> <span class="number">1</span></span><br><span class="line"><span class="attr">apicid          :</span> <span class="number">0</span></span><br><span class="line"><span class="attr">initial apicid  :</span> <span class="number">0</span></span><br><span class="line"><span class="attr">fpu             :</span> <span class="literal">yes</span></span><br><span class="line"><span class="attr">fpu_exception   :</span> <span class="literal">yes</span></span><br><span class="line"><span class="attr">cpuid level     :</span> <span class="number">13</span></span><br><span class="line"><span class="attr">wp              :</span> <span class="literal">yes</span></span><br><span class="line"><span class="attr">flags           :</span> <span class="string">fpu</span> <span class="string">vme</span> <span class="string">de</span> <span class="string">pse</span> <span class="string">tsc</span> <span class="string">msr</span> <span class="string">pae</span> <span class="string">mce</span> <span class="string">cx8</span> <span class="string">apic</span> <span class="string">sep</span> <span class="string">mtrr</span> <span class="string">pge</span> <span class="string">mca</span> <span class="string">cmov</span> <span class="string">pat</span> <span class="string">pse36</span> <span class="string">clflush</span> <span class="string">dts</span> <span class="string">mmx</span> <span class="string">fxsr</span> <span class="string">sse</span> <span class="string">sse2</span> <span class="string">ss</span> <span class="string">syscall</span> <span class="string">nx</span> <span class="string">pdpe1gb</span> <span class="string">rdtscp</span> <span class="string">lm</span> <span class="string">constant_tsc</span> <span class="string">arch_perfmon</span> <span class="string">pebs</span> <span class="string">bts</span> <span class="string">nopl</span> <span class="string">xtopology</span> <span class="string">tsc_reliable</span> <span class="string">nonstop_tsc</span> <span class="string">cpuid</span> <span class="string">aperfmperf</span> <span class="string">pni</span> <span class="string">pclmulqdq</span> <span class="string">ssse3</span> <span class="string">fma</span> <span class="string">cx16</span> <span class="string">pcid</span> <span class="string">sse4_1</span> <span class="string">sse4_2</span> <span class="string">x2apic</span> <span class="string">movbe</span> <span class="string">popcnt</span> <span class="string">tsc_deadline_timer</span> <span class="string">aes</span> <span class="string">xsave</span> <span class="string">avx</span> <span class="string">f16c</span> <span class="string">rdrand</span> <span class="string">hypervisor</span> <span class="string">lahf_lm</span> <span class="string">abm</span> <span class="string">cpuid_fault</span> <span class="string">epb</span> <span class="string">invpcid_single</span> <span class="string">pti</span> <span class="string">fsgsbase</span> <span class="string">tsc_adjust</span> <span class="string">bmi1</span> <span class="string">avx2</span> <span class="string">smep</span> <span class="string">bmi2</span> <span class="string">invpcid</span> <span class="string">xsaveopt</span> <span class="string">dtherm</span> <span class="string">ida</span> <span class="string">arat</span> <span class="string">pln</span> <span class="string">pts</span></span><br><span class="line"><span class="attr">bugs            :</span> <span class="string">cpu_meltdown</span> <span class="string">spectre_v1</span> <span class="string">spectre_v2</span> <span class="string">spec_store_bypass</span> <span class="string">l1tf</span> <span class="string">mds</span> <span class="string">swapgs</span></span><br><span class="line"><span class="attr">bogomips        :</span> <span class="number">7183.36</span></span><br><span class="line"><span class="attr">clflush size    :</span> <span class="number">64</span></span><br><span class="line"><span class="attr">cache_alignment :</span> <span class="number">64</span></span><br><span class="line"><span class="attr">address sizes   :</span> <span class="number">42</span> <span class="string">bits</span> <span class="string">physical,</span> <span class="number">48</span> <span class="string">bits</span> <span class="string">virtual</span></span><br><span class="line"><span class="attr">power management:</span></span><br></pre></td></tr></table></figure><h4 id="lshw"><a href="#lshw" class="headerlink" title="lshw"></a>lshw</h4><blockquote><p>lshw - list hardware 列出硬件设备</p><p>lshw is a small tool to extract detailed information on the hardware configuration of the machine. It  can report exact memory configuration, firmware version, mainboard configuration, CPU version and speed, cache configuration, bus speed, etc. on DMI-capable x86 or IA-64 systems and on some PowerPC machines  (PowerMac G4 is known to work).It  currently  supports  DMI (x86 and IA-64 only), OpenFirmware device tree (PowerPC only), PCI/AGP, CPUID (x86), IDE/ATA/ATAPI, PCMCIA (only tested on x86), SCSI and USB.</p></blockquote><p>这个命令就相当于 Windows 下的设备管理器，列出系统里的硬件设备。</p><ul><li>install</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> RHEL/CentOS</span></span><br><span class="line">yum install lshw</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Debian/Ubuntu</span></span><br><span class="line">apt install lshw</span><br></pre></td></tr></table></figure><ul><li>output example</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br></pre></td><td class="code"><pre><span class="line">╭─root@sg-02 /home/ubuntu</span><br><span class="line">╰─# lshw</span><br><span class="line">sg-02</span><br><span class="line"> description: Computer</span><br><span class="line"> product: HVM domU</span><br><span class="line"> vendor: Xen</span><br><span class="line"> version: 4.2.amazon</span><br><span class="line"> serial: ec2c5773-d127-c5a4-60a3-221becf4e6ae</span><br><span class="line"> width: 64 bits</span><br><span class="line"> capabilities: smbios-2.7 dmi-2.7 vsyscall32</span><br><span class="line"> configuration: boot=normal uuid=73572CEC-27D1-A4C5-60A3-221BECF4E6AE</span><br><span class="line">  *-core</span><br><span class="line"> description: Motherboard</span><br><span class="line"> physical id: 0</span><br><span class="line">  *-firmware</span><br><span class="line"> description: BIOS</span><br><span class="line"> vendor: Xen</span><br><span class="line"> physical id: 0</span><br><span class="line"> version: 4.2.amazon</span><br><span class="line"> date: 08/24/2006</span><br><span class="line"> size: 96KiB</span><br><span class="line"> capabilities: pci edd</span><br><span class="line">  *-cpu</span><br><span class="line"> description: CPU</span><br><span class="line"> product: Intel(R) Xeon(R) CPU E5-2676 v3 @ 2.40GHz</span><br><span class="line"> vendor: Intel Corp.</span><br><span class="line"> physical id: 401</span><br><span class="line"> bus info: cpu@0</span><br><span class="line"> slot: CPU 1</span><br><span class="line"> size: 2400MHz</span><br><span class="line"> capacity: 2400MHz</span><br><span class="line"> width: 64 bits</span><br><span class="line"> capabilities: fpu fpu_exception wp vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush mmx fxsr sse sse2 ht syscall nx rdtscp x86-64 constant_tsc rep_good nopl xtopology cpuid pni pclmulqdq ssse3 fma cx16 pcid sse4_1 sse4_2 x2apic movbe popcnt tsc_deadline_timer aes xsave avx f16c rdrand hypervisor lahf_lm abm cpuid_fault invpcid_single pti fsgsbase bmi1 avx2 smep bmi2 erms invpcid xsaveopt</span><br><span class="line">  *-memory</span><br><span class="line"> description: System Memory</span><br><span class="line"> physical id: 1000</span><br><span class="line"> size: 1GiB</span><br><span class="line"> capacity: 1GiB</span><br><span class="line"> capabilities: ecc</span><br><span class="line"> configuration: errordetection=multi-bit-ecc</span><br><span class="line">  *-bank</span><br><span class="line"> description: DIMM RAM</span><br><span class="line"> physical id: 0</span><br><span class="line"> slot: DIMM 0</span><br><span class="line"> size: 1GiB</span><br><span class="line"> width: 64 bits</span><br><span class="line">  *-pci</span><br><span class="line"> description: Host bridge</span><br><span class="line"> product: 440FX - 82441FX PMC [Natoma]</span><br><span class="line"> vendor: Intel Corporation</span><br><span class="line"> physical id: 100</span><br><span class="line"> bus info: pci@0000:00:00.0</span><br><span class="line"> version: 02</span><br><span class="line"> width: 32 bits</span><br><span class="line"> clock: 33MHz</span><br><span class="line">  *-isa</span><br><span class="line"> description: ISA bridge</span><br><span class="line"> product: 82371SB PIIX3 ISA [Natoma/Triton II]</span><br><span class="line"> vendor: Intel Corporation</span><br><span class="line"> physical id: 1</span><br><span class="line"> bus info: pci@0000:00:01.0</span><br><span class="line"> version: 00</span><br><span class="line"> width: 32 bits</span><br><span class="line"> clock: 33MHz</span><br><span class="line"> capabilities: isa bus_master</span><br><span class="line"> configuration: latency=0</span><br><span class="line">  *-ide</span><br><span class="line"> description: IDE interface</span><br><span class="line"> product: 82371SB PIIX3 IDE [Natoma/Triton II]</span><br><span class="line"> vendor: Intel Corporation</span><br><span class="line"> physical id: 1.1</span><br><span class="line"> bus info: pci@0000:00:01.1</span><br><span class="line"> version: 00</span><br><span class="line"> width: 32 bits</span><br><span class="line"> clock: 33MHz</span><br><span class="line"> capabilities: ide bus_master</span><br><span class="line"> configuration: driver=ata_piix latency=64</span><br><span class="line"> resources: irq:0 ioport:1f0(size=8) ioport:3f6 ioport:170(size=8) ioport:376 ioport:c100(size=16)</span><br><span class="line">  *-bridge UNCLAIMED</span><br><span class="line"> description: Bridge</span><br><span class="line"> product: 82371AB/EB/MB PIIX4 ACPI</span><br><span class="line"> vendor: Intel Corporation</span><br><span class="line"> physical id: 1.3</span><br><span class="line"> bus info: pci@0000:00:01.3</span><br><span class="line"> version: 01</span><br><span class="line"> width: 32 bits</span><br><span class="line"> clock: 33MHz</span><br><span class="line"> capabilities: bridge bus_master</span><br><span class="line"> configuration: latency=0</span><br><span class="line">  *-display UNCLAIMED</span><br><span class="line"> description: VGA compatible controller</span><br><span class="line"> product: GD 5446</span><br><span class="line"> vendor: Cirrus Logic</span><br><span class="line"> physical id: 2</span><br><span class="line"> bus info: pci@0000:00:02.0</span><br><span class="line"> version: 00</span><br><span class="line"> width: 32 bits</span><br><span class="line"> clock: 33MHz</span><br><span class="line"> capabilities: vga_controller bus_master</span><br><span class="line"> configuration: latency=0</span><br><span class="line"> resources: memory:f0000000-f1ffffff memory:f3000000-f3000fff memory:c0000-dffff</span><br><span class="line">  *-generic</span><br><span class="line"> description: Unassigned class</span><br><span class="line"> product: Xen Platform Device</span><br><span class="line"> vendor: XenSource, Inc.</span><br><span class="line"> physical id: 3</span><br><span class="line"> bus info: pci@0000:00:03.0</span><br><span class="line"> version: 01</span><br><span class="line"> width: 32 bits</span><br><span class="line"> clock: 33MHz</span><br><span class="line"> capabilities: bus_master</span><br><span class="line"> configuration: driver=xen-platform-pci latency=0</span><br><span class="line"> resources: irq:28 ioport:c000(size=256) memory:f2000000-f2ffffff</span><br><span class="line">  *-network:0</span><br><span class="line"> description: Ethernet interface</span><br><span class="line"> physical id: 1</span><br><span class="line"> logical name: eth0</span><br><span class="line"> serial: 02:24:d2:49:f2:94</span><br><span class="line"> capabilities: ethernet physical</span><br><span class="line"> configuration: broadcast=yes driver=vif ip=172.26.17.53 link=yes multicast=yes</span><br><span class="line">  *-network:1</span><br><span class="line"> description: Ethernet interface</span><br><span class="line"> physical id: 2</span><br><span class="line"> logical name: docker0</span><br><span class="line"> serial: 02:42:37:cf:cf:aa</span><br><span class="line"> capabilities: ethernet physical</span><br><span class="line"> configuration: broadcast=yes driver=bridge driverversion=2.3 firmware=N/A ip=172.17.0.1 link=no multicast=yes</span><br><span class="line">╭─root@sg-02 /home/ubuntu</span><br><span class="line">╰─#</span><br></pre></td></tr></table></figure><h4 id="lsinitramfs"><a href="#lsinitramfs" class="headerlink" title="lsinitramfs"></a>lsinitramfs</h4><blockquote><p>lsinitramfs - list content of an initramfs image</p><p>The  lsinitramfs  command  lists the content of given initramfs images. It allows one to quickly check the content of one (or multiple) specified initramfs files.</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">╭─root@gitlab /opt</span><br><span class="line">╰─<span class="comment"># lsinitramfs /boot/initrd.img-4.15.0-58-generic | head -n 10</span></span><br><span class="line">.</span><br><span class="line">usr</span><br><span class="line">usr/share</span><br><span class="line">usr/share/plymouth</span><br><span class="line">usr/share/plymouth/themes</span><br><span class="line">usr/share/plymouth/themes/details</span><br><span class="line">usr/share/plymouth/themes/details/details.plymouth</span><br><span class="line">usr/share/plymouth/themes/text.plymouth</span><br><span class="line">usr/share/plymouth/themes/ubuntu-text</span><br><span class="line">usr/share/plymouth/themes/ubuntu-text/ubuntu-text.plymouth.in</span><br></pre></td></tr></table></figure><h4 id="lsipc"><a href="#lsipc" class="headerlink" title="lsipc"></a>lsipc</h4><blockquote><p>lsipc - show information on IPC facilities currently employed in the system</p><p>lsipc  shows  information on the inter-process communication facilities for which the calling process has read access.</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">╭─root@gitlab /opt</span><br><span class="line">╰─<span class="comment"># lsipc</span></span><br><span class="line">RESOURCE DESCRIPTION                                     LIMIT USED  USE%</span><br><span class="line">MSGMNI   Number of message queues                        32000    0 0.00%</span><br><span class="line">MSGMAX   Max size of message (bytes)                      8192    -     -</span><br><span class="line">MSGMNB   Default max size of queue (bytes)               16384    -     -</span><br><span class="line">SHMMNI   Shared memory segments                           4096    1 0.02%</span><br><span class="line">SHMALL   Shared memory pages                           4194304    0 0.00%</span><br><span class="line">SHMMAX   Max size of shared memory segment (bytes) 17179869184    -     -</span><br><span class="line">SHMMIN   Min size of shared memory segment (bytes)           1    -     -</span><br><span class="line">SEMMNI   Number of semaphore identifiers                   262    0 0.00%</span><br><span class="line">SEMMNS   Total number of semaphores                      32000    0 0.00%</span><br><span class="line">SEMMSL   Max semaphores per semaphore <span class="built_in">set</span>.                 250    -     -</span><br><span class="line">SEMOPM   Max number of operations per semop(2)              32    -     -</span><br><span class="line">SEMVMX   Semaphore max value                             32767    -     -</span><br></pre></td></tr></table></figure><h4 id="lslocks"><a href="#lslocks" class="headerlink" title="lslocks"></a>lslocks</h4><blockquote><p>lslocks - list local system locks</p><p>lslocks lists information about all the currently held file locks in a Linux system</p></blockquote><p>列出当前系统中被加锁的文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">╭─root@gitlab /opt</span><br><span class="line">╰─<span class="comment"># lslocks</span></span><br><span class="line">COMMAND           PID  TYPE SIZE MODE  M START END PATH</span><br><span class="line">cron              900 FLOCK   4B WRITE 0     0   0 /run/crond.pid</span><br><span class="line">svlogd          53065 FLOCK   0B WRITE 0     0   0 /var/<span class="built_in">log</span>/gitlab/redis/lock</span><br><span class="line">runsv           54095 FLOCK   0B WRITE 0     0   0 /opt/gitlab/sv/sidekiq/supervise/lock</span><br><span class="line">runsv           54095 FLOCK   0B WRITE 0     0   0 /opt/gitlab/sv/sidekiq/<span class="built_in">log</span>/supervise/lock</span><br></pre></td></tr></table></figure><h4 id="lslogins"><a href="#lslogins" class="headerlink" title="lslogins"></a>lslogins</h4><p>列出当前已经登录的用户信息</p><blockquote><p>lslogins - display information about known users in the system</p><p>Examine the wtmp and btmp logs, /etc/shadow (if necessary) and /etc/passwd and output the desired data. The default action is to list info about all the users in the system.</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">╭─root@gitlab /opt</span><br><span class="line">╰─<span class="comment"># lslogins</span></span><br><span class="line">  UID USER              PROC PWD-LOCK PWD-DENY LAST-LOGIN GECOS</span><br><span class="line"> 0 root               211        0        0      06:58 root</span><br><span class="line"> 1 daemon               1        0        1            daemon</span><br><span class="line"> 2 bin                  0        0        1            bin</span><br><span class="line"> 3 sys                  0        0        1            sys</span><br><span class="line"> 4 sync                 0        0        1            sync</span><br><span class="line"> 5 games                0        0        1            games</span><br><span class="line"> 6 man                  0        0        1            man</span><br><span class="line"> 7 lp                   0        0        1            lp</span><br><span class="line"> 8 mail                 0        0        1            mail</span><br><span class="line"> 9 news                 0        0        1            news</span><br><span class="line">10 uucp                 0        0        1            uucp</span><br><span class="line">13 proxy                0        0        1            proxy</span><br><span class="line">33 www-data             0        0        1            www-data</span><br><span class="line">34 backup               0        0        1            backup</span><br><span class="line">38 list                 0        0        1            Mailing List Manager</span><br><span class="line">39 irc                  0        0        1            ircd</span><br><span class="line">41 gnats                0        0        1            Gnats Bug-Reporting System (admin)</span><br><span class="line">  100 systemd-network      1        0        1            systemd Network Management,,,</span><br><span class="line">  101 systemd-resolve      1        0        1            systemd Resolver,,,</span><br><span class="line">  102 syslog               1        0        1</span><br><span class="line">  103 messagebus           1        0        1</span><br><span class="line">  104 _apt                 0        0        1</span><br><span class="line">  105 lxd                  0        0        1</span><br><span class="line">  106 uuidd                0        0        1</span><br><span class="line">  107 dnsmasq              0        0        1            dnsmasq,,,</span><br><span class="line">  108 landscape            0        0        1</span><br><span class="line">  109 pollinate            0        0        1</span><br><span class="line">  110 sshd                 0        0        1</span><br><span class="line">  995 gitlab-prometheus    4        0        1</span><br><span class="line">  996 gitlab-psql         18        0        1</span><br><span class="line">  997 gitlab-redis         2        0        1</span><br><span class="line">  998 git                 16        0        1</span><br><span class="line">  999 gitlab-www           5        0        1</span><br><span class="line"> 1000 ubuntu               0        0        0 2019-Aug28 ubuntu</span><br><span class="line">65534 nobody               0        0        1            nobody</span><br></pre></td></tr></table></figure><h4 id="lsmem"><a href="#lsmem" class="headerlink" title="lsmem"></a>lsmem</h4><blockquote><p>lsmem - list the ranges of available memory with their online status</p><p>The  lsmem command lists the ranges of available memory with their online status. The listed memory blocks correspond to the memory block representation in sysfs. The command also shows the memory block  size  and the amount of memory in online and offline state.</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">╭─root@gitlab /opt</span><br><span class="line">╰─<span class="comment"># lsmem                                                                                                     127 ↵</span></span><br><span class="line">RANGE                                  SIZE  STATE REMOVABLE BLOCK</span><br><span class="line">0x0000000000000000-0x0000000007ffffff  128M online        no     0</span><br><span class="line">0x0000000008000000-0x000000000fffffff  128M online       yes     1</span><br><span class="line">0x0000000010000000-0x000000001fffffff  256M online        no   2-3</span><br><span class="line">0x0000000020000000-0x0000000027ffffff  128M online       yes     4</span><br><span class="line">0x0000000028000000-0x0000000037ffffff  256M online        no   5-6</span><br><span class="line">0x0000000038000000-0x000000003fffffff  128M online       yes     7</span><br><span class="line">0x0000000040000000-0x000000006fffffff  768M online        no  8-13</span><br><span class="line">0x0000000070000000-0x0000000077ffffff  128M online       yes    14</span><br><span class="line">0x0000000078000000-0x00000000bfffffff  1.1G online        no 15-23</span><br><span class="line">0x0000000100000000-0x000000013fffffff    1G online        no 32-39</span><br><span class="line"></span><br><span class="line">Memory block size:       128M</span><br><span class="line">Total online memory:       4G</span><br><span class="line">Total offline memory:      0B</span><br></pre></td></tr></table></figure><h4 id="lsmod"><a href="#lsmod" class="headerlink" title="lsmod"></a>lsmod</h4><p>列出系统内核模块</p><blockquote><p>lsmod - Show the status of modules in the Linux Kernel</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line">╭─root@gitlab /opt</span><br><span class="line">╰─<span class="comment"># lsmod</span></span><br><span class="line">Module                  Size  Used by</span><br><span class="line">tcp_diag               16384  0</span><br><span class="line">inet_diag              24576  1 tcp_diag</span><br><span class="line">joydev                 24576  0</span><br><span class="line">input_leds             16384  0</span><br><span class="line">vmw_balloon            20480  0</span><br><span class="line">serio_raw              16384  0</span><br><span class="line">vmw_vsock_vmci_transport    28672  1</span><br><span class="line">vsock                  36864  2 vmw_vsock_vmci_transport</span><br><span class="line">vmw_vmci               69632  2 vmw_balloon,vmw_vsock_vmci_transport</span><br><span class="line">sch_fq_codel           20480  5</span><br><span class="line">ib_iser                49152  0</span><br><span class="line">rdma_cm                61440  1 ib_iser</span><br><span class="line">iw_cm                  45056  1 rdma_cm</span><br><span class="line">ib_cm                  53248  1 rdma_cm</span><br><span class="line">ib_core               225280  4 rdma_cm,iw_cm,ib_iser,ib_cm</span><br><span class="line">iscsi_tcp              20480  0</span><br><span class="line">libiscsi_tcp           20480  1 iscsi_tcp</span><br><span class="line">libiscsi               53248  3 libiscsi_tcp,iscsi_tcp,ib_iser</span><br><span class="line">scsi_transport_iscsi    98304  3 iscsi_tcp,ib_iser,libiscsi</span><br><span class="line">ip_tables              28672  0</span><br><span class="line">x_tables               40960  1 ip_tables</span><br><span class="line">autofs4                40960  2</span><br><span class="line">btrfs                1130496  0</span><br><span class="line">zstd_compress         163840  1 btrfs</span><br><span class="line">raid10                 53248  0</span><br><span class="line">raid456               143360  0</span><br><span class="line">async_raid6_recov      20480  1 raid456</span><br><span class="line">async_memcpy           16384  2 raid456,async_raid6_recov</span><br><span class="line">async_pq               16384  2 raid456,async_raid6_recov</span><br><span class="line">async_xor              16384  3 async_pq,raid456,async_raid6_recov</span><br><span class="line">async_tx               16384  5 async_pq,async_memcpy,async_xor,raid456,async_raid6_recov</span><br><span class="line">xor                    24576  2 async_xor,btrfs</span><br><span class="line">raid6_pq              114688  4 async_pq,btrfs,raid456,async_raid6_recov</span><br><span class="line">libcrc32c              16384  1 raid456</span><br><span class="line">raid1                  40960  0</span><br><span class="line">raid0                  20480  0</span><br><span class="line">multipath              16384  0</span><br><span class="line">linear                 16384  0</span><br><span class="line">crct10dif_pclmul       16384  0</span><br><span class="line">crc32_pclmul           16384  0</span><br><span class="line">ghash_clmulni_intel    16384  0</span><br><span class="line">pcbc                   16384  0</span><br><span class="line">vmwgfx                274432  1</span><br><span class="line">ttm                   106496  1 vmwgfx</span><br><span class="line">drm_kms_helper        172032  1 vmwgfx</span><br><span class="line">aesni_intel           188416  0</span><br><span class="line">syscopyarea            16384  1 drm_kms_helper</span><br><span class="line">aes_x86_64             20480  1 aesni_intel</span><br><span class="line">sysfillrect            16384  1 drm_kms_helper</span><br><span class="line">crypto_simd            16384  1 aesni_intel</span><br><span class="line">sysimgblt              16384  1 drm_kms_helper</span><br><span class="line">glue_helper            16384  1 aesni_intel</span><br><span class="line">fb_sys_fops            16384  1 drm_kms_helper</span><br><span class="line">cryptd                 24576  3 crypto_simd,ghash_clmulni_intel,aesni_intel</span><br><span class="line">psmouse               147456  0</span><br><span class="line">drm                   401408  4 vmwgfx,drm_kms_helper,ttm</span><br><span class="line">mptspi                 24576  2</span><br><span class="line">mptscsih               40960  1 mptspi</span><br><span class="line">mptbase               102400  2 mptspi,mptscsih</span><br><span class="line">ahci                   40960  0</span><br><span class="line">libahci                32768  1 ahci</span><br><span class="line">i2c_piix4              24576  0</span><br><span class="line">vmxnet3                57344  0</span><br><span class="line">scsi_transport_spi     32768  1 mptspi</span><br><span class="line">pata_acpi              16384  0</span><br></pre></td></tr></table></figure><h4 id="lsns-list-namespaces"><a href="#lsns-list-namespaces" class="headerlink" title="lsns - list namespaces"></a>lsns - list namespaces</h4><p>lsns  lists  information  about all the currently accessible namespaces or about the given namespace.  The namespace identifier is an inode number.</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">╭─root@gitlab /opt</span><br><span class="line">╰─<span class="comment"># lsns</span></span><br><span class="line">  NS TYPE   NPROCS   PID USER             COMMAND</span><br><span class="line">4026531835 cgroup    264     1 root             /lib/systemd/systemd --system --deserialize 39</span><br><span class="line">4026531836 pid       264     1 root             /lib/systemd/systemd --system --deserialize 39</span><br><span class="line">4026531837 user      264     1 root             /lib/systemd/systemd --system --deserialize 39</span><br><span class="line">4026531838 uts       264     1 root             /lib/systemd/systemd --system --deserialize 39</span><br><span class="line">4026531839 ipc       264     1 root             /lib/systemd/systemd --system --deserialize 39</span><br><span class="line">4026531840 mnt       259     1 root             /lib/systemd/systemd --system --deserialize 39</span><br><span class="line">4026531861 mnt         1    31 root             kdevtmpfs</span><br><span class="line">4026531993 net       264     1 root             /lib/systemd/systemd --system --deserialize 39</span><br><span class="line">4026532531 mnt         1 37609 root             /lib/systemd/systemd-udevd</span><br><span class="line">4026532556 mnt         1 42954 systemd-timesync /lib/systemd/systemd-timesyncd</span><br><span class="line">4026532557 mnt         1 42900 systemd-network  /lib/systemd/systemd-networkd</span><br><span class="line">4026532603 mnt         1 42924 systemd-resolve  /lib/systemd/systemd-resolved</span><br></pre></td></tr></table></figure><h4 id="lsof-list-open-files"><a href="#lsof-list-open-files" class="headerlink" title="lsof - list open files"></a>lsof - list open files</h4><p>lsof 列出打开的文件。绝对是个排查故障的利器，在一切皆文件的 Linux 世界里，lsof 可以查看打开的文件是：</p><ul><li>普通文件</li><li>目录</li><li>网络文件系统的文件</li><li>字符或设备文件</li><li>(函数)共享库</li><li>管道、命名管道</li><li>符号链接</li><li>网络文件（例如：NFS file、网络socket，unix域名socket）</li><li>还有其它类型的文件，等等</li></ul><p>另外 lsof 命令也是有着最多选项的Linux/Unix命令之一，另一个 nc 命令也是如此😂。</p><ul><li>列出端口号占用的进程</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">╭─root@blog &#x2F;opt&#x2F;shell</span><br><span class="line">╰─# lsof -i :53      ↵</span><br><span class="line">COMMAND   PID            USER   FD   TYPE DEVICE SIZE&#x2F;OFF NODE NAME</span><br><span class="line">systemd-r 538 systemd-resolve   12u  IPv4  13925      0t0  UDP localhost:domain</span><br><span class="line">systemd-r 538 systemd-resolve   13u  IPv4  13926      0t0  TCP localhost:domain (LISTEN)</span><br></pre></td></tr></table></figure><blockquote><p>PS：最近面试的时候被问到过</p><p>Q： Linux 下查看端口占用的命令？</p><p>A：<code>netstat -tunlp</code> 、<code>ss -tua</code>、<code>lsof -i</code> 😂</p></blockquote><h4 id="lspci-list-all-PCI-devices"><a href="#lspci-list-all-PCI-devices" class="headerlink" title="lspci - list all PCI devices"></a>lspci - list all PCI devices</h4><p>列出 PCI 设备，比如显卡</p><blockquote><p>lspci is a utility for displaying information about PCI buses in the system and devices connected to them.</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">╭─root@gitlab /opt</span><br><span class="line">╰─<span class="comment"># lspci</span></span><br><span class="line">00:00.0 Host bridge: Intel Corporation 440BX/ZX/DX - 82443BX/ZX/DX Host bridge (rev 01)</span><br><span class="line">00:01.0 PCI bridge: Intel Corporation 440BX/ZX/DX - 82443BX/ZX/DX AGP bridge (rev 01)</span><br><span class="line">00:07.0 ISA bridge: Intel Corporation 82371AB/EB/MB PIIX4 ISA (rev 08)</span><br><span class="line">00:07.1 IDE interface: Intel Corporation 82371AB/EB/MB PIIX4 IDE (rev 01)</span><br><span class="line">00:07.3 Bridge: Intel Corporation 82371AB/EB/MB PIIX4 ACPI (rev 08)</span><br><span class="line">00:07.7 System peripheral: VMware Virtual Machine Communication Interface (rev 10)</span><br><span class="line">00:0f.0 VGA compatible controller: VMware SVGA II Adapter</span><br><span class="line">00:10.0 SCSI storage controller: LSI Logic / Symbios Logic 53c1030 PCI-X Fusion-MPT Dual Ultra320 SCSI (rev 01)</span><br><span class="line">00:11.0 PCI bridge: VMware PCI bridge (rev 02)</span><br></pre></td></tr></table></figure><h3 id="proc"><a href="#proc" class="headerlink" title="proc"></a>proc</h3><p>确切来说这并不是一个工具，而是 Linux 的内存文件系统，它可以帮助我们了解一些系统信息，方便排查一些故障等。</p><h4 id="CPU"><a href="#CPU" class="headerlink" title="CPU"></a>CPU</h4><p><code>cat /proc/cpuinfo</code> 和 <code>lscpu</code> 二者输出类似</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">[root@k8s-master-01</span> <span class="string">~]#</span> <span class="string">cat</span> <span class="string">/proc/cpuinfo</span></span><br><span class="line"><span class="attr">processor       :</span> <span class="number">0</span></span><br><span class="line"><span class="attr">vendor_id       :</span> <span class="string">GenuineIntel</span></span><br><span class="line"><span class="attr">cpu family      :</span> <span class="number">6</span></span><br><span class="line"><span class="attr">model           :</span> <span class="number">60</span></span><br><span class="line"><span class="attr">model name      :</span> <span class="string">Intel(R)</span> <span class="string">Xeon(R)</span> <span class="string">CPU</span> <span class="string">E3-1271</span> <span class="string">v3</span> <span class="string">@</span> <span class="number">3.</span><span class="string">60GHz</span></span><br><span class="line"><span class="attr">stepping        :</span> <span class="number">3</span></span><br><span class="line"><span class="attr">microcode       :</span> <span class="number">0x1c</span></span><br><span class="line"><span class="attr">cpu MHz         :</span> <span class="number">3591.683</span></span><br><span class="line"><span class="attr">cache size      :</span> <span class="number">8192</span> <span class="string">KB</span></span><br><span class="line"><span class="attr">physical id     :</span> <span class="number">0</span></span><br><span class="line"><span class="attr">siblings        :</span> <span class="number">1</span></span><br><span class="line"><span class="attr">core id         :</span> <span class="number">0</span></span><br><span class="line"><span class="attr">cpu cores       :</span> <span class="number">1</span></span><br><span class="line"><span class="attr">apicid          :</span> <span class="number">0</span></span><br><span class="line"><span class="attr">initial apicid  :</span> <span class="number">0</span></span><br><span class="line"><span class="attr">fpu             :</span> <span class="literal">yes</span></span><br><span class="line"><span class="attr">fpu_exception   :</span> <span class="literal">yes</span></span><br><span class="line"><span class="attr">cpuid level     :</span> <span class="number">13</span></span><br><span class="line"><span class="attr">wp              :</span> <span class="literal">yes</span></span><br><span class="line"><span class="attr">flags           :</span> <span class="string">fpu</span> <span class="string">vme</span> <span class="string">de</span> <span class="string">pse</span> <span class="string">tsc</span> <span class="string">msr</span> <span class="string">pae</span> <span class="string">mce</span> <span class="string">cx8</span> <span class="string">apic</span> <span class="string">sep</span> <span class="string">mtrr</span> <span class="string">pge</span> <span class="string">mca</span> <span class="string">cmov</span> <span class="string">pat</span> <span class="string">pse36</span> <span class="string">clflush</span> <span class="string">dts</span> <span class="string">mmx</span> <span class="string">fxsr</span> <span class="string">sse</span> <span class="string">sse2</span> <span class="string">ss</span> <span class="string">syscall</span> <span class="string">nx</span> <span class="string">pdpe1gb</span> <span class="string">rdtscp</span> <span class="string">lm</span> <span class="string">constant_tsc</span> <span class="string">arch_perfmon</span> <span class="string">pebs</span> <span class="string">bts</span> <span class="string">nopl</span> <span class="string">xtopology</span> <span class="string">tsc_reliable</span> <span class="string">nonstop_tsc</span> <span class="string">aperfmperf</span> <span class="string">eagerfpu</span> <span class="string">pni</span> <span class="string">pclmulqdq</span> <span class="string">ssse3</span> <span class="string">fma</span> <span class="string">cx16</span> <span class="string">pcid</span> <span class="string">sse4_1</span> <span class="string">sse4_2</span> <span class="string">x2apic</span> <span class="string">movbe</span> <span class="string">popcnt</span> <span class="string">tsc_deadline_timer</span> <span class="string">aes</span> <span class="string">xsave</span> <span class="string">avx</span> <span class="string">f16c</span> <span class="string">rdrand</span> <span class="string">hypervisor</span> <span class="string">lahf_lm</span> <span class="string">abm</span> <span class="string">epb</span> <span class="string">fsgsbase</span> <span class="string">tsc_adjust</span> <span class="string">bmi1</span> <span class="string">avx2</span> <span class="string">smep</span> <span class="string">bmi2</span> <span class="string">invpcid</span> <span class="string">xsaveopt</span> <span class="string">dtherm</span> <span class="string">ida</span> <span class="string">arat</span> <span class="string">pln</span> <span class="string">pts</span></span><br><span class="line"><span class="attr">bogomips        :</span> <span class="number">7183.36</span></span><br><span class="line"><span class="attr">clflush size    :</span> <span class="number">64</span></span><br><span class="line"><span class="attr">cache_alignment :</span> <span class="number">64</span></span><br><span class="line"><span class="attr">address sizes   :</span> <span class="number">42</span> <span class="string">bits</span> <span class="string">physical,</span> <span class="number">48</span> <span class="string">bits</span> <span class="string">virtual</span></span><br><span class="line"><span class="attr">power management:</span></span><br></pre></td></tr></table></figure><h4 id="RAM"><a href="#RAM" class="headerlink" title="RAM"></a>RAM</h4><p>用来查看一下系统内存的信息，另外 free 命令是从 /proc/meminfo 中读取信息的，跟我们直接读到的结果一样。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">[root@k8s-master-01</span> <span class="string">proc]#</span> <span class="string">cat</span> <span class="string">meminfo</span></span><br><span class="line"><span class="attr">MemTotal:</span>        <span class="number">3863636</span> <span class="string">kB</span></span><br><span class="line"><span class="attr">MemFree:</span>          <span class="number">247016</span> <span class="string">kB</span></span><br><span class="line"><span class="attr">MemAvailable:</span>    <span class="number">2096628</span> <span class="string">kB</span></span><br><span class="line"><span class="attr">Buffers:</span>           <span class="number">85612</span> <span class="string">kB</span></span><br><span class="line"><span class="attr">Cached:</span>          <span class="number">1952072</span> <span class="string">kB</span></span><br><span class="line"><span class="attr">SwapCached:</span>            <span class="number">0</span> <span class="string">kB</span></span><br><span class="line"><span class="attr">Active:</span>          <span class="number">2250028</span> <span class="string">kB</span></span><br><span class="line"><span class="attr">Inactive:</span>        <span class="number">1003588</span> <span class="string">kB</span></span><br><span class="line"><span class="string">Active(anon):</span>    <span class="number">1224120</span> <span class="string">kB</span></span><br><span class="line"><span class="string">Inactive(anon):</span>    <span class="number">21344</span> <span class="string">kB</span></span><br><span class="line"><span class="string">Active(file):</span>    <span class="number">1025908</span> <span class="string">kB</span></span><br><span class="line"><span class="string">Inactive(file):</span>   <span class="number">982244</span> <span class="string">kB</span></span><br><span class="line"><span class="attr">Unevictable:</span>           <span class="number">0</span> <span class="string">kB</span></span><br><span class="line"><span class="attr">Mlocked:</span>               <span class="number">0</span> <span class="string">kB</span></span><br><span class="line"><span class="attr">SwapTotal:</span>             <span class="number">0</span> <span class="string">kB</span></span><br><span class="line"><span class="attr">SwapFree:</span>              <span class="number">0</span> <span class="string">kB</span></span><br><span class="line"><span class="attr">Dirty:</span>               <span class="number">128</span> <span class="string">kB</span></span><br><span class="line"><span class="attr">Writeback:</span>             <span class="number">0</span> <span class="string">kB</span></span><br><span class="line"><span class="attr">AnonPages:</span>       <span class="number">1215816</span> <span class="string">kB</span></span><br><span class="line"><span class="attr">Mapped:</span>           <span class="number">196080</span> <span class="string">kB</span></span><br><span class="line"><span class="attr">Shmem:</span>             <span class="number">29532</span> <span class="string">kB</span></span><br><span class="line"><span class="attr">Slab:</span>             <span class="number">222544</span> <span class="string">kB</span></span><br><span class="line"><span class="attr">SReclaimable:</span>      <span class="number">92156</span> <span class="string">kB</span></span><br><span class="line"><span class="attr">SUnreclaim:</span>       <span class="number">130388</span> <span class="string">kB</span></span><br><span class="line"><span class="attr">KernelStack:</span>       <span class="number">15904</span> <span class="string">kB</span></span><br><span class="line"><span class="attr">PageTables:</span>        <span class="number">13024</span> <span class="string">kB</span></span><br><span class="line"><span class="attr">NFS_Unstable:</span>          <span class="number">0</span> <span class="string">kB</span></span><br><span class="line"><span class="attr">Bounce:</span>                <span class="number">0</span> <span class="string">kB</span></span><br><span class="line"><span class="attr">WritebackTmp:</span>          <span class="number">0</span> <span class="string">kB</span></span><br><span class="line"><span class="attr">CommitLimit:</span>     <span class="number">1931816</span> <span class="string">kB</span></span><br><span class="line"><span class="attr">Committed_AS:</span>    <span class="number">7402668</span> <span class="string">kB</span></span><br><span class="line"><span class="attr">VmallocTotal:</span>   <span class="number">34359738367</span> <span class="string">kB</span></span><br><span class="line"><span class="attr">VmallocUsed:</span>      <span class="number">187276</span> <span class="string">kB</span></span><br><span class="line"><span class="attr">VmallocChunk:</span>   <span class="number">34359310332</span> <span class="string">kB</span></span><br><span class="line"><span class="attr">HardwareCorrupted:</span>     <span class="number">0</span> <span class="string">kB</span></span><br><span class="line"><span class="attr">AnonHugePages:</span>    <span class="number">264192</span> <span class="string">kB</span></span><br><span class="line"><span class="attr">CmaTotal:</span>              <span class="number">0</span> <span class="string">kB</span></span><br><span class="line"><span class="attr">CmaFree:</span>               <span class="number">0</span> <span class="string">kB</span></span><br><span class="line"><span class="attr">HugePages_Total:</span>       <span class="number">0</span></span><br><span class="line"><span class="attr">HugePages_Free:</span>        <span class="number">0</span></span><br><span class="line"><span class="attr">HugePages_Rsvd:</span>        <span class="number">0</span></span><br><span class="line"><span class="attr">HugePages_Surp:</span>        <span class="number">0</span></span><br><span class="line"><span class="attr">Hugepagesize:</span>       <span class="number">2048</span> <span class="string">kB</span></span><br><span class="line"><span class="attr">DirectMap4k:</span>      <span class="number">206720</span> <span class="string">kB</span></span><br><span class="line"><span class="attr">DirectMap2M:</span>     <span class="number">3987456</span> <span class="string">kB</span></span><br><span class="line"><span class="attr">DirectMap1G:</span>     <span class="number">2097152</span> <span class="string">kB</span></span><br></pre></td></tr></table></figure><ul><li><p>buffer：表示块设备(block device)所占用的缓存页，包括：直接读写块设备、以及文件系统元数据(metadata)比如SuperBlock所使用的缓存页；</p></li><li><p>cache：表示普通文件数据所占用的缓存页。</p></li></ul><p>二者的区别推荐阅读 <a href="http://linuxperf.com/?p=32" target="_blank" rel="noopener">FREE命令显示的BUFFERS与CACHED的区别</a>，从 Linux 内核源码来区分。</p><h4 id="net"><a href="#net" class="headerlink" title="net"></a>net</h4><ul><li>arp</li></ul><p>用来查看系统 arp 缓存的映射表。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">╭─root@k8s-node-3 /proc/net</span><br><span class="line">╰─# cat arp</span><br><span class="line">IP address       HW type     Flags       HW address            Mask     Device</span><br><span class="line">169.254.169.254  0x1         0x0         00:00:00:00:00:00     *        ens160</span><br><span class="line">100.78.36.67     0x1         0x2         ee:25:17:a5:e9:3b     *        cali35f7ecfd8a4</span><br><span class="line">10.20.172.212    0x1         0x2         00:0c:29:16:f5:1f     *        ens160</span><br><span class="line">100.78.36.65     0x1         0x2         d6:80:af:8a:22:c7     *        calid838acfbeda</span><br><span class="line">10.20.172.1      0x1         0x2         00:00:5e:00:01:3a     *        ens160</span><br><span class="line">10.20.172.102    0x1         0x2         00:21:91:53:e8:a3     *        ens160</span><br><span class="line">10.20.172.254    0x1         0x2         5c:dd:70:05:e8:53     *        ens160</span><br><span class="line">10.20.172.106    0x1         0x2         98:90:96:d0:86:8a     *        ens160</span><br></pre></td></tr></table></figure><ul><li>route</li></ul><p>以树级结构列出系统的路由表信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line">╭─root@k8s-node-3 ~</span><br><span class="line">╰─# cat /proc/net/fib_trie</span><br><span class="line">Main:</span><br><span class="line">  +-- 0.0.0.0/0 3 1 5</span><br><span class="line">  +-- 0.0.0.0/4 2 0 2</span><br><span class="line">  |-- 0.0.0.0</span><br><span class="line">  /0 universe UNICAST</span><br><span class="line">  +-- 10.0.0.0/9 2 0 2</span><br><span class="line">  +-- 10.20.172.0/24 2 1 2</span><br><span class="line">  |-- 10.20.172.0</span><br><span class="line">  /32 link BROADCAST</span><br><span class="line">  /24 link UNICAST</span><br><span class="line">  +-- 10.20.172.192/26 2 0 2</span><br><span class="line">  |-- 10.20.172.211</span><br><span class="line">  /32 host LOCAL</span><br><span class="line">  |-- 10.20.172.255</span><br><span class="line">  /32 link BROADCAST</span><br><span class="line">  +-- 10.96.0.0/12 4 1 7</span><br><span class="line">  +-- 10.96.0.0/16 2 0 1</span><br><span class="line">  +-- 10.96.0.0/28 2 0 2</span><br><span class="line">  |-- 10.96.0.1</span><br><span class="line">  /32 host LOCAL</span><br><span class="line">  |-- 10.96.0.10</span><br><span class="line">  /32 host LOCAL</span><br><span class="line">  |-- 10.96.94.140</span><br><span class="line">  /32 host LOCAL</span><br><span class="line">  |-- 10.96.130.114</span><br><span class="line">  /32 host LOCAL</span><br><span class="line">  |-- 10.99.89.188</span><br><span class="line">  /32 host LOCAL</span><br><span class="line">  |-- 10.101.71.131</span><br><span class="line">  /32 host LOCAL</span><br><span class="line">  |-- 10.104.241.211</span><br><span class="line">  /32 host LOCAL</span><br><span class="line">  |-- 10.107.246.53</span><br><span class="line">  /32 host LOCAL</span><br><span class="line">  |-- 10.108.171.54</span><br><span class="line">  /32 host LOCAL</span><br><span class="line">  |-- 10.109.20.145</span><br><span class="line">  /32 host LOCAL</span><br><span class="line">  |-- 10.110.206.28</span><br><span class="line">  /32 host LOCAL</span><br><span class="line">  |-- 10.111.25.53</span><br><span class="line">  /32 host LOCAL</span><br><span class="line">  +-- 96.0.0.0/3 2 0 2</span><br><span class="line">  +-- 100.64.0.0/10 3 0 3</span><br><span class="line">  +-- 100.78.36.64/26 3 0 6</span><br><span class="line">  +-- 100.78.36.64/30 2 0 0</span><br><span class="line">  |-- 100.78.36.64</span><br><span class="line">  /32 host LOCAL</span><br><span class="line">  /32 link BROADCAST</span><br><span class="line">  /26 universe BLACKHOLE</span><br><span class="line">  |-- 100.78.36.65</span><br><span class="line">  /32 link UNICAST</span><br><span class="line">  |-- 100.78.36.66</span><br><span class="line">  /32 link UNICAST</span><br><span class="line">  |-- 100.78.36.67</span><br><span class="line">  /32 link UNICAST</span><br><span class="line">  |-- 100.78.36.105</span><br><span class="line">  /32 link UNICAST</span><br><span class="line">  |-- 100.87.114.192</span><br><span class="line">  /26 universe UNICAST</span><br><span class="line">  |-- 100.107.127.64</span><br><span class="line">  /26 universe UNICAST</span><br><span class="line">  |-- 100.112.151.128</span><br><span class="line">  /26 universe UNICAST</span><br><span class="line">  |-- 100.123.190.192</span><br><span class="line">  /26 universe UNICAST</span><br><span class="line">  +-- 127.0.0.0/8 2 0 2</span><br><span class="line">  +-- 127.0.0.0/31 1 0 0</span><br><span class="line">  |-- 127.0.0.0</span><br><span class="line">  /32 link BROADCAST</span><br><span class="line">  /8 host LOCAL</span><br><span class="line">  |-- 127.0.0.1</span><br><span class="line">  /32 host LOCAL</span><br><span class="line">  |-- 127.255.255.255</span><br><span class="line">  /32 link BROADCAST</span><br><span class="line">  +-- 168.0.0.0/5 2 0 2</span><br><span class="line">  |-- 169.254.0.0</span><br><span class="line">  /16 link UNICAST</span><br><span class="line">  +-- 172.16.0.0/14 3 0 6</span><br><span class="line">  +-- 172.17.0.0/31 1 0 0</span><br><span class="line">  |-- 172.17.0.0</span><br><span class="line">  /32 link BROADCAST</span><br><span class="line">  /16 link UNICAST</span><br><span class="line">  |-- 172.17.0.1</span><br><span class="line">  /32 host LOCAL</span><br><span class="line">  |-- 172.17.255.255</span><br><span class="line">  /32 link BROADCAST</span><br></pre></td></tr></table></figure><ul><li>nf_conntrack</li></ul><blockquote><p>nf_conntrack(在老版本的 Linux 内核中叫 ip_conntrack)是一个内核模块,用于跟踪一个连接的状态的。连接状态跟踪可以供其他模块使用,最常见的两个使用场景是 iptables 的 nat 的 state 模块。 iptables 的 nat 通过规则来修改目的/源地址,但光修改地址不行,我们还需要能让回来的包能路由到最初的来源主机。这就需要借助 nf_conntrack 来找到原来那个连接的记录才行。而 state 模块则是直接使用 nf_conntrack 里记录的连接的状态来匹配用户定义的相关规则。例如下面这条 INPUT 规则用于放行 80 端口上的状态为 NEW 的连接上的包。</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">╭─root@k8s-node-3 /proc/net</span><br><span class="line">╰─# cat nf_conntrack | head -n 4</span><br><span class="line">ipv4     2 tcp      6 102 SYN_SENT src=10.20.172.211 dst=10.10.107.214 sport=42562 dport=179 [UNREPLIED] src=10.10.107.214 dst=10.20.172.211 sport=179 dport=42562 mark=0 secctx=system_u:object_r:unlabeled_t:s0 zone=0 use=2</span><br><span class="line">ipv4     2 tcp      6 79 SYN_SENT src=10.20.172.211 dst=10.10.107.214 sport=60579 dport=179 [UNREPLIED] src=10.10.107.214 dst=10.20.172.211 sport=179 dport=60579 mark=0 secctx=system_u:object_r:unlabeled_t:s0 zone=0 use=2</span><br><span class="line">ipv4     2 tcp      6 86366 ESTABLISHED src=10.20.172.211 dst=10.10.107.121 sport=58589 dport=179 src=10.10.107.121 dst=10.20.172.211 sport=179 dport=58589 [ASSURED] mark=0 secctx=system_u:object_r:unlabeled_t:s0 zone=0 use=2</span><br><span class="line">ipv4     2 tcp      6 62 SYN_SENT src=10.20.172.211 dst=10.10.107.214 sport=37531 dport=179 [UNREPLIED] src=10.10.107.214 dst=10.20.172.211 sport=179 dport=37531 mark=0 secctx=system_u:object_r:unlabeled_t:s0 zone=0 use=2</span><br></pre></td></tr></table></figure><ul><li><a href="http://www.linvon.cn/post/%E8%BF%9E%E6%8E%A5%E8%B7%9F%E8%B8%AAnf_conntrack%E4%B8%8Enat%E5%92%8C%E7%8A%B6%E6%80%81iptables/" target="_blank" rel="noopener">连接跟踪nf_conntrack与NAT和状态防火墙</a></li><li><a href="https://www.cnblogs.com/liushaodong/archive/2013/02/26/2933593.html" target="_blank" rel="noopener">netfilter 链接跟踪机制与NAT原理</a></li><li><a href="http://blog.chinaunix.net/uid-23069658-id-3169450.html" target="_blank" rel="noopener">(五)洞悉linux下的Netfilter&amp;iptables：如何理解连接跟踪机制？</a></li><li><a href="https://clodfisher.github.io/2018/09/nf_conntrack/" target="_blank" rel="noopener">Iptables之nf_conntrack模块</a></li></ul><h4 id="kernel"><a href="#kernel" class="headerlink" title="kernel"></a>kernel</h4><p>可以用来查看一下系统内核版本信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@k8s-master-01 proc]# uname -a</span><br><span class="line">Linux k8s-master-01 3.10.0-862.el7.x86_64 #1 SMP Fri Apr 20 16:44:24 UTC 2018 x86_64 x86_64 x86_64 GNU/Linux</span><br><span class="line">[root@k8s-master-01 proc]# cat version</span><br><span class="line">Linux version 3.10.0-862.el7.x86_64 (builder@kbuilder.dev.centos.org) (gcc version 4.8.5 20150623 (Red Hat 4.8.5-28) (GCC) ) #1 SMP Fri Apr 20 16:44:24 UTC 2018</span><br></pre></td></tr></table></figure><h3 id="网络"><a href="#网络" class="headerlink" title="网络"></a>网络</h3><h4 id="nc-netcat"><a href="#nc-netcat" class="headerlink" title="nc netcat"></a>nc netcat</h4><p>nc 是个瑞士军刀啊，你能想到的你想不到的都能做，在这里仅仅列出几个常用常用的命令，咱平时主要用来判断主机端口是否正常，想要完整地了解推荐阅读下面提到的文章。之前编程随想大佬也写过 nc 命令的使用详解。</p><ul><li>install</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> RHEL/CentOS</span></span><br><span class="line">yum install netcat</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Debian/Ubuntu</span></span><br><span class="line">apt install netcat</span><br></pre></td></tr></table></figure><ul><li>查看主机端口是否打开</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 查看远程主机端口是否打开</span></span><br><span class="line">╭─root@blog /opt/shell</span><br><span class="line">╰─# nc -vz bing.com 443</span><br><span class="line">DNS fwd/rev mismatch: bing.com != a-0001.a-msedge.net</span><br><span class="line">Warning: inverse host lookup failed for 13.107.21.200: Unknown host</span><br><span class="line">bing.com [204.79.197.200] 443 (https) open</span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看本机端口是否被占用</span></span><br><span class="line">╭─root@blog /opt/shell</span><br><span class="line">╰─# nc -lp 80 -v                                                                    1 ↵</span><br><span class="line">retrying local 0.0.0.0:80 : Address already in use</span><br></pre></td></tr></table></figure><ul><li>用 nc 传输文件</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 接收端】（B 主机）运行如下命令（其中的 xxx 是端口号）</span></span><br><span class="line">nc -l -p xxx &gt; file2</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 然后在【发送端】（A 主机）运行如下命令</span></span><br><span class="line">nc x.x.x.x xxx &lt; file1</span><br></pre></td></tr></table></figure><ul><li><a href="https://program-think.blogspot.com/2019/09/Netcat-Tricks.html" target="_blank" rel="noopener">扫盲 netcat（网猫）的 N 种用法——从“网络诊断”到“系统入侵”</a></li></ul><h4 id="nmap"><a href="#nmap" class="headerlink" title="nmap"></a>nmap</h4><p>nmap 命令用的最多的就是端口扫描，在渗透领域多用来扫描内网机器。</p><ul><li>install</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> RHEL/CentOS</span></span><br><span class="line">yum install nmap</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Debian/Ubuntu</span></span><br><span class="line">apt install nmap</span><br></pre></td></tr></table></figure><ul><li>扫描类型</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">-sT    TCP connect() 扫描，这是最基本的 TCP 扫描方式。这种扫描很容易被检测到，在目标主机的日志中会记录大批的连接请求以及错误信息。</span><br><span class="line">-sS    TCP 同步扫描 (TCP SYN)，因为不必全部打开一个 TCP 连接，所以这项技术通常称为半开扫描 (half-open)。这项技术最大的好处是，很少有系统能够把这记入系统日志。不过，你需要 root 权限来定制 SYN 数据包。</span><br><span class="line">-sF,-sX,-sN    秘密 FIN 数据包扫描、圣诞树 (Xmas Tree)、空 (Null) 扫描模式。这些扫描方式的理论依据是：关闭的端口需要对你的探测包回应 RST 包，而打开的端口必需忽略有问题的包（参考 RFC 793 第 64 页）。</span><br><span class="line">-sP    ping 扫描，用 ping 方式检查网络上哪些主机正在运行。当主机阻塞 ICMP echo 请求包是 ping 扫描是无效的。nmap 在任何情况下都会进行 ping 扫描，只有目标主机处于运行状态，才会进行后续的扫描。</span><br><span class="line">-sU    UDP 的数据包进行扫描，如果你想知道在某台主机上提供哪些 UDP（用户数据报协议，RFC768) 服务，可以使用此选项。</span><br><span class="line">-sA    ACK 扫描，这项高级的扫描方法通常可以用来穿过防火墙。</span><br><span class="line">-sW    滑动窗口扫描，非常类似于 ACK 的扫描。</span><br><span class="line">-sR    RPC 扫描，和其它不同的端口扫描方法结合使用。</span><br><span class="line">-b    FTP 反弹攻击 (bounce attack)，连接到防火墙后面的一台 FTP 服务器做代理，接着进行端口扫描。</span><br></pre></td></tr></table></figure><ul><li>扫描参数</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">-P0    在扫描之前，不 ping 主机。</span><br><span class="line">-PT    扫描之前，使用 TCP ping 确定哪些主机正在运行。</span><br><span class="line">-PS    对于 root 用户，这个选项让 nmap 使用 SYN 包而不是 ACK 包来对目标主机进行扫描。</span><br><span class="line">-PI    设置这个选项，让 nmap 使用真正的 ping(ICMP echo 请求）来扫描目标主机是否正在运行。</span><br><span class="line">-PB    这是默认的 ping 扫描选项。它使用 ACK(-PT) 和 ICMP(-PI) 两种扫描类型并行扫描。如果防火墙能够过滤其中一种包，使用这种方法，你就能够穿过防火墙。</span><br><span class="line">-O    这个选项激活对 TCP/IP 指纹特征 (fingerprinting) 的扫描，获得远程主机的标志，也就是操作系统类型。</span><br><span class="line">-I    打开 nmap 的反向标志扫描功能。</span><br><span class="line">-f    使用碎片 IP 数据包发送 SYN、FIN、XMAS、NULL。包增加包过滤、入侵检测系统的难度，使其无法知道你的企图。</span><br><span class="line">-v    冗余模式。强烈推荐使用这个选项，它会给出扫描过程中的详细信息。</span><br><span class="line">-S &lt;IP&gt;    在一些情况下，nmap 可能无法确定你的源地址 (nmap 会告诉你）。在这种情况使用这个选项给出你的 IP 地址。</span><br><span class="line">-g port    设置扫描的源端口。一些天真的防火墙和包过滤器的规则集允许源端口为 DNS(53) 或者 FTP-DATA(20) 的包通过和实现连接。显然，如果攻击者把源端口修改为 20 或者 53，就可以摧毁防火墙的防护。</span><br><span class="line">-oN    把扫描结果重定向到一个可读的文件 logfilename 中。</span><br><span class="line">-oS    扫描结果输出到标准输出。</span><br><span class="line">--host_timeout    设置扫描一台主机的时间，以毫秒为单位。默认的情况下，没有超时限制。</span><br><span class="line">--max_rtt_timeout    设置对每次探测的等待时间，以毫秒为单位。如果超过这个时间限制就重传或者超时。默认值是大约 9000 毫秒。</span><br><span class="line">--min_rtt_timeout    设置 nmap 对每次探测至少等待你指定的时间，以毫秒为单位。</span><br><span class="line">-M count    置进行 TCP connect() 扫描时，最多使用多少个套接字进行并行的扫描。</span><br></pre></td></tr></table></figure><ul><li>获取远程主机系统类型和开放端口</li></ul><p>粗暴点就 <code>nmap -A IP</code>，或者 <code>nmap -sS -P0 -sV -O</code></p><ul><li>探测内网在线主机</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap -sP 192.168.0.0/24</span><br></pre></td></tr></table></figure><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><h4 id="fio"><a href="#fio" class="headerlink" title="fio"></a><a href="https://github.com/axboe/fio" target="_blank" rel="noopener">fio</a></h4><p>用来做磁盘性能测试，十分强大的磁盘性能测试工具，可配置项和参数也很丰富。</p><ul><li>install</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> RHEL/CentOS</span></span><br><span class="line">yum install fio</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Debian/Ubuntu</span></span><br><span class="line">apt install fio</span><br></pre></td></tr></table></figure><ul><li>usage</li></ul><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">filename</span>=/tmp        <span class="comment"># 测试文件名称，通常选择需要测试的盘的 data 目录</span></span><br><span class="line"><span class="attr">direct</span>=<span class="number">1</span>             <span class="comment"># 测试过程绕过机器自带的 buffer。使测试结果更真实</span></span><br><span class="line"><span class="attr">rw</span>=randwrite         <span class="comment"># 测试随机写的 I/O</span></span><br><span class="line"><span class="attr">rw</span>=randrw            <span class="comment"># 测试随机写和读的 I/O</span></span><br><span class="line"><span class="attr">bs</span>=<span class="number">16</span>k               <span class="comment"># 单次 io 的块文件大小为 16k</span></span><br><span class="line"><span class="attr">bsrange</span>=<span class="number">512</span>-<span class="number">2048</span>     <span class="comment"># 同上，提定数据块的大小范围</span></span><br><span class="line"><span class="attr">size</span>=<span class="number">5</span>G              <span class="comment"># 本次的测试文件大小为 5g，以每次 4k 的 io 进行测试</span></span><br><span class="line"><span class="attr">numjobs</span>=<span class="number">30</span>           <span class="comment"># 本次的测试线程为 30 个</span></span><br><span class="line"><span class="attr">runtime</span>=<span class="number">1000</span>         <span class="comment"># 测试时间 1000 秒，如果不写则一直将 5g 文件分 4k 每次写完为止</span></span><br><span class="line"><span class="attr">ioengine</span>=psync       <span class="comment">#io 引擎使用 psync 方式</span></span><br><span class="line"><span class="attr">rwmixwrite</span>=<span class="number">30</span>        <span class="comment"># 在混合读写的模式下，写占 30%</span></span><br><span class="line">group_reporting      # 关于显示结果的，汇总每个进程的信息</span><br><span class="line"></span><br><span class="line"><span class="attr">lockmem</span>=<span class="number">1</span>G           <span class="comment"># 只使用 1g 内存进行测试s</span></span><br><span class="line">zero_buffers         # 用 0 初始化系统 buffer</span><br><span class="line"><span class="attr">nrfiles</span>=<span class="number">8</span>            <span class="comment"># 每个进程生成文件的数量</span></span><br></pre></td></tr></table></figure><p><code>注意：</code> 只要不是测试空盘，<code>filename</code> 参数千万不要使用类似 <code>/dev/sda</code> 这无异于删库跑路😂。所以推荐使用路径而不是设备。</p><ul><li>output example</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">╭─root@nfs ~</span><br><span class="line">╰─# fio -filename=/tmp/test.file -direct=1 -iodepth 1 -thread -rw=randrw -rwmixread=70 -ioengine=psync -bs=16k -size=1G -numjobs=30 -runtime=100 -group_reporting -name=mytest1</span><br><span class="line">mytest1: (g=0): rw=randrw, bs=(R) 16.0KiB-16.0KiB, (W) 16.0KiB-16.0KiB, (T) 16.0KiB-16.0KiB, ioengine=psync, iodepth=1</span><br><span class="line">...</span><br><span class="line">fio-3.7</span><br><span class="line">Starting 30 threads</span><br><span class="line">mytest1: Laying out IO file (1 file / 1024MiB)</span><br><span class="line">Jobs: 30 (f=30): [m(30)][100.0%][r=1265KiB/s,w=560KiB/s][r=79,w=35 IOPS][eta 00m:00s]</span><br><span class="line">mytest1: (groupid=0, jobs=30): err= 0: pid=45930: Mon Apr 27 23:09:21 2020</span><br><span class="line">read: IOPS=71, BW=1149KiB/s (1177kB/s)(113MiB/100321msec)</span><br><span class="line"> clat (usec): min=349, max=999812, avg=292473.60, stdev=188905.70</span><br><span class="line">  lat (usec): min=349, max=999813, avg=292473.83, stdev=188905.69</span><br><span class="line"> clat percentiles (msec):</span><br><span class="line">  |  1.00th=[    5],  5.00th=[    8], 10.00th=[   11], 20.00th=[   24],</span><br><span class="line">  | 30.00th=[  247], 40.00th=[  313], 50.00th=[  342], 60.00th=[  372],</span><br><span class="line">  | 70.00th=[  401], 80.00th=[  430], 90.00th=[  481], 95.00th=[  542],</span><br><span class="line">  | 99.00th=[  751], 99.50th=[  818], 99.90th=[  894], 99.95th=[  936],</span><br><span class="line">  | 99.99th=[ 1003]</span><br><span class="line">bw (  KiB/s): min=   31, max=   96, per=3.53%, avg=40.55, stdev=14.30, samples=5661</span><br><span class="line">iops        : min=    1, max=    6, avg= 2.48, stdev= 0.93, samples=5661</span><br><span class="line">  write: IOPS=30, BW=483KiB/s (494kB/s)(47.3MiB/100321msec)</span><br><span class="line"> clat (msec): min=2, max=937, avg=297.02, stdev=194.75</span><br><span class="line">  lat (msec): min=2, max=937, avg=297.02, stdev=194.75</span><br><span class="line"> clat percentiles (msec):</span><br><span class="line">  |  1.00th=[    5],  5.00th=[    9], 10.00th=[   11], 20.00th=[   16],</span><br><span class="line">  | 30.00th=[  266], 40.00th=[  326], 50.00th=[  355], 60.00th=[  380],</span><br><span class="line">  | 70.00th=[  405], 80.00th=[  435], 90.00th=[  481], 95.00th=[  550],</span><br><span class="line">  | 99.00th=[  760], 99.50th=[  810], 99.90th=[  902], 99.95th=[  927],</span><br><span class="line">  | 99.99th=[  936]</span><br><span class="line">bw (  KiB/s): min=   31, max=  256, per=9.65%, avg=46.52, stdev=25.43, samples=2071</span><br><span class="line">iops        : min=    1, max=   16, avg= 2.85, stdev= 1.61, samples=2071</span><br><span class="line">  lat (usec)   : 500=0.02%, 750=0.02%</span><br><span class="line">  lat (msec)   : 4=0.28%, 10=8.53%, 20=10.86%, 50=6.42%, 100=0.90%</span><br><span class="line">  lat (msec)   : 250=2.90%, 500=62.21%, 750=6.79%, 1000=1.06%</span><br><span class="line">  cpu          : usr=0.00%, sys=0.01%, ctx=19413, majf=0, minf=7</span><br><span class="line">  IO depths    : 1=100.0%, 2=0.0%, 4=0.0%, 8=0.0%, 16=0.0%, 32=0.0%, &gt;=64=0.0%</span><br><span class="line">  submit    : 0=0.0%, 4=100.0%, 8=0.0%, 16=0.0%, 32=0.0%, 64=0.0%, &gt;=64=0.0%</span><br><span class="line">  complete  : 0=0.0%, 4=100.0%, 8=0.0%, 16=0.0%, 32=0.0%, 64=0.0%, &gt;=64=0.0%</span><br><span class="line">  issued rwts: total=7204,3026,0,0 short=0,0,0,0 dropped=0,0,0,0</span><br><span class="line">  latency   : target=0, window=0, percentile=100.00%, depth=1</span><br><span class="line"></span><br><span class="line">Run status group 0 (all jobs):</span><br><span class="line">READ: bw=1149KiB/s (1177kB/s), 1149KiB/s-1149KiB/s (1177kB/s-1177kB/s), io=113MiB (118MB), run=100321-100321msec</span><br><span class="line">  WRITE: bw=483KiB/s (494kB/s), 483KiB/s-483KiB/s (494kB/s-494kB/s), io=47.3MiB (49.6MB), run=100321-100321msec</span><br><span class="line"></span><br><span class="line">Disk stats (read/write):</span><br><span class="line"> dm-0: ios=7750/3320, merge=0/0, ticks=200950/123253, in_queue=324237, util=99.83%, aggrios=7765/3135, aggrmerge=0/192, aggrticks=201237/111717, aggrin_queue=312951, aggrutil=99.81%</span><br><span class="line">  sda: ios=7765/3135, merge=0/192, ticks=201237/111717, in_queue=312951, util=99.81%</span><br></pre></td></tr></table></figure><h4 id="qperf"><a href="#qperf" class="headerlink" title="qperf"></a>qperf</h4><ul><li>install</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum install qperf</span><br><span class="line">apt install qperf</span><br></pre></td></tr></table></figure><ul><li>usage</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">╭─root@debian /opt/trojan</span><br><span class="line">╰─# qperf --help examples</span><br><span class="line">In these examples, we first run qperf on a node called myserver in server</span><br><span class="line">mode by invoking it with no arguments.  In all the subsequent examples, we</span><br><span class="line">run qperf on another node and connect to the server which we assume has a</span><br><span class="line">hostname of myserver.</span><br><span class="line"> * To run a TCP bandwidth and latency test:</span><br><span class="line">  qperf myserver tcp_bw tcp_lat</span><br><span class="line"> * To run a SDP bandwidth test for 10 seconds:</span><br><span class="line">  qperf myserver -t 10 sdp_bw</span><br><span class="line"> * To run a UDP latency test and then cause the server to terminate:</span><br><span class="line">  qperf myserver udp_lat quit</span><br><span class="line"> * To measure the RDMA UD latency and bandwidth:</span><br><span class="line">  qperf myserver ud_lat ud_bw</span><br><span class="line"> * To measure RDMA UC bi-directional bandwidth:</span><br><span class="line">  qperf myserver rc_bi_bw</span><br><span class="line"> * To get a range of TCP latencies with a message size from 1 to 64K</span><br><span class="line">  qperf myserver -oo msg_size:1:64K:*2 -vu tcp_lat</span><br></pre></td></tr></table></figure><ul><li>output example</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">root@debian-node-02-656868cc46-72lc9:/# qperf  -t 30 100.107.127.100 -v tcp_bw udp_bw tcp_lat udp_lat conf</span><br><span class="line">tcp_bw:</span><br><span class="line"> bw              =  3.24 GB/sec</span><br><span class="line"> msg_rate        =  49.4 K/sec</span><br><span class="line"> time            =    30 sec</span><br><span class="line"> send_cost       =   542 ms/GB</span><br><span class="line"> recv_cost       =   542 ms/GB</span><br><span class="line"> send_cpus_used  =   176 % cpus</span><br><span class="line"> recv_cpus_used  =   176 % cpus</span><br><span class="line">udp_bw:</span><br><span class="line"> send_bw         =  2.62 GB/sec</span><br><span class="line"> recv_bw         =  2.37 GB/sec</span><br><span class="line"> msg_rate        =  72.3 K/sec</span><br><span class="line"> time            =    30 sec</span><br><span class="line"> send_cost       =   542 ms/GB</span><br><span class="line"> recv_cost       =   598 ms/GB</span><br><span class="line"> send_cpus_used  =   142 % cpus</span><br><span class="line"> recv_cpus_used  =   142 % cpus</span><br><span class="line">tcp_lat:</span><br><span class="line"> latency        =  17.3 us</span><br><span class="line"> msg_rate       =  57.7 K/sec</span><br><span class="line"> time           =    30 sec</span><br><span class="line"> loc_cpus_used  =   110 % cpus</span><br><span class="line"> rem_cpus_used  =   110 % cpus</span><br><span class="line">udp_lat:</span><br><span class="line"> latency        =  15.4 us</span><br><span class="line"> msg_rate       =  64.8 K/sec</span><br><span class="line"> time           =    30 sec</span><br><span class="line"> loc_cpus_used  =   111 % cpus</span><br><span class="line"> rem_cpus_used  =   111 % cpus</span><br><span class="line">conf:</span><br><span class="line"> loc_node   =  debian-node-02-656868cc46-72lc9</span><br><span class="line"> loc_cpu    =  8 Cores: Intel Xeon E3-1271 v3 @ 3.60GHz</span><br><span class="line"> loc_os     =  Linux 3.10.0-862.el7.x86_64</span><br><span class="line"> loc_qperf  =  0.4.11</span><br><span class="line"> rem_node   =  debian-node-02-656868cc46-xftvq</span><br><span class="line"> rem_cpu    =  8 Cores: Intel Xeon E3-1271 v3 @ 3.60GHz</span><br><span class="line"> rem_os     =  Linux 3.10.0-862.el7.x86_64</span><br><span class="line"> rem_qperf  =  0.4.11</span><br></pre></td></tr></table></figure><h4 id="iperf"><a href="#iperf" class="headerlink" title="iperf"></a>iperf</h4><ul><li><p>install</p></li><li><p>usage</p></li><li><p>output example</p></li></ul><h4 id="wrk"><a href="#wrk" class="headerlink" title="wrk"></a><a href="https://github.com/wg/wrk/" target="_blank" rel="noopener">wrk</a></h4><ul><li>install</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/wg/wrk.git --depth=1</span><br><span class="line">cd wrk</span><br><span class="line">make</span><br></pre></td></tr></table></figure><ul><li>usage</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">./wrk</span><br><span class="line">Usage: wrk &lt;options&gt; &lt;url&gt;</span><br><span class="line">  Options:</span><br><span class="line"> -c, --connections &lt;N&gt;  Connections to keep open 需要模拟的个并发请求连接数量</span><br><span class="line"> -d, --duration    &lt;T&gt;  Duration of test 测试的测试时长</span><br><span class="line"> -t, --threads     &lt;N&gt;  Number of threads to use 并发线程数量</span><br><span class="line"> -s, --script      &lt;S&gt;  Load Lua script file  指定 Lua 脚本的路径</span><br><span class="line"> -H, --header      &lt;H&gt;  Add header to request 指定请求带的 Header 参数</span><br><span class="line">  --latency          Print latency statistics 是否打印请求延迟统计</span><br><span class="line">  --timeout     &lt;T&gt;  Socket/request timeout 设置请求超时时间</span><br></pre></td></tr></table></figure><ul><li>output example</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 对 10.20.172.196 nginx 服务器进行测试</span></span><br><span class="line">╭─root@test ~/wrk ‹master›</span><br><span class="line">╰─# ./wrk -t100 -c512 -d30s http://10.20.172.196</span><br><span class="line">Running 30s test @ http://10.20.172.196</span><br><span class="line">  100 threads and 512 connections</span><br><span class="line">  Thread Stats   Avg      Stdev     Max   +/- Stdev</span><br><span class="line"> Latency    44.71ms  108.75ms   1.99s    89.05%</span><br><span class="line"> Req/Sec   369.78    207.57     1.68k    71.50%</span><br><span class="line">  987158 requests in 30.10s, 840.66MB read</span><br><span class="line">  Socket errors: connect 0, read 0, write 0, timeout 22</span><br><span class="line">Requests/sec:  32797.65</span><br><span class="line">Transfer/sec:     27.93MB</span><br><span class="line"><span class="meta">#</span><span class="bash"> 测试结果，基本能达到 3W+ 的 QPS 的性能</span></span><br></pre></td></tr></table></figure><h4 id="httperf"><a href="#httperf" class="headerlink" title="httperf"></a>httperf</h4><ul><li><p>install</p></li><li><p>usage</p></li><li><p>output example</p></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">╭─root@ubuntu-238 ~</span><br><span class="line">╰─# httperf --server 10.20.172.196 --port 80 --num-conns 100 --rate 10 --timeout 1</span><br><span class="line">httperf --timeout=1 --client=0/1 --server=10.20.172.196 --port=80 --uri=/ --rate=10 --send-buffer=4096 --recv-buffer=16384 --num-conns=100 --num-calls=1</span><br><span class="line">httperf: warning: open file limit &gt; FD_SETSIZE; limiting max. # of open files to FD_SETSIZE</span><br><span class="line">Maximum connect burst length: 1</span><br><span class="line"><span class="meta">#</span><span class="bash"> 响应速率</span></span><br><span class="line">Total: connections 100 requests 100 replies 100 test-duration 9.900 s</span><br><span class="line">Connection rate: 10.1 conn/s (99.0 ms/conn, &lt;=1 concurrent connections)</span><br><span class="line">Connection time [ms]: min 0.1 avg 0.1 max 0.2 median 0.5 stddev 0.0</span><br><span class="line">Connection time [ms]: connect 0.0</span><br><span class="line">Connection length [replies/conn]: 1.000</span><br><span class="line">Request rate: 10.1 req/s (99.0 ms/req)</span><br><span class="line">Request size [B]: 66.0</span><br><span class="line"><span class="meta">#</span><span class="bash"> 服务器从请求中接收到第一个字节开始，到连接收到第一个字节所消耗的时间</span></span><br><span class="line">Reply rate [replies/s]: min 10.0 avg 10.0 max 10.0 stddev 0.0 (1 samples)</span><br><span class="line">Reply time [ms]: response 0.1 transfer 0.0</span><br><span class="line"><span class="meta">#</span><span class="bash"> 统计每个回复的大小，每个维度的单位都是字节(bytes),且都是平均数</span></span><br><span class="line">Reply size [B]: header 244.0 content 649.0 footer 0.0 (total 893.0)</span><br><span class="line">Reply status: 1xx=0 2xx=100 3xx=0 4xx=0 5xx=0</span><br><span class="line"><span class="meta">#</span><span class="bash"> 客户端CPU使用率的统计，User用户模式，System模式</span></span><br><span class="line">CPU time [s]: user 3.85 system 6.05 (user 38.9% system 61.1% total 100.0%)</span><br><span class="line"><span class="meta">#</span><span class="bash"> 网络的吞吐量</span></span><br><span class="line">Net I/O: 9.5 KB/s (0.1*10^6 bps)</span><br><span class="line"><span class="meta">#</span><span class="bash"> 发生错误的总数,客户端超时计数，每次从生成请求开始，如果没有响应即超时,</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> TCP连接失败</span></span><br><span class="line">Errors: total 0 client-timo 0 socket-timo 0 connrefused 0 connreset 0</span><br><span class="line">Errors: fd-unavail 0 addrunavail 0 ftab-full 0 other 0</span><br></pre></td></tr></table></figure><h4 id="ab"><a href="#ab" class="headerlink" title="ab"></a><a href="">ab</a></h4><ul><li><p>install</p></li><li><p>usage</p></li><li><p>output example</p></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line">╭─root@test ~</span><br><span class="line">╰─# ab -n 1000 -c 1000 http://10.20.172.196/</span><br><span class="line">This is ApacheBench, Version 2.3 &lt;$Revision: 1430300 $&gt;</span><br><span class="line">Copyright 1996 Adam Twiss, Zeus Technology Ltd, http://www.zeustech.net/</span><br><span class="line">Licensed to The Apache Software Foundation, http://www.apache.org/</span><br><span class="line">Benchmarking 10.20.172.196 (be patient)</span><br><span class="line">Completed 100 requests</span><br><span class="line">Completed 200 requests</span><br><span class="line">Completed 300 requests</span><br><span class="line">Completed 400 requests</span><br><span class="line">Completed 500 requests</span><br><span class="line">Completed 600 requests</span><br><span class="line">Completed 700 requests</span><br><span class="line">Completed 800 requests</span><br><span class="line">Completed 900 requests</span><br><span class="line">Completed 1000 requests</span><br><span class="line">Finished 1000 requests</span><br><span class="line">Server Software:        nginx/1.15.8.1</span><br><span class="line">Server Hostname:        10.20.172.196</span><br><span class="line">Server Port:            80</span><br><span class="line">Document Path:          /</span><br><span class="line">Document Length:        649 bytes</span><br><span class="line">Concurrency Level:      1000</span><br><span class="line">Time taken for tests:   0.107 seconds</span><br><span class="line">Complete requests:      1000</span><br><span class="line">Failed requests:        0</span><br><span class="line">Write errors:           0</span><br><span class="line">Total transferred:      888000 bytes</span><br><span class="line">HTML transferred:       649000 bytes</span><br><span class="line">Requests per second:    9313.50 [#/sec] (mean)</span><br><span class="line">Time per request:       107.371 [ms] (mean)</span><br><span class="line">Time per request:       0.107 [ms] (mean, across all concurrent requests)</span><br><span class="line">Transfer rate:          8076.55 [Kbytes/sec] received</span><br><span class="line"></span><br><span class="line">Connection Times (ms)</span><br><span class="line">  min  mean[+/-sd] median   max</span><br><span class="line">Connect:        0   29   8.1     29      42</span><br><span class="line">Processing:    17   36  14.3     45      51</span><br><span class="line">Waiting:        0   35  14.3     44      50</span><br><span class="line">Total:         42   65   9.0     64      87</span><br><span class="line"></span><br><span class="line">Percentage of the requests served within a certain time (ms)</span><br><span class="line"><span class="meta">  50%</span><span class="bash">     64</span></span><br><span class="line"><span class="meta">  66%</span><span class="bash">     69</span></span><br><span class="line"><span class="meta">  75%</span><span class="bash">     71</span></span><br><span class="line"><span class="meta">  80%</span><span class="bash">     73</span></span><br><span class="line"><span class="meta">  90%</span><span class="bash">     78</span></span><br><span class="line"><span class="meta">  95%</span><span class="bash">     81</span></span><br><span class="line"><span class="meta">  98%</span><span class="bash">     84</span></span><br><span class="line"><span class="meta">  99%</span><span class="bash">     86</span></span><br><span class="line"><span class="meta"> 100%</span><span class="bash">     87 (longest request)</span></span><br></pre></td></tr></table></figure><h4 id="stress"><a href="#stress" class="headerlink" title="stress"></a>stress</h4><blockquote><p><a href="https://www.tecmint.com/linux-cpu-load-stress-test-with-stress-ng-tool/" target="_blank" rel="noopener">Stress/Stress-NG</a>是Linux下两个常用的系统级压力测试工具，<strong>stress</strong>命令简单易用，<strong>stress-ng</strong>是stress的升级版，支持<strong>数百个参数定制各种压CPU、内存、IO、网络</strong>的姿势。在系统过载的场景下，应用服务可能会出现意想不到的错误或异常，在测试<strong>负载均衡和熔断降级</strong>时非常有用。这里只列举了几个常用的命令，详细使用参考”stress-ng –help”或”man stress-ng”。另外，这些“烤机”命令来测试服务器性能也是不错的。</p></blockquote><ul><li>install</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> RHRL/CentOS</span></span><br><span class="line">yum install epel-release</span><br><span class="line">yum install stress stress-ng</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> Debian/Ubuntu</span></span><br><span class="line">apt install stress stress-ng</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> stress-ng 基本用法与stress完全兼容，但有更多的参数可选，并且可以查看统计信息</span></span><br></pre></td></tr></table></figure><ul><li>usage</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 在两个CPU核心上跑开方运算，并且启动一个不断分配释放1G内存的线程，运行10秒后停止</span></span><br><span class="line">stress --cpu 2 --vm 1 --vm-bytes 1G  -v --timeout 10</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 启动一个线程不断执行sync系统调用回写磁盘缓存，并且启动一个线程不停地写入删除512MB数据，运行10秒停止</span></span><br><span class="line">stress --io 1 --hdd 1 --hdd-bytes 512M -v --timeout 10</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> --sock 可以模拟大量的socket连接断开以及数据的发送接收等等</span></span><br><span class="line">stress-ng --sock 2 -v --timeout 10 --metrics-brief</span><br></pre></td></tr></table></figure><ul><li>output example</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">╭─root@debian /bashtop  ‹master›</span><br><span class="line">╰─# stress --cpu 4 --vm 1 --vm-bytes 1G  -v --timeout 3</span><br><span class="line">stress: info: [18174] dispatching hogs: 4 cpu, 0 io, 1 vm, 0 hdd</span><br><span class="line">stress: dbug: [18174] using backoff sleep of 3000us</span><br><span class="line">stress: dbug: [18174] setting timeout to 3s</span><br><span class="line">stress: dbug: [18174] --&gt; hogcpu worker 1 [18179] forked</span><br><span class="line">stress: dbug: [18176] allocating 1073741824 bytes ...</span><br><span class="line">stress: dbug: [18176] allocating 1073741824 bytes ...</span><br><span class="line">stress: dbug: [18176] touching bytes in strides of 4096 bytes ...</span><br><span class="line">stress: dbug: [18174] &lt;-- worker 18175 signalled normally</span><br><span class="line">stress: dbug: [18174] &lt;-- worker 18177 signalled normally</span><br><span class="line">stress: dbug: [18174] &lt;-- worker 18178 signalled normally</span><br><span class="line">stress: dbug: [18174] &lt;-- worker 18179 signalled normally</span><br><span class="line">stress: dbug: [18174] &lt;-- worker 18176 signalled normally</span><br><span class="line">stress: info: [18174] successful run completed in 3s</span><br></pre></td></tr></table></figure><p><img src="img/20200506154459952.png" alt="image-20200506154459952"></p><h3 id="小工具"><a href="#小工具" class="headerlink" title="小工具"></a>小工具</h3><h3 id="镜像源"><a href="#镜像源" class="headerlink" title="镜像源"></a>镜像源</h3><h2 id="发行版-1"><a href="#发行版-1" class="headerlink" title="发行版"></a>发行版</h2><h3 id="pxder"><a href="#pxder" class="headerlink" title="pxder"></a>pxder</h3><p>下班之后回到小窝之后就开始一天中最最愉悦的时刻，在 pixiv.net 上刷图。收藏喜欢的<del>老婆</del>插画。为了管理和下载自己收藏的插画作品，当然还是选择食用工具来下载啦😂。</p><p>在二月份的时候帮小土豆和 nova 同学测试 webp server go 的 benchmark ，这个 pxder 帮了咱很大的忙，下载了 3W 多张图片做测试样本，最终使用脚本筛选出合适的文件大小来进行 prefetc 测试。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">╭─debian@debian /mnt/f/illustrations</span><br><span class="line">╰─$ du -sh</span><br><span class="line">50G     .</span><br><span class="line">╭─debian@debian /mnt/f/illustrations</span><br><span class="line">╰─$ tree</span><br><span class="line">203 directories, 31831 files</span><br></pre></td></tr></table></figure><h3 id="杂七杂八的"><a href="#杂七杂八的" class="headerlink" title="杂七杂八的"></a>杂七杂八的</h3><h4 id="nginx"><a href="#nginx" class="headerlink" title="nginx"></a>nginx</h4><p>nginx，除了建站當 Web 服務器，是咱在 openwrt 上裝的，目的是為了擺脫 ip 的辦定限制。因為有些設備通過域名來訪問，更換網絡環境，比如搬家之後只需要維修改一下域名解析即可。比如咱使用 X.lo.502.li 作為三級子域名分配給本地內網機器用。</p><h4 id="ffmpeg"><a href="#ffmpeg" class="headerlink" title="ffmpeg"></a>ffmpeg</h4><p>ffmpeg 能干的事情太多了，咱使用最多的还是合并视频转码视频，比如咱的 <a href="">mbcf</a> ，全称 Merge bilibili cilent file</p><h4 id="pandoc"><a href="#pandoc" class="headerlink" title="pandoc"></a><a href="https://github.com/jgm/pandoc" target="_blank" rel="noopener">pandoc</a></h4><h4 id="rsync"><a href="#rsync" class="headerlink" title="rsync"></a>rsync</h4><h4 id="resilio-sync"><a href="#resilio-sync" class="headerlink" title="resilio sync"></a>resilio sync</h4><p>resilio sync ，是咱最重要的數據備份工具，比如咱使用 pxder 下載好收藏的老婆們，為了在手機上仔細欣賞老婆們，咱就用。resilio sync 將目錄同步到手機上，並且使用它來與 PC，iPhone ，Android ，Linux 三者無縫同步。簡直好用極了。</p><p>需要注意的是，如果跨公網同步，在一些網絡環境下因為 GFW 的緣故，無法建立起鏈接，這時候需要使用到預定義主機。其中有兩種比較好的方案，一是在公網 VPS 機器上安裝 resilio sync 並且加入到同步主機當中。這點缺點也明顯，需要佔用磁盤空間，如果同步大量文件以及幾十幾百GB級別的話，小盤機是扛不住的，需要另外添加磁盤。方法二是咱想到的，屢試不爽，就是將本機的 resilio sync 監聽端口 11354 使用 frp 內網穿透到公網服務器，然後在另一台機器上添加上預定義主機，IP 就是 frp 服務器的 IP，端口就是 frp 內網穿透的 remote port。這樣添加好預訂與主機之後，不到一分鐘就能發現主機並建立起連接。</p><h4 id="curl"><a href="#curl" class="headerlink" title="curl"></a>curl</h4><h4 id="wget"><a href="#wget" class="headerlink" title="wget"></a>wget</h4><h4 id="oh-my-zsh"><a href="#oh-my-zsh" class="headerlink" title="oh-my-zsh"></a>oh-my-zsh</h4><h4 id="zsh"><a href="#zsh" class="headerlink" title="zsh"></a>zsh</h4><h4 id="frp"><a href="#frp" class="headerlink" title="frp"></a>frp</h4><h4 id="openwrt"><a href="#openwrt" class="headerlink" title="openwrt"></a>openwrt</h4><h4 id="Trojan"><a href="#Trojan" class="headerlink" title="Trojan"></a>Trojan</h4><h3 id="shell-常用脚本"><a href="#shell-常用脚本" class="headerlink" title="shell 常用脚本"></a>shell 常用脚本</h3><h4 id="VPS-init"><a href="#VPS-init" class="headerlink" title="VPS init"></a>VPS init</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">apt update</span><br><span class="line">apt install nload ncdu zsh git wget curl htop sysstat psmisc nginx-full fail2ban</span><br><span class="line">curl  https://get.acme.sh | sh</span><br><span class="line">sh -c "$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)"</span><br><span class="line">sed -i 's/ZSH_THEME="robbyrussell"/ZSH_THEME="bira"/g' ~/.zshrc</span><br></pre></td></tr></table></figure><h4 id="rawg"><a href="#rawg" class="headerlink" title="rawg"></a>rawg</h4><p>raw wget 的缩写</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> data: 2020-03-31</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> author: muzi502</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="keyword">for</span>: Fuck GFW and download some raw file form github without proxy using jsDelivr CDN</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> usage: save the .she to your <span class="built_in">local</span> such as /usr/bin/rawg, and chmod +x /usr/bin/rawg</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> use rawg https://github.com/ohmyzsh/ohmyzsh/blob/master/tools/install.sh to download</span></span><br><span class="line"></span><br><span class="line">set -xue</span><br><span class="line"><span class="meta">#</span><span class="bash"> GitHub rul: https://github.com/ohmyzsh/ohmyzsh/blob/master/tools/install.sh</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> jsDelivr url: https://cdn.jsdelivr.net/gh/ohmyzsh/ohmyzsh/tools/install.sh</span></span><br><span class="line"></span><br><span class="line">wget $(echo $1 | sed 's/raw.githubusercontent.com/cdn.jsdelivr.net\/gh/' \</span><br><span class="line">                | sed 's/github.com/cdn.jsdelivr.net\/gh/' \</span><br><span class="line">                | sed 's/\/master//' | sed 's/\/blob//' )</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> curl $(<span class="built_in">echo</span> <span class="variable">$1</span> | sed <span class="string">'s/raw.githubusercontent.com/cdn.jsdelivr.net\/gh/'</span> \</span></span><br><span class="line"><span class="meta">#</span><span class="bash">                | sed <span class="string">'s/github.com/cdn.jsdelivr.net\/gh/'</span> \</span></span><br><span class="line"><span class="meta">#</span><span class="bash">                | sed <span class="string">'s/\/master//'</span> | sed <span class="string">'s/\/blob//'</span> )</span></span><br></pre></td></tr></table></figure><h4 id="kubeadm-pull-images"><a href="#kubeadm-pull-images" class="headerlink" title="kubeadm pull images"></a>kubeadm pull images</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="keyword">for</span>: pull kubeamd images and get kubeadm kubectl kubelet binary</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> date: 2020-04-29</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> author: muzi502</span></span><br><span class="line"></span><br><span class="line">set -xue</span><br><span class="line">apt-get update &amp;&amp; apt-get install -y apt-transport-https curl</span><br><span class="line">curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key add -</span><br><span class="line">cat &lt;&lt;EOF &gt;/etc/apt/sources.list.d/kubernetes.list</span><br><span class="line">deb https://apt.kubernetes.io/ kubernetes-xenial main</span><br><span class="line">EOF</span><br><span class="line">apt-get update</span><br><span class="line"></span><br><span class="line">for version in 1.17.5</span><br><span class="line">do</span><br><span class="line">    apt purge -y kubeadm kubelet kubectl</span><br><span class="line">    apt install -y kubeadm=$&#123;version&#125;-00 kubelet=$&#123;version&#125;-00 kubectl=$&#123;version&#125;-00</span><br><span class="line">    mkdir -p $&#123;version&#125;/bin</span><br><span class="line">    rm -rf $&#123;version&#125;/bin/*</span><br><span class="line">    cp -a $(whereis kubelet | awk -F ":" '&#123;print $2&#125;') $&#123;version&#125;/bin/</span><br><span class="line">    cp -a $(whereis kubeadm | awk -F ":" '&#123;print $2&#125;') $&#123;version&#125;/bin/</span><br><span class="line">    cp -a $(whereis kubectl | awk -F ":" '&#123;print $2&#125;') $&#123;version&#125;/bin/</span><br><span class="line">    kubeadm config images pull --kubernetes-version=$&#123;version&#125;</span><br><span class="line">    docker save -o kubeadm_v$&#123;version&#125;.tar `kubeadm config images list --kubernetes-version=$&#123;version&#125;`</span><br><span class="line">    mv kubeadm_v$&#123;version&#125;.tar $&#123;version&#125;</span><br><span class="line">    tar -czvf $&#123;version&#125;&#123;.tar.gz,&#125;</span><br><span class="line">done</span><br></pre></td></tr></table></figure><h4 id="ss-obfs"><a href="#ss-obfs" class="headerlink" title="ss-obfs"></a>ss-obfs</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">/bin/bash</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="keyword">for</span>: install shadowsocks-libev and obfs</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> date: 2019-03-11</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> by: muzi502</span></span><br><span class="line">apt-get update</span><br><span class="line">apt-get -y  install shadowsocks-libev simple-obfs rng-tools</span><br><span class="line">rngd -r /dev/urandom</span><br><span class="line">mkdir -p /etc/shadowsocks-libev/</span><br><span class="line"></span><br><span class="line">cat &gt; /etc/shadowsocks-libev/config.json &lt;&lt;EOF</span><br><span class="line">&#123;</span><br><span class="line">    "server":"0.0.0.0",</span><br><span class="line">    "server_port":8964,</span><br><span class="line">    "local_port":1080,</span><br><span class="line">    "password":"1984fuckGFW",</span><br><span class="line">    "timeout":60,</span><br><span class="line">    "method":"chacha20",</span><br><span class="line">    "plugin":"obfs-server",</span><br><span class="line">    "plugin_opts":"obfs=http"</span><br><span class="line">&#125;</span><br><span class="line">EOF</span><br><span class="line">systemctl restart shadowsocks-libev.service</span><br><span class="line">modprobe tcp_bbr</span><br><span class="line">echo "tcp_bbr" &gt;&gt; /etc/modules-load.d/modules.conf</span><br><span class="line">echo "net.core.default_qdisc=fq" &gt;&gt; /etc/sysctl.conf</span><br><span class="line">echo "net.ipv4.tcp_congestion_control=bbr" &gt;&gt; /etc/sysctl.conf</span><br><span class="line">sysctl -p</span><br><span class="line">sysctl net.ipv4.tcp_available_congestion_control</span><br><span class="line">sysctl net.ipv4.tcp_congestion_control</span><br><span class="line">touch /etc/sysctl.d/local.conf</span><br><span class="line">echo "net.core.wmem_max = 67108864" &gt;&gt;/etc/sysctl.d/local.conf</span><br><span class="line">echo "net.core.rmem_default = 65536" &gt;&gt;/etc/sysctl.d/local.conf</span><br><span class="line">echo "net.core.wmem_default = 65536" &gt;&gt;/etc/sysctl.d/local.conf</span><br><span class="line">echo "net.core.netdev_max_backlog = 4096" &gt;&gt;/etc/sysctl.d/local.conf</span><br><span class="line">echo "net.core.somaxconn = 4096" &gt;&gt;/etc/sysctl.d/local.conf</span><br><span class="line">echo "net.ipv4.tcp_syncookies = 1" &gt;&gt;/etc/sysctl.d/local.conf</span><br><span class="line">echo "net.ipv4.tcp_tw_reuse = 1" &gt;&gt;/etc/sysctl.d/local.conf</span><br><span class="line">echo "net.ipv4.tcp_tw_recycle = 0" &gt;&gt;/etc/sysctl.d/local.conf</span><br><span class="line">echo "net.ipv4.tcp_fin_timeout = 30" &gt;&gt;/etc/sysctl.d/local.conf</span><br><span class="line">echo "net.ipv4.tcp_keepalive_time = 1200" &gt;&gt;/etc/sysctl.d/local.conf</span><br><span class="line">echo "net.ipv4.ip_local_port_range = 10000 65000" &gt;&gt;/etc/sysctl.d/local.conf</span><br><span class="line">echo "net.ipv4.tcp_max_syn_backlog = 4096" &gt;&gt;/etc/sysctl.d/local.conf</span><br><span class="line">echo "net.ipv4.tcp_max_tw_buckets = 5000" &gt;&gt;/etc/sysctl.d/local.conf</span><br><span class="line">echo "net.ipv4.tcp_fastopen = 3" &gt;&gt;/etc/sysctl.d/local.conf</span><br><span class="line">echo "net.ipv4.tcp_rmem = 4096 87380 67108864" &gt;&gt;/etc/sysctl.d/local.conf</span><br><span class="line">echo "net.ipv4.tcp_wmem = 4096 65536 67108864" &gt;&gt;/etc/sysctl.d/local.conf</span><br><span class="line">echo "net.ipv4.tcp_mtu_probing = 1" &gt;&gt;/etc/sysctl.d/local.conf</span><br><span class="line">sysctl --system</span><br><span class="line">lsmod | grep bbr</span><br></pre></td></tr></table></figure><h4 id="mcbf"><a href="#mcbf" class="headerlink" title="mcbf"></a>mcbf</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="keyword">for</span>: bulk merge bilibili UWP download file *.flv</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> by: blog.502.li</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> date: 2019-01-12</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 将该脚放到 UWP 客户端下载缓存主目录下执行，安装 ffmpeg、jq</span></span><br><span class="line"></span><br><span class="line">set -xu</span><br><span class="line">download_dir=$(pwd)</span><br><span class="line">mp4_dir=$&#123;download_dir&#125;/mp4</span><br><span class="line">mkdir -p $&#123;mp4_dir&#125;</span><br><span class="line"></span><br><span class="line">for video_dir in $(ls | sort -n | grep -E -v "\.|mp4")</span><br><span class="line">do</span><br><span class="line">  cd $&#123;download_dir&#125;/$&#123;video_dir&#125;</span><br><span class="line">  up_name=$(jq ".Uploader" *.dvi | tr -d "[:punct:]\040\011\012\015")</span><br><span class="line">  mkdir -p $&#123;mp4_dir&#125;/$&#123;up_name&#125;</span><br><span class="line">  for p_dir in $(ls | sort -n | grep -v "\.")</span><br><span class="line">  do</span><br><span class="line">    cd $&#123;download_dir&#125;/$&#123;video_dir&#125;/$&#123;p_dir&#125;</span><br><span class="line">    video_name=$(jq ".Title" *.info | tr -d "[:punct:]\040\011\012\015")</span><br><span class="line">    part_name=$(jq ".PartName" *.info | tr -d "[:punct:]\040\011\012\015")</span><br><span class="line">    upload_time=$(grep -Eo "20[0-9][0-9]-[0-9][0-9]-[0-9][0-9]" *.info)</span><br><span class="line">    Uploader=$(jq ".Uploader" *.info | tr -d "[:punct:]\040\011\012\015")</span><br><span class="line">    mp4_audio=$(jq ".VideoDashInfo" *.info | tr -d "[:punct:]\040\011\012\015")</span><br><span class="line"></span><br><span class="line">    if [ "null" = "$&#123;part_name&#125;" ];then</span><br><span class="line">    mp4_file_name=$&#123;video_name&#125;.mp4</span><br><span class="line">    else</span><br><span class="line">    mp4_file_name=$&#123;video_name&#125;_$&#123;p_dir&#125;_$&#123;part_name&#125;.mp4</span><br><span class="line">    fi</span><br><span class="line"></span><br><span class="line">    if [ "null" = "$&#123;mp4_audio&#125;" ];then</span><br><span class="line">    ls *.flv | sort -n &gt; ff.txt</span><br><span class="line">    sed -i 's/^/file /g' ff.txt</span><br><span class="line">    ffmpeg -f concat -i ff.txt -c copy $&#123;mp4_dir&#125;/$&#123;up_name&#125;/"$&#123;mp4_file_name&#125;";rm -rf ff.txt</span><br><span class="line">    else</span><br><span class="line">    ffmpeg  -i video.mp4 -i audio1.mp4 -c:v copy -c:a copy $&#123;mp4_dir&#125;/$&#123;up_name&#125;/"$&#123;mp4_file_name&#125;"</span><br><span class="line">    fi</span><br><span class="line">    cd $&#123;download_dir&#125;/$&#123;video_dir&#125;</span><br><span class="line">  cd $&#123;download_dir&#125;</span><br><span class="line">  done</span><br><span class="line"><span class="meta">#</span><span class="bash"> 如果需要保留原视频请注释掉下面这一行</span></span><br><span class="line"><span class="meta">#</span><span class="bash">rm -rf <span class="variable">$&#123;download_dir&#125;</span>/<span class="variable">$&#123;video_dir&#125;</span></span></span><br><span class="line">done</span><br></pre></td></tr></table></figure><h4 id="conoha-wallpaper-download"><a href="#conoha-wallpaper-download" class="headerlink" title="conoha wallpaper download"></a>conoha wallpaper download</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">!/bin/bash</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> <span class="keyword">for</span>: download conoha wallpaper</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> by: muzi502</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> date: 2020-02-11</span></span><br><span class="line">set -xue</span><br><span class="line"></span><br><span class="line">p=$(curl https://conoha.mikumo.com/wallpaper/ \</span><br><span class="line">| grep li | grep data-wallpaper-design= \</span><br><span class="line">| sed -e 's/&lt;li//g' | sed -e 's/"&gt;//g' | sed -e 's/^[ \t]*//g' \</span><br><span class="line">| sed -e 's/data-wallpaper-design="//g' \</span><br><span class="line">| sed 's/^/https:\/\/conoha.mikumo.com\/wp-content\/themes\/conohamikumo\/images\/wallpaper\//')</span><br><span class="line"></span><br><span class="line">for pic in $&#123;p&#125;</span><br><span class="line">do</span><br><span class="line">    file_name=$(echo $&#123;pic&#125; | awk -F "/" '&#123;print $9&#125;')</span><br><span class="line">    wget $&#123;pic&#125;/1080_1920.jpg -O $&#123;file_name&#125;_1080.jpg</span><br><span class="line">    wget $&#123;pic&#125;/2560_1440.jpg -O $&#123;file_name&#125;_1440.jpg</span><br><span class="line">done</span><br></pre></td></tr></table></figure><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><ul><li><a href="http://code2life.top/2019/05/02/0035-fault-injection/" target="_blank" rel="noopener">[DevOps] Linux操作系统层的故障注入</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;h2 id=&quot;咕咕咕&quot;&gt;&lt;a href=&quot;#咕咕咕&quot;
        
      
    
    </summary>
    
    
      <category term="技术" scheme="https://blog.k8s.li/categories/%E6%8A%80%E6%9C%AF/"/>
    
    
      <category term="Linux" scheme="https://blog.k8s.li/tags/Linux/"/>
    
      <category term="搬砖" scheme="https://blog.k8s.li/tags/%E6%90%AC%E7%A0%96/"/>
    
      <category term="工具" scheme="https://blog.k8s.li/tags/%E5%B7%A5%E5%85%B7/"/>
    
      <category term="命令行" scheme="https://blog.k8s.li/tags/%E5%91%BD%E4%BB%A4%E8%A1%8C/"/>
    
  </entry>
  
  <entry>
    <title>无砖可搬的日子|换厂记</title>
    <link href="https://blog.k8s.li/Brick-removal-note.html"/>
    <id>https://blog.k8s.li/Brick-removal-note.html</id>
    <published>2020-05-16T16:00:00.000Z</published>
    <updated>2020-09-15T00:28:09.944Z</updated>
    
    <content type="html"><![CDATA[<h2 id="咕咕咕"><a href="#咕咕咕" class="headerlink" title="咕咕咕"></a>咕咕咕</h2><p>本来打算写一篇《搬砖日记与思考》的，而且想写的内容都已经保存在了我的 telegram 里，但是后来考虑到我的博客将会公布给同事们，为了不必要的影响还是将一些冲塔的内容保存在自己的日记里，等以后再公布吧，或许是十年二十年之后吧。下面的内容就是我从前公司离职后这段时间的一些经历吧(●ˇ∀ˇ●)，因为是离职了，这段时间暂时性地成为了无业游民，也就无砖可搬了😂，所以题名就叫《无砖可搬的日子|换厂记》吧🤣</p><h2 id="面试小结"><a href="#面试小结" class="headerlink" title="面试小结"></a>面试小结</h2><table><thead><tr><th align="center">公司</th><th align="center">城市</th><th align="center">方式</th><th align="center">面试</th><th align="center">offer</th></tr></thead><tbody><tr><td align="center">XX</td><td align="center">深圳</td><td align="center">Email</td><td align="center">❌</td><td align="center">❌</td></tr><tr><td align="center">XX</td><td align="center">上海</td><td align="center">Email</td><td align="center">⭕</td><td align="center">❌</td></tr><tr><td align="center">XX</td><td align="center">上海</td><td align="center">Email</td><td align="center">❌</td><td align="center">❌</td></tr><tr><td align="center">XX科技</td><td align="center">杭州</td><td align="center">BOSS</td><td align="center">✅✅</td><td align="center">✅</td></tr><tr><td align="center">XX科技</td><td align="center">深圳</td><td align="center">Email</td><td align="center">✅</td><td align="center">✅</td></tr><tr><td align="center">XX科技</td><td align="center">深圳</td><td align="center">BOSS</td><td align="center">❌</td><td align="center">❌</td></tr><tr><td align="center">XX科技</td><td align="center">上海</td><td align="center">BOSS</td><td align="center">✅❌</td><td align="center">❌</td></tr><tr><td align="center">腾讯云</td><td align="center">深圳</td><td align="center">BOSS</td><td align="center">✅✅❌</td><td align="center">❌</td></tr><tr><td align="center">XX</td><td align="center">杭州</td><td align="center">BOSS</td><td align="center">✅❌</td><td align="center">❌</td></tr><tr><td align="center">XX</td><td align="center">深圳</td><td align="center">BOSS</td><td align="center">✅✅</td><td align="center">✅</td></tr><tr><td align="center">XX</td><td align="center">深圳</td><td align="center">Email</td><td align="center">✅✅</td><td align="center">✅</td></tr></tbody></table><h2 id="9-号"><a href="#9-号" class="headerlink" title="9 号"></a>9 号</h2><p>早上去了办公室上班，收拾了一下电脑，把自己的固态硬盘拆下来，又重新安装了 Windows 方便交接给同事。之后再找领导和公司董事签字，见到公司的董事，心里还是战战兢兢的。不过出乎意料，过程很顺利，公司董事也很贴切临走前简单地祝福了几句。签字完成之后还要回公司本部办理财务结算以及劳务合同终止协议。乘着地铁来到公司，测量体温登记就上楼找到人事。和人事部门经理简单聊了一下，主要是问了些薪资待遇、为什么要去一线城市的原因等等，这些问题在我面试的过程中也被经常问到过，也就如实地回答了。</p><p>说实话，前公司无论时待遇还是同事关系上，都很好，而且在我离职财务结算的时候，我本来需要缴纳一笔 5000 元左右的款项，但是公司领导层考虑到我还刚刚毕业一年，为我的前程着想暂时不予扣除。对我来说这笔钱简直是个大救星，因为在五一之后身上的余额不到 1 万元，若是没有公司的这笔款项豁免，或许现在的我只能睡几百块钱的青旅，将就着住几个月才能缓解下来，这一点的确对于我来说是极大的帮助。</p><p>和国内某些大厂相比，东家对待离职员工的态度真是高下立判啊😂。看来自己还是很幸运去年毕业的时候遇到这么好的公司，虽然已经离开了那里，但是很感谢他们在这段时间给予的帮助。</p><p><img src="img/20200516131617183.png" alt="image-20200516131617183"></p><p>还有一点，在四月份提出离职申请的时候，心里十分愧疚，因为在去年入职的时候刚答应了领导要在这里呆下去的。而且领导对我们新人也是十分关照有加：去年的时候去外地出差，那几天一直是领导请客吃饭；上个月公司组织去体检，我上午体检完回来后中午喜提 38 度发热大礼包😂。然后去医院做号新冠病毒检验，期间领导一直在打电话，前前后后一共打了二十个电话，一直关注着我身体情况怎么样，有没有好转，晚上睡觉前又打电话问退烧没有。生病的那几天，没有和家人说，真正担心到我的也只有领导以及我的另一个同事。那点时间才觉着，现实世界才是我们切切实实能感触到的，在自己最难过的时候，能主动帮自己的人是值得珍惜终生的朋友。</p><p>办完离职手续，拿到《终止劳动合同通知书》，有点像大学的录取通知书😂，唯有拿着它才能去下一家公司入职报到。还有一份之前签订的保密协议，因为从事的岗位涉及机密信息，有一点限制，比如离境或出国之前需要报备，这一点比较麻烦。不过还好啦，依照目前的疫情情况，估计一年之内不会离境或出国了。</p><p>晚上的时候在住的小区附近吃完了最后一顿晚饭，那种感觉真是……此生可恋😭</p><blockquote class="twitter-tweet"><p lang="zh" dir="ltr">晚上吃的这道菜叫 “火爆茄子”，的确够火爆的😡，吃完之后我火冒三丈想砸桌子，肚子里仿佛有千只草泥马奔腾着而过……菊花要遭受 DDoS 攻击了😭 <a href="https://t.co/V4whuhJFwQ" target="_blank" rel="noopener">pic.twitter.com/V4whuhJFwQ</a></p>&mdash; 木子 (@muzi_ii) <a href="https://twitter.com/muzi_ii/status/1259090385491488770?ref_src=twsrc%5Etfw" target="_blank" rel="noopener">May 9, 2020</a></blockquote> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script><p>晚上的时候进行了最后一场面试，面试的过程还算顺利，虽然还不知道结果，但是为了保底的选择，还是动身前往深圳。因为深圳的这家公司要求的入职时间就在近几天，到那里还要租房体检等一堆杂事儿要做，这需要几天的准备时间。</p><h2 id="10-号"><a href="#10-号" class="headerlink" title="10 号"></a>10 号</h2><p>第二天早上还是按照往常的时间起床，收拾好行李，临走之前环顾了一下生活了一年的小窝，多少有点不舍离开这座生活了五年的城市。回想起大一时从千里之外的家乡来到这里求学读书，在这里四五年的生活，渐渐地习惯了这座城市。大学和前女友恋爱的那段时间也曾计划或将来要在这里安身立命，成家立业，有一个幸福美满的家庭。我想这也是大多数人的正常生活和归宿吧。不幸的是后来还是和前女友分手了，自那以后也再也不想恋爱了，因为自己还是喜欢一个人的生活，而且喜欢/爱上他人是种不自由的生活，要考虑对方的感受，有时为了维系亲密关系不得不违背自己的原则，这样的生活真的热爱不起来，还是一个人玩泥巴爽呀😋。</p><p>去年毕业之后就找到这里住的，上下铺的青旅，四人间每人 300元，对于刚毕业的我来说这里无疑是最好的归宿，因为当时实习的工资每天也就 120 元，自己在公司附近单独住一间房子的话，每个月住房费用至少要 1300+ ，而住青旅的话每个月能节省 1000 元。其次选在住在这里是因为距离公司只有 5 分钟的步行路程，中午的时候还能回来午休睡一会，简直舒服极了，相比于一块入职的同事每天要 2 个多小时的上下班路程好很多。本来当时打算住到转正之后再搬出去住的，不过等到转正之后，发现渐渐地习惯上了，接着住下去也没问题，于是就一直住到我离开这里，将近一年的时间。</p><p>而下一座城市（深圳）也是找到上下铺的青旅，实在是住不起公司附近的房子，对于均价 3000+ 而且押一付三的房子来说，接近 1 万的租房费用就好花费我所有的积蓄了，没办法只能再去住上下铺的青旅来维持生计了，一个字，穷啊（（（</p><blockquote class="twitter-tweet"><p lang="zh" dir="ltr">溜了溜了，离开了居住了一年的小窝和生活了五年的城市）<br><br>只是再也找不到每月三百块钱的房子了（ <a href="https://t.co/HIIoYTo95P" target="_blank" rel="noopener">pic.twitter.com/HIIoYTo95P</a></p>&mdash; 木子 (@muzi_ii) <a href="https://twitter.com/muzi_ii/status/1259296422228197376?ref_src=twsrc%5Etfw" target="_blank" rel="noopener">May 10, 2020</a></blockquote> <script async src="https://platform.twitter.com/widgets.js" charset="utf-8"></script><p>到了时间点就动身前往机场，路程五十分钟左右，在车上拿起 kindle 接着看徐贲的《人以什么理由来记忆》。因为在二月份的时候剩余价值里的一期节目中提到过《布达佩斯往事：冷战时期一个东欧家庭的秘密档案》这本书，而这本书的序言正是徐贲老师写的，之前我也读过他的论文 <a href="https://matters.news/@philosophia1979/徐贲-中国的-新极权主义-及其末世景象-野兽荐读-bafyreiegbg5tti3ljc7newaah5wp36ncf7fvb2oaovd6p7elc4xqfhbcd4" target="_blank" rel="noopener">《中国的“新极权主义”及其末世景象》</a>) ，随意对他关注的内容也有所了解。总感觉这本书更像是阿伦特、加缪、萨特、哈维尔等人对于极权主义著作及思想的解析。就像在剩余价值里提到的，我们读这些历史的时候，而当下就仿佛置身于历史之中一样。书中记录苏联和纳粹德国极权统治改造人性的言论审查、秘密警察、集中营、无言论自由和新闻自由、党媒愚民洗脑等，这些描述极权统治的历史，再看一看当下，我们不正置身于其中吗？</p><p>来到机场在机场过安检检查行李的时候，一块祖传的永磁铁被扣下了，（这块磁铁是我高中时从家里破旧的音响上拆下来的，一直拿来磁吸一些螺丝用，垃圾佬常用的工具）。这才知道飞机上是不能携带磁铁的≡(▔﹏▔)≡，没办法，只能丢下了。</p><p>顺利过了安检，等待一段时间开始登机，座位在飞机靠窗的位置，中途的风景还不错。看到窗外的云朵，想起了《地球的演变故事》里有关大气层的科普：</p><blockquote><p>地球周围的大气层在垂直方向上可以分为对流层、平流层、中间层、热层和外层。其中对流层是最低的一层，和人类的关系最为密切。而大中型飞机除起飞和降落外，多是在平流层中飞行。这主要是因为：平流层中大气垂直运动很少，以平流运动为主，飞机在其中受力比较稳定；水汽和尘埃含量少，能见度很高；对地面的噪声污染相对较小；飞鸟飞行的高度一般达不到平流层，可以避免机鸟相撞的事故。平流层的这些特点，决定了飞机适宜在这层大气中飞行。平流层的海拔高度与纬度有很大关系。低纬度地区平均在16～18千米以上，中纬度地区平均在10～12千米以上；高纬度地区平均在8～9千米以上。</p><p>我国民航规定，中型以上的民航飞机都在高空飞行，此处的高空是指海拔7000～12000米的空间。飞行高度层高度8400米（含）以下，每300米为一个飞行高度层；飞行高度层高度8400米（不含）以上，每600米为一个飞行高度层。飞机在相对、交叉、超越飞行时，必须保持不得小于规定高度层米数的垂直间隔，以确保飞行安全和交通顺畅。 此外，小型飞机活动区域一般在3000米以下。</p></blockquote><p><img src="img/20200510_045930999_iOS.jpg" alt="image-20200516201412794"></p><p>下了飞机之后乘坐地铁到公司附近的地铁站，和房东约定好了来接我。出站之后房东带领着去她家，到了之后感觉落差十分巨大w(ﾟДﾟ)w。在不到 5 平米的房间里塞下一张 0.8m*2m的床，另外半边是不到一米的过道。这也是迫不得已的选择吧，因为附近的房子基本上都是押一付三，而且价格普遍在 3000+ ，再稍微远一点能找到 1500+ 左右的房子，不过对于押一付三来说我依旧无法承担的起。打算先暂时在这里将就一段时间，等存款足够了就搬出去单独住一间。这里的价格也不便宜，每月房租 800，押金 850，不需要交水电暖费用。和我以前住的 300 块钱的青旅环境还是差太远了😂。</p><p><img src="img/2020-05-10_19-35-42.jpg" alt="img"></p><p>晚上在附近吃了三菜一汤的快餐，晚上睡觉的时候十分酸痛，我的行李还没有到，只能用床单简单地盖在身上。在这里睡了几晚，此生可恋，以后再也不想住青旅了。我觉着还是应该对自己好一点，拥有一个自己独立的小窝多么地重要。毕竟谁也不知道自己会不会发生意外突然离开这个世界，如果生前活得像我这样在是太惨了😂。感觉应该对自己更好一点，比如回家的时候买火车票的时候不能再像以前那样买二十几个小时的硬座，自己能赚钱了应该选择更省时舒适的出行方式，应该多多改善一下自己的生活，不能再像以前穷学生一样过得惨兮兮😂</p><h2 id="11-号"><a href="#11-号" class="headerlink" title="11 号"></a>11 号</h2><p>早起八点多去医院体检，去医院有点害怕。因为上个月公司组织去医院体检，从医院回来之后我就突然发烧了，血清检测是因为细菌感染。对于我这种长期（六年）素食的人来说，如果不注重营养均衡，免疫力会下降的，现在我就属于那种免疫力低下的人群，稍有不慎就会生病😐。不过为了坚持自己的原则，这点牺牲还是可以承受的(●ˇ∀ˇ●)。</p><p>没想到医院体检的人数那么多，需要预约到后天才有空位，最终还是预约到了后天。预约完体检的时间之后就回到住的地方，天气实在是太热了，刚来还是不太习惯，加上又是狭窄的空间，给人一种很烦躁的感觉。联系了一下另一家公司的 HR ，(也就是现在最终入职的公司)，给的回复是三天之内给出面试结果。内心也十分焦急地等待着，自己感觉只有三成的把握拿到 offer。如果拿到的话就要考虑离开这座城市，又要从头开始，找房子，寄行李，买机票等等。</p><p>躺床上休息会儿，床板子太硬了，还是坐起来拿着 kindle 看了会书，一会的时间就把《七堂极简物理课》看完了，这本书……写的真的不太好，对于具备只是一些简单的感念普及而已，倒不如去看看《星空的琴弦》或者《万物简史》。</p><p>下午的时候顺丰快递师傅打电话让我去取件，邮寄过来的行李已经到了。70 公斤的行李从小区门口搬运到 18 楼，还好快递师傅借给了我手推车方便了些。把行李拆开又重新分拣了一下</p><p>晚上的时候终于收到了面试通过的消息，简单谈了一下薪资。比现在的这家公司薪资要低 1k，虽然低了一点但还是能接受。于是就计划一下明天的事情，早早地睡觉了。</p><h2 id="12-号"><a href="#12-号" class="headerlink" title="12 号"></a>12 号</h2><p>早起去医院取消了体检退款很快就到账了。回来之后就收拾行李，把一些没用的破玩意都扔了，机箱取出来自己带在身上。为了减轻重量，上次邮寄回来 70KG 花了 318￥😭。这次最终减轻到 50KG ，邮寄费用 210￥，还算能接受的范围。真的<strong>是买书一时爽，搬家火葬场！</strong>几十斤中的书籍搬家真的是个累赘😭。收拾完毕后联系昨天给我派送快递的师傅邮寄快递，由于地点房子还没有找好，地址就填写了公司对面的小区，希望在那个小区里找到合适的房子吧。</p><p>上午十一点多的时候收到了公司的正式 offer ，约定好 18 号入职。随后联系将要（13号）入职的 A 公司 HR ，向她道歉并如实地说明了不能入职的原因。多少有点愧疚，因为第二天就要入职了，在前一天再通知人家说不去了，换做谁都很气愤吧。</p><p>下午的时候，收拾好行了就去机场附近的酒店，由于是早上的飞机，时间紧迫只好住在酒店附近了，还好酒店提供免费接送的服务，在前台登记一下出发时间，第二天司机师傅会开车送到机场。</p><p>晚上的时候约朋友吃饭，一个高中同学，关系还可以。这位朋友有点奇葩，大一的时候是在大连海事大学上的航海专业，大一上完之后的暑假又退学回家复读一年，最终考上了一所 211 大学并学的计算机专业，现在在 BAT 做后端开发，薪资比我高很多，而且还拿到了 shoppe 的 offer ，有点同辈压力🍐，感觉自己太菜了😥。交谈的过程中本以为他还是以往那样岁月静好，不过印象大反转。原来是他家也遭受到社会主义铁拳的重锤😂，和我一样的感受。然后谈了几位高中同学的现状，他还嘲讽另几位岁月静好的同班同学没有遭受社会铁拳的毒打🤣。哈哈啥，我倒是觉着岁月静好没有什么不对的，我希望祝福他们能这样安安稳稳地生活下去吧，但愿他们不要想我这样遭受社会主义铁拳的重锤。《心理测量者》小说里曾提到过这样一段对话：</p><blockquote><p>“安全，完美的社会只是个幻想罢了。我们生活的社会如今还是‘危险社会’”</p><p>“什么意思……？”</p><p>“很久以前……德国还算个国家的时候，有个社会学家，乌尔希里·贝克（经常说的话。指社会依赖‘便利但危险’的东西，政府让我们背负起风险……但风险被巧妙地分散，分配以至于谁也没觉察到，不对，不是没觉察到，而是即使觉察了也当没看见，或许每个人都在睁一只闭一只眼，危险固然存在，但如果不反过来当作其不存在的话就无法保持理智。 “这座城市的市民，会想到这么多么，就连我也算在内。“</p></blockquote><p>我们共同背负着政府强加给我们的危险，而这种危险来自于权力的集中化。这种危险巧妙地分散到每个人身上，以至于谁也察觉不到它的存在，即便是察觉到，也只能睁一只眼闭一只眼。如果不把它当作不存在的话，就无法在这个社会生存下去。</p><p>和朋友已快到海边逛了一会儿，大晚上的海边的风景确实没有什么值得欣赏的，之后就回到酒店休息了。</p><h2 id="13-号"><a href="#13-号" class="headerlink" title="13 号"></a>13 号</h2><p>凌晨乘飞机出发，还好酒店的师傅免费开车送到机场，在办理行李托运的时候，行李超重了 5KG，就把我的台式机机箱取了出来抱在怀里随身携带者吧，也不知道能不能过案件，毕竟是接近 5KG 的重货。过安检的时候没想到大摇大摆地抱着机箱就过了安检，有点出乎意料。顺利登机后坐在了靠窗的位置，休息两个小时之后就到达了目的城市。</p><p>下飞机后坐机场巴士到酒店，也是在公司附近。歇息一会儿后开始洗衣服，错把酒店洗衣房里的漂白粉当作洗衣粉用了，一股脑地放了一大勺再洗衣机里，洗完之后我那件黑色的 USTC LUG 定制版 T 恤被加上了一层红褐色的滤镜，我欲哭我累😭，太难受了，本打算下周入职的那天要穿的😭。一件好好地 T 恤就这样被摧残了，难受死了😑。</p><p>下午休息了一会去看房，联系的蛋壳公寓，看了两户房子，还算满意，并且可以押一付一，总价格不到 3000 元，还能接受。不过到最后蛋壳公寓的老哥才给我谈分期付款的事儿。之前我从未住过这种连锁公寓，没想到需要和微众银行签订一年的分期协议，这一点很坑，虽然价格诱人但我本人对这种分期的方式及其反感于是还是放弃了在蛋壳公寓上租房。房子和带我看房的老哥都很满意，只是不想使用分期付款的这种方式。之后再支乎上看到了 <a href="https://zhuanlan.zhihu.com/p/139490531" target="_blank" rel="noopener">但有“蛋壳”方面的租房找你，应届生请务必看完这篇文章</a>，还好我没有踩坑，庆幸庆幸。之后又联系了自如的房子，自如押一付一的房子价格贵了一大截，房租每月要 2100，押金 2000 有点接受不了就没有再考虑。贫穷使我住不起房（（</p><p>终于在闲鱼上联系到一个老哥，说是转租的房子，而且不需要押金，每月付房租就可以，这点很诱人啊。于是就迫不及待地看房，最终见面之后，很痛快的完成了交易，终于解决了最头疼得一件事儿。</p><h2 id="14-号"><a href="#14-号" class="headerlink" title="14 号"></a>14 号</h2><p>上午酒店退房，搬到新住的地方，收拾一下房间，拿以前的毛巾用手拖完了地板，做了一会家务。下午的时候顺丰快递寄行李，行李送到小区门口，50公斤的行李，从小区门口到楼下大概 200 米的距离，扛起来真的是有点远啊😭，因为是自从上大学之后就没再搬砖干农活的原因，体力大不如从前，扛着 100 斤的行李，200 米的距离换了十几次的肩停下来歇息几分钟，远远低于业界 100KG/5KM 不换肩的标准，实在是愧对于自己的肌肉啊🙃，惭愧惭愧（以前我十五岁辍学再工地上搬砖那年，自己一个人扛一百多斤中的机器在工地上行云流水穿梭于各个沟道之间，（偷笑，人老了啊，失去了年轻时的热血.jpg</p><p>晚上买些生活用品，小土豆告诉我在<code>还不晚</code>上买合适，价格便宜而且种类齐全。贫穷如我只能靠抠和薅来满足生活了，听小土豆的建议在马云家逛了一个多小时买好了以后要用到的生活物品。接着看了一会徐贲的书就睡着了，自己由于太忙的原因阅读的时间远不如从前了＞︿＜</p><h2 id="15-号"><a href="#15-号" class="headerlink" title="15 号"></a>15 号</h2><p>早上起来之后出门骑车单车往公司附近逛一圈，熟悉一下上班时的路线，看看需要花费多长时间。回来之后就接着去银行办理银行卡用作工资卡。接着完成之后又去了照相馆拍 1 寸的照片，办理社保卡的时候会用到。中午的时候在银行附近的兰州拉面餐馆里吃了碗鸡蛋拉面，味道还是正宗的兰州拉面。老板和厨师看样子也是回族人。看了一下菜单，番茄炒饭、酸辣白菜、酸辣土豆丝、鸡蛋拉面等。哈哈哈，这就是以后常来吃饭的地方了😂。</p><h2 id="16-号"><a href="#16-号" class="headerlink" title="16 号"></a>16 号</h2><p>早上八点的时候和闲鱼上的老哥约好去某地面基交易山地车，因为距离比较远所以就乘坐公交到了约定好的地方。见面之后简单寒暄了一下，先试骑了一段距离，刹车和变速都还可以，就很痛快地买下来这辆车。从此也是有车一族了（偷笑。有了一辆车真是方便啊，之前下楼后步行到小区门口需要 5 分钟，现在骑车只需 1 分钟就够了，比以往快了很多。之所以买一辆二手的山地车是因为早上上班时小区门口的共享单车都被上班族骑走了，为了节省时间还是整辆自己的单车吧，而且共享单车骑起来真费劲，速度太慢了。换做 24 速的山地车速度提升一倍，时间也能缩短一半，以往 15 分钟的骑行路程现在骑快一点的话只需要 10 分钟。那还是按照往常那样 8 点半出发，9 点之前赶到公司是没有问题的。而且自己最喜欢的运动也是骑行，高中的是基本上都是骑车去上学，高考完的时候曾自己一个人骑车去北京。来回 1000公里的距离，想想当初也是闲着蛋疼。曾在大一的时候计划或要去骑行川藏线，四年之后看来这个小目标要打水漂了。或者等到国庆的时候准备骑行去玩儿，骑行去海边玩儿，嗯，就这样定下来了，如果读者又想去的话可以联系咱一块去😂</p><p>下午修空调，感觉被宰了，我估计着应该就是一根跳线没有接好或者接对导致空调主机无法开启。要是换作我家的空调，这种小问题自己就能解决，毕竟家里的电磁炉洗衣机空调电视机电风扇等等家电自己都拆过修过😂。因为房东家的空调是中央空调价格昂贵自己还是不敢轻易尝试，所以还是让房东来请维修工人处理吧。下午的时候房东请来的维修工人倒腾一会儿硬是给我说主板坏了(* ￣︿￣)。于是好戏上场，我就和维修工人杠上了。我问他主板哪里坏了？他说电容坏了，需要更换主板。我内心一万匹草泥马奔腾而过，一个电容坏了就要换整个主板？？？？我当场掏出我祖传的电烙铁要给他演示一下怎么换电容，飞线换电容植球等等这点本领咱还是有滴，电容坏了换电容不得了？当我傻子来忽悠嘛。巴拉巴拉和他扯了半天，最终……还是收了 640￥。虽然这笔钱是房东来付的，但是还是很不心甘情愿，就这样被别人宰一刀，无论宰到谁身上都不好受。</p><p><strong>主板坏了</strong> 这招对于家电或者电子维修昂行业的神器呀，空调小毛病给你整个主板坏了的接口从你身上薅一把羊毛。类似的事情在修理笔记本电脑或者电视机等等都是常见的事情。</p><p>下午的时候散热硅脂和 CPU 延长线到了，拿了快递之后就开始组装台式机。在拆主板的时候，简直震惊死我，没想到我的主板 CPU 4PIN 延长线已经老化短路烧毁了，我使用了一年竟然浑然不知。之前在给 <a href="https://github.com/webp-sh/webp_server_go" target="_blank" rel="noopener">Webp Server Go</a> 做 benchmark 的时候，CPU 一旦满载就直接黑屏，各种排查都没有找到原因。直到今天我才明白，原来是 CPU 供电线的问题……，我内心一万匹草泥马。无良商家坑惨我了，去年的时候装机没有注意到这根线的质量这么差，还好现在拆机的时候发现了，不然那一天这根线抽搐了突然就 BOOM 可不好了😡。</p><p><img src="img/20200514_070432138_iOS.jpg" alt="image-20200517101303617"></p><p>组装后的台式机效果图，把路由器放在了机箱上面。主路由器还是原来的 <a href="https://www.netgear.com/support/product/R6300v2.aspx" target="_blank" rel="noopener">R6300V2</a> ，是去年的时候花了 170￥ 在闲鱼上捡垃圾搞来的。旁边白色的就是 N1 盒子，当软路由来用(<a href="https://blog.k8s.li/N1-openwrt.html">N1 盒子刷入 OpenWrt 并部署 K3s</a>)。R6300V2 的性能还是太弱，尤其是对于 AES-256 或者  GCM-256 这种加密算法还是力不从心，N1 盒子小钢炮当旁路网关再适合不过了。另外从 R6300V2 的 USB 接口给 ESP8266 开发板供电，用来远程开关机(<a href="https://blog.k8s.li/esp8266-pc-switch.html">使用 ESP8266 NodeMCU 打造 WiFi 开关</a>)。</p><p><img src="img/20200517_022447573_iOS.jpg" alt="img"></p><h2 id="17-号"><a href="#17-号" class="headerlink" title="17 号"></a>17 号</h2><p>今天又是一个平凡的日常，无非就是拿了些快递，在网上买的生活用品也到齐了，也渐渐地习惯了这里的生活，慢慢地融入到这里。买了一箱手抓饼和一些蔬菜，准备早上自己做饭吃，素食者的福音呀，一张饼裹上几片菜叶子，再加上一个煎蛋，抹上番茄酱和沙拉酱，朴素一餐😋</p><p>明天就要入职开始搬砖了，像新生开学一样，充满着期待又有一点害怕，希望明天顺利吧。感觉就像是大一新生开学一样，离开熟悉已久家来到这个陌生的城市，拿着<del>录取通知书</del>《录用通知书》和《离职证明》到新公司入职，认识新的朋友，开始一段新的旅程。</p><p>回想起这几天的经历，我从未想过会来到这里，也从未想过会离开生活已久的城市。若是说这一切的起点，就翻了翻去年写的<a href="https://blog.k8s.li/thinking-2019.html">《毕业后的一点思考》</a></p><blockquote><p>我依稀记得高中毕业时最后一堂课上，我们的班主任给我们班同学讲过一句话<strong>你所读过的书和你接触的人，决定了你以后能走什么样的路</strong>，我一直铭记至今，并把它当作大学四年的唯一信条，很庆幸，正是这则信条伴随着我完成了思想的改造和重塑。现在我手机上还保留着当时班主任讲话时的录音，或许这是我值得保存众生的财富。</p></blockquote><p>也正是因为这篇文章的影响，让我认识到了一些新的小伙伴：<a href="https://nova.moe/" target="_blank" rel="noopener">nova</a> 和 <a href="https://dmesg.app/" target="_blank" rel="noopener">小土豆</a> 。认识到他们之后有点同辈压力🍐，他俩都在很牛逼的公司上班，自己却在一个二线小城市过着安逸的生活，这也迫使我想要走出心里舒适圈，去上海或深圳闯一闯，而且和小土豆也约定好了一起去同一个城市。最后还是要感谢一下小土豆，在我刚开始投简历面试的那几天给予很多精神上的帮助😘。那段时间确实各种压力、挫败感、自我怀疑否定、抑郁等负面情绪特别严重，有时面试下来连呼吸都感受到压力胸闷。没有这两位朋友的帮助，或许刚想要破壳而出的我因为害怕就放弃了，现在可能还是原地不动。放弃安安稳稳的生活走出心里舒适圈，确实那种压力感不太好受，伤心难过的时候就找个朋友来倾诉一下，不要一个人憋着(o゜▽゜)o☆。</p><p>Bless, Bless!</p>]]></content>
    
    <summary type="html">
    
      
      
        
        
          &lt;h2 id=&quot;咕咕咕&quot;&gt;&lt;a href=&quot;#咕咕咕&quot;
        
      
    
    </summary>
    
    
      <category term="生活" scheme="https://blog.k8s.li/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
  </entry>
  
</feed>
